   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"poly.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.pqcrystals_dilithium2_ref_poly_reduce,"ax",%progbits
  16              		.align	1
  17              		.global	pqcrystals_dilithium2_ref_poly_reduce
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	pqcrystals_dilithium2_ref_poly_reduce:
  25              	.LFB0:
  26              		.file 1 "poly.c"
   1:poly.c        **** #include <stdint.h>
   2:poly.c        **** #include "params.h"
   3:poly.c        **** #include "poly.h"
   4:poly.c        **** #include "ntt.h"
   5:poly.c        **** #include "reduce.h"
   6:poly.c        **** #include "rounding.h"
   7:poly.c        **** #include "symmetric.h"
   8:poly.c        **** #include "hal.h"
   9:poly.c        **** #include "simpleserial.h"
  10:poly.c        **** 
  11:poly.c        **** #ifdef DBENCH
  12:poly.c        **** #include "test/cpucycles.h"
  13:poly.c        **** extern const uint64_t timing_overhead;
  14:poly.c        **** extern uint64_t *tred, *tadd, *tmul, *tround, *tsample, *tpack;
  15:poly.c        **** #define DBENCH_START() uint64_t time = cpucycles()
  16:poly.c        **** #define DBENCH_STOP(t) t += cpucycles() - time - timing_overhead
  17:poly.c        **** #else
  18:poly.c        **** #define DBENCH_START()
  19:poly.c        **** #define DBENCH_STOP(t)
  20:poly.c        **** #endif
  21:poly.c        **** 
  22:poly.c        **** /*************************************************
  23:poly.c        **** * Name:        poly_reduce
  24:poly.c        **** *
  25:poly.c        **** * Description: Inplace reduction of all coefficients of polynomial to
  26:poly.c        **** *              representative in [-6283009,6283007].
  27:poly.c        **** *
  28:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
  29:poly.c        **** **************************************************/
  30:poly.c        **** void poly_reduce(poly *a) {
  27              		.loc 1 30 27
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 84B0     		sub	sp, sp, #16
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  31:poly.c        ****   unsigned int i;
  32:poly.c        ****   DBENCH_START();
  33:poly.c        **** 
  34:poly.c        ****   for(i = 0; i < N; ++i)
  43              		.loc 1 34 9
  44 0008 0023     		movs	r3, #0
  45 000a FB60     		str	r3, [r7, #12]
  46              		.loc 1 34 3
  47 000c 0EE0     		b	.L2
  48              	.L3:
  35:poly.c        ****     a->coeffs[i] = reduce32(a->coeffs[i]);
  49              		.loc 1 35 20 discriminator 3
  50 000e 7B68     		ldr	r3, [r7, #4]
  51 0010 FA68     		ldr	r2, [r7, #12]
  52 0012 53F82230 		ldr	r3, [r3, r2, lsl #2]
  53 0016 1846     		mov	r0, r3
  54 0018 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_reduce32
  55 001c 0146     		mov	r1, r0
  56              		.loc 1 35 18 discriminator 3
  57 001e 7B68     		ldr	r3, [r7, #4]
  58 0020 FA68     		ldr	r2, [r7, #12]
  59 0022 43F82210 		str	r1, [r3, r2, lsl #2]
  34:poly.c        ****     a->coeffs[i] = reduce32(a->coeffs[i]);
  60              		.loc 1 34 21 discriminator 3
  61 0026 FB68     		ldr	r3, [r7, #12]
  62 0028 0133     		adds	r3, r3, #1
  63 002a FB60     		str	r3, [r7, #12]
  64              	.L2:
  34:poly.c        ****     a->coeffs[i] = reduce32(a->coeffs[i]);
  65              		.loc 1 34 3 discriminator 1
  66 002c FB68     		ldr	r3, [r7, #12]
  67 002e FF2B     		cmp	r3, #255
  68 0030 EDD9     		bls	.L3
  36:poly.c        **** 
  37:poly.c        ****   DBENCH_STOP(*tred);
  38:poly.c        **** }
  69              		.loc 1 38 1
  70 0032 00BF     		nop
  71 0034 00BF     		nop
  72 0036 1037     		adds	r7, r7, #16
  73              	.LCFI3:
  74              		.cfi_def_cfa_offset 8
  75 0038 BD46     		mov	sp, r7
  76              	.LCFI4:
  77              		.cfi_def_cfa_register 13
  78              		@ sp needed
  79 003a 80BD     		pop	{r7, pc}
  80              		.cfi_endproc
  81              	.LFE0:
  83              		.section	.text.pqcrystals_dilithium2_ref_poly_caddq,"ax",%progbits
  84              		.align	1
  85              		.global	pqcrystals_dilithium2_ref_poly_caddq
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu softvfp
  91              	pqcrystals_dilithium2_ref_poly_caddq:
  92              	.LFB1:
  39:poly.c        **** 
  40:poly.c        **** /*************************************************
  41:poly.c        **** * Name:        poly_caddq
  42:poly.c        **** *
  43:poly.c        **** * Description: For all coefficients of in/out polynomial add Q if
  44:poly.c        **** *              coefficient is negative.
  45:poly.c        **** *
  46:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
  47:poly.c        **** **************************************************/
  48:poly.c        **** void poly_caddq(poly *a) {
  93              		.loc 1 48 26
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 16
  96              		@ frame_needed = 1, uses_anonymous_args = 0
  97 0000 80B5     		push	{r7, lr}
  98              	.LCFI5:
  99              		.cfi_def_cfa_offset 8
 100              		.cfi_offset 7, -8
 101              		.cfi_offset 14, -4
 102 0002 84B0     		sub	sp, sp, #16
 103              	.LCFI6:
 104              		.cfi_def_cfa_offset 24
 105 0004 00AF     		add	r7, sp, #0
 106              	.LCFI7:
 107              		.cfi_def_cfa_register 7
 108 0006 7860     		str	r0, [r7, #4]
  49:poly.c        ****   unsigned int i;
  50:poly.c        ****   DBENCH_START();
  51:poly.c        **** 
  52:poly.c        ****   for(i = 0; i < N; ++i)
 109              		.loc 1 52 9
 110 0008 0023     		movs	r3, #0
 111 000a FB60     		str	r3, [r7, #12]
 112              		.loc 1 52 3
 113 000c 0EE0     		b	.L5
 114              	.L6:
  53:poly.c        ****     a->coeffs[i] = caddq(a->coeffs[i]);
 115              		.loc 1 53 20 discriminator 3
 116 000e 7B68     		ldr	r3, [r7, #4]
 117 0010 FA68     		ldr	r2, [r7, #12]
 118 0012 53F82230 		ldr	r3, [r3, r2, lsl #2]
 119 0016 1846     		mov	r0, r3
 120 0018 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_caddq
 121 001c 0146     		mov	r1, r0
 122              		.loc 1 53 18 discriminator 3
 123 001e 7B68     		ldr	r3, [r7, #4]
 124 0020 FA68     		ldr	r2, [r7, #12]
 125 0022 43F82210 		str	r1, [r3, r2, lsl #2]
  52:poly.c        ****     a->coeffs[i] = caddq(a->coeffs[i]);
 126              		.loc 1 52 21 discriminator 3
 127 0026 FB68     		ldr	r3, [r7, #12]
 128 0028 0133     		adds	r3, r3, #1
 129 002a FB60     		str	r3, [r7, #12]
 130              	.L5:
  52:poly.c        ****     a->coeffs[i] = caddq(a->coeffs[i]);
 131              		.loc 1 52 3 discriminator 1
 132 002c FB68     		ldr	r3, [r7, #12]
 133 002e FF2B     		cmp	r3, #255
 134 0030 EDD9     		bls	.L6
  54:poly.c        **** 
  55:poly.c        ****   DBENCH_STOP(*tred);
  56:poly.c        **** }
 135              		.loc 1 56 1
 136 0032 00BF     		nop
 137 0034 00BF     		nop
 138 0036 1037     		adds	r7, r7, #16
 139              	.LCFI8:
 140              		.cfi_def_cfa_offset 8
 141 0038 BD46     		mov	sp, r7
 142              	.LCFI9:
 143              		.cfi_def_cfa_register 13
 144              		@ sp needed
 145 003a 80BD     		pop	{r7, pc}
 146              		.cfi_endproc
 147              	.LFE1:
 149              		.section	.text.pqcrystals_dilithium2_ref_poly_freeze,"ax",%progbits
 150              		.align	1
 151              		.global	pqcrystals_dilithium2_ref_poly_freeze
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu softvfp
 157              	pqcrystals_dilithium2_ref_poly_freeze:
 158              	.LFB2:
  57:poly.c        **** 
  58:poly.c        **** /*************************************************
  59:poly.c        **** * Name:        poly_freeze
  60:poly.c        **** *
  61:poly.c        **** * Description: Inplace reduction of all coefficients of polynomial to
  62:poly.c        **** *              standard representatives.
  63:poly.c        **** *
  64:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
  65:poly.c        **** **************************************************/
  66:poly.c        **** void poly_freeze(poly *a) {
 159              		.loc 1 66 27
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 16
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              	.LCFI10:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 7, -8
 167              		.cfi_offset 14, -4
 168 0002 84B0     		sub	sp, sp, #16
 169              	.LCFI11:
 170              		.cfi_def_cfa_offset 24
 171 0004 00AF     		add	r7, sp, #0
 172              	.LCFI12:
 173              		.cfi_def_cfa_register 7
 174 0006 7860     		str	r0, [r7, #4]
  67:poly.c        ****   unsigned int i;
  68:poly.c        ****   DBENCH_START();
  69:poly.c        **** 
  70:poly.c        ****   for(i = 0; i < N; ++i)
 175              		.loc 1 70 9
 176 0008 0023     		movs	r3, #0
 177 000a FB60     		str	r3, [r7, #12]
 178              		.loc 1 70 3
 179 000c 0EE0     		b	.L8
 180              	.L9:
  71:poly.c        ****     a->coeffs[i] = freeze(a->coeffs[i]);
 181              		.loc 1 71 20 discriminator 3
 182 000e 7B68     		ldr	r3, [r7, #4]
 183 0010 FA68     		ldr	r2, [r7, #12]
 184 0012 53F82230 		ldr	r3, [r3, r2, lsl #2]
 185 0016 1846     		mov	r0, r3
 186 0018 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_freeze
 187 001c 0146     		mov	r1, r0
 188              		.loc 1 71 18 discriminator 3
 189 001e 7B68     		ldr	r3, [r7, #4]
 190 0020 FA68     		ldr	r2, [r7, #12]
 191 0022 43F82210 		str	r1, [r3, r2, lsl #2]
  70:poly.c        ****     a->coeffs[i] = freeze(a->coeffs[i]);
 192              		.loc 1 70 21 discriminator 3
 193 0026 FB68     		ldr	r3, [r7, #12]
 194 0028 0133     		adds	r3, r3, #1
 195 002a FB60     		str	r3, [r7, #12]
 196              	.L8:
  70:poly.c        ****     a->coeffs[i] = freeze(a->coeffs[i]);
 197              		.loc 1 70 3 discriminator 1
 198 002c FB68     		ldr	r3, [r7, #12]
 199 002e FF2B     		cmp	r3, #255
 200 0030 EDD9     		bls	.L9
  72:poly.c        **** 
  73:poly.c        ****   DBENCH_STOP(*tred);
  74:poly.c        **** }
 201              		.loc 1 74 1
 202 0032 00BF     		nop
 203 0034 00BF     		nop
 204 0036 1037     		adds	r7, r7, #16
 205              	.LCFI13:
 206              		.cfi_def_cfa_offset 8
 207 0038 BD46     		mov	sp, r7
 208              	.LCFI14:
 209              		.cfi_def_cfa_register 13
 210              		@ sp needed
 211 003a 80BD     		pop	{r7, pc}
 212              		.cfi_endproc
 213              	.LFE2:
 215              		.section	.text.pqcrystals_dilithium2_ref_poly_add,"ax",%progbits
 216              		.align	1
 217              		.global	pqcrystals_dilithium2_ref_poly_add
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 221              		.fpu softvfp
 223              	pqcrystals_dilithium2_ref_poly_add:
 224              	.LFB3:
  75:poly.c        **** 
  76:poly.c        **** /*************************************************
  77:poly.c        **** * Name:        poly_add
  78:poly.c        **** *
  79:poly.c        **** * Description: Add polynomials. No modular reduction is performed.
  80:poly.c        **** *
  81:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
  82:poly.c        **** *              - const poly *a: pointer to first summand
  83:poly.c        **** *              - const poly *b: pointer to second summand
  84:poly.c        **** **************************************************/
  85:poly.c        **** void poly_add(poly *c, const poly *a, const poly *b)  {
 225              		.loc 1 85 55
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 24
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 80B4     		push	{r7}
 231              	.LCFI15:
 232              		.cfi_def_cfa_offset 4
 233              		.cfi_offset 7, -4
 234 0002 87B0     		sub	sp, sp, #28
 235              	.LCFI16:
 236              		.cfi_def_cfa_offset 32
 237 0004 00AF     		add	r7, sp, #0
 238              	.LCFI17:
 239              		.cfi_def_cfa_register 7
 240 0006 F860     		str	r0, [r7, #12]
 241 0008 B960     		str	r1, [r7, #8]
 242 000a 7A60     		str	r2, [r7, #4]
  86:poly.c        ****   unsigned int i;
  87:poly.c        ****   DBENCH_START();
  88:poly.c        **** 
  89:poly.c        ****   for(i = 0; i < N; ++i)
 243              		.loc 1 89 9
 244 000c 0023     		movs	r3, #0
 245 000e 7B61     		str	r3, [r7, #20]
 246              		.loc 1 89 3
 247 0010 0FE0     		b	.L11
 248              	.L12:
  90:poly.c        ****     c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 249              		.loc 1 90 29 discriminator 3
 250 0012 BB68     		ldr	r3, [r7, #8]
 251 0014 7A69     		ldr	r2, [r7, #20]
 252 0016 53F82220 		ldr	r2, [r3, r2, lsl #2]
 253              		.loc 1 90 44 discriminator 3
 254 001a 7B68     		ldr	r3, [r7, #4]
 255 001c 7969     		ldr	r1, [r7, #20]
 256 001e 53F82130 		ldr	r3, [r3, r1, lsl #2]
 257              		.loc 1 90 33 discriminator 3
 258 0022 D118     		adds	r1, r2, r3
 259              		.loc 1 90 18 discriminator 3
 260 0024 FB68     		ldr	r3, [r7, #12]
 261 0026 7A69     		ldr	r2, [r7, #20]
 262 0028 43F82210 		str	r1, [r3, r2, lsl #2]
  89:poly.c        ****     c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 263              		.loc 1 89 21 discriminator 3
 264 002c 7B69     		ldr	r3, [r7, #20]
 265 002e 0133     		adds	r3, r3, #1
 266 0030 7B61     		str	r3, [r7, #20]
 267              	.L11:
  89:poly.c        ****     c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 268              		.loc 1 89 3 discriminator 1
 269 0032 7B69     		ldr	r3, [r7, #20]
 270 0034 FF2B     		cmp	r3, #255
 271 0036 ECD9     		bls	.L12
  91:poly.c        **** 
  92:poly.c        ****   DBENCH_STOP(*tadd);
  93:poly.c        **** }
 272              		.loc 1 93 1
 273 0038 00BF     		nop
 274 003a 00BF     		nop
 275 003c 1C37     		adds	r7, r7, #28
 276              	.LCFI18:
 277              		.cfi_def_cfa_offset 4
 278 003e BD46     		mov	sp, r7
 279              	.LCFI19:
 280              		.cfi_def_cfa_register 13
 281              		@ sp needed
 282 0040 80BC     		pop	{r7}
 283              	.LCFI20:
 284              		.cfi_restore 7
 285              		.cfi_def_cfa_offset 0
 286 0042 7047     		bx	lr
 287              		.cfi_endproc
 288              	.LFE3:
 290              		.section	.text.pqcrystals_dilithium2_ref_poly_sub,"ax",%progbits
 291              		.align	1
 292              		.global	pqcrystals_dilithium2_ref_poly_sub
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 296              		.fpu softvfp
 298              	pqcrystals_dilithium2_ref_poly_sub:
 299              	.LFB4:
  94:poly.c        **** 
  95:poly.c        **** /*************************************************
  96:poly.c        **** * Name:        poly_sub
  97:poly.c        **** *
  98:poly.c        **** * Description: Subtract polynomials. No modular reduction is
  99:poly.c        **** *              performed.
 100:poly.c        **** *
 101:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
 102:poly.c        **** *              - const poly *a: pointer to first input polynomial
 103:poly.c        **** *              - const poly *b: pointer to second input polynomial to be
 104:poly.c        **** *                               subtraced from first input polynomial
 105:poly.c        **** **************************************************/
 106:poly.c        **** void poly_sub(poly *c, const poly *a, const poly *b) {
 300              		.loc 1 106 54
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 24
 303              		@ frame_needed = 1, uses_anonymous_args = 0
 304              		@ link register save eliminated.
 305 0000 80B4     		push	{r7}
 306              	.LCFI21:
 307              		.cfi_def_cfa_offset 4
 308              		.cfi_offset 7, -4
 309 0002 87B0     		sub	sp, sp, #28
 310              	.LCFI22:
 311              		.cfi_def_cfa_offset 32
 312 0004 00AF     		add	r7, sp, #0
 313              	.LCFI23:
 314              		.cfi_def_cfa_register 7
 315 0006 F860     		str	r0, [r7, #12]
 316 0008 B960     		str	r1, [r7, #8]
 317 000a 7A60     		str	r2, [r7, #4]
 107:poly.c        ****   unsigned int i;
 108:poly.c        ****   DBENCH_START();
 109:poly.c        **** 
 110:poly.c        ****   for(i = 0; i < N; ++i)
 318              		.loc 1 110 9
 319 000c 0023     		movs	r3, #0
 320 000e 7B61     		str	r3, [r7, #20]
 321              		.loc 1 110 3
 322 0010 0FE0     		b	.L14
 323              	.L15:
 111:poly.c        ****     c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 324              		.loc 1 111 29 discriminator 3
 325 0012 BB68     		ldr	r3, [r7, #8]
 326 0014 7A69     		ldr	r2, [r7, #20]
 327 0016 53F82220 		ldr	r2, [r3, r2, lsl #2]
 328              		.loc 1 111 44 discriminator 3
 329 001a 7B68     		ldr	r3, [r7, #4]
 330 001c 7969     		ldr	r1, [r7, #20]
 331 001e 53F82130 		ldr	r3, [r3, r1, lsl #2]
 332              		.loc 1 111 33 discriminator 3
 333 0022 D11A     		subs	r1, r2, r3
 334              		.loc 1 111 18 discriminator 3
 335 0024 FB68     		ldr	r3, [r7, #12]
 336 0026 7A69     		ldr	r2, [r7, #20]
 337 0028 43F82210 		str	r1, [r3, r2, lsl #2]
 110:poly.c        ****     c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 338              		.loc 1 110 21 discriminator 3
 339 002c 7B69     		ldr	r3, [r7, #20]
 340 002e 0133     		adds	r3, r3, #1
 341 0030 7B61     		str	r3, [r7, #20]
 342              	.L14:
 110:poly.c        ****     c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 343              		.loc 1 110 3 discriminator 1
 344 0032 7B69     		ldr	r3, [r7, #20]
 345 0034 FF2B     		cmp	r3, #255
 346 0036 ECD9     		bls	.L15
 112:poly.c        **** 
 113:poly.c        ****   DBENCH_STOP(*tadd);
 114:poly.c        **** }
 347              		.loc 1 114 1
 348 0038 00BF     		nop
 349 003a 00BF     		nop
 350 003c 1C37     		adds	r7, r7, #28
 351              	.LCFI24:
 352              		.cfi_def_cfa_offset 4
 353 003e BD46     		mov	sp, r7
 354              	.LCFI25:
 355              		.cfi_def_cfa_register 13
 356              		@ sp needed
 357 0040 80BC     		pop	{r7}
 358              	.LCFI26:
 359              		.cfi_restore 7
 360              		.cfi_def_cfa_offset 0
 361 0042 7047     		bx	lr
 362              		.cfi_endproc
 363              	.LFE4:
 365              		.section	.text.pqcrystals_dilithium2_ref_poly_shiftl,"ax",%progbits
 366              		.align	1
 367              		.global	pqcrystals_dilithium2_ref_poly_shiftl
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 371              		.fpu softvfp
 373              	pqcrystals_dilithium2_ref_poly_shiftl:
 374              	.LFB5:
 115:poly.c        **** 
 116:poly.c        **** /*************************************************
 117:poly.c        **** * Name:        poly_shiftl
 118:poly.c        **** *
 119:poly.c        **** * Description: Multiply polynomial by 2^D without modular reduction. Assumes
 120:poly.c        **** *              input coefficients to be less than 2^{31-D} in absolute value.
 121:poly.c        **** *
 122:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
 123:poly.c        **** **************************************************/
 124:poly.c        **** void poly_shiftl(poly *a) {
 375              		.loc 1 124 27
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 16
 378              		@ frame_needed = 1, uses_anonymous_args = 0
 379              		@ link register save eliminated.
 380 0000 80B4     		push	{r7}
 381              	.LCFI27:
 382              		.cfi_def_cfa_offset 4
 383              		.cfi_offset 7, -4
 384 0002 85B0     		sub	sp, sp, #20
 385              	.LCFI28:
 386              		.cfi_def_cfa_offset 24
 387 0004 00AF     		add	r7, sp, #0
 388              	.LCFI29:
 389              		.cfi_def_cfa_register 7
 390 0006 7860     		str	r0, [r7, #4]
 125:poly.c        ****   unsigned int i;
 126:poly.c        ****   DBENCH_START();
 127:poly.c        **** 
 128:poly.c        ****   for(i = 0; i < N; ++i)
 391              		.loc 1 128 9
 392 0008 0023     		movs	r3, #0
 393 000a FB60     		str	r3, [r7, #12]
 394              		.loc 1 128 3
 395 000c 0BE0     		b	.L17
 396              	.L18:
 129:poly.c        ****     a->coeffs[i] <<= D;
 397              		.loc 1 129 18 discriminator 3
 398 000e 7B68     		ldr	r3, [r7, #4]
 399 0010 FA68     		ldr	r2, [r7, #12]
 400 0012 53F82230 		ldr	r3, [r3, r2, lsl #2]
 401 0016 5903     		lsls	r1, r3, #13
 402 0018 7B68     		ldr	r3, [r7, #4]
 403 001a FA68     		ldr	r2, [r7, #12]
 404 001c 43F82210 		str	r1, [r3, r2, lsl #2]
 128:poly.c        ****     a->coeffs[i] <<= D;
 405              		.loc 1 128 21 discriminator 3
 406 0020 FB68     		ldr	r3, [r7, #12]
 407 0022 0133     		adds	r3, r3, #1
 408 0024 FB60     		str	r3, [r7, #12]
 409              	.L17:
 128:poly.c        ****     a->coeffs[i] <<= D;
 410              		.loc 1 128 3 discriminator 1
 411 0026 FB68     		ldr	r3, [r7, #12]
 412 0028 FF2B     		cmp	r3, #255
 413 002a F0D9     		bls	.L18
 130:poly.c        **** 
 131:poly.c        ****   DBENCH_STOP(*tmul);
 132:poly.c        **** }
 414              		.loc 1 132 1
 415 002c 00BF     		nop
 416 002e 00BF     		nop
 417 0030 1437     		adds	r7, r7, #20
 418              	.LCFI30:
 419              		.cfi_def_cfa_offset 4
 420 0032 BD46     		mov	sp, r7
 421              	.LCFI31:
 422              		.cfi_def_cfa_register 13
 423              		@ sp needed
 424 0034 80BC     		pop	{r7}
 425              	.LCFI32:
 426              		.cfi_restore 7
 427              		.cfi_def_cfa_offset 0
 428 0036 7047     		bx	lr
 429              		.cfi_endproc
 430              	.LFE5:
 432              		.section	.text.pqcrystals_dilithium2_ref_poly_ntt,"ax",%progbits
 433              		.align	1
 434              		.global	pqcrystals_dilithium2_ref_poly_ntt
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu softvfp
 440              	pqcrystals_dilithium2_ref_poly_ntt:
 441              	.LFB6:
 133:poly.c        **** 
 134:poly.c        **** /*************************************************
 135:poly.c        **** * Name:        poly_ntt
 136:poly.c        **** *
 137:poly.c        **** * Description: Inplace forward NTT. Coefficients can grow by
 138:poly.c        **** *              8*Q in absolute value.
 139:poly.c        **** *
 140:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
 141:poly.c        **** **************************************************/
 142:poly.c        **** void poly_ntt(poly *a) {
 442              		.loc 1 142 24
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 8
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446 0000 80B5     		push	{r7, lr}
 447              	.LCFI33:
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 0002 82B0     		sub	sp, sp, #8
 452              	.LCFI34:
 453              		.cfi_def_cfa_offset 16
 454 0004 00AF     		add	r7, sp, #0
 455              	.LCFI35:
 456              		.cfi_def_cfa_register 7
 457 0006 7860     		str	r0, [r7, #4]
 143:poly.c        ****   DBENCH_START();
 144:poly.c        **** 
 145:poly.c        ****   ntt(a->coeffs);
 458              		.loc 1 145 8
 459 0008 7B68     		ldr	r3, [r7, #4]
 460              		.loc 1 145 3
 461 000a 1846     		mov	r0, r3
 462 000c FFF7FEFF 		bl	pqcrystals_dilithium2_ref_ntt
 146:poly.c        **** 
 147:poly.c        ****   DBENCH_STOP(*tmul);
 148:poly.c        **** }
 463              		.loc 1 148 1
 464 0010 00BF     		nop
 465 0012 0837     		adds	r7, r7, #8
 466              	.LCFI36:
 467              		.cfi_def_cfa_offset 8
 468 0014 BD46     		mov	sp, r7
 469              	.LCFI37:
 470              		.cfi_def_cfa_register 13
 471              		@ sp needed
 472 0016 80BD     		pop	{r7, pc}
 473              		.cfi_endproc
 474              	.LFE6:
 476              		.section	.text.pqcrystals_dilithium2_ref_poly_invntt_tomont,"ax",%progbits
 477              		.align	1
 478              		.global	pqcrystals_dilithium2_ref_poly_invntt_tomont
 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 482              		.fpu softvfp
 484              	pqcrystals_dilithium2_ref_poly_invntt_tomont:
 485              	.LFB7:
 149:poly.c        **** 
 150:poly.c        **** /*************************************************
 151:poly.c        **** * Name:        poly_invntt_tomont
 152:poly.c        **** *
 153:poly.c        **** * Description: Inplace inverse NTT and multiplication by 2^{32}.
 154:poly.c        **** *              Input coefficients need to be less than Q in absolute
 155:poly.c        **** *              value and output coefficients are again bounded by Q.
 156:poly.c        **** *
 157:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
 158:poly.c        **** **************************************************/
 159:poly.c        **** void poly_invntt_tomont(poly *a) {
 486              		.loc 1 159 34
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 8
 489              		@ frame_needed = 1, uses_anonymous_args = 0
 490 0000 80B5     		push	{r7, lr}
 491              	.LCFI38:
 492              		.cfi_def_cfa_offset 8
 493              		.cfi_offset 7, -8
 494              		.cfi_offset 14, -4
 495 0002 82B0     		sub	sp, sp, #8
 496              	.LCFI39:
 497              		.cfi_def_cfa_offset 16
 498 0004 00AF     		add	r7, sp, #0
 499              	.LCFI40:
 500              		.cfi_def_cfa_register 7
 501 0006 7860     		str	r0, [r7, #4]
 160:poly.c        ****   DBENCH_START();
 161:poly.c        **** 
 162:poly.c        ****   invntt_tomont(a->coeffs);
 502              		.loc 1 162 18
 503 0008 7B68     		ldr	r3, [r7, #4]
 504              		.loc 1 162 3
 505 000a 1846     		mov	r0, r3
 506 000c FFF7FEFF 		bl	pqcrystals_dilithium2_ref_invntt_tomont
 163:poly.c        **** 
 164:poly.c        ****   DBENCH_STOP(*tmul);
 165:poly.c        **** }
 507              		.loc 1 165 1
 508 0010 00BF     		nop
 509 0012 0837     		adds	r7, r7, #8
 510              	.LCFI41:
 511              		.cfi_def_cfa_offset 8
 512 0014 BD46     		mov	sp, r7
 513              	.LCFI42:
 514              		.cfi_def_cfa_register 13
 515              		@ sp needed
 516 0016 80BD     		pop	{r7, pc}
 517              		.cfi_endproc
 518              	.LFE7:
 520              		.section	.text.pqcrystals_dilithium2_ref_poly_pointwise_montgomery,"ax",%progbits
 521              		.align	1
 522              		.global	pqcrystals_dilithium2_ref_poly_pointwise_montgomery
 523              		.syntax unified
 524              		.thumb
 525              		.thumb_func
 526              		.fpu softvfp
 528              	pqcrystals_dilithium2_ref_poly_pointwise_montgomery:
 529              	.LFB8:
 166:poly.c        **** 
 167:poly.c        **** /*************************************************
 168:poly.c        **** * Name:        poly_pointwise_montgomery
 169:poly.c        **** *
 170:poly.c        **** * Description: Pointwise multiplication of polynomials in NTT domain
 171:poly.c        **** *              representation and multiplication of resulting polynomial
 172:poly.c        **** *              by 2^{-32}.
 173:poly.c        **** *
 174:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
 175:poly.c        **** *              - const poly *a: pointer to first input polynomial
 176:poly.c        **** *              - const poly *b: pointer to second input polynomial
 177:poly.c        **** **************************************************/
 178:poly.c        **** void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 530              		.loc 1 178 71
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 24
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 535              	.LCFI43:
 536              		.cfi_def_cfa_offset 32
 537              		.cfi_offset 4, -32
 538              		.cfi_offset 5, -28
 539              		.cfi_offset 7, -24
 540              		.cfi_offset 8, -20
 541              		.cfi_offset 9, -16
 542              		.cfi_offset 10, -12
 543              		.cfi_offset 11, -8
 544              		.cfi_offset 14, -4
 545 0004 86B0     		sub	sp, sp, #24
 546              	.LCFI44:
 547              		.cfi_def_cfa_offset 56
 548 0006 00AF     		add	r7, sp, #0
 549              	.LCFI45:
 550              		.cfi_def_cfa_register 7
 551 0008 F860     		str	r0, [r7, #12]
 552 000a B960     		str	r1, [r7, #8]
 553 000c 7A60     		str	r2, [r7, #4]
 179:poly.c        ****   unsigned int i;
 180:poly.c        ****   DBENCH_START();
 181:poly.c        **** 
 182:poly.c        ****   for(i = 0; i < N; ++i)
 554              		.loc 1 182 9
 555 000e 0023     		movs	r3, #0
 556 0010 7B61     		str	r3, [r7, #20]
 557              		.loc 1 182 3
 558 0012 22E0     		b	.L22
 559              	.L23:
 183:poly.c        ****     c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 560              		.loc 1 183 56 discriminator 3
 561 0014 BB68     		ldr	r3, [r7, #8]
 562 0016 7A69     		ldr	r2, [r7, #20]
 563 0018 53F82230 		ldr	r3, [r3, r2, lsl #2]
 564              		.loc 1 183 38 discriminator 3
 565 001c DA17     		asrs	r2, r3, #31
 566 001e 9846     		mov	r8, r3
 567 0020 9146     		mov	r9, r2
 568              		.loc 1 183 71 discriminator 3
 569 0022 7B68     		ldr	r3, [r7, #4]
 570 0024 7A69     		ldr	r2, [r7, #20]
 571 0026 53F82230 		ldr	r3, [r3, r2, lsl #2]
 572 002a DA17     		asrs	r2, r3, #31
 573 002c 9A46     		mov	r10, r3
 574 002e 9346     		mov	fp, r2
 575              		.loc 1 183 20 discriminator 3
 576 0030 0AFB09F2 		mul	r2, r10, r9
 577 0034 08FB0BF3 		mul	r3, r8, fp
 578 0038 1344     		add	r3, r3, r2
 579 003a A8FB0A45 		umull	r4, r5, r8, r10
 580 003e 2B44     		add	r3, r3, r5
 581 0040 1D46     		mov	r5, r3
 582 0042 2046     		mov	r0, r4
 583 0044 2946     		mov	r1, r5
 584 0046 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_montgomery_reduce
 585 004a 0146     		mov	r1, r0
 586              		.loc 1 183 18 discriminator 3
 587 004c FB68     		ldr	r3, [r7, #12]
 588 004e 7A69     		ldr	r2, [r7, #20]
 589 0050 43F82210 		str	r1, [r3, r2, lsl #2]
 182:poly.c        ****     c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 590              		.loc 1 182 21 discriminator 3
 591 0054 7B69     		ldr	r3, [r7, #20]
 592 0056 0133     		adds	r3, r3, #1
 593 0058 7B61     		str	r3, [r7, #20]
 594              	.L22:
 182:poly.c        ****     c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 595              		.loc 1 182 3 discriminator 1
 596 005a 7B69     		ldr	r3, [r7, #20]
 597 005c FF2B     		cmp	r3, #255
 598 005e D9D9     		bls	.L23
 184:poly.c        **** 
 185:poly.c        ****   DBENCH_STOP(*tmul);
 186:poly.c        **** }
 599              		.loc 1 186 1
 600 0060 00BF     		nop
 601 0062 00BF     		nop
 602 0064 1837     		adds	r7, r7, #24
 603              	.LCFI46:
 604              		.cfi_def_cfa_offset 32
 605 0066 BD46     		mov	sp, r7
 606              	.LCFI47:
 607              		.cfi_def_cfa_register 13
 608              		@ sp needed
 609 0068 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 610              		.cfi_endproc
 611              	.LFE8:
 613              		.section	.text.pqcrystals_dilithium2_ref_poly_power2round,"ax",%progbits
 614              		.align	1
 615              		.global	pqcrystals_dilithium2_ref_poly_power2round
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 619              		.fpu softvfp
 621              	pqcrystals_dilithium2_ref_poly_power2round:
 622              	.LFB9:
 187:poly.c        **** 
 188:poly.c        **** /*************************************************
 189:poly.c        **** * Name:        poly_power2round
 190:poly.c        **** *
 191:poly.c        **** * Description: For all coefficients c of the input polynomial,
 192:poly.c        **** *              compute c0, c1 such that c mod Q = c1*2^D + c0
 193:poly.c        **** *              with -2^{D-1} < c0 <= 2^{D-1}. Assumes coefficients to be
 194:poly.c        **** *              standard representatives.
 195:poly.c        **** *
 196:poly.c        **** * Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
 197:poly.c        **** *              - poly *a0: pointer to output polynomial with coefficients c0
 198:poly.c        **** *              - const poly *a: pointer to input polynomial
 199:poly.c        **** **************************************************/
 200:poly.c        **** void poly_power2round(poly *a1, poly *a0, const poly *a) {
 623              		.loc 1 200 58
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 24
 626              		@ frame_needed = 1, uses_anonymous_args = 0
 627 0000 80B5     		push	{r7, lr}
 628              	.LCFI48:
 629              		.cfi_def_cfa_offset 8
 630              		.cfi_offset 7, -8
 631              		.cfi_offset 14, -4
 632 0002 86B0     		sub	sp, sp, #24
 633              	.LCFI49:
 634              		.cfi_def_cfa_offset 32
 635 0004 00AF     		add	r7, sp, #0
 636              	.LCFI50:
 637              		.cfi_def_cfa_register 7
 638 0006 F860     		str	r0, [r7, #12]
 639 0008 B960     		str	r1, [r7, #8]
 640 000a 7A60     		str	r2, [r7, #4]
 201:poly.c        ****   unsigned int i;
 202:poly.c        ****   DBENCH_START();
 203:poly.c        **** 
 204:poly.c        ****   for(i = 0; i < N; ++i)
 641              		.loc 1 204 9
 642 000c 0023     		movs	r3, #0
 643 000e 7B61     		str	r3, [r7, #20]
 644              		.loc 1 204 3
 645 0010 12E0     		b	.L25
 646              	.L26:
 205:poly.c        ****     a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 647              		.loc 1 205 21 discriminator 3
 648 0012 7B69     		ldr	r3, [r7, #20]
 649 0014 9B00     		lsls	r3, r3, #2
 650 0016 BA68     		ldr	r2, [r7, #8]
 651 0018 D018     		adds	r0, r2, r3
 652 001a 7B68     		ldr	r3, [r7, #4]
 653 001c 7A69     		ldr	r2, [r7, #20]
 654 001e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 655 0022 1946     		mov	r1, r3
 656 0024 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_power2round
 657 0028 0146     		mov	r1, r0
 658              		.loc 1 205 19 discriminator 3
 659 002a FB68     		ldr	r3, [r7, #12]
 660 002c 7A69     		ldr	r2, [r7, #20]
 661 002e 43F82210 		str	r1, [r3, r2, lsl #2]
 204:poly.c        ****     a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 662              		.loc 1 204 21 discriminator 3
 663 0032 7B69     		ldr	r3, [r7, #20]
 664 0034 0133     		adds	r3, r3, #1
 665 0036 7B61     		str	r3, [r7, #20]
 666              	.L25:
 204:poly.c        ****     a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 667              		.loc 1 204 3 discriminator 1
 668 0038 7B69     		ldr	r3, [r7, #20]
 669 003a FF2B     		cmp	r3, #255
 670 003c E9D9     		bls	.L26
 206:poly.c        **** 
 207:poly.c        ****   DBENCH_STOP(*tround);
 208:poly.c        **** }
 671              		.loc 1 208 1
 672 003e 00BF     		nop
 673 0040 00BF     		nop
 674 0042 1837     		adds	r7, r7, #24
 675              	.LCFI51:
 676              		.cfi_def_cfa_offset 8
 677 0044 BD46     		mov	sp, r7
 678              	.LCFI52:
 679              		.cfi_def_cfa_register 13
 680              		@ sp needed
 681 0046 80BD     		pop	{r7, pc}
 682              		.cfi_endproc
 683              	.LFE9:
 685              		.section	.text.pqcrystals_dilithium2_ref_poly_decompose,"ax",%progbits
 686              		.align	1
 687              		.global	pqcrystals_dilithium2_ref_poly_decompose
 688              		.syntax unified
 689              		.thumb
 690              		.thumb_func
 691              		.fpu softvfp
 693              	pqcrystals_dilithium2_ref_poly_decompose:
 694              	.LFB10:
 209:poly.c        **** 
 210:poly.c        **** /*************************************************
 211:poly.c        **** * Name:        poly_decompose
 212:poly.c        **** *
 213:poly.c        **** * Description: For all coefficients c of the input polynomial,
 214:poly.c        **** *              compute high and low bits c0, c1 such c mod Q = c1*ALPHA + c0
 215:poly.c        **** *              with -ALPHA/2 < c0 <= ALPHA/2 except c1 = (Q-1)/ALPHA where we
 216:poly.c        **** *              set c1 = 0 and -ALPHA/2 <= c0 = c mod Q - Q < 0.
 217:poly.c        **** *              Assumes coefficients to be standard representatives.
 218:poly.c        **** *
 219:poly.c        **** * Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
 220:poly.c        **** *              - poly *a0: pointer to output polynomial with coefficients c0
 221:poly.c        **** *              - const poly *a: pointer to input polynomial
 222:poly.c        **** **************************************************/
 223:poly.c        **** void poly_decompose(poly *a1, poly *a0, const poly *a) {
 695              		.loc 1 223 56
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 24
 698              		@ frame_needed = 1, uses_anonymous_args = 0
 699 0000 80B5     		push	{r7, lr}
 700              	.LCFI53:
 701              		.cfi_def_cfa_offset 8
 702              		.cfi_offset 7, -8
 703              		.cfi_offset 14, -4
 704 0002 86B0     		sub	sp, sp, #24
 705              	.LCFI54:
 706              		.cfi_def_cfa_offset 32
 707 0004 00AF     		add	r7, sp, #0
 708              	.LCFI55:
 709              		.cfi_def_cfa_register 7
 710 0006 F860     		str	r0, [r7, #12]
 711 0008 B960     		str	r1, [r7, #8]
 712 000a 7A60     		str	r2, [r7, #4]
 224:poly.c        ****   unsigned int i;
 225:poly.c        ****   DBENCH_START();
 226:poly.c        **** 
 227:poly.c        ****   for(i = 0; i < N; ++i)
 713              		.loc 1 227 9
 714 000c 0023     		movs	r3, #0
 715 000e 7B61     		str	r3, [r7, #20]
 716              		.loc 1 227 3
 717 0010 12E0     		b	.L28
 718              	.L29:
 228:poly.c        ****     a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 719              		.loc 1 228 21 discriminator 3
 720 0012 7B69     		ldr	r3, [r7, #20]
 721 0014 9B00     		lsls	r3, r3, #2
 722 0016 BA68     		ldr	r2, [r7, #8]
 723 0018 D018     		adds	r0, r2, r3
 724 001a 7B68     		ldr	r3, [r7, #4]
 725 001c 7A69     		ldr	r2, [r7, #20]
 726 001e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 727 0022 1946     		mov	r1, r3
 728 0024 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_decompose
 729 0028 0146     		mov	r1, r0
 730              		.loc 1 228 19 discriminator 3
 731 002a FB68     		ldr	r3, [r7, #12]
 732 002c 7A69     		ldr	r2, [r7, #20]
 733 002e 43F82210 		str	r1, [r3, r2, lsl #2]
 227:poly.c        ****     a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 734              		.loc 1 227 21 discriminator 3
 735 0032 7B69     		ldr	r3, [r7, #20]
 736 0034 0133     		adds	r3, r3, #1
 737 0036 7B61     		str	r3, [r7, #20]
 738              	.L28:
 227:poly.c        ****     a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 739              		.loc 1 227 3 discriminator 1
 740 0038 7B69     		ldr	r3, [r7, #20]
 741 003a FF2B     		cmp	r3, #255
 742 003c E9D9     		bls	.L29
 229:poly.c        **** 
 230:poly.c        ****   DBENCH_STOP(*tround);
 231:poly.c        **** }
 743              		.loc 1 231 1
 744 003e 00BF     		nop
 745 0040 00BF     		nop
 746 0042 1837     		adds	r7, r7, #24
 747              	.LCFI56:
 748              		.cfi_def_cfa_offset 8
 749 0044 BD46     		mov	sp, r7
 750              	.LCFI57:
 751              		.cfi_def_cfa_register 13
 752              		@ sp needed
 753 0046 80BD     		pop	{r7, pc}
 754              		.cfi_endproc
 755              	.LFE10:
 757              		.section	.text.pqcrystals_dilithium2_ref_poly_make_hint,"ax",%progbits
 758              		.align	1
 759              		.global	pqcrystals_dilithium2_ref_poly_make_hint
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu softvfp
 765              	pqcrystals_dilithium2_ref_poly_make_hint:
 766              	.LFB11:
 232:poly.c        **** 
 233:poly.c        **** /*************************************************
 234:poly.c        **** * Name:        poly_make_hint
 235:poly.c        **** *
 236:poly.c        **** * Description: Compute hint polynomial. The coefficients of which indicate
 237:poly.c        **** *              whether the low bits of the corresponding coefficient of
 238:poly.c        **** *              the input polynomial overflow into the high bits.
 239:poly.c        **** *
 240:poly.c        **** * Arguments:   - poly *h: pointer to output hint polynomial
 241:poly.c        **** *              - const poly *a0: pointer to low part of input polynomial
 242:poly.c        **** *              - const poly *a1: pointer to high part of input polynomial
 243:poly.c        **** *
 244:poly.c        **** * Returns number of 1 bits.
 245:poly.c        **** **************************************************/
 246:poly.c        **** unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 767              		.loc 1 246 70
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 24
 770              		@ frame_needed = 1, uses_anonymous_args = 0
 771 0000 80B5     		push	{r7, lr}
 772              	.LCFI58:
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 7, -8
 775              		.cfi_offset 14, -4
 776 0002 86B0     		sub	sp, sp, #24
 777              	.LCFI59:
 778              		.cfi_def_cfa_offset 32
 779 0004 00AF     		add	r7, sp, #0
 780              	.LCFI60:
 781              		.cfi_def_cfa_register 7
 782 0006 F860     		str	r0, [r7, #12]
 783 0008 B960     		str	r1, [r7, #8]
 784 000a 7A60     		str	r2, [r7, #4]
 247:poly.c        ****   unsigned int i, s = 0;
 785              		.loc 1 247 19
 786 000c 0023     		movs	r3, #0
 787 000e 3B61     		str	r3, [r7, #16]
 248:poly.c        ****   DBENCH_START();
 249:poly.c        **** 
 250:poly.c        ****   for(i = 0; i < N; ++i) {
 788              		.loc 1 250 9
 789 0010 0023     		movs	r3, #0
 790 0012 7B61     		str	r3, [r7, #20]
 791              		.loc 1 250 3
 792 0014 1BE0     		b	.L31
 793              	.L32:
 251:poly.c        ****     h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 794              		.loc 1 251 20 discriminator 3
 795 0016 BB68     		ldr	r3, [r7, #8]
 796 0018 7A69     		ldr	r2, [r7, #20]
 797 001a 53F82200 		ldr	r0, [r3, r2, lsl #2]
 798 001e 7B68     		ldr	r3, [r7, #4]
 799 0020 7A69     		ldr	r2, [r7, #20]
 800 0022 53F82230 		ldr	r3, [r3, r2, lsl #2]
 801 0026 1946     		mov	r1, r3
 802 0028 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_make_hint
 803 002c 0346     		mov	r3, r0
 804 002e 1946     		mov	r1, r3
 805              		.loc 1 251 18 discriminator 3
 806 0030 FB68     		ldr	r3, [r7, #12]
 807 0032 7A69     		ldr	r2, [r7, #20]
 808 0034 43F82210 		str	r1, [r3, r2, lsl #2]
 252:poly.c        ****     s += h->coeffs[i];
 809              		.loc 1 252 19 discriminator 3
 810 0038 FB68     		ldr	r3, [r7, #12]
 811 003a 7A69     		ldr	r2, [r7, #20]
 812 003c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 813 0040 1A46     		mov	r2, r3
 814              		.loc 1 252 7 discriminator 3
 815 0042 3B69     		ldr	r3, [r7, #16]
 816 0044 1344     		add	r3, r3, r2
 817 0046 3B61     		str	r3, [r7, #16]
 250:poly.c        ****     h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 818              		.loc 1 250 21 discriminator 3
 819 0048 7B69     		ldr	r3, [r7, #20]
 820 004a 0133     		adds	r3, r3, #1
 821 004c 7B61     		str	r3, [r7, #20]
 822              	.L31:
 250:poly.c        ****     h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 823              		.loc 1 250 3 discriminator 1
 824 004e 7B69     		ldr	r3, [r7, #20]
 825 0050 FF2B     		cmp	r3, #255
 826 0052 E0D9     		bls	.L32
 253:poly.c        ****   }
 254:poly.c        **** 
 255:poly.c        ****   DBENCH_STOP(*tround);
 256:poly.c        ****   return s;
 827              		.loc 1 256 10
 828 0054 3B69     		ldr	r3, [r7, #16]
 257:poly.c        **** }
 829              		.loc 1 257 1
 830 0056 1846     		mov	r0, r3
 831 0058 1837     		adds	r7, r7, #24
 832              	.LCFI61:
 833              		.cfi_def_cfa_offset 8
 834 005a BD46     		mov	sp, r7
 835              	.LCFI62:
 836              		.cfi_def_cfa_register 13
 837              		@ sp needed
 838 005c 80BD     		pop	{r7, pc}
 839              		.cfi_endproc
 840              	.LFE11:
 842              		.section	.text.pqcrystals_dilithium2_ref_poly_use_hint,"ax",%progbits
 843              		.align	1
 844              		.global	pqcrystals_dilithium2_ref_poly_use_hint
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu softvfp
 850              	pqcrystals_dilithium2_ref_poly_use_hint:
 851              	.LFB12:
 258:poly.c        **** 
 259:poly.c        **** /*************************************************
 260:poly.c        **** * Name:        poly_use_hint
 261:poly.c        **** *
 262:poly.c        **** * Description: Use hint polynomial to correct the high bits of a polynomial.
 263:poly.c        **** *
 264:poly.c        **** * Arguments:   - poly *b: pointer to output polynomial with corrected high bits
 265:poly.c        **** *              - const poly *a: pointer to input polynomial
 266:poly.c        **** *              - const poly *h: pointer to input hint polynomial
 267:poly.c        **** **************************************************/
 268:poly.c        **** void poly_use_hint(poly *b, const poly *a, const poly *h) {
 852              		.loc 1 268 59
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 24
 855              		@ frame_needed = 1, uses_anonymous_args = 0
 856 0000 80B5     		push	{r7, lr}
 857              	.LCFI63:
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 7, -8
 860              		.cfi_offset 14, -4
 861 0002 86B0     		sub	sp, sp, #24
 862              	.LCFI64:
 863              		.cfi_def_cfa_offset 32
 864 0004 00AF     		add	r7, sp, #0
 865              	.LCFI65:
 866              		.cfi_def_cfa_register 7
 867 0006 F860     		str	r0, [r7, #12]
 868 0008 B960     		str	r1, [r7, #8]
 869 000a 7A60     		str	r2, [r7, #4]
 269:poly.c        ****   unsigned int i;
 270:poly.c        ****   DBENCH_START();
 271:poly.c        **** 
 272:poly.c        ****   for(i = 0; i < N; ++i)
 870              		.loc 1 272 9
 871 000c 0023     		movs	r3, #0
 872 000e 7B61     		str	r3, [r7, #20]
 873              		.loc 1 272 3
 874 0010 12E0     		b	.L35
 875              	.L36:
 273:poly.c        ****     b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 876              		.loc 1 273 20 discriminator 3
 877 0012 BB68     		ldr	r3, [r7, #8]
 878 0014 7A69     		ldr	r2, [r7, #20]
 879 0016 53F82200 		ldr	r0, [r3, r2, lsl #2]
 880              		.loc 1 273 52 discriminator 3
 881 001a 7B68     		ldr	r3, [r7, #4]
 882 001c 7A69     		ldr	r2, [r7, #20]
 883 001e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 884              		.loc 1 273 20 discriminator 3
 885 0022 1946     		mov	r1, r3
 886 0024 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_use_hint
 887 0028 0146     		mov	r1, r0
 888              		.loc 1 273 18 discriminator 3
 889 002a FB68     		ldr	r3, [r7, #12]
 890 002c 7A69     		ldr	r2, [r7, #20]
 891 002e 43F82210 		str	r1, [r3, r2, lsl #2]
 272:poly.c        ****     b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 892              		.loc 1 272 21 discriminator 3
 893 0032 7B69     		ldr	r3, [r7, #20]
 894 0034 0133     		adds	r3, r3, #1
 895 0036 7B61     		str	r3, [r7, #20]
 896              	.L35:
 272:poly.c        ****     b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 897              		.loc 1 272 3 discriminator 1
 898 0038 7B69     		ldr	r3, [r7, #20]
 899 003a FF2B     		cmp	r3, #255
 900 003c E9D9     		bls	.L36
 274:poly.c        **** 
 275:poly.c        ****   DBENCH_STOP(*tround);
 276:poly.c        **** }
 901              		.loc 1 276 1
 902 003e 00BF     		nop
 903 0040 00BF     		nop
 904 0042 1837     		adds	r7, r7, #24
 905              	.LCFI66:
 906              		.cfi_def_cfa_offset 8
 907 0044 BD46     		mov	sp, r7
 908              	.LCFI67:
 909              		.cfi_def_cfa_register 13
 910              		@ sp needed
 911 0046 80BD     		pop	{r7, pc}
 912              		.cfi_endproc
 913              	.LFE12:
 915              		.section	.text.pqcrystals_dilithium2_ref_poly_chknorm,"ax",%progbits
 916              		.align	1
 917              		.global	pqcrystals_dilithium2_ref_poly_chknorm
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu softvfp
 923              	pqcrystals_dilithium2_ref_poly_chknorm:
 924              	.LFB13:
 277:poly.c        **** 
 278:poly.c        **** /*************************************************
 279:poly.c        **** * Name:        poly_chknorm
 280:poly.c        **** *
 281:poly.c        **** * Description: Check infinity norm of polynomial against given bound.
 282:poly.c        **** *              Assumes input coefficients were reduced by reduce32().
 283:poly.c        **** *
 284:poly.c        **** * Arguments:   - const poly *a: pointer to polynomial
 285:poly.c        **** *              - int32_t B: norm bound
 286:poly.c        **** *
 287:poly.c        **** * Returns 0 if norm is strictly smaller than B <= (Q-1)/8 and 1 otherwise.
 288:poly.c        **** **************************************************/
 289:poly.c        **** int poly_chknorm(const poly *a, int32_t B) {
 925              		.loc 1 289 44
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 16
 928              		@ frame_needed = 1, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 930 0000 80B4     		push	{r7}
 931              	.LCFI68:
 932              		.cfi_def_cfa_offset 4
 933              		.cfi_offset 7, -4
 934 0002 85B0     		sub	sp, sp, #20
 935              	.LCFI69:
 936              		.cfi_def_cfa_offset 24
 937 0004 00AF     		add	r7, sp, #0
 938              	.LCFI70:
 939              		.cfi_def_cfa_register 7
 940 0006 7860     		str	r0, [r7, #4]
 941 0008 3960     		str	r1, [r7]
 290:poly.c        ****   unsigned int i;
 291:poly.c        ****   int32_t t;
 292:poly.c        ****   DBENCH_START();
 293:poly.c        **** 
 294:poly.c        ****   if(B > (Q-1)/8)
 942              		.loc 1 294 5
 943 000a 3B68     		ldr	r3, [r7]
 944 000c 164A     		ldr	r2, .L43
 945 000e 9342     		cmp	r3, r2
 946 0010 01DD     		ble	.L38
 295:poly.c        ****     return 1;
 947              		.loc 1 295 12
 948 0012 0123     		movs	r3, #1
 949 0014 22E0     		b	.L39
 950              	.L38:
 296:poly.c        **** 
 297:poly.c        ****   /* It is ok to leak which coefficient violates the bound since
 298:poly.c        ****      the probability for each coefficient is independent of secret
 299:poly.c        ****      data but we must not leak the sign of the centralized representative. */
 300:poly.c        ****   for(i = 0; i < N; ++i) {
 951              		.loc 1 300 9
 952 0016 0023     		movs	r3, #0
 953 0018 FB60     		str	r3, [r7, #12]
 954              		.loc 1 300 3
 955 001a 1BE0     		b	.L40
 956              	.L42:
 301:poly.c        ****     /* Absolute value */
 302:poly.c        ****     t = a->coeffs[i] >> 31;
 957              		.loc 1 302 18
 958 001c 7B68     		ldr	r3, [r7, #4]
 959 001e FA68     		ldr	r2, [r7, #12]
 960 0020 53F82230 		ldr	r3, [r3, r2, lsl #2]
 961              		.loc 1 302 7
 962 0024 DB17     		asrs	r3, r3, #31
 963 0026 BB60     		str	r3, [r7, #8]
 303:poly.c        ****     t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 964              		.loc 1 303 18
 965 0028 7B68     		ldr	r3, [r7, #4]
 966 002a FA68     		ldr	r2, [r7, #12]
 967 002c 53F82220 		ldr	r2, [r3, r2, lsl #2]
 968              		.loc 1 303 40
 969 0030 7B68     		ldr	r3, [r7, #4]
 970 0032 F968     		ldr	r1, [r7, #12]
 971 0034 53F82130 		ldr	r3, [r3, r1, lsl #2]
 972              		.loc 1 303 30
 973 0038 5900     		lsls	r1, r3, #1
 974              		.loc 1 303 27
 975 003a BB68     		ldr	r3, [r7, #8]
 976 003c 0B40     		ands	r3, r3, r1
 977              		.loc 1 303 7
 978 003e D31A     		subs	r3, r2, r3
 979 0040 BB60     		str	r3, [r7, #8]
 304:poly.c        **** 
 305:poly.c        ****     if(t >= B) {
 980              		.loc 1 305 7
 981 0042 BA68     		ldr	r2, [r7, #8]
 982 0044 3B68     		ldr	r3, [r7]
 983 0046 9A42     		cmp	r2, r3
 984 0048 01DB     		blt	.L41
 306:poly.c        ****       DBENCH_STOP(*tsample);
 307:poly.c        ****       return 1;
 985              		.loc 1 307 14
 986 004a 0123     		movs	r3, #1
 987 004c 06E0     		b	.L39
 988              	.L41:
 300:poly.c        ****     /* Absolute value */
 989              		.loc 1 300 21 discriminator 2
 990 004e FB68     		ldr	r3, [r7, #12]
 991 0050 0133     		adds	r3, r3, #1
 992 0052 FB60     		str	r3, [r7, #12]
 993              	.L40:
 300:poly.c        ****     /* Absolute value */
 994              		.loc 1 300 3 discriminator 1
 995 0054 FB68     		ldr	r3, [r7, #12]
 996 0056 FF2B     		cmp	r3, #255
 997 0058 E0D9     		bls	.L42
 308:poly.c        ****     }
 309:poly.c        ****   }
 310:poly.c        **** 
 311:poly.c        ****   DBENCH_STOP(*tsample);
 312:poly.c        ****   return 0;
 998              		.loc 1 312 10
 999 005a 0023     		movs	r3, #0
 1000              	.L39:
 313:poly.c        **** }
 1001              		.loc 1 313 1
 1002 005c 1846     		mov	r0, r3
 1003 005e 1437     		adds	r7, r7, #20
 1004              	.LCFI71:
 1005              		.cfi_def_cfa_offset 4
 1006 0060 BD46     		mov	sp, r7
 1007              	.LCFI72:
 1008              		.cfi_def_cfa_register 13
 1009              		@ sp needed
 1010 0062 80BC     		pop	{r7}
 1011              	.LCFI73:
 1012              		.cfi_restore 7
 1013              		.cfi_def_cfa_offset 0
 1014 0064 7047     		bx	lr
 1015              	.L44:
 1016 0066 00BF     		.align	2
 1017              	.L43:
 1018 0068 00FC0F00 		.word	1047552
 1019              		.cfi_endproc
 1020              	.LFE13:
 1022              		.section	.text.rej_uniform,"ax",%progbits
 1023              		.align	1
 1024              		.syntax unified
 1025              		.thumb
 1026              		.thumb_func
 1027              		.fpu softvfp
 1029              	rej_uniform:
 1030              	.LFB14:
 314:poly.c        **** 
 315:poly.c        **** /*************************************************
 316:poly.c        **** * Name:        rej_uniform
 317:poly.c        **** *
 318:poly.c        **** * Description: Sample uniformly random coefficients in [0, Q-1] by
 319:poly.c        **** *              performing rejection sampling on array of random bytes.
 320:poly.c        **** *
 321:poly.c        **** * Arguments:   - int32_t *a: pointer to output array (allocated)
 322:poly.c        **** *              - unsigned int len: number of coefficients to be sampled
 323:poly.c        **** *              - const uint8_t *buf: array of random bytes
 324:poly.c        **** *              - unsigned int buflen: length of array of random bytes
 325:poly.c        **** *
 326:poly.c        **** * Returns number of sampled coefficients. Can be smaller than len if not enough
 327:poly.c        **** * random bytes were given.
 328:poly.c        **** **************************************************/
 329:poly.c        **** static unsigned int rej_uniform(int32_t *a,
 330:poly.c        ****                                 unsigned int len,
 331:poly.c        ****                                 const uint8_t *buf,
 332:poly.c        ****                                 unsigned int buflen)
 333:poly.c        **** {
 1031              		.loc 1 333 1
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 32
 1034              		@ frame_needed = 1, uses_anonymous_args = 0
 1035              		@ link register save eliminated.
 1036 0000 80B4     		push	{r7}
 1037              	.LCFI74:
 1038              		.cfi_def_cfa_offset 4
 1039              		.cfi_offset 7, -4
 1040 0002 89B0     		sub	sp, sp, #36
 1041              	.LCFI75:
 1042              		.cfi_def_cfa_offset 40
 1043 0004 00AF     		add	r7, sp, #0
 1044              	.LCFI76:
 1045              		.cfi_def_cfa_register 7
 1046 0006 F860     		str	r0, [r7, #12]
 1047 0008 B960     		str	r1, [r7, #8]
 1048 000a 7A60     		str	r2, [r7, #4]
 1049 000c 3B60     		str	r3, [r7]
 334:poly.c        ****   unsigned int ctr, pos;
 335:poly.c        ****   uint32_t t;
 336:poly.c        ****   DBENCH_START();
 337:poly.c        **** 
 338:poly.c        ****   ctr = pos = 0;
 1050              		.loc 1 338 13
 1051 000e 0023     		movs	r3, #0
 1052 0010 BB61     		str	r3, [r7, #24]
 1053              		.loc 1 338 7
 1054 0012 BB69     		ldr	r3, [r7, #24]
 1055 0014 FB61     		str	r3, [r7, #28]
 339:poly.c        ****   while(ctr < len && pos + 3 <= buflen) {
 1056              		.loc 1 339 8
 1057 0016 2AE0     		b	.L46
 1058              	.L48:
 340:poly.c        ****     t  = buf[pos++];
 1059              		.loc 1 340 17
 1060 0018 BB69     		ldr	r3, [r7, #24]
 1061 001a 5A1C     		adds	r2, r3, #1
 1062 001c BA61     		str	r2, [r7, #24]
 1063              		.loc 1 340 13
 1064 001e 7A68     		ldr	r2, [r7, #4]
 1065 0020 1344     		add	r3, r3, r2
 1066 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1067              		.loc 1 340 8
 1068 0024 7B61     		str	r3, [r7, #20]
 341:poly.c        ****     t |= (uint32_t)buf[pos++] << 8;
 1069              		.loc 1 341 27
 1070 0026 BB69     		ldr	r3, [r7, #24]
 1071 0028 5A1C     		adds	r2, r3, #1
 1072 002a BA61     		str	r2, [r7, #24]
 1073              		.loc 1 341 23
 1074 002c 7A68     		ldr	r2, [r7, #4]
 1075 002e 1344     		add	r3, r3, r2
 1076 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1077              		.loc 1 341 31
 1078 0032 1B02     		lsls	r3, r3, #8
 1079              		.loc 1 341 7
 1080 0034 7A69     		ldr	r2, [r7, #20]
 1081 0036 1343     		orrs	r3, r3, r2
 1082 0038 7B61     		str	r3, [r7, #20]
 342:poly.c        ****     t |= (uint32_t)buf[pos++] << 16;
 1083              		.loc 1 342 27
 1084 003a BB69     		ldr	r3, [r7, #24]
 1085 003c 5A1C     		adds	r2, r3, #1
 1086 003e BA61     		str	r2, [r7, #24]
 1087              		.loc 1 342 23
 1088 0040 7A68     		ldr	r2, [r7, #4]
 1089 0042 1344     		add	r3, r3, r2
 1090 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1091              		.loc 1 342 31
 1092 0046 1B04     		lsls	r3, r3, #16
 1093              		.loc 1 342 7
 1094 0048 7A69     		ldr	r2, [r7, #20]
 1095 004a 1343     		orrs	r3, r3, r2
 1096 004c 7B61     		str	r3, [r7, #20]
 343:poly.c        ****     t &= 0x7FFFFF;
 1097              		.loc 1 343 7
 1098 004e 7B69     		ldr	r3, [r7, #20]
 1099 0050 C3F31603 		ubfx	r3, r3, #0, #23
 1100 0054 7B61     		str	r3, [r7, #20]
 344:poly.c        **** 
 345:poly.c        ****     if(t < Q)
 1101              		.loc 1 345 7
 1102 0056 7B69     		ldr	r3, [r7, #20]
 1103 0058 0C4A     		ldr	r2, .L50
 1104 005a 9342     		cmp	r3, r2
 1105 005c 07D8     		bhi	.L46
 346:poly.c        ****       a[ctr++] = t;
 1106              		.loc 1 346 12
 1107 005e FB69     		ldr	r3, [r7, #28]
 1108 0060 5A1C     		adds	r2, r3, #1
 1109 0062 FA61     		str	r2, [r7, #28]
 1110              		.loc 1 346 8
 1111 0064 9B00     		lsls	r3, r3, #2
 1112 0066 FA68     		ldr	r2, [r7, #12]
 1113 0068 1344     		add	r3, r3, r2
 1114              		.loc 1 346 16
 1115 006a 7A69     		ldr	r2, [r7, #20]
 1116 006c 1A60     		str	r2, [r3]
 1117              	.L46:
 339:poly.c        ****     t  = buf[pos++];
 1118              		.loc 1 339 8
 1119 006e FA69     		ldr	r2, [r7, #28]
 1120 0070 BB68     		ldr	r3, [r7, #8]
 1121 0072 9A42     		cmp	r2, r3
 1122 0074 04D2     		bcs	.L47
 339:poly.c        ****     t  = buf[pos++];
 1123              		.loc 1 339 26 discriminator 1
 1124 0076 BB69     		ldr	r3, [r7, #24]
 1125 0078 0333     		adds	r3, r3, #3
 339:poly.c        ****     t  = buf[pos++];
 1126              		.loc 1 339 19 discriminator 1
 1127 007a 3A68     		ldr	r2, [r7]
 1128 007c 9A42     		cmp	r2, r3
 1129 007e CBD2     		bcs	.L48
 1130              	.L47:
 347:poly.c        ****   }
 348:poly.c        **** 
 349:poly.c        ****   DBENCH_STOP(*tsample);
 350:poly.c        ****   return ctr;
 1131              		.loc 1 350 10
 1132 0080 FB69     		ldr	r3, [r7, #28]
 351:poly.c        **** }
 1133              		.loc 1 351 1
 1134 0082 1846     		mov	r0, r3
 1135 0084 2437     		adds	r7, r7, #36
 1136              	.LCFI77:
 1137              		.cfi_def_cfa_offset 4
 1138 0086 BD46     		mov	sp, r7
 1139              	.LCFI78:
 1140              		.cfi_def_cfa_register 13
 1141              		@ sp needed
 1142 0088 80BC     		pop	{r7}
 1143              	.LCFI79:
 1144              		.cfi_restore 7
 1145              		.cfi_def_cfa_offset 0
 1146 008a 7047     		bx	lr
 1147              	.L51:
 1148              		.align	2
 1149              	.L50:
 1150 008c 00E07F00 		.word	8380416
 1151              		.cfi_endproc
 1152              	.LFE14:
 1154              		.section	.text.pqcrystals_dilithium2_ref_poly_uniform,"ax",%progbits
 1155              		.align	1
 1156              		.global	pqcrystals_dilithium2_ref_poly_uniform
 1157              		.syntax unified
 1158              		.thumb
 1159              		.thumb_func
 1160              		.fpu softvfp
 1162              	pqcrystals_dilithium2_ref_poly_uniform:
 1163              	.LFB15:
 352:poly.c        **** 
 353:poly.c        **** /*************************************************
 354:poly.c        **** * Name:        poly_uniform
 355:poly.c        **** *
 356:poly.c        **** * Description: Sample polynomial with uniformly random coefficients
 357:poly.c        **** *              in [0,Q-1] by performing rejection sampling on the
 358:poly.c        **** *              output stream of SHAKE256(seed|nonce) or AES256CTR(seed,nonce).
 359:poly.c        **** *
 360:poly.c        **** * Arguments:   - poly *a: pointer to output polynomial
 361:poly.c        **** *              - const uint8_t seed[]: byte array with seed of length SEEDBYTES
 362:poly.c        **** *              - uint16_t nonce: 2-byte nonce
 363:poly.c        **** **************************************************/
 364:poly.c        **** #define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
 365:poly.c        **** void poly_uniform(poly *a,
 366:poly.c        ****                   const uint8_t seed[SEEDBYTES],
 367:poly.c        ****                   uint16_t nonce)
 368:poly.c        **** {
 1164              		.loc 1 368 1
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 1088
 1167              		@ frame_needed = 1, uses_anonymous_args = 0
 1168 0000 80B5     		push	{r7, lr}
 1169              	.LCFI80:
 1170              		.cfi_def_cfa_offset 8
 1171              		.cfi_offset 7, -8
 1172              		.cfi_offset 14, -4
 1173 0002 ADF5886D 		sub	sp, sp, #1088
 1174              	.LCFI81:
 1175              		.cfi_def_cfa_offset 1096
 1176 0006 00AF     		add	r7, sp, #0
 1177              	.LCFI82:
 1178              		.cfi_def_cfa_register 7
 1179 0008 07F58863 		add	r3, r7, #1088
 1180 000c A3F23443 		subw	r3, r3, #1076
 1181 0010 1860     		str	r0, [r3]
 1182 0012 07F58863 		add	r3, r7, #1088
 1183 0016 A3F58763 		sub	r3, r3, #1080
 1184 001a 1960     		str	r1, [r3]
 1185 001c 07F58863 		add	r3, r7, #1088
 1186 0020 A3F23A43 		subw	r3, r3, #1082
 1187 0024 1A80     		strh	r2, [r3]	@ movhi
 369:poly.c        ****   unsigned int i, ctr, off;
 370:poly.c        ****   unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 1188              		.loc 1 370 16
 1189 0026 4FF45273 		mov	r3, #840
 1190 002a C7F83434 		str	r3, [r7, #1076]
 371:poly.c        ****   uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2];
 372:poly.c        ****   stream128_state state;
 373:poly.c        **** 
 374:poly.c        ****   stream128_init(&state, seed, nonce);
 1191              		.loc 1 374 3
 1192 002e 07F58863 		add	r3, r7, #1088
 1193 0032 A3F23A43 		subw	r3, r3, #1082
 1194 0036 1A88     		ldrh	r2, [r3]
 1195 0038 07F58863 		add	r3, r7, #1088
 1196 003c A3F58763 		sub	r3, r3, #1080
 1197 0040 07F11000 		add	r0, r7, #16
 1198 0044 1968     		ldr	r1, [r3]
 1199 0046 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_dilithium_shake128_stream_init
 375:poly.c        ****   stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 1200              		.loc 1 375 3
 1201 004a 07F11002 		add	r2, r7, #16
 1202 004e 07F1E403 		add	r3, r7, #228
 1203 0052 0521     		movs	r1, #5
 1204 0054 1846     		mov	r0, r3
 1205 0056 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake128_squeezeblocks
 376:poly.c        **** 
 377:poly.c        ****   ctr = rej_uniform(a->coeffs, N, buf, buflen);
 1206              		.loc 1 377 22
 1207 005a 07F58863 		add	r3, r7, #1088
 1208 005e A3F23443 		subw	r3, r3, #1076
 1209 0062 1868     		ldr	r0, [r3]
 1210              		.loc 1 377 9
 1211 0064 07F1E402 		add	r2, r7, #228
 1212 0068 D7F83434 		ldr	r3, [r7, #1076]
 1213 006c 4FF48071 		mov	r1, #256
 1214 0070 FFF7FEFF 		bl	rej_uniform
 1215 0074 C7F83804 		str	r0, [r7, #1080]
 378:poly.c        **** 
 379:poly.c        ****   while(ctr < N) {
 1216              		.loc 1 379 8
 1217 0078 59E0     		b	.L53
 1218              	.L56:
 380:poly.c        ****     off = buflen % 3;
 1219              		.loc 1 380 9
 1220 007a D7F83424 		ldr	r2, [r7, #1076]
 1221 007e 314B     		ldr	r3, .L57
 1222 0080 A3FB0213 		umull	r1, r3, r3, r2
 1223 0084 5908     		lsrs	r1, r3, #1
 1224 0086 0B46     		mov	r3, r1
 1225 0088 5B00     		lsls	r3, r3, #1
 1226 008a 0B44     		add	r3, r3, r1
 1227 008c D31A     		subs	r3, r2, r3
 1228 008e C7F83034 		str	r3, [r7, #1072]
 381:poly.c        ****     for(i = 0; i < off; ++i)
 1229              		.loc 1 381 11
 1230 0092 0023     		movs	r3, #0
 1231 0094 C7F83C34 		str	r3, [r7, #1084]
 1232              		.loc 1 381 5
 1233 0098 1AE0     		b	.L54
 1234              	.L55:
 382:poly.c        ****       buf[i] = buf[buflen - off + i];
 1235              		.loc 1 382 27 discriminator 3
 1236 009a D7F83424 		ldr	r2, [r7, #1076]
 1237 009e D7F83034 		ldr	r3, [r7, #1072]
 1238 00a2 D21A     		subs	r2, r2, r3
 1239              		.loc 1 382 33 discriminator 3
 1240 00a4 D7F83C34 		ldr	r3, [r7, #1084]
 1241 00a8 1344     		add	r3, r3, r2
 1242              		.loc 1 382 19 discriminator 3
 1243 00aa 07F58862 		add	r2, r7, #1088
 1244 00ae A2F55772 		sub	r2, r2, #860
 1245 00b2 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1246              		.loc 1 382 14 discriminator 3
 1247 00b4 07F58863 		add	r3, r7, #1088
 1248 00b8 A3F55772 		sub	r2, r3, #860
 1249 00bc D7F83C34 		ldr	r3, [r7, #1084]
 1250 00c0 1344     		add	r3, r3, r2
 1251 00c2 0A46     		mov	r2, r1
 1252 00c4 1A70     		strb	r2, [r3]
 381:poly.c        ****     for(i = 0; i < off; ++i)
 1253              		.loc 1 381 25 discriminator 3
 1254 00c6 D7F83C34 		ldr	r3, [r7, #1084]
 1255 00ca 0133     		adds	r3, r3, #1
 1256 00cc C7F83C34 		str	r3, [r7, #1084]
 1257              	.L54:
 381:poly.c        ****     for(i = 0; i < off; ++i)
 1258              		.loc 1 381 5 discriminator 1
 1259 00d0 D7F83C24 		ldr	r2, [r7, #1084]
 1260 00d4 D7F83034 		ldr	r3, [r7, #1072]
 1261 00d8 9A42     		cmp	r2, r3
 1262 00da DED3     		bcc	.L55
 383:poly.c        **** 
 384:poly.c        ****     stream128_squeezeblocks(buf + off, 1, &state);
 1263              		.loc 1 384 5
 1264 00dc 07F1E402 		add	r2, r7, #228
 1265 00e0 D7F83034 		ldr	r3, [r7, #1072]
 1266 00e4 1344     		add	r3, r3, r2
 1267 00e6 07F11002 		add	r2, r7, #16
 1268 00ea 0121     		movs	r1, #1
 1269 00ec 1846     		mov	r0, r3
 1270 00ee FFF7FEFF 		bl	pqcrystals_fips202_ref_shake128_squeezeblocks
 385:poly.c        ****     buflen = STREAM128_BLOCKBYTES + off;
 1271              		.loc 1 385 12
 1272 00f2 D7F83034 		ldr	r3, [r7, #1072]
 1273 00f6 A833     		adds	r3, r3, #168
 1274 00f8 C7F83434 		str	r3, [r7, #1076]
 386:poly.c        ****     ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 1275              		.loc 1 386 24
 1276 00fc 07F58863 		add	r3, r7, #1088
 1277 0100 A3F23443 		subw	r3, r3, #1076
 1278 0104 1A68     		ldr	r2, [r3]
 1279              		.loc 1 386 34
 1280 0106 D7F83834 		ldr	r3, [r7, #1080]
 1281 010a 9B00     		lsls	r3, r3, #2
 1282              		.loc 1 386 12
 1283 010c D018     		adds	r0, r2, r3
 1284 010e D7F83834 		ldr	r3, [r7, #1080]
 1285 0112 C3F58071 		rsb	r1, r3, #256
 1286 0116 07F1E402 		add	r2, r7, #228
 1287 011a D7F83434 		ldr	r3, [r7, #1076]
 1288 011e FFF7FEFF 		bl	rej_uniform
 1289 0122 0246     		mov	r2, r0
 1290              		.loc 1 386 9
 1291 0124 D7F83834 		ldr	r3, [r7, #1080]
 1292 0128 1344     		add	r3, r3, r2
 1293 012a C7F83834 		str	r3, [r7, #1080]
 1294              	.L53:
 379:poly.c        ****     off = buflen % 3;
 1295              		.loc 1 379 8
 1296 012e D7F83834 		ldr	r3, [r7, #1080]
 1297 0132 FF2B     		cmp	r3, #255
 1298 0134 A1D9     		bls	.L56
 387:poly.c        ****   }
 388:poly.c        **** }
 1299              		.loc 1 388 1
 1300 0136 00BF     		nop
 1301 0138 00BF     		nop
 1302 013a 07F58867 		add	r7, r7, #1088
 1303              	.LCFI83:
 1304              		.cfi_def_cfa_offset 8
 1305 013e BD46     		mov	sp, r7
 1306              	.LCFI84:
 1307              		.cfi_def_cfa_register 13
 1308              		@ sp needed
 1309 0140 80BD     		pop	{r7, pc}
 1310              	.L58:
 1311 0142 00BF     		.align	2
 1312              	.L57:
 1313 0144 ABAAAAAA 		.word	-1431655765
 1314              		.cfi_endproc
 1315              	.LFE15:
 1317              		.section	.text.rej_eta,"ax",%progbits
 1318              		.align	1
 1319              		.syntax unified
 1320              		.thumb
 1321              		.thumb_func
 1322              		.fpu softvfp
 1324              	rej_eta:
 1325              	.LFB16:
 389:poly.c        **** 
 390:poly.c        **** /*************************************************
 391:poly.c        **** * Name:        rej_eta
 392:poly.c        **** *
 393:poly.c        **** * Description: Sample uniformly random coefficients in [-ETA, ETA] by
 394:poly.c        **** *              performing rejection sampling on array of random bytes.
 395:poly.c        **** *
 396:poly.c        **** * Arguments:   - int32_t *a: pointer to output array (allocated)
 397:poly.c        **** *              - unsigned int len: number of coefficients to be sampled
 398:poly.c        **** *              - const uint8_t *buf: array of random bytes
 399:poly.c        **** *              - unsigned int buflen: length of array of random bytes
 400:poly.c        **** *
 401:poly.c        **** * Returns number of sampled coefficients. Can be smaller than len if not enough
 402:poly.c        **** * random bytes were given.
 403:poly.c        **** **************************************************/
 404:poly.c        **** static unsigned int rej_eta(int32_t *a,
 405:poly.c        ****                             unsigned int len,
 406:poly.c        ****                             const uint8_t *buf,
 407:poly.c        ****                             unsigned int buflen)
 408:poly.c        **** {
 1326              		.loc 1 408 1
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 32
 1329              		@ frame_needed = 1, uses_anonymous_args = 0
 1330              		@ link register save eliminated.
 1331 0000 80B4     		push	{r7}
 1332              	.LCFI85:
 1333              		.cfi_def_cfa_offset 4
 1334              		.cfi_offset 7, -4
 1335 0002 89B0     		sub	sp, sp, #36
 1336              	.LCFI86:
 1337              		.cfi_def_cfa_offset 40
 1338 0004 00AF     		add	r7, sp, #0
 1339              	.LCFI87:
 1340              		.cfi_def_cfa_register 7
 1341 0006 F860     		str	r0, [r7, #12]
 1342 0008 B960     		str	r1, [r7, #8]
 1343 000a 7A60     		str	r2, [r7, #4]
 1344 000c 3B60     		str	r3, [r7]
 409:poly.c        ****   unsigned int ctr, pos;
 410:poly.c        ****   uint32_t t0, t1;
 411:poly.c        ****   DBENCH_START();
 412:poly.c        **** 
 413:poly.c        ****   ctr = pos = 0;
 1345              		.loc 1 413 13
 1346 000e 0023     		movs	r3, #0
 1347 0010 BB61     		str	r3, [r7, #24]
 1348              		.loc 1 413 7
 1349 0012 BB69     		ldr	r3, [r7, #24]
 1350 0014 FB61     		str	r3, [r7, #28]
 414:poly.c        ****   while(ctr < len && pos < buflen) {
 1351              		.loc 1 414 8
 1352 0016 45E0     		b	.L60
 1353              	.L63:
 415:poly.c        ****     t0 = buf[pos] & 0x0F;
 1354              		.loc 1 415 13
 1355 0018 7A68     		ldr	r2, [r7, #4]
 1356 001a BB69     		ldr	r3, [r7, #24]
 1357 001c 1344     		add	r3, r3, r2
 1358 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1359              		.loc 1 415 8
 1360 0020 03F00F03 		and	r3, r3, #15
 1361 0024 7B61     		str	r3, [r7, #20]
 416:poly.c        ****     t1 = buf[pos++] >> 4;
 1362              		.loc 1 416 17
 1363 0026 BB69     		ldr	r3, [r7, #24]
 1364 0028 5A1C     		adds	r2, r3, #1
 1365 002a BA61     		str	r2, [r7, #24]
 1366              		.loc 1 416 13
 1367 002c 7A68     		ldr	r2, [r7, #4]
 1368 002e 1344     		add	r3, r3, r2
 1369 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1370              		.loc 1 416 21
 1371 0032 1B09     		lsrs	r3, r3, #4
 1372 0034 DBB2     		uxtb	r3, r3
 1373              		.loc 1 416 8
 1374 0036 3B61     		str	r3, [r7, #16]
 417:poly.c        **** 
 418:poly.c        **** #if ETA == 2
 419:poly.c        ****     if(t0 < 15) {
 1375              		.loc 1 419 7
 1376 0038 7B69     		ldr	r3, [r7, #20]
 1377 003a 0E2B     		cmp	r3, #14
 1378 003c 15D8     		bhi	.L61
 420:poly.c        ****       t0 = t0 - (205*t0 >> 10)*5;
 1379              		.loc 1 420 21
 1380 003e 7B69     		ldr	r3, [r7, #20]
 1381 0040 CD22     		movs	r2, #205
 1382 0042 02FB03F3 		mul	r3, r2, r3
 1383              		.loc 1 420 25
 1384 0046 9A0A     		lsrs	r2, r3, #10
 1385              		.loc 1 420 31
 1386 0048 1346     		mov	r3, r2
 1387 004a 9B00     		lsls	r3, r3, #2
 1388 004c 1344     		add	r3, r3, r2
 1389              		.loc 1 420 10
 1390 004e 7A69     		ldr	r2, [r7, #20]
 1391 0050 D31A     		subs	r3, r2, r3
 1392 0052 7B61     		str	r3, [r7, #20]
 421:poly.c        ****       a[ctr++] = 2 - t0;
 1393              		.loc 1 421 20
 1394 0054 7B69     		ldr	r3, [r7, #20]
 1395 0056 C3F10201 		rsb	r1, r3, #2
 1396              		.loc 1 421 12
 1397 005a FB69     		ldr	r3, [r7, #28]
 1398 005c 5A1C     		adds	r2, r3, #1
 1399 005e FA61     		str	r2, [r7, #28]
 1400              		.loc 1 421 8
 1401 0060 9B00     		lsls	r3, r3, #2
 1402 0062 FA68     		ldr	r2, [r7, #12]
 1403 0064 1344     		add	r3, r3, r2
 1404              		.loc 1 421 20
 1405 0066 0A46     		mov	r2, r1
 1406              		.loc 1 421 16
 1407 0068 1A60     		str	r2, [r3]
 1408              	.L61:
 422:poly.c        ****     }
 423:poly.c        ****     if(t1 < 15 && ctr < len) {
 1409              		.loc 1 423 7
 1410 006a 3B69     		ldr	r3, [r7, #16]
 1411 006c 0E2B     		cmp	r3, #14
 1412 006e 19D8     		bhi	.L60
 1413              		.loc 1 423 16 discriminator 1
 1414 0070 FA69     		ldr	r2, [r7, #28]
 1415 0072 BB68     		ldr	r3, [r7, #8]
 1416 0074 9A42     		cmp	r2, r3
 1417 0076 15D2     		bcs	.L60
 424:poly.c        ****       t1 = t1 - (205*t1 >> 10)*5;
 1418              		.loc 1 424 21
 1419 0078 3B69     		ldr	r3, [r7, #16]
 1420 007a CD22     		movs	r2, #205
 1421 007c 02FB03F3 		mul	r3, r2, r3
 1422              		.loc 1 424 25
 1423 0080 9A0A     		lsrs	r2, r3, #10
 1424              		.loc 1 424 31
 1425 0082 1346     		mov	r3, r2
 1426 0084 9B00     		lsls	r3, r3, #2
 1427 0086 1344     		add	r3, r3, r2
 1428              		.loc 1 424 10
 1429 0088 3A69     		ldr	r2, [r7, #16]
 1430 008a D31A     		subs	r3, r2, r3
 1431 008c 3B61     		str	r3, [r7, #16]
 425:poly.c        ****       a[ctr++] = 2 - t1;
 1432              		.loc 1 425 20
 1433 008e 3B69     		ldr	r3, [r7, #16]
 1434 0090 C3F10201 		rsb	r1, r3, #2
 1435              		.loc 1 425 12
 1436 0094 FB69     		ldr	r3, [r7, #28]
 1437 0096 5A1C     		adds	r2, r3, #1
 1438 0098 FA61     		str	r2, [r7, #28]
 1439              		.loc 1 425 8
 1440 009a 9B00     		lsls	r3, r3, #2
 1441 009c FA68     		ldr	r2, [r7, #12]
 1442 009e 1344     		add	r3, r3, r2
 1443              		.loc 1 425 20
 1444 00a0 0A46     		mov	r2, r1
 1445              		.loc 1 425 16
 1446 00a2 1A60     		str	r2, [r3]
 1447              	.L60:
 414:poly.c        ****     t0 = buf[pos] & 0x0F;
 1448              		.loc 1 414 8
 1449 00a4 FA69     		ldr	r2, [r7, #28]
 1450 00a6 BB68     		ldr	r3, [r7, #8]
 1451 00a8 9A42     		cmp	r2, r3
 1452 00aa 03D2     		bcs	.L62
 414:poly.c        ****     t0 = buf[pos] & 0x0F;
 1453              		.loc 1 414 19 discriminator 1
 1454 00ac BA69     		ldr	r2, [r7, #24]
 1455 00ae 3B68     		ldr	r3, [r7]
 1456 00b0 9A42     		cmp	r2, r3
 1457 00b2 B1D3     		bcc	.L63
 1458              	.L62:
 426:poly.c        ****     }
 427:poly.c        **** #elif ETA == 4
 428:poly.c        ****     if(t0 < 9)
 429:poly.c        ****       a[ctr++] = 4 - t0;
 430:poly.c        ****     if(t1 < 9 && ctr < len)
 431:poly.c        ****       a[ctr++] = 4 - t1;
 432:poly.c        **** #endif
 433:poly.c        ****   }
 434:poly.c        **** 
 435:poly.c        ****   DBENCH_STOP(*tsample);
 436:poly.c        ****   return ctr;
 1459              		.loc 1 436 10
 1460 00b4 FB69     		ldr	r3, [r7, #28]
 437:poly.c        **** }
 1461              		.loc 1 437 1
 1462 00b6 1846     		mov	r0, r3
 1463 00b8 2437     		adds	r7, r7, #36
 1464              	.LCFI88:
 1465              		.cfi_def_cfa_offset 4
 1466 00ba BD46     		mov	sp, r7
 1467              	.LCFI89:
 1468              		.cfi_def_cfa_register 13
 1469              		@ sp needed
 1470 00bc 80BC     		pop	{r7}
 1471              	.LCFI90:
 1472              		.cfi_restore 7
 1473              		.cfi_def_cfa_offset 0
 1474 00be 7047     		bx	lr
 1475              		.cfi_endproc
 1476              	.LFE16:
 1478              		.section	.text.pqcrystals_dilithium2_ref_poly_uniform_eta,"ax",%progbits
 1479              		.align	1
 1480              		.global	pqcrystals_dilithium2_ref_poly_uniform_eta
 1481              		.syntax unified
 1482              		.thumb
 1483              		.thumb_func
 1484              		.fpu softvfp
 1486              	pqcrystals_dilithium2_ref_poly_uniform_eta:
 1487              	.LFB17:
 438:poly.c        **** 
 439:poly.c        **** /*************************************************
 440:poly.c        **** * Name:        poly_uniform_eta
 441:poly.c        **** *
 442:poly.c        **** * Description: Sample polynomial with uniformly random coefficients
 443:poly.c        **** *              in [-ETA,ETA] by performing rejection sampling on the
 444:poly.c        **** *              output stream from SHAKE256(seed|nonce) or AES256CTR(seed,nonce).
 445:poly.c        **** *
 446:poly.c        **** * Arguments:   - poly *a: pointer to output polynomial
 447:poly.c        **** *              - const uint8_t seed[]: byte array with seed of length SEEDBYTES
 448:poly.c        **** *              - uint16_t nonce: 2-byte nonce
 449:poly.c        **** **************************************************/
 450:poly.c        **** #if ETA == 2
 451:poly.c        **** #define POLY_UNIFORM_ETA_NBLOCKS ((136 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
 452:poly.c        **** #elif ETA == 4
 453:poly.c        **** #define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
 454:poly.c        **** #endif
 455:poly.c        **** void poly_uniform_eta(poly *a,
 456:poly.c        ****                       const uint8_t seed[SEEDBYTES],
 457:poly.c        ****                       uint16_t nonce)
 458:poly.c        **** {
 1488              		.loc 1 458 1
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 400
 1491              		@ frame_needed = 1, uses_anonymous_args = 0
 1492 0000 80B5     		push	{r7, lr}
 1493              	.LCFI91:
 1494              		.cfi_def_cfa_offset 8
 1495              		.cfi_offset 7, -8
 1496              		.cfi_offset 14, -4
 1497 0002 E4B0     		sub	sp, sp, #400
 1498              	.LCFI92:
 1499              		.cfi_def_cfa_offset 408
 1500 0004 00AF     		add	r7, sp, #0
 1501              	.LCFI93:
 1502              		.cfi_def_cfa_register 7
 1503 0006 07F5C873 		add	r3, r7, #400
 1504 000a A3F5C273 		sub	r3, r3, #388
 1505 000e 1860     		str	r0, [r3]
 1506 0010 07F5C873 		add	r3, r7, #400
 1507 0014 A3F5C473 		sub	r3, r3, #392
 1508 0018 1960     		str	r1, [r3]
 1509 001a 07F5C873 		add	r3, r7, #400
 1510 001e A3F5C573 		sub	r3, r3, #394
 1511 0022 1A80     		strh	r2, [r3]	@ movhi
 459:poly.c        ****   unsigned int ctr;
 460:poly.c        ****   unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES;
 1512              		.loc 1 460 16
 1513 0024 A823     		movs	r3, #168
 1514 0026 C7F88831 		str	r3, [r7, #392]
 461:poly.c        ****   uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES];
 462:poly.c        ****   stream128_state state;
 463:poly.c        **** 
 464:poly.c        ****   stream128_init(&state, seed, nonce);
 1515              		.loc 1 464 3
 1516 002a 07F5C873 		add	r3, r7, #400
 1517 002e A3F5C573 		sub	r3, r3, #394
 1518 0032 1A88     		ldrh	r2, [r3]
 1519 0034 07F5C873 		add	r3, r7, #400
 1520 0038 A3F5C473 		sub	r3, r3, #392
 1521 003c 07F11000 		add	r0, r7, #16
 1522 0040 1968     		ldr	r1, [r3]
 1523 0042 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_dilithium_shake128_stream_init
 465:poly.c        ****   stream128_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 1524              		.loc 1 465 3
 1525 0046 07F11002 		add	r2, r7, #16
 1526 004a 07F1E003 		add	r3, r7, #224
 1527 004e 0121     		movs	r1, #1
 1528 0050 1846     		mov	r0, r3
 1529 0052 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake128_squeezeblocks
 466:poly.c        **** 
 467:poly.c        ****   ctr = rej_eta(a->coeffs, N, buf, buflen);
 1530              		.loc 1 467 18
 1531 0056 07F5C873 		add	r3, r7, #400
 1532 005a A3F5C273 		sub	r3, r3, #388
 1533 005e 1868     		ldr	r0, [r3]
 1534              		.loc 1 467 9
 1535 0060 07F1E002 		add	r2, r7, #224
 1536 0064 D7F88831 		ldr	r3, [r7, #392]
 1537 0068 4FF48071 		mov	r1, #256
 1538 006c FFF7FEFF 		bl	rej_eta
 1539 0070 C7F88C01 		str	r0, [r7, #396]
 468:poly.c        **** 
 469:poly.c        ****   while(ctr < N) {
 1540              		.loc 1 469 8
 1541 0074 1FE0     		b	.L66
 1542              	.L67:
 470:poly.c        ****     stream128_squeezeblocks(buf, 1, &state);
 1543              		.loc 1 470 5
 1544 0076 07F11002 		add	r2, r7, #16
 1545 007a 07F1E003 		add	r3, r7, #224
 1546 007e 0121     		movs	r1, #1
 1547 0080 1846     		mov	r0, r3
 1548 0082 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake128_squeezeblocks
 471:poly.c        ****     ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM128_BLOCKBYTES);
 1549              		.loc 1 471 20
 1550 0086 07F5C873 		add	r3, r7, #400
 1551 008a A3F5C273 		sub	r3, r3, #388
 1552 008e 1A68     		ldr	r2, [r3]
 1553              		.loc 1 471 30
 1554 0090 D7F88C31 		ldr	r3, [r7, #396]
 1555 0094 9B00     		lsls	r3, r3, #2
 1556              		.loc 1 471 12
 1557 0096 D018     		adds	r0, r2, r3
 1558 0098 D7F88C31 		ldr	r3, [r7, #396]
 1559 009c C3F58071 		rsb	r1, r3, #256
 1560 00a0 07F1E002 		add	r2, r7, #224
 1561 00a4 A823     		movs	r3, #168
 1562 00a6 FFF7FEFF 		bl	rej_eta
 1563 00aa 0246     		mov	r2, r0
 1564              		.loc 1 471 9
 1565 00ac D7F88C31 		ldr	r3, [r7, #396]
 1566 00b0 1344     		add	r3, r3, r2
 1567 00b2 C7F88C31 		str	r3, [r7, #396]
 1568              	.L66:
 469:poly.c        ****     stream128_squeezeblocks(buf, 1, &state);
 1569              		.loc 1 469 8
 1570 00b6 D7F88C31 		ldr	r3, [r7, #396]
 1571 00ba FF2B     		cmp	r3, #255
 1572 00bc DBD9     		bls	.L67
 472:poly.c        ****   }
 473:poly.c        **** }
 1573              		.loc 1 473 1
 1574 00be 00BF     		nop
 1575 00c0 00BF     		nop
 1576 00c2 07F5C877 		add	r7, r7, #400
 1577              	.LCFI94:
 1578              		.cfi_def_cfa_offset 8
 1579 00c6 BD46     		mov	sp, r7
 1580              	.LCFI95:
 1581              		.cfi_def_cfa_register 13
 1582              		@ sp needed
 1583 00c8 80BD     		pop	{r7, pc}
 1584              		.cfi_endproc
 1585              	.LFE17:
 1587              		.section	.text.pqcrystals_dilithium2_ref_poly_uniform_gamma1,"ax",%progbits
 1588              		.align	1
 1589              		.global	pqcrystals_dilithium2_ref_poly_uniform_gamma1
 1590              		.syntax unified
 1591              		.thumb
 1592              		.thumb_func
 1593              		.fpu softvfp
 1595              	pqcrystals_dilithium2_ref_poly_uniform_gamma1:
 1596              	.LFB18:
 474:poly.c        **** 
 475:poly.c        **** /*************************************************
 476:poly.c        **** * Name:        poly_uniform_gamma1m1
 477:poly.c        **** *
 478:poly.c        **** * Description: Sample polynomial with uniformly random coefficients
 479:poly.c        **** *              in [-(GAMMA1 - 1), GAMMA1] by unpacking output stream
 480:poly.c        **** *              of SHAKE256(seed|nonce) or AES256CTR(seed,nonce).
 481:poly.c        **** *
 482:poly.c        **** * Arguments:   - poly *a: pointer to output polynomial
 483:poly.c        **** *              - const uint8_t seed[]: byte array with seed of length CRHBYTES
 484:poly.c        **** *              - uint16_t nonce: 16-bit nonce
 485:poly.c        **** **************************************************/
 486:poly.c        **** #if GAMMA1 == (1 << 17)
 487:poly.c        **** #define POLY_UNIFORM_GAMMA1_NBLOCKS ((576 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
 488:poly.c        **** #elif GAMMA1 == (1 << 19)
 489:poly.c        **** #define POLY_UNIFORM_GAMMA1_NBLOCKS ((640 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
 490:poly.c        **** #endif
 491:poly.c        **** void poly_uniform_gamma1(poly *a,
 492:poly.c        ****                          const uint8_t seed[CRHBYTES],
 493:poly.c        ****                          uint16_t nonce)
 494:poly.c        **** {
 1597              		.loc 1 494 1
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 904
 1600              		@ frame_needed = 1, uses_anonymous_args = 0
 1601 0000 80B5     		push	{r7, lr}
 1602              	.LCFI96:
 1603              		.cfi_def_cfa_offset 8
 1604              		.cfi_offset 7, -8
 1605              		.cfi_offset 14, -4
 1606 0002 ADF5627D 		sub	sp, sp, #904
 1607              	.LCFI97:
 1608              		.cfi_def_cfa_offset 912
 1609 0006 00AF     		add	r7, sp, #0
 1610              	.LCFI98:
 1611              		.cfi_def_cfa_register 7
 1612 0008 07F56273 		add	r3, r7, #904
 1613 000c A3F55F73 		sub	r3, r3, #892
 1614 0010 1860     		str	r0, [r3]
 1615 0012 07F56273 		add	r3, r7, #904
 1616 0016 A3F56073 		sub	r3, r3, #896
 1617 001a 1960     		str	r1, [r3]
 1618 001c 07F56273 		add	r3, r7, #904
 1619 0020 A3F28233 		subw	r3, r3, #898
 1620 0024 1A80     		strh	r2, [r3]	@ movhi
 495:poly.c        ****   uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES];
 496:poly.c        ****   stream256_state state;
 497:poly.c        **** 
 498:poly.c        ****   stream256_init(&state, seed, nonce);
 1621              		.loc 1 498 3
 1622 0026 07F56273 		add	r3, r7, #904
 1623 002a A3F28233 		subw	r3, r3, #898
 1624 002e 1A88     		ldrh	r2, [r3]
 1625 0030 07F56273 		add	r3, r7, #904
 1626 0034 A3F56073 		sub	r3, r3, #896
 1627 0038 07F11000 		add	r0, r7, #16
 1628 003c 1968     		ldr	r1, [r3]
 1629 003e FFF7FEFF 		bl	pqcrystals_dilithium2_ref_dilithium_shake256_stream_init
 499:poly.c        ****   stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 1630              		.loc 1 499 3
 1631 0042 07F11002 		add	r2, r7, #16
 1632 0046 07F1E003 		add	r3, r7, #224
 1633 004a 0521     		movs	r1, #5
 1634 004c 1846     		mov	r0, r3
 1635 004e FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_squeezeblocks
 500:poly.c        ****   trigger_high();
 1636              		.loc 1 500 3
 1637 0052 FFF7FEFF 		bl	trigger_high
 501:poly.c        ****   polyz_unpack(a, buf);
 1638              		.loc 1 501 3
 1639 0056 07F1E002 		add	r2, r7, #224
 1640 005a 07F56273 		add	r3, r7, #904
 1641 005e A3F55F73 		sub	r3, r3, #892
 1642 0062 1146     		mov	r1, r2
 1643 0064 1868     		ldr	r0, [r3]
 1644 0066 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_polyz_unpack
 502:poly.c        ****   trigger_low();
 1645              		.loc 1 502 3
 1646 006a FFF7FEFF 		bl	trigger_low
 503:poly.c        **** }
 1647              		.loc 1 503 1
 1648 006e 00BF     		nop
 1649 0070 07F56277 		add	r7, r7, #904
 1650              	.LCFI99:
 1651              		.cfi_def_cfa_offset 8
 1652 0074 BD46     		mov	sp, r7
 1653              	.LCFI100:
 1654              		.cfi_def_cfa_register 13
 1655              		@ sp needed
 1656 0076 80BD     		pop	{r7, pc}
 1657              		.cfi_endproc
 1658              	.LFE18:
 1660              		.section	.text.pqcrystals_dilithium2_ref_poly_challenge,"ax",%progbits
 1661              		.align	1
 1662              		.global	pqcrystals_dilithium2_ref_poly_challenge
 1663              		.syntax unified
 1664              		.thumb
 1665              		.thumb_func
 1666              		.fpu softvfp
 1668              	pqcrystals_dilithium2_ref_poly_challenge:
 1669              	.LFB19:
 504:poly.c        **** 
 505:poly.c        **** /*************************************************
 506:poly.c        **** * Name:        challenge
 507:poly.c        **** *
 508:poly.c        **** * Description: Implementation of H. Samples polynomial with TAU nonzero
 509:poly.c        **** *              coefficients in {-1,1} using the output stream of
 510:poly.c        **** *              SHAKE256(seed).
 511:poly.c        **** *
 512:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
 513:poly.c        **** *              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
 514:poly.c        **** **************************************************/
 515:poly.c        **** void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 1670              		.loc 1 515 61
 1671              		.cfi_startproc
 1672              		@ args = 0, pretend = 0, frame = 376
 1673              		@ frame_needed = 1, uses_anonymous_args = 0
 1674 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 1675              	.LCFI101:
 1676              		.cfi_def_cfa_offset 32
 1677              		.cfi_offset 4, -32
 1678              		.cfi_offset 5, -28
 1679              		.cfi_offset 7, -24
 1680              		.cfi_offset 8, -20
 1681              		.cfi_offset 9, -16
 1682              		.cfi_offset 10, -12
 1683              		.cfi_offset 11, -8
 1684              		.cfi_offset 14, -4
 1685 0004 DEB0     		sub	sp, sp, #376
 1686              	.LCFI102:
 1687              		.cfi_def_cfa_offset 408
 1688 0006 00AF     		add	r7, sp, #0
 1689              	.LCFI103:
 1690              		.cfi_def_cfa_register 7
 1691 0008 07F5BC73 		add	r3, r7, #376
 1692 000c A3F5BA73 		sub	r3, r3, #372
 1693 0010 1860     		str	r0, [r3]
 1694 0012 07F5BC73 		add	r3, r7, #376
 1695 0016 A3F5BC73 		sub	r3, r3, #376
 1696 001a 1960     		str	r1, [r3]
 516:poly.c        ****   unsigned int i, b, pos;
 517:poly.c        ****   uint64_t signs;
 518:poly.c        ****   uint8_t buf[SHAKE256_RATE];
 519:poly.c        ****   keccak_state state;
 520:poly.c        **** 
 521:poly.c        ****   shake256_init(&state);
 1697              		.loc 1 521 3
 1698 001c 07F10803 		add	r3, r7, #8
 1699 0020 1846     		mov	r0, r3
 1700 0022 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_init
 522:poly.c        ****   shake256_absorb(&state, seed, SEEDBYTES);
 1701              		.loc 1 522 3
 1702 0026 07F5BC73 		add	r3, r7, #376
 1703 002a A3F5BC73 		sub	r3, r3, #376
 1704 002e 07F10800 		add	r0, r7, #8
 1705 0032 2022     		movs	r2, #32
 1706 0034 1968     		ldr	r1, [r3]
 1707 0036 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_absorb
 523:poly.c        ****   shake256_finalize(&state);
 1708              		.loc 1 523 3
 1709 003a 07F10803 		add	r3, r7, #8
 1710 003e 1846     		mov	r0, r3
 1711 0040 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_finalize
 524:poly.c        ****   shake256_squeezeblocks(buf, 1, &state);
 1712              		.loc 1 524 3
 1713 0044 07F10802 		add	r2, r7, #8
 1714 0048 07F1DC03 		add	r3, r7, #220
 1715 004c 0121     		movs	r1, #1
 1716 004e 1846     		mov	r0, r3
 1717 0050 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_squeezeblocks
 525:poly.c        **** 
 526:poly.c        ****   signs = 0;
 1718              		.loc 1 526 9
 1719 0054 4FF00002 		mov	r2, #0
 1720 0058 4FF00003 		mov	r3, #0
 1721 005c C7E95A23 		strd	r2, [r7, #360]
 527:poly.c        ****   for(i = 0; i < 8; ++i)
 1722              		.loc 1 527 9
 1723 0060 0023     		movs	r3, #0
 1724 0062 C7F87431 		str	r3, [r7, #372]
 1725              		.loc 1 527 3
 1726 0066 27E0     		b	.L70
 1727              	.L71:
 528:poly.c        ****     signs |= (uint64_t)buf[i] << 8*i;
 1728              		.loc 1 528 27 discriminator 3
 1729 0068 07F1DC02 		add	r2, r7, #220
 1730 006c D7F87431 		ldr	r3, [r7, #372]
 1731 0070 1344     		add	r3, r3, r2
 1732 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1733              		.loc 1 528 14 discriminator 3
 1734 0074 DBB2     		uxtb	r3, r3
 1735 0076 0022     		movs	r2, #0
 1736 0078 9846     		mov	r8, r3
 1737 007a 9146     		mov	r9, r2
 1738              		.loc 1 528 35 discriminator 3
 1739 007c D7F87431 		ldr	r3, [r7, #372]
 1740 0080 DB00     		lsls	r3, r3, #3
 1741              		.loc 1 528 31 discriminator 3
 1742 0082 A3F12001 		sub	r1, r3, #32
 1743 0086 C3F12002 		rsb	r2, r3, #32
 1744 008a 09FA03F5 		lsl	r5, r9, r3
 1745 008e 08FA01F1 		lsl	r1, r8, r1
 1746 0092 0D43     		orrs	r5, r5, r1
 1747 0094 28FA02F2 		lsr	r2, r8, r2
 1748 0098 1543     		orrs	r5, r5, r2
 1749 009a 08FA03F4 		lsl	r4, r8, r3
 1750              		.loc 1 528 11 discriminator 3
 1751 009e D7E95A23 		ldrd	r2, [r7, #360]
 1752 00a2 42EA040A 		orr	r10, r2, r4
 1753 00a6 43EA050B 		orr	fp, r3, r5
 1754 00aa C7E95AAB 		strd	r10, [r7, #360]
 527:poly.c        ****   for(i = 0; i < 8; ++i)
 1755              		.loc 1 527 21 discriminator 3
 1756 00ae D7F87431 		ldr	r3, [r7, #372]
 1757 00b2 0133     		adds	r3, r3, #1
 1758 00b4 C7F87431 		str	r3, [r7, #372]
 1759              	.L70:
 527:poly.c        ****   for(i = 0; i < 8; ++i)
 1760              		.loc 1 527 3 discriminator 1
 1761 00b8 D7F87431 		ldr	r3, [r7, #372]
 1762 00bc 072B     		cmp	r3, #7
 1763 00be D3D9     		bls	.L71
 529:poly.c        ****   pos = 8;
 1764              		.loc 1 529 7
 1765 00c0 0823     		movs	r3, #8
 1766 00c2 C7F87031 		str	r3, [r7, #368]
 530:poly.c        **** 
 531:poly.c        ****   for(i = 0; i < N; ++i)
 1767              		.loc 1 531 9
 1768 00c6 0023     		movs	r3, #0
 1769 00c8 C7F87431 		str	r3, [r7, #372]
 1770              		.loc 1 531 3
 1771 00cc 0EE0     		b	.L72
 1772              	.L73:
 532:poly.c        ****     c->coeffs[i] = 0;
 1773              		.loc 1 532 18 discriminator 3
 1774 00ce 07F5BC73 		add	r3, r7, #376
 1775 00d2 A3F5BA73 		sub	r3, r3, #372
 1776 00d6 1B68     		ldr	r3, [r3]
 1777 00d8 D7F87421 		ldr	r2, [r7, #372]
 1778 00dc 0021     		movs	r1, #0
 1779 00de 43F82210 		str	r1, [r3, r2, lsl #2]
 531:poly.c        ****     c->coeffs[i] = 0;
 1780              		.loc 1 531 21 discriminator 3
 1781 00e2 D7F87431 		ldr	r3, [r7, #372]
 1782 00e6 0133     		adds	r3, r3, #1
 1783 00e8 C7F87431 		str	r3, [r7, #372]
 1784              	.L72:
 531:poly.c        ****     c->coeffs[i] = 0;
 1785              		.loc 1 531 3 discriminator 1
 1786 00ec D7F87431 		ldr	r3, [r7, #372]
 1787 00f0 FF2B     		cmp	r3, #255
 1788 00f2 ECD9     		bls	.L73
 533:poly.c        ****   for(i = N-TAU; i < N; ++i) {
 1789              		.loc 1 533 9
 1790 00f4 D923     		movs	r3, #217
 1791 00f6 C7F87431 		str	r3, [r7, #372]
 1792              		.loc 1 533 3
 1793 00fa 54E0     		b	.L74
 1794              	.L76:
 534:poly.c        ****     do {
 535:poly.c        ****       if(pos >= SHAKE256_RATE) {
 1795              		.loc 1 535 9
 1796 00fc D7F87031 		ldr	r3, [r7, #368]
 1797 0100 872B     		cmp	r3, #135
 1798 0102 0AD9     		bls	.L75
 536:poly.c        ****         shake256_squeezeblocks(buf, 1, &state);
 1799              		.loc 1 536 9
 1800 0104 07F10802 		add	r2, r7, #8
 1801 0108 07F1DC03 		add	r3, r7, #220
 1802 010c 0121     		movs	r1, #1
 1803 010e 1846     		mov	r0, r3
 1804 0110 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_squeezeblocks
 537:poly.c        ****         pos = 0;
 1805              		.loc 1 537 13
 1806 0114 0023     		movs	r3, #0
 1807 0116 C7F87031 		str	r3, [r7, #368]
 1808              	.L75:
 538:poly.c        ****       }
 539:poly.c        **** 
 540:poly.c        ****       b = buf[pos++];
 1809              		.loc 1 540 18
 1810 011a D7F87031 		ldr	r3, [r7, #368]
 1811 011e 5A1C     		adds	r2, r3, #1
 1812 0120 C7F87021 		str	r2, [r7, #368]
 1813              		.loc 1 540 14
 1814 0124 07F5BC72 		add	r2, r7, #376
 1815 0128 1344     		add	r3, r3, r2
 1816 012a 13F89C3C 		ldrb	r3, [r3, #-156]	@ zero_extendqisi2
 1817              		.loc 1 540 9
 1818 012e C7F86431 		str	r3, [r7, #356]
 541:poly.c        ****     } while(b > i);
 1819              		.loc 1 541 5
 1820 0132 D7F86421 		ldr	r2, [r7, #356]
 1821 0136 D7F87431 		ldr	r3, [r7, #372]
 1822 013a 9A42     		cmp	r2, r3
 1823 013c DED8     		bhi	.L76
 542:poly.c        **** 
 543:poly.c        ****     c->coeffs[i] = c->coeffs[b];
 1824              		.loc 1 543 29 discriminator 2
 1825 013e 07F5BC73 		add	r3, r7, #376
 1826 0142 A3F5BA73 		sub	r3, r3, #372
 1827 0146 1B68     		ldr	r3, [r3]
 1828 0148 D7F86421 		ldr	r2, [r7, #356]
 1829 014c 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1830              		.loc 1 543 18 discriminator 2
 1831 0150 07F5BC73 		add	r3, r7, #376
 1832 0154 A3F5BA73 		sub	r3, r3, #372
 1833 0158 1B68     		ldr	r3, [r3]
 1834 015a D7F87421 		ldr	r2, [r7, #372]
 1835 015e 43F82210 		str	r1, [r3, r2, lsl #2]
 544:poly.c        ****     c->coeffs[b] = 1 - 2*(signs & 1);
 1836              		.loc 1 544 22 discriminator 2
 1837 0162 D7F86831 		ldr	r3, [r7, #360]
 1838 0166 03F00103 		and	r3, r3, #1
 1839 016a 5B00     		lsls	r3, r3, #1
 1840 016c C3F10103 		rsb	r3, r3, #1
 1841 0170 1946     		mov	r1, r3
 1842              		.loc 1 544 18 discriminator 2
 1843 0172 07F5BC73 		add	r3, r7, #376
 1844 0176 A3F5BA73 		sub	r3, r3, #372
 1845 017a 1B68     		ldr	r3, [r3]
 1846 017c D7F86421 		ldr	r2, [r7, #356]
 1847 0180 43F82210 		str	r1, [r3, r2, lsl #2]
 545:poly.c        ****     signs >>= 1;
 1848              		.loc 1 545 11 discriminator 2
 1849 0184 D7E95A01 		ldrd	r0, [r7, #360]
 1850 0188 4FF00002 		mov	r2, #0
 1851 018c 4FF00003 		mov	r3, #0
 1852 0190 4208     		lsrs	r2, r0, #1
 1853 0192 42EAC172 		orr	r2, r2, r1, lsl #31
 1854 0196 4B08     		lsrs	r3, r1, #1
 1855 0198 C7E95A23 		strd	r2, [r7, #360]
 533:poly.c        ****     do {
 1856              		.loc 1 533 25 discriminator 2
 1857 019c D7F87431 		ldr	r3, [r7, #372]
 1858 01a0 0133     		adds	r3, r3, #1
 1859 01a2 C7F87431 		str	r3, [r7, #372]
 1860              	.L74:
 533:poly.c        ****     do {
 1861              		.loc 1 533 3 discriminator 1
 1862 01a6 D7F87431 		ldr	r3, [r7, #372]
 1863 01aa FF2B     		cmp	r3, #255
 1864 01ac A6D9     		bls	.L76
 546:poly.c        ****   }
 547:poly.c        **** }
 1865              		.loc 1 547 1
 1866 01ae 00BF     		nop
 1867 01b0 00BF     		nop
 1868 01b2 07F5BC77 		add	r7, r7, #376
 1869              	.LCFI104:
 1870              		.cfi_def_cfa_offset 32
 1871 01b6 BD46     		mov	sp, r7
 1872              	.LCFI105:
 1873              		.cfi_def_cfa_register 13
 1874              		@ sp needed
 1875 01b8 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 1876              		.cfi_endproc
 1877              	.LFE19:
 1879              		.section	.text.pqcrystals_dilithium2_ref_polyeta_pack,"ax",%progbits
 1880              		.align	1
 1881              		.global	pqcrystals_dilithium2_ref_polyeta_pack
 1882              		.syntax unified
 1883              		.thumb
 1884              		.thumb_func
 1885              		.fpu softvfp
 1887              	pqcrystals_dilithium2_ref_polyeta_pack:
 1888              	.LFB20:
 548:poly.c        **** 
 549:poly.c        **** /*************************************************
 550:poly.c        **** * Name:        polyeta_pack
 551:poly.c        **** *
 552:poly.c        **** * Description: Bit-pack polynomial with coefficients in [-ETA,ETA].
 553:poly.c        **** *
 554:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 555:poly.c        **** *                            POLYETA_PACKEDBYTES bytes
 556:poly.c        **** *              - const poly *a: pointer to input polynomial
 557:poly.c        **** **************************************************/
 558:poly.c        **** void polyeta_pack(uint8_t *r, const poly *a) {
 1889              		.loc 1 558 46
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 24
 1892              		@ frame_needed = 1, uses_anonymous_args = 0
 1893              		@ link register save eliminated.
 1894 0000 80B4     		push	{r7}
 1895              	.LCFI106:
 1896              		.cfi_def_cfa_offset 4
 1897              		.cfi_offset 7, -4
 1898 0002 87B0     		sub	sp, sp, #28
 1899              	.LCFI107:
 1900              		.cfi_def_cfa_offset 32
 1901 0004 00AF     		add	r7, sp, #0
 1902              	.LCFI108:
 1903              		.cfi_def_cfa_register 7
 1904 0006 7860     		str	r0, [r7, #4]
 1905 0008 3960     		str	r1, [r7]
 559:poly.c        ****   unsigned int i;
 560:poly.c        ****   uint8_t t[8];
 561:poly.c        ****   DBENCH_START();
 562:poly.c        **** 
 563:poly.c        **** #if ETA == 2
 564:poly.c        ****   for(i = 0; i < N/8; ++i) {
 1906              		.loc 1 564 9
 1907 000a 0023     		movs	r3, #0
 1908 000c 7B61     		str	r3, [r7, #20]
 1909              		.loc 1 564 3
 1910 000e A0E0     		b	.L78
 1911              	.L79:
 565:poly.c        ****     t[0] = ETA - a->coeffs[8*i+0];
 1912              		.loc 1 565 31 discriminator 3
 1913 0010 7B69     		ldr	r3, [r7, #20]
 1914 0012 DA00     		lsls	r2, r3, #3
 1915              		.loc 1 565 27 discriminator 3
 1916 0014 3B68     		ldr	r3, [r7]
 1917 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1918              		.loc 1 565 16 discriminator 3
 1919 001a DBB2     		uxtb	r3, r3
 1920 001c C3F10203 		rsb	r3, r3, #2
 1921 0020 DBB2     		uxtb	r3, r3
 1922              		.loc 1 565 10 discriminator 3
 1923 0022 3B73     		strb	r3, [r7, #12]
 566:poly.c        ****     t[1] = ETA - a->coeffs[8*i+1];
 1924              		.loc 1 566 29 discriminator 3
 1925 0024 7B69     		ldr	r3, [r7, #20]
 1926 0026 DB00     		lsls	r3, r3, #3
 1927              		.loc 1 566 31 discriminator 3
 1928 0028 5A1C     		adds	r2, r3, #1
 1929              		.loc 1 566 27 discriminator 3
 1930 002a 3B68     		ldr	r3, [r7]
 1931 002c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1932              		.loc 1 566 16 discriminator 3
 1933 0030 DBB2     		uxtb	r3, r3
 1934 0032 C3F10203 		rsb	r3, r3, #2
 1935 0036 DBB2     		uxtb	r3, r3
 1936              		.loc 1 566 10 discriminator 3
 1937 0038 7B73     		strb	r3, [r7, #13]
 567:poly.c        ****     t[2] = ETA - a->coeffs[8*i+2];
 1938              		.loc 1 567 29 discriminator 3
 1939 003a 7B69     		ldr	r3, [r7, #20]
 1940 003c DB00     		lsls	r3, r3, #3
 1941              		.loc 1 567 31 discriminator 3
 1942 003e 9A1C     		adds	r2, r3, #2
 1943              		.loc 1 567 27 discriminator 3
 1944 0040 3B68     		ldr	r3, [r7]
 1945 0042 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1946              		.loc 1 567 16 discriminator 3
 1947 0046 DBB2     		uxtb	r3, r3
 1948 0048 C3F10203 		rsb	r3, r3, #2
 1949 004c DBB2     		uxtb	r3, r3
 1950              		.loc 1 567 10 discriminator 3
 1951 004e BB73     		strb	r3, [r7, #14]
 568:poly.c        ****     t[3] = ETA - a->coeffs[8*i+3];
 1952              		.loc 1 568 29 discriminator 3
 1953 0050 7B69     		ldr	r3, [r7, #20]
 1954 0052 DB00     		lsls	r3, r3, #3
 1955              		.loc 1 568 31 discriminator 3
 1956 0054 DA1C     		adds	r2, r3, #3
 1957              		.loc 1 568 27 discriminator 3
 1958 0056 3B68     		ldr	r3, [r7]
 1959 0058 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1960              		.loc 1 568 16 discriminator 3
 1961 005c DBB2     		uxtb	r3, r3
 1962 005e C3F10203 		rsb	r3, r3, #2
 1963 0062 DBB2     		uxtb	r3, r3
 1964              		.loc 1 568 10 discriminator 3
 1965 0064 FB73     		strb	r3, [r7, #15]
 569:poly.c        ****     t[4] = ETA - a->coeffs[8*i+4];
 1966              		.loc 1 569 29 discriminator 3
 1967 0066 7B69     		ldr	r3, [r7, #20]
 1968 0068 DB00     		lsls	r3, r3, #3
 1969              		.loc 1 569 31 discriminator 3
 1970 006a 1A1D     		adds	r2, r3, #4
 1971              		.loc 1 569 27 discriminator 3
 1972 006c 3B68     		ldr	r3, [r7]
 1973 006e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1974              		.loc 1 569 16 discriminator 3
 1975 0072 DBB2     		uxtb	r3, r3
 1976 0074 C3F10203 		rsb	r3, r3, #2
 1977 0078 DBB2     		uxtb	r3, r3
 1978              		.loc 1 569 10 discriminator 3
 1979 007a 3B74     		strb	r3, [r7, #16]
 570:poly.c        ****     t[5] = ETA - a->coeffs[8*i+5];
 1980              		.loc 1 570 29 discriminator 3
 1981 007c 7B69     		ldr	r3, [r7, #20]
 1982 007e DB00     		lsls	r3, r3, #3
 1983              		.loc 1 570 31 discriminator 3
 1984 0080 5A1D     		adds	r2, r3, #5
 1985              		.loc 1 570 27 discriminator 3
 1986 0082 3B68     		ldr	r3, [r7]
 1987 0084 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1988              		.loc 1 570 16 discriminator 3
 1989 0088 DBB2     		uxtb	r3, r3
 1990 008a C3F10203 		rsb	r3, r3, #2
 1991 008e DBB2     		uxtb	r3, r3
 1992              		.loc 1 570 10 discriminator 3
 1993 0090 7B74     		strb	r3, [r7, #17]
 571:poly.c        ****     t[6] = ETA - a->coeffs[8*i+6];
 1994              		.loc 1 571 29 discriminator 3
 1995 0092 7B69     		ldr	r3, [r7, #20]
 1996 0094 DB00     		lsls	r3, r3, #3
 1997              		.loc 1 571 31 discriminator 3
 1998 0096 9A1D     		adds	r2, r3, #6
 1999              		.loc 1 571 27 discriminator 3
 2000 0098 3B68     		ldr	r3, [r7]
 2001 009a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2002              		.loc 1 571 16 discriminator 3
 2003 009e DBB2     		uxtb	r3, r3
 2004 00a0 C3F10203 		rsb	r3, r3, #2
 2005 00a4 DBB2     		uxtb	r3, r3
 2006              		.loc 1 571 10 discriminator 3
 2007 00a6 BB74     		strb	r3, [r7, #18]
 572:poly.c        ****     t[7] = ETA - a->coeffs[8*i+7];
 2008              		.loc 1 572 29 discriminator 3
 2009 00a8 7B69     		ldr	r3, [r7, #20]
 2010 00aa DB00     		lsls	r3, r3, #3
 2011              		.loc 1 572 31 discriminator 3
 2012 00ac DA1D     		adds	r2, r3, #7
 2013              		.loc 1 572 27 discriminator 3
 2014 00ae 3B68     		ldr	r3, [r7]
 2015 00b0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2016              		.loc 1 572 16 discriminator 3
 2017 00b4 DBB2     		uxtb	r3, r3
 2018 00b6 C3F10203 		rsb	r3, r3, #2
 2019 00ba DBB2     		uxtb	r3, r3
 2020              		.loc 1 572 10 discriminator 3
 2021 00bc FB74     		strb	r3, [r7, #19]
 573:poly.c        **** 
 574:poly.c        ****     r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 2022              		.loc 1 574 19 discriminator 3
 2023 00be 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 2024 00c0 5AB2     		sxtb	r2, r3
 2025              		.loc 1 574 33 discriminator 3
 2026 00c2 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2027              		.loc 1 574 37 discriminator 3
 2028 00c4 DB00     		lsls	r3, r3, #3
 2029              		.loc 1 574 29 discriminator 3
 2030 00c6 5BB2     		sxtb	r3, r3
 2031 00c8 1343     		orrs	r3, r3, r2
 2032 00ca 5AB2     		sxtb	r2, r3
 2033              		.loc 1 574 47 discriminator 3
 2034 00cc BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2035              		.loc 1 574 51 discriminator 3
 2036 00ce 9B01     		lsls	r3, r3, #6
 2037              		.loc 1 574 43 discriminator 3
 2038 00d0 5BB2     		sxtb	r3, r3
 2039 00d2 1343     		orrs	r3, r3, r2
 2040 00d4 59B2     		sxtb	r1, r3
 2041              		.loc 1 574 8 discriminator 3
 2042 00d6 7A69     		ldr	r2, [r7, #20]
 2043 00d8 1346     		mov	r3, r2
 2044 00da 5B00     		lsls	r3, r3, #1
 2045 00dc 1344     		add	r3, r3, r2
 2046              		.loc 1 574 6 discriminator 3
 2047 00de 7A68     		ldr	r2, [r7, #4]
 2048 00e0 1344     		add	r3, r3, r2
 2049              		.loc 1 574 43 discriminator 3
 2050 00e2 CAB2     		uxtb	r2, r1
 2051              		.loc 1 574 15 discriminator 3
 2052 00e4 1A70     		strb	r2, [r3]
 575:poly.c        ****     r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 2053              		.loc 1 575 19 discriminator 3
 2054 00e6 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2055              		.loc 1 575 29 discriminator 3
 2056 00e8 9B08     		lsrs	r3, r3, #2
 2057 00ea DBB2     		uxtb	r3, r3
 2058 00ec 5AB2     		sxtb	r2, r3
 2059              		.loc 1 575 33 discriminator 3
 2060 00ee FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2061              		.loc 1 575 37 discriminator 3
 2062 00f0 5B00     		lsls	r3, r3, #1
 2063              		.loc 1 575 29 discriminator 3
 2064 00f2 5BB2     		sxtb	r3, r3
 2065 00f4 1343     		orrs	r3, r3, r2
 2066 00f6 5AB2     		sxtb	r2, r3
 2067              		.loc 1 575 47 discriminator 3
 2068 00f8 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 2069              		.loc 1 575 51 discriminator 3
 2070 00fa 1B01     		lsls	r3, r3, #4
 2071              		.loc 1 575 43 discriminator 3
 2072 00fc 5BB2     		sxtb	r3, r3
 2073 00fe 1343     		orrs	r3, r3, r2
 2074 0100 5AB2     		sxtb	r2, r3
 2075              		.loc 1 575 61 discriminator 3
 2076 0102 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 2077              		.loc 1 575 65 discriminator 3
 2078 0104 DB01     		lsls	r3, r3, #7
 2079              		.loc 1 575 57 discriminator 3
 2080 0106 5BB2     		sxtb	r3, r3
 2081 0108 1343     		orrs	r3, r3, r2
 2082 010a 59B2     		sxtb	r1, r3
 2083              		.loc 1 575 8 discriminator 3
 2084 010c 7A69     		ldr	r2, [r7, #20]
 2085 010e 1346     		mov	r3, r2
 2086 0110 5B00     		lsls	r3, r3, #1
 2087 0112 1344     		add	r3, r3, r2
 2088              		.loc 1 575 6 discriminator 3
 2089 0114 0133     		adds	r3, r3, #1
 2090 0116 7A68     		ldr	r2, [r7, #4]
 2091 0118 1344     		add	r3, r3, r2
 2092              		.loc 1 575 57 discriminator 3
 2093 011a CAB2     		uxtb	r2, r1
 2094              		.loc 1 575 15 discriminator 3
 2095 011c 1A70     		strb	r2, [r3]
 576:poly.c        ****     r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 2096              		.loc 1 576 19 discriminator 3
 2097 011e 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 2098              		.loc 1 576 29 discriminator 3
 2099 0120 5B08     		lsrs	r3, r3, #1
 2100 0122 DBB2     		uxtb	r3, r3
 2101 0124 5AB2     		sxtb	r2, r3
 2102              		.loc 1 576 33 discriminator 3
 2103 0126 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 2104              		.loc 1 576 37 discriminator 3
 2105 0128 9B00     		lsls	r3, r3, #2
 2106              		.loc 1 576 29 discriminator 3
 2107 012a 5BB2     		sxtb	r3, r3
 2108 012c 1343     		orrs	r3, r3, r2
 2109 012e 5AB2     		sxtb	r2, r3
 2110              		.loc 1 576 47 discriminator 3
 2111 0130 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2112              		.loc 1 576 51 discriminator 3
 2113 0132 5B01     		lsls	r3, r3, #5
 2114              		.loc 1 576 43 discriminator 3
 2115 0134 5BB2     		sxtb	r3, r3
 2116 0136 1343     		orrs	r3, r3, r2
 2117 0138 59B2     		sxtb	r1, r3
 2118              		.loc 1 576 8 discriminator 3
 2119 013a 7A69     		ldr	r2, [r7, #20]
 2120 013c 1346     		mov	r3, r2
 2121 013e 5B00     		lsls	r3, r3, #1
 2122 0140 1344     		add	r3, r3, r2
 2123              		.loc 1 576 6 discriminator 3
 2124 0142 0233     		adds	r3, r3, #2
 2125 0144 7A68     		ldr	r2, [r7, #4]
 2126 0146 1344     		add	r3, r3, r2
 2127              		.loc 1 576 43 discriminator 3
 2128 0148 CAB2     		uxtb	r2, r1
 2129              		.loc 1 576 15 discriminator 3
 2130 014a 1A70     		strb	r2, [r3]
 564:poly.c        ****     t[0] = ETA - a->coeffs[8*i+0];
 2131              		.loc 1 564 23 discriminator 3
 2132 014c 7B69     		ldr	r3, [r7, #20]
 2133 014e 0133     		adds	r3, r3, #1
 2134 0150 7B61     		str	r3, [r7, #20]
 2135              	.L78:
 564:poly.c        ****     t[0] = ETA - a->coeffs[8*i+0];
 2136              		.loc 1 564 3 discriminator 1
 2137 0152 7B69     		ldr	r3, [r7, #20]
 2138 0154 1F2B     		cmp	r3, #31
 2139 0156 7FF65BAF 		bls	.L79
 577:poly.c        ****   }
 578:poly.c        **** #elif ETA == 4
 579:poly.c        ****   for(i = 0; i < N/2; ++i) {
 580:poly.c        ****     t[0] = ETA - a->coeffs[2*i+0];
 581:poly.c        ****     t[1] = ETA - a->coeffs[2*i+1];
 582:poly.c        ****     r[i] = t[0] | (t[1] << 4);
 583:poly.c        ****   }
 584:poly.c        **** #endif
 585:poly.c        **** 
 586:poly.c        ****   DBENCH_STOP(*tpack);
 587:poly.c        **** }
 2140              		.loc 1 587 1
 2141 015a 00BF     		nop
 2142 015c 00BF     		nop
 2143 015e 1C37     		adds	r7, r7, #28
 2144              	.LCFI109:
 2145              		.cfi_def_cfa_offset 4
 2146 0160 BD46     		mov	sp, r7
 2147              	.LCFI110:
 2148              		.cfi_def_cfa_register 13
 2149              		@ sp needed
 2150 0162 80BC     		pop	{r7}
 2151              	.LCFI111:
 2152              		.cfi_restore 7
 2153              		.cfi_def_cfa_offset 0
 2154 0164 7047     		bx	lr
 2155              		.cfi_endproc
 2156              	.LFE20:
 2158              		.section	.text.pqcrystals_dilithium2_ref_polyeta_unpack,"ax",%progbits
 2159              		.align	1
 2160              		.global	pqcrystals_dilithium2_ref_polyeta_unpack
 2161              		.syntax unified
 2162              		.thumb
 2163              		.thumb_func
 2164              		.fpu softvfp
 2166              	pqcrystals_dilithium2_ref_polyeta_unpack:
 2167              	.LFB21:
 588:poly.c        **** 
 589:poly.c        **** /*************************************************
 590:poly.c        **** * Name:        polyeta_unpack
 591:poly.c        **** *
 592:poly.c        **** * Description: Unpack polynomial with coefficients in [-ETA,ETA].
 593:poly.c        **** *
 594:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 595:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 596:poly.c        **** **************************************************/
 597:poly.c        **** void polyeta_unpack(poly *r, const uint8_t *a) {
 2168              		.loc 1 597 48
 2169              		.cfi_startproc
 2170              		@ args = 0, pretend = 0, frame = 16
 2171              		@ frame_needed = 1, uses_anonymous_args = 0
 2172              		@ link register save eliminated.
 2173 0000 80B4     		push	{r7}
 2174              	.LCFI112:
 2175              		.cfi_def_cfa_offset 4
 2176              		.cfi_offset 7, -4
 2177 0002 85B0     		sub	sp, sp, #20
 2178              	.LCFI113:
 2179              		.cfi_def_cfa_offset 24
 2180 0004 00AF     		add	r7, sp, #0
 2181              	.LCFI114:
 2182              		.cfi_def_cfa_register 7
 2183 0006 7860     		str	r0, [r7, #4]
 2184 0008 3960     		str	r1, [r7]
 598:poly.c        ****   unsigned int i;
 599:poly.c        ****   DBENCH_START();
 600:poly.c        **** 
 601:poly.c        **** #if ETA == 2
 602:poly.c        ****   for(i = 0; i < N/8; ++i) {
 2185              		.loc 1 602 9
 2186 000a 0023     		movs	r3, #0
 2187 000c FB60     		str	r3, [r7, #12]
 2188              		.loc 1 602 3
 2189 000e 16E1     		b	.L81
 2190              	.L82:
 603:poly.c        ****     r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 2191              		.loc 1 603 29 discriminator 3
 2192 0010 FA68     		ldr	r2, [r7, #12]
 2193 0012 1346     		mov	r3, r2
 2194 0014 5B00     		lsls	r3, r3, #1
 2195 0016 1344     		add	r3, r3, r2
 2196              		.loc 1 603 27 discriminator 3
 2197 0018 3A68     		ldr	r2, [r7]
 2198 001a 1344     		add	r3, r3, r2
 2199 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2200              		.loc 1 603 41 discriminator 3
 2201 001e 1946     		mov	r1, r3
 2202              		.loc 1 603 18 discriminator 3
 2203 0020 FB68     		ldr	r3, [r7, #12]
 2204 0022 DA00     		lsls	r2, r3, #3
 2205              		.loc 1 603 41 discriminator 3
 2206 0024 01F00701 		and	r1, r1, #7
 2207              		.loc 1 603 22 discriminator 3
 2208 0028 7B68     		ldr	r3, [r7, #4]
 2209 002a 43F82210 		str	r1, [r3, r2, lsl #2]
 604:poly.c        ****     r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
 2210              		.loc 1 604 29 discriminator 3
 2211 002e FA68     		ldr	r2, [r7, #12]
 2212 0030 1346     		mov	r3, r2
 2213 0032 5B00     		lsls	r3, r3, #1
 2214 0034 1344     		add	r3, r3, r2
 2215              		.loc 1 604 27 discriminator 3
 2216 0036 3A68     		ldr	r2, [r7]
 2217 0038 1344     		add	r3, r3, r2
 2218 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2219              		.loc 1 604 41 discriminator 3
 2220 003c DB08     		lsrs	r3, r3, #3
 2221 003e DBB2     		uxtb	r3, r3
 2222 0040 1946     		mov	r1, r3
 2223              		.loc 1 604 16 discriminator 3
 2224 0042 FB68     		ldr	r3, [r7, #12]
 2225 0044 DB00     		lsls	r3, r3, #3
 2226              		.loc 1 604 18 discriminator 3
 2227 0046 5A1C     		adds	r2, r3, #1
 2228              		.loc 1 604 41 discriminator 3
 2229 0048 01F00701 		and	r1, r1, #7
 2230              		.loc 1 604 22 discriminator 3
 2231 004c 7B68     		ldr	r3, [r7, #4]
 2232 004e 43F82210 		str	r1, [r3, r2, lsl #2]
 605:poly.c        ****     r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
 2233              		.loc 1 605 29 discriminator 3
 2234 0052 FA68     		ldr	r2, [r7, #12]
 2235 0054 1346     		mov	r3, r2
 2236 0056 5B00     		lsls	r3, r3, #1
 2237 0058 1344     		add	r3, r3, r2
 2238              		.loc 1 605 27 discriminator 3
 2239 005a 3A68     		ldr	r2, [r7]
 2240 005c 1344     		add	r3, r3, r2
 2241 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2242              		.loc 1 605 35 discriminator 3
 2243 0060 9B09     		lsrs	r3, r3, #6
 2244 0062 DBB2     		uxtb	r3, r3
 2245 0064 1946     		mov	r1, r3
 2246              		.loc 1 605 47 discriminator 3
 2247 0066 FA68     		ldr	r2, [r7, #12]
 2248 0068 1346     		mov	r3, r2
 2249 006a 5B00     		lsls	r3, r3, #1
 2250 006c 1344     		add	r3, r3, r2
 2251              		.loc 1 605 45 discriminator 3
 2252 006e 0133     		adds	r3, r3, #1
 2253 0070 3A68     		ldr	r2, [r7]
 2254 0072 1344     		add	r3, r3, r2
 2255 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2256              		.loc 1 605 53 discriminator 3
 2257 0076 9B00     		lsls	r3, r3, #2
 2258              		.loc 1 605 41 discriminator 3
 2259 0078 0B43     		orrs	r3, r3, r1
 2260              		.loc 1 605 16 discriminator 3
 2261 007a FA68     		ldr	r2, [r7, #12]
 2262 007c D200     		lsls	r2, r2, #3
 2263              		.loc 1 605 18 discriminator 3
 2264 007e 0232     		adds	r2, r2, #2
 2265              		.loc 1 605 60 discriminator 3
 2266 0080 03F00701 		and	r1, r3, #7
 2267              		.loc 1 605 22 discriminator 3
 2268 0084 7B68     		ldr	r3, [r7, #4]
 2269 0086 43F82210 		str	r1, [r3, r2, lsl #2]
 606:poly.c        ****     r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
 2270              		.loc 1 606 29 discriminator 3
 2271 008a FA68     		ldr	r2, [r7, #12]
 2272 008c 1346     		mov	r3, r2
 2273 008e 5B00     		lsls	r3, r3, #1
 2274 0090 1344     		add	r3, r3, r2
 2275              		.loc 1 606 27 discriminator 3
 2276 0092 0133     		adds	r3, r3, #1
 2277 0094 3A68     		ldr	r2, [r7]
 2278 0096 1344     		add	r3, r3, r2
 2279 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2280              		.loc 1 606 41 discriminator 3
 2281 009a 5B08     		lsrs	r3, r3, #1
 2282 009c DBB2     		uxtb	r3, r3
 2283 009e 1946     		mov	r1, r3
 2284              		.loc 1 606 16 discriminator 3
 2285 00a0 FB68     		ldr	r3, [r7, #12]
 2286 00a2 DB00     		lsls	r3, r3, #3
 2287              		.loc 1 606 18 discriminator 3
 2288 00a4 DA1C     		adds	r2, r3, #3
 2289              		.loc 1 606 41 discriminator 3
 2290 00a6 01F00701 		and	r1, r1, #7
 2291              		.loc 1 606 22 discriminator 3
 2292 00aa 7B68     		ldr	r3, [r7, #4]
 2293 00ac 43F82210 		str	r1, [r3, r2, lsl #2]
 607:poly.c        ****     r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
 2294              		.loc 1 607 29 discriminator 3
 2295 00b0 FA68     		ldr	r2, [r7, #12]
 2296 00b2 1346     		mov	r3, r2
 2297 00b4 5B00     		lsls	r3, r3, #1
 2298 00b6 1344     		add	r3, r3, r2
 2299              		.loc 1 607 27 discriminator 3
 2300 00b8 0133     		adds	r3, r3, #1
 2301 00ba 3A68     		ldr	r2, [r7]
 2302 00bc 1344     		add	r3, r3, r2
 2303 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2304              		.loc 1 607 41 discriminator 3
 2305 00c0 1B09     		lsrs	r3, r3, #4
 2306 00c2 DBB2     		uxtb	r3, r3
 2307 00c4 1946     		mov	r1, r3
 2308              		.loc 1 607 16 discriminator 3
 2309 00c6 FB68     		ldr	r3, [r7, #12]
 2310 00c8 DB00     		lsls	r3, r3, #3
 2311              		.loc 1 607 18 discriminator 3
 2312 00ca 1A1D     		adds	r2, r3, #4
 2313              		.loc 1 607 41 discriminator 3
 2314 00cc 01F00701 		and	r1, r1, #7
 2315              		.loc 1 607 22 discriminator 3
 2316 00d0 7B68     		ldr	r3, [r7, #4]
 2317 00d2 43F82210 		str	r1, [r3, r2, lsl #2]
 608:poly.c        ****     r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
 2318              		.loc 1 608 29 discriminator 3
 2319 00d6 FA68     		ldr	r2, [r7, #12]
 2320 00d8 1346     		mov	r3, r2
 2321 00da 5B00     		lsls	r3, r3, #1
 2322 00dc 1344     		add	r3, r3, r2
 2323              		.loc 1 608 27 discriminator 3
 2324 00de 0133     		adds	r3, r3, #1
 2325 00e0 3A68     		ldr	r2, [r7]
 2326 00e2 1344     		add	r3, r3, r2
 2327 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2328              		.loc 1 608 35 discriminator 3
 2329 00e6 DB09     		lsrs	r3, r3, #7
 2330 00e8 DBB2     		uxtb	r3, r3
 2331 00ea 1946     		mov	r1, r3
 2332              		.loc 1 608 47 discriminator 3
 2333 00ec FA68     		ldr	r2, [r7, #12]
 2334 00ee 1346     		mov	r3, r2
 2335 00f0 5B00     		lsls	r3, r3, #1
 2336 00f2 1344     		add	r3, r3, r2
 2337              		.loc 1 608 45 discriminator 3
 2338 00f4 0233     		adds	r3, r3, #2
 2339 00f6 3A68     		ldr	r2, [r7]
 2340 00f8 1344     		add	r3, r3, r2
 2341 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2342              		.loc 1 608 53 discriminator 3
 2343 00fc 5B00     		lsls	r3, r3, #1
 2344              		.loc 1 608 41 discriminator 3
 2345 00fe 0B43     		orrs	r3, r3, r1
 2346              		.loc 1 608 16 discriminator 3
 2347 0100 FA68     		ldr	r2, [r7, #12]
 2348 0102 D200     		lsls	r2, r2, #3
 2349              		.loc 1 608 18 discriminator 3
 2350 0104 0532     		adds	r2, r2, #5
 2351              		.loc 1 608 60 discriminator 3
 2352 0106 03F00701 		and	r1, r3, #7
 2353              		.loc 1 608 22 discriminator 3
 2354 010a 7B68     		ldr	r3, [r7, #4]
 2355 010c 43F82210 		str	r1, [r3, r2, lsl #2]
 609:poly.c        ****     r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
 2356              		.loc 1 609 29 discriminator 3
 2357 0110 FA68     		ldr	r2, [r7, #12]
 2358 0112 1346     		mov	r3, r2
 2359 0114 5B00     		lsls	r3, r3, #1
 2360 0116 1344     		add	r3, r3, r2
 2361              		.loc 1 609 27 discriminator 3
 2362 0118 0233     		adds	r3, r3, #2
 2363 011a 3A68     		ldr	r2, [r7]
 2364 011c 1344     		add	r3, r3, r2
 2365 011e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2366              		.loc 1 609 41 discriminator 3
 2367 0120 9B08     		lsrs	r3, r3, #2
 2368 0122 DBB2     		uxtb	r3, r3
 2369 0124 1946     		mov	r1, r3
 2370              		.loc 1 609 16 discriminator 3
 2371 0126 FB68     		ldr	r3, [r7, #12]
 2372 0128 DB00     		lsls	r3, r3, #3
 2373              		.loc 1 609 18 discriminator 3
 2374 012a 9A1D     		adds	r2, r3, #6
 2375              		.loc 1 609 41 discriminator 3
 2376 012c 01F00701 		and	r1, r1, #7
 2377              		.loc 1 609 22 discriminator 3
 2378 0130 7B68     		ldr	r3, [r7, #4]
 2379 0132 43F82210 		str	r1, [r3, r2, lsl #2]
 610:poly.c        ****     r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 2380              		.loc 1 610 29 discriminator 3
 2381 0136 FA68     		ldr	r2, [r7, #12]
 2382 0138 1346     		mov	r3, r2
 2383 013a 5B00     		lsls	r3, r3, #1
 2384 013c 1344     		add	r3, r3, r2
 2385              		.loc 1 610 27 discriminator 3
 2386 013e 0233     		adds	r3, r3, #2
 2387 0140 3A68     		ldr	r2, [r7]
 2388 0142 1344     		add	r3, r3, r2
 2389 0144 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2390              		.loc 1 610 41 discriminator 3
 2391 0146 5B09     		lsrs	r3, r3, #5
 2392 0148 DBB2     		uxtb	r3, r3
 2393 014a 1946     		mov	r1, r3
 2394              		.loc 1 610 16 discriminator 3
 2395 014c FB68     		ldr	r3, [r7, #12]
 2396 014e DB00     		lsls	r3, r3, #3
 2397              		.loc 1 610 18 discriminator 3
 2398 0150 DA1D     		adds	r2, r3, #7
 2399              		.loc 1 610 41 discriminator 3
 2400 0152 01F00701 		and	r1, r1, #7
 2401              		.loc 1 610 22 discriminator 3
 2402 0156 7B68     		ldr	r3, [r7, #4]
 2403 0158 43F82210 		str	r1, [r3, r2, lsl #2]
 611:poly.c        **** 
 612:poly.c        ****     r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 2404              		.loc 1 612 43 discriminator 3
 2405 015c FB68     		ldr	r3, [r7, #12]
 2406 015e DA00     		lsls	r2, r3, #3
 2407              		.loc 1 612 39 discriminator 3
 2408 0160 7B68     		ldr	r3, [r7, #4]
 2409 0162 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2410              		.loc 1 612 18 discriminator 3
 2411 0166 FA68     		ldr	r2, [r7, #12]
 2412 0168 D200     		lsls	r2, r2, #3
 2413              		.loc 1 612 28 discriminator 3
 2414 016a C3F10201 		rsb	r1, r3, #2
 2415              		.loc 1 612 22 discriminator 3
 2416 016e 7B68     		ldr	r3, [r7, #4]
 2417 0170 43F82210 		str	r1, [r3, r2, lsl #2]
 613:poly.c        ****     r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 2418              		.loc 1 613 41 discriminator 3
 2419 0174 FB68     		ldr	r3, [r7, #12]
 2420 0176 DB00     		lsls	r3, r3, #3
 2421              		.loc 1 613 43 discriminator 3
 2422 0178 5A1C     		adds	r2, r3, #1
 2423              		.loc 1 613 39 discriminator 3
 2424 017a 7B68     		ldr	r3, [r7, #4]
 2425 017c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2426              		.loc 1 613 16 discriminator 3
 2427 0180 FA68     		ldr	r2, [r7, #12]
 2428 0182 D200     		lsls	r2, r2, #3
 2429              		.loc 1 613 18 discriminator 3
 2430 0184 0132     		adds	r2, r2, #1
 2431              		.loc 1 613 28 discriminator 3
 2432 0186 C3F10201 		rsb	r1, r3, #2
 2433              		.loc 1 613 22 discriminator 3
 2434 018a 7B68     		ldr	r3, [r7, #4]
 2435 018c 43F82210 		str	r1, [r3, r2, lsl #2]
 614:poly.c        ****     r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
 2436              		.loc 1 614 41 discriminator 3
 2437 0190 FB68     		ldr	r3, [r7, #12]
 2438 0192 DB00     		lsls	r3, r3, #3
 2439              		.loc 1 614 43 discriminator 3
 2440 0194 9A1C     		adds	r2, r3, #2
 2441              		.loc 1 614 39 discriminator 3
 2442 0196 7B68     		ldr	r3, [r7, #4]
 2443 0198 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2444              		.loc 1 614 16 discriminator 3
 2445 019c FA68     		ldr	r2, [r7, #12]
 2446 019e D200     		lsls	r2, r2, #3
 2447              		.loc 1 614 18 discriminator 3
 2448 01a0 0232     		adds	r2, r2, #2
 2449              		.loc 1 614 28 discriminator 3
 2450 01a2 C3F10201 		rsb	r1, r3, #2
 2451              		.loc 1 614 22 discriminator 3
 2452 01a6 7B68     		ldr	r3, [r7, #4]
 2453 01a8 43F82210 		str	r1, [r3, r2, lsl #2]
 615:poly.c        ****     r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 2454              		.loc 1 615 41 discriminator 3
 2455 01ac FB68     		ldr	r3, [r7, #12]
 2456 01ae DB00     		lsls	r3, r3, #3
 2457              		.loc 1 615 43 discriminator 3
 2458 01b0 DA1C     		adds	r2, r3, #3
 2459              		.loc 1 615 39 discriminator 3
 2460 01b2 7B68     		ldr	r3, [r7, #4]
 2461 01b4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2462              		.loc 1 615 16 discriminator 3
 2463 01b8 FA68     		ldr	r2, [r7, #12]
 2464 01ba D200     		lsls	r2, r2, #3
 2465              		.loc 1 615 18 discriminator 3
 2466 01bc 0332     		adds	r2, r2, #3
 2467              		.loc 1 615 28 discriminator 3
 2468 01be C3F10201 		rsb	r1, r3, #2
 2469              		.loc 1 615 22 discriminator 3
 2470 01c2 7B68     		ldr	r3, [r7, #4]
 2471 01c4 43F82210 		str	r1, [r3, r2, lsl #2]
 616:poly.c        ****     r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 2472              		.loc 1 616 41 discriminator 3
 2473 01c8 FB68     		ldr	r3, [r7, #12]
 2474 01ca DB00     		lsls	r3, r3, #3
 2475              		.loc 1 616 43 discriminator 3
 2476 01cc 1A1D     		adds	r2, r3, #4
 2477              		.loc 1 616 39 discriminator 3
 2478 01ce 7B68     		ldr	r3, [r7, #4]
 2479 01d0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2480              		.loc 1 616 16 discriminator 3
 2481 01d4 FA68     		ldr	r2, [r7, #12]
 2482 01d6 D200     		lsls	r2, r2, #3
 2483              		.loc 1 616 18 discriminator 3
 2484 01d8 0432     		adds	r2, r2, #4
 2485              		.loc 1 616 28 discriminator 3
 2486 01da C3F10201 		rsb	r1, r3, #2
 2487              		.loc 1 616 22 discriminator 3
 2488 01de 7B68     		ldr	r3, [r7, #4]
 2489 01e0 43F82210 		str	r1, [r3, r2, lsl #2]
 617:poly.c        ****     r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 2490              		.loc 1 617 41 discriminator 3
 2491 01e4 FB68     		ldr	r3, [r7, #12]
 2492 01e6 DB00     		lsls	r3, r3, #3
 2493              		.loc 1 617 43 discriminator 3
 2494 01e8 5A1D     		adds	r2, r3, #5
 2495              		.loc 1 617 39 discriminator 3
 2496 01ea 7B68     		ldr	r3, [r7, #4]
 2497 01ec 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2498              		.loc 1 617 16 discriminator 3
 2499 01f0 FA68     		ldr	r2, [r7, #12]
 2500 01f2 D200     		lsls	r2, r2, #3
 2501              		.loc 1 617 18 discriminator 3
 2502 01f4 0532     		adds	r2, r2, #5
 2503              		.loc 1 617 28 discriminator 3
 2504 01f6 C3F10201 		rsb	r1, r3, #2
 2505              		.loc 1 617 22 discriminator 3
 2506 01fa 7B68     		ldr	r3, [r7, #4]
 2507 01fc 43F82210 		str	r1, [r3, r2, lsl #2]
 618:poly.c        ****     r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 2508              		.loc 1 618 41 discriminator 3
 2509 0200 FB68     		ldr	r3, [r7, #12]
 2510 0202 DB00     		lsls	r3, r3, #3
 2511              		.loc 1 618 43 discriminator 3
 2512 0204 9A1D     		adds	r2, r3, #6
 2513              		.loc 1 618 39 discriminator 3
 2514 0206 7B68     		ldr	r3, [r7, #4]
 2515 0208 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2516              		.loc 1 618 16 discriminator 3
 2517 020c FA68     		ldr	r2, [r7, #12]
 2518 020e D200     		lsls	r2, r2, #3
 2519              		.loc 1 618 18 discriminator 3
 2520 0210 0632     		adds	r2, r2, #6
 2521              		.loc 1 618 28 discriminator 3
 2522 0212 C3F10201 		rsb	r1, r3, #2
 2523              		.loc 1 618 22 discriminator 3
 2524 0216 7B68     		ldr	r3, [r7, #4]
 2525 0218 43F82210 		str	r1, [r3, r2, lsl #2]
 619:poly.c        ****     r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 2526              		.loc 1 619 41 discriminator 3
 2527 021c FB68     		ldr	r3, [r7, #12]
 2528 021e DB00     		lsls	r3, r3, #3
 2529              		.loc 1 619 43 discriminator 3
 2530 0220 DA1D     		adds	r2, r3, #7
 2531              		.loc 1 619 39 discriminator 3
 2532 0222 7B68     		ldr	r3, [r7, #4]
 2533 0224 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2534              		.loc 1 619 16 discriminator 3
 2535 0228 FA68     		ldr	r2, [r7, #12]
 2536 022a D200     		lsls	r2, r2, #3
 2537              		.loc 1 619 18 discriminator 3
 2538 022c 0732     		adds	r2, r2, #7
 2539              		.loc 1 619 28 discriminator 3
 2540 022e C3F10201 		rsb	r1, r3, #2
 2541              		.loc 1 619 22 discriminator 3
 2542 0232 7B68     		ldr	r3, [r7, #4]
 2543 0234 43F82210 		str	r1, [r3, r2, lsl #2]
 602:poly.c        ****     r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 2544              		.loc 1 602 23 discriminator 3
 2545 0238 FB68     		ldr	r3, [r7, #12]
 2546 023a 0133     		adds	r3, r3, #1
 2547 023c FB60     		str	r3, [r7, #12]
 2548              	.L81:
 602:poly.c        ****     r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 2549              		.loc 1 602 3 discriminator 1
 2550 023e FB68     		ldr	r3, [r7, #12]
 2551 0240 1F2B     		cmp	r3, #31
 2552 0242 7FF6E5AE 		bls	.L82
 620:poly.c        ****   }
 621:poly.c        **** #elif ETA == 4
 622:poly.c        ****   for(i = 0; i < N/2; ++i) {
 623:poly.c        ****     r->coeffs[2*i+0] = a[i] & 0x0F;
 624:poly.c        ****     r->coeffs[2*i+1] = a[i] >> 4;
 625:poly.c        ****     r->coeffs[2*i+0] = ETA - r->coeffs[2*i+0];
 626:poly.c        ****     r->coeffs[2*i+1] = ETA - r->coeffs[2*i+1];
 627:poly.c        ****   }
 628:poly.c        **** #endif
 629:poly.c        **** 
 630:poly.c        ****   DBENCH_STOP(*tpack);
 631:poly.c        **** }
 2553              		.loc 1 631 1
 2554 0246 00BF     		nop
 2555 0248 00BF     		nop
 2556 024a 1437     		adds	r7, r7, #20
 2557              	.LCFI115:
 2558              		.cfi_def_cfa_offset 4
 2559 024c BD46     		mov	sp, r7
 2560              	.LCFI116:
 2561              		.cfi_def_cfa_register 13
 2562              		@ sp needed
 2563 024e 80BC     		pop	{r7}
 2564              	.LCFI117:
 2565              		.cfi_restore 7
 2566              		.cfi_def_cfa_offset 0
 2567 0250 7047     		bx	lr
 2568              		.cfi_endproc
 2569              	.LFE21:
 2571              		.section	.text.pqcrystals_dilithium2_ref_polyt1_pack,"ax",%progbits
 2572              		.align	1
 2573              		.global	pqcrystals_dilithium2_ref_polyt1_pack
 2574              		.syntax unified
 2575              		.thumb
 2576              		.thumb_func
 2577              		.fpu softvfp
 2579              	pqcrystals_dilithium2_ref_polyt1_pack:
 2580              	.LFB22:
 632:poly.c        **** 
 633:poly.c        **** /*************************************************
 634:poly.c        **** * Name:        polyt1_pack
 635:poly.c        **** *
 636:poly.c        **** * Description: Bit-pack polynomial t1 with coefficients fitting in 10 bits.
 637:poly.c        **** *              Input coefficients are assumed to be standard representatives.
 638:poly.c        **** *
 639:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 640:poly.c        **** *                            POLYT1_PACKEDBYTES bytes
 641:poly.c        **** *              - const poly *a: pointer to input polynomial
 642:poly.c        **** **************************************************/
 643:poly.c        **** void polyt1_pack(uint8_t *r, const poly *a) {
 2581              		.loc 1 643 45
 2582              		.cfi_startproc
 2583              		@ args = 0, pretend = 0, frame = 16
 2584              		@ frame_needed = 1, uses_anonymous_args = 0
 2585              		@ link register save eliminated.
 2586 0000 80B4     		push	{r7}
 2587              	.LCFI118:
 2588              		.cfi_def_cfa_offset 4
 2589              		.cfi_offset 7, -4
 2590 0002 85B0     		sub	sp, sp, #20
 2591              	.LCFI119:
 2592              		.cfi_def_cfa_offset 24
 2593 0004 00AF     		add	r7, sp, #0
 2594              	.LCFI120:
 2595              		.cfi_def_cfa_register 7
 2596 0006 7860     		str	r0, [r7, #4]
 2597 0008 3960     		str	r1, [r7]
 644:poly.c        ****   unsigned int i;
 645:poly.c        ****   DBENCH_START();
 646:poly.c        **** 
 647:poly.c        ****   for(i = 0; i < N/4; ++i) {
 2598              		.loc 1 647 9
 2599 000a 0023     		movs	r3, #0
 2600 000c FB60     		str	r3, [r7, #12]
 2601              		.loc 1 647 3
 2602 000e 6FE0     		b	.L84
 2603              	.L85:
 648:poly.c        ****     r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 2604              		.loc 1 648 30 discriminator 3
 2605 0010 FB68     		ldr	r3, [r7, #12]
 2606 0012 9A00     		lsls	r2, r3, #2
 2607              		.loc 1 648 34 discriminator 3
 2608 0014 3B68     		ldr	r3, [r7]
 2609 0016 53F82210 		ldr	r1, [r3, r2, lsl #2]
 2610              		.loc 1 648 8 discriminator 3
 2611 001a FA68     		ldr	r2, [r7, #12]
 2612 001c 1346     		mov	r3, r2
 2613 001e 9B00     		lsls	r3, r3, #2
 2614 0020 1344     		add	r3, r3, r2
 2615              		.loc 1 648 6 discriminator 3
 2616 0022 7A68     		ldr	r2, [r7, #4]
 2617 0024 1344     		add	r3, r3, r2
 2618              		.loc 1 648 14 discriminator 3
 2619 0026 CAB2     		uxtb	r2, r1
 2620 0028 1A70     		strb	r2, [r3]
 649:poly.c        ****     r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 2621              		.loc 1 649 30 discriminator 3
 2622 002a FB68     		ldr	r3, [r7, #12]
 2623 002c 9A00     		lsls	r2, r3, #2
 2624              		.loc 1 649 26 discriminator 3
 2625 002e 3B68     		ldr	r3, [r7]
 2626 0030 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2627              		.loc 1 649 34 discriminator 3
 2628 0034 1B12     		asrs	r3, r3, #8
 2629              		.loc 1 649 40 discriminator 3
 2630 0036 5AB2     		sxtb	r2, r3
 2631              		.loc 1 649 54 discriminator 3
 2632 0038 FB68     		ldr	r3, [r7, #12]
 2633 003a 9B00     		lsls	r3, r3, #2
 2634              		.loc 1 649 56 discriminator 3
 2635 003c 591C     		adds	r1, r3, #1
 2636              		.loc 1 649 52 discriminator 3
 2637 003e 3B68     		ldr	r3, [r7]
 2638 0040 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2639              		.loc 1 649 60 discriminator 3
 2640 0044 9B00     		lsls	r3, r3, #2
 2641              		.loc 1 649 40 discriminator 3
 2642 0046 5BB2     		sxtb	r3, r3
 2643 0048 1343     		orrs	r3, r3, r2
 2644 004a 59B2     		sxtb	r1, r3
 2645              		.loc 1 649 8 discriminator 3
 2646 004c FA68     		ldr	r2, [r7, #12]
 2647 004e 1346     		mov	r3, r2
 2648 0050 9B00     		lsls	r3, r3, #2
 2649 0052 1344     		add	r3, r3, r2
 2650              		.loc 1 649 6 discriminator 3
 2651 0054 0133     		adds	r3, r3, #1
 2652 0056 7A68     		ldr	r2, [r7, #4]
 2653 0058 1344     		add	r3, r3, r2
 2654              		.loc 1 649 40 discriminator 3
 2655 005a CAB2     		uxtb	r2, r1
 2656              		.loc 1 649 14 discriminator 3
 2657 005c 1A70     		strb	r2, [r3]
 650:poly.c        ****     r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 2658              		.loc 1 650 28 discriminator 3
 2659 005e FB68     		ldr	r3, [r7, #12]
 2660 0060 9B00     		lsls	r3, r3, #2
 2661              		.loc 1 650 30 discriminator 3
 2662 0062 5A1C     		adds	r2, r3, #1
 2663              		.loc 1 650 26 discriminator 3
 2664 0064 3B68     		ldr	r3, [r7]
 2665 0066 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2666              		.loc 1 650 34 discriminator 3
 2667 006a 9B11     		asrs	r3, r3, #6
 2668              		.loc 1 650 40 discriminator 3
 2669 006c 5AB2     		sxtb	r2, r3
 2670              		.loc 1 650 54 discriminator 3
 2671 006e FB68     		ldr	r3, [r7, #12]
 2672 0070 9B00     		lsls	r3, r3, #2
 2673              		.loc 1 650 56 discriminator 3
 2674 0072 991C     		adds	r1, r3, #2
 2675              		.loc 1 650 52 discriminator 3
 2676 0074 3B68     		ldr	r3, [r7]
 2677 0076 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2678              		.loc 1 650 60 discriminator 3
 2679 007a 1B01     		lsls	r3, r3, #4
 2680              		.loc 1 650 40 discriminator 3
 2681 007c 5BB2     		sxtb	r3, r3
 2682 007e 1343     		orrs	r3, r3, r2
 2683 0080 59B2     		sxtb	r1, r3
 2684              		.loc 1 650 8 discriminator 3
 2685 0082 FA68     		ldr	r2, [r7, #12]
 2686 0084 1346     		mov	r3, r2
 2687 0086 9B00     		lsls	r3, r3, #2
 2688 0088 1344     		add	r3, r3, r2
 2689              		.loc 1 650 6 discriminator 3
 2690 008a 0233     		adds	r3, r3, #2
 2691 008c 7A68     		ldr	r2, [r7, #4]
 2692 008e 1344     		add	r3, r3, r2
 2693              		.loc 1 650 40 discriminator 3
 2694 0090 CAB2     		uxtb	r2, r1
 2695              		.loc 1 650 14 discriminator 3
 2696 0092 1A70     		strb	r2, [r3]
 651:poly.c        ****     r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 2697              		.loc 1 651 28 discriminator 3
 2698 0094 FB68     		ldr	r3, [r7, #12]
 2699 0096 9B00     		lsls	r3, r3, #2
 2700              		.loc 1 651 30 discriminator 3
 2701 0098 9A1C     		adds	r2, r3, #2
 2702              		.loc 1 651 26 discriminator 3
 2703 009a 3B68     		ldr	r3, [r7]
 2704 009c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2705              		.loc 1 651 34 discriminator 3
 2706 00a0 1B11     		asrs	r3, r3, #4
 2707              		.loc 1 651 40 discriminator 3
 2708 00a2 5AB2     		sxtb	r2, r3
 2709              		.loc 1 651 54 discriminator 3
 2710 00a4 FB68     		ldr	r3, [r7, #12]
 2711 00a6 9B00     		lsls	r3, r3, #2
 2712              		.loc 1 651 56 discriminator 3
 2713 00a8 D91C     		adds	r1, r3, #3
 2714              		.loc 1 651 52 discriminator 3
 2715 00aa 3B68     		ldr	r3, [r7]
 2716 00ac 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2717              		.loc 1 651 60 discriminator 3
 2718 00b0 9B01     		lsls	r3, r3, #6
 2719              		.loc 1 651 40 discriminator 3
 2720 00b2 5BB2     		sxtb	r3, r3
 2721 00b4 1343     		orrs	r3, r3, r2
 2722 00b6 59B2     		sxtb	r1, r3
 2723              		.loc 1 651 8 discriminator 3
 2724 00b8 FA68     		ldr	r2, [r7, #12]
 2725 00ba 1346     		mov	r3, r2
 2726 00bc 9B00     		lsls	r3, r3, #2
 2727 00be 1344     		add	r3, r3, r2
 2728              		.loc 1 651 6 discriminator 3
 2729 00c0 0333     		adds	r3, r3, #3
 2730 00c2 7A68     		ldr	r2, [r7, #4]
 2731 00c4 1344     		add	r3, r3, r2
 2732              		.loc 1 651 40 discriminator 3
 2733 00c6 CAB2     		uxtb	r2, r1
 2734              		.loc 1 651 14 discriminator 3
 2735 00c8 1A70     		strb	r2, [r3]
 652:poly.c        ****     r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 2736              		.loc 1 652 28 discriminator 3
 2737 00ca FB68     		ldr	r3, [r7, #12]
 2738 00cc 9B00     		lsls	r3, r3, #2
 2739              		.loc 1 652 30 discriminator 3
 2740 00ce DA1C     		adds	r2, r3, #3
 2741              		.loc 1 652 26 discriminator 3
 2742 00d0 3B68     		ldr	r3, [r7]
 2743 00d2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2744              		.loc 1 652 34 discriminator 3
 2745 00d6 9910     		asrs	r1, r3, #2
 2746              		.loc 1 652 8 discriminator 3
 2747 00d8 FA68     		ldr	r2, [r7, #12]
 2748 00da 1346     		mov	r3, r2
 2749 00dc 9B00     		lsls	r3, r3, #2
 2750 00de 1344     		add	r3, r3, r2
 2751              		.loc 1 652 6 discriminator 3
 2752 00e0 0433     		adds	r3, r3, #4
 2753 00e2 7A68     		ldr	r2, [r7, #4]
 2754 00e4 1344     		add	r3, r3, r2
 2755              		.loc 1 652 14 discriminator 3
 2756 00e6 CAB2     		uxtb	r2, r1
 2757 00e8 1A70     		strb	r2, [r3]
 647:poly.c        ****     r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 2758              		.loc 1 647 23 discriminator 3
 2759 00ea FB68     		ldr	r3, [r7, #12]
 2760 00ec 0133     		adds	r3, r3, #1
 2761 00ee FB60     		str	r3, [r7, #12]
 2762              	.L84:
 647:poly.c        ****     r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 2763              		.loc 1 647 3 discriminator 1
 2764 00f0 FB68     		ldr	r3, [r7, #12]
 2765 00f2 3F2B     		cmp	r3, #63
 2766 00f4 8CD9     		bls	.L85
 653:poly.c        ****   }
 654:poly.c        **** 
 655:poly.c        ****   DBENCH_STOP(*tpack);
 656:poly.c        **** }
 2767              		.loc 1 656 1
 2768 00f6 00BF     		nop
 2769 00f8 00BF     		nop
 2770 00fa 1437     		adds	r7, r7, #20
 2771              	.LCFI121:
 2772              		.cfi_def_cfa_offset 4
 2773 00fc BD46     		mov	sp, r7
 2774              	.LCFI122:
 2775              		.cfi_def_cfa_register 13
 2776              		@ sp needed
 2777 00fe 80BC     		pop	{r7}
 2778              	.LCFI123:
 2779              		.cfi_restore 7
 2780              		.cfi_def_cfa_offset 0
 2781 0100 7047     		bx	lr
 2782              		.cfi_endproc
 2783              	.LFE22:
 2785              		.section	.text.pqcrystals_dilithium2_ref_polyt1_unpack,"ax",%progbits
 2786              		.align	1
 2787              		.global	pqcrystals_dilithium2_ref_polyt1_unpack
 2788              		.syntax unified
 2789              		.thumb
 2790              		.thumb_func
 2791              		.fpu softvfp
 2793              	pqcrystals_dilithium2_ref_polyt1_unpack:
 2794              	.LFB23:
 657:poly.c        **** 
 658:poly.c        **** /*************************************************
 659:poly.c        **** * Name:        polyt1_unpack
 660:poly.c        **** *
 661:poly.c        **** * Description: Unpack polynomial t1 with 10-bit coefficients.
 662:poly.c        **** *              Output coefficients are standard representatives.
 663:poly.c        **** *
 664:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 665:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 666:poly.c        **** **************************************************/
 667:poly.c        **** void polyt1_unpack(poly *r, const uint8_t *a) {
 2795              		.loc 1 667 47
 2796              		.cfi_startproc
 2797              		@ args = 0, pretend = 0, frame = 16
 2798              		@ frame_needed = 1, uses_anonymous_args = 0
 2799              		@ link register save eliminated.
 2800 0000 80B4     		push	{r7}
 2801              	.LCFI124:
 2802              		.cfi_def_cfa_offset 4
 2803              		.cfi_offset 7, -4
 2804 0002 85B0     		sub	sp, sp, #20
 2805              	.LCFI125:
 2806              		.cfi_def_cfa_offset 24
 2807 0004 00AF     		add	r7, sp, #0
 2808              	.LCFI126:
 2809              		.cfi_def_cfa_register 7
 2810 0006 7860     		str	r0, [r7, #4]
 2811 0008 3960     		str	r1, [r7]
 668:poly.c        ****   unsigned int i;
 669:poly.c        ****   DBENCH_START();
 670:poly.c        **** 
 671:poly.c        ****   for(i = 0; i < N/4; ++i) {
 2812              		.loc 1 671 9
 2813 000a 0023     		movs	r3, #0
 2814 000c FB60     		str	r3, [r7, #12]
 2815              		.loc 1 671 3
 2816 000e 76E0     		b	.L87
 2817              	.L88:
 672:poly.c        ****     r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 2818              		.loc 1 672 29 discriminator 3
 2819 0010 FA68     		ldr	r2, [r7, #12]
 2820 0012 1346     		mov	r3, r2
 2821 0014 9B00     		lsls	r3, r3, #2
 2822 0016 1344     		add	r3, r3, r2
 2823              		.loc 1 672 27 discriminator 3
 2824 0018 3A68     		ldr	r2, [r7]
 2825 001a 1344     		add	r3, r3, r2
 2826 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2827              		.loc 1 672 35 discriminator 3
 2828 001e 1946     		mov	r1, r3
 2829              		.loc 1 672 57 discriminator 3
 2830 0020 FA68     		ldr	r2, [r7, #12]
 2831 0022 1346     		mov	r3, r2
 2832 0024 9B00     		lsls	r3, r3, #2
 2833 0026 1344     		add	r3, r3, r2
 2834              		.loc 1 672 55 discriminator 3
 2835 0028 0133     		adds	r3, r3, #1
 2836 002a 3A68     		ldr	r2, [r7]
 2837 002c 1344     		add	r3, r3, r2
 2838 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2839              		.loc 1 672 63 discriminator 3
 2840 0030 1B02     		lsls	r3, r3, #8
 2841              		.loc 1 672 41 discriminator 3
 2842 0032 0B43     		orrs	r3, r3, r1
 2843              		.loc 1 672 70 discriminator 3
 2844 0034 1946     		mov	r1, r3
 2845              		.loc 1 672 18 discriminator 3
 2846 0036 FB68     		ldr	r3, [r7, #12]
 2847 0038 9A00     		lsls	r2, r3, #2
 2848              		.loc 1 672 70 discriminator 3
 2849 003a C1F30901 		ubfx	r1, r1, #0, #10
 2850              		.loc 1 672 22 discriminator 3
 2851 003e 7B68     		ldr	r3, [r7, #4]
 2852 0040 43F82210 		str	r1, [r3, r2, lsl #2]
 673:poly.c        ****     r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
 2853              		.loc 1 673 29 discriminator 3
 2854 0044 FA68     		ldr	r2, [r7, #12]
 2855 0046 1346     		mov	r3, r2
 2856 0048 9B00     		lsls	r3, r3, #2
 2857 004a 1344     		add	r3, r3, r2
 2858              		.loc 1 673 27 discriminator 3
 2859 004c 0133     		adds	r3, r3, #1
 2860 004e 3A68     		ldr	r2, [r7]
 2861 0050 1344     		add	r3, r3, r2
 2862 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2863              		.loc 1 673 35 discriminator 3
 2864 0054 9B08     		lsrs	r3, r3, #2
 2865 0056 DBB2     		uxtb	r3, r3
 2866 0058 1946     		mov	r1, r3
 2867              		.loc 1 673 57 discriminator 3
 2868 005a FA68     		ldr	r2, [r7, #12]
 2869 005c 1346     		mov	r3, r2
 2870 005e 9B00     		lsls	r3, r3, #2
 2871 0060 1344     		add	r3, r3, r2
 2872              		.loc 1 673 55 discriminator 3
 2873 0062 0233     		adds	r3, r3, #2
 2874 0064 3A68     		ldr	r2, [r7]
 2875 0066 1344     		add	r3, r3, r2
 2876 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2877              		.loc 1 673 63 discriminator 3
 2878 006a 9B01     		lsls	r3, r3, #6
 2879              		.loc 1 673 41 discriminator 3
 2880 006c 0B43     		orrs	r3, r3, r1
 2881              		.loc 1 673 70 discriminator 3
 2882 006e 1946     		mov	r1, r3
 2883              		.loc 1 673 16 discriminator 3
 2884 0070 FB68     		ldr	r3, [r7, #12]
 2885 0072 9B00     		lsls	r3, r3, #2
 2886              		.loc 1 673 18 discriminator 3
 2887 0074 5A1C     		adds	r2, r3, #1
 2888              		.loc 1 673 70 discriminator 3
 2889 0076 C1F30901 		ubfx	r1, r1, #0, #10
 2890              		.loc 1 673 22 discriminator 3
 2891 007a 7B68     		ldr	r3, [r7, #4]
 2892 007c 43F82210 		str	r1, [r3, r2, lsl #2]
 674:poly.c        ****     r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
 2893              		.loc 1 674 29 discriminator 3
 2894 0080 FA68     		ldr	r2, [r7, #12]
 2895 0082 1346     		mov	r3, r2
 2896 0084 9B00     		lsls	r3, r3, #2
 2897 0086 1344     		add	r3, r3, r2
 2898              		.loc 1 674 27 discriminator 3
 2899 0088 0233     		adds	r3, r3, #2
 2900 008a 3A68     		ldr	r2, [r7]
 2901 008c 1344     		add	r3, r3, r2
 2902 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2903              		.loc 1 674 35 discriminator 3
 2904 0090 1B09     		lsrs	r3, r3, #4
 2905 0092 DBB2     		uxtb	r3, r3
 2906 0094 1946     		mov	r1, r3
 2907              		.loc 1 674 57 discriminator 3
 2908 0096 FA68     		ldr	r2, [r7, #12]
 2909 0098 1346     		mov	r3, r2
 2910 009a 9B00     		lsls	r3, r3, #2
 2911 009c 1344     		add	r3, r3, r2
 2912              		.loc 1 674 55 discriminator 3
 2913 009e 0333     		adds	r3, r3, #3
 2914 00a0 3A68     		ldr	r2, [r7]
 2915 00a2 1344     		add	r3, r3, r2
 2916 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2917              		.loc 1 674 63 discriminator 3
 2918 00a6 1B01     		lsls	r3, r3, #4
 2919              		.loc 1 674 41 discriminator 3
 2920 00a8 0B43     		orrs	r3, r3, r1
 2921              		.loc 1 674 70 discriminator 3
 2922 00aa 1946     		mov	r1, r3
 2923              		.loc 1 674 16 discriminator 3
 2924 00ac FB68     		ldr	r3, [r7, #12]
 2925 00ae 9B00     		lsls	r3, r3, #2
 2926              		.loc 1 674 18 discriminator 3
 2927 00b0 9A1C     		adds	r2, r3, #2
 2928              		.loc 1 674 70 discriminator 3
 2929 00b2 C1F30901 		ubfx	r1, r1, #0, #10
 2930              		.loc 1 674 22 discriminator 3
 2931 00b6 7B68     		ldr	r3, [r7, #4]
 2932 00b8 43F82210 		str	r1, [r3, r2, lsl #2]
 675:poly.c        ****     r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 2933              		.loc 1 675 29 discriminator 3
 2934 00bc FA68     		ldr	r2, [r7, #12]
 2935 00be 1346     		mov	r3, r2
 2936 00c0 9B00     		lsls	r3, r3, #2
 2937 00c2 1344     		add	r3, r3, r2
 2938              		.loc 1 675 27 discriminator 3
 2939 00c4 0333     		adds	r3, r3, #3
 2940 00c6 3A68     		ldr	r2, [r7]
 2941 00c8 1344     		add	r3, r3, r2
 2942 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2943              		.loc 1 675 35 discriminator 3
 2944 00cc 9B09     		lsrs	r3, r3, #6
 2945 00ce DBB2     		uxtb	r3, r3
 2946 00d0 1946     		mov	r1, r3
 2947              		.loc 1 675 57 discriminator 3
 2948 00d2 FA68     		ldr	r2, [r7, #12]
 2949 00d4 1346     		mov	r3, r2
 2950 00d6 9B00     		lsls	r3, r3, #2
 2951 00d8 1344     		add	r3, r3, r2
 2952              		.loc 1 675 55 discriminator 3
 2953 00da 0433     		adds	r3, r3, #4
 2954 00dc 3A68     		ldr	r2, [r7]
 2955 00de 1344     		add	r3, r3, r2
 2956 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2957              		.loc 1 675 63 discriminator 3
 2958 00e2 9B00     		lsls	r3, r3, #2
 2959              		.loc 1 675 41 discriminator 3
 2960 00e4 0B43     		orrs	r3, r3, r1
 2961              		.loc 1 675 70 discriminator 3
 2962 00e6 1946     		mov	r1, r3
 2963              		.loc 1 675 16 discriminator 3
 2964 00e8 FB68     		ldr	r3, [r7, #12]
 2965 00ea 9B00     		lsls	r3, r3, #2
 2966              		.loc 1 675 18 discriminator 3
 2967 00ec DA1C     		adds	r2, r3, #3
 2968              		.loc 1 675 70 discriminator 3
 2969 00ee C1F30901 		ubfx	r1, r1, #0, #10
 2970              		.loc 1 675 22 discriminator 3
 2971 00f2 7B68     		ldr	r3, [r7, #4]
 2972 00f4 43F82210 		str	r1, [r3, r2, lsl #2]
 671:poly.c        ****     r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 2973              		.loc 1 671 23 discriminator 3
 2974 00f8 FB68     		ldr	r3, [r7, #12]
 2975 00fa 0133     		adds	r3, r3, #1
 2976 00fc FB60     		str	r3, [r7, #12]
 2977              	.L87:
 671:poly.c        ****     r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 2978              		.loc 1 671 3 discriminator 1
 2979 00fe FB68     		ldr	r3, [r7, #12]
 2980 0100 3F2B     		cmp	r3, #63
 2981 0102 85D9     		bls	.L88
 676:poly.c        ****   }
 677:poly.c        **** 
 678:poly.c        ****   DBENCH_STOP(*tpack);
 679:poly.c        **** }
 2982              		.loc 1 679 1
 2983 0104 00BF     		nop
 2984 0106 00BF     		nop
 2985 0108 1437     		adds	r7, r7, #20
 2986              	.LCFI127:
 2987              		.cfi_def_cfa_offset 4
 2988 010a BD46     		mov	sp, r7
 2989              	.LCFI128:
 2990              		.cfi_def_cfa_register 13
 2991              		@ sp needed
 2992 010c 80BC     		pop	{r7}
 2993              	.LCFI129:
 2994              		.cfi_restore 7
 2995              		.cfi_def_cfa_offset 0
 2996 010e 7047     		bx	lr
 2997              		.cfi_endproc
 2998              	.LFE23:
 3000              		.section	.text.pqcrystals_dilithium2_ref_polyt0_pack,"ax",%progbits
 3001              		.align	1
 3002              		.global	pqcrystals_dilithium2_ref_polyt0_pack
 3003              		.syntax unified
 3004              		.thumb
 3005              		.thumb_func
 3006              		.fpu softvfp
 3008              	pqcrystals_dilithium2_ref_polyt0_pack:
 3009              	.LFB24:
 680:poly.c        **** 
 681:poly.c        **** /*************************************************
 682:poly.c        **** * Name:        polyt0_pack
 683:poly.c        **** *
 684:poly.c        **** * Description: Bit-pack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
 685:poly.c        **** *
 686:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 687:poly.c        **** *                            POLYT0_PACKEDBYTES bytes
 688:poly.c        **** *              - const poly *a: pointer to input polynomial
 689:poly.c        **** **************************************************/
 690:poly.c        **** void polyt0_pack(uint8_t *r, const poly *a) {
 3010              		.loc 1 690 45
 3011              		.cfi_startproc
 3012              		@ args = 0, pretend = 0, frame = 48
 3013              		@ frame_needed = 1, uses_anonymous_args = 0
 3014              		@ link register save eliminated.
 3015 0000 80B4     		push	{r7}
 3016              	.LCFI130:
 3017              		.cfi_def_cfa_offset 4
 3018              		.cfi_offset 7, -4
 3019 0002 8DB0     		sub	sp, sp, #52
 3020              	.LCFI131:
 3021              		.cfi_def_cfa_offset 56
 3022 0004 00AF     		add	r7, sp, #0
 3023              	.LCFI132:
 3024              		.cfi_def_cfa_register 7
 3025 0006 7860     		str	r0, [r7, #4]
 3026 0008 3960     		str	r1, [r7]
 691:poly.c        ****   unsigned int i;
 692:poly.c        ****   uint32_t t[8];
 693:poly.c        ****   DBENCH_START();
 694:poly.c        **** 
 695:poly.c        ****   for(i = 0; i < N/8; ++i) {
 3027              		.loc 1 695 9
 3028 000a 0023     		movs	r3, #0
 3029 000c FB62     		str	r3, [r7, #44]
 3030              		.loc 1 695 3
 3031 000e ADE1     		b	.L90
 3032              	.L91:
 696:poly.c        ****     t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 3033              		.loc 1 696 40 discriminator 3
 3034 0010 FB6A     		ldr	r3, [r7, #44]
 3035 0012 DA00     		lsls	r2, r3, #3
 3036              		.loc 1 696 36 discriminator 3
 3037 0014 3B68     		ldr	r3, [r7]
 3038 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3039              		.loc 1 696 25 discriminator 3
 3040 001a C3F58053 		rsb	r3, r3, #4096
 3041              		.loc 1 696 10 discriminator 3
 3042 001e FB60     		str	r3, [r7, #12]
 697:poly.c        ****     t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 3043              		.loc 1 697 38 discriminator 3
 3044 0020 FB6A     		ldr	r3, [r7, #44]
 3045 0022 DB00     		lsls	r3, r3, #3
 3046              		.loc 1 697 40 discriminator 3
 3047 0024 5A1C     		adds	r2, r3, #1
 3048              		.loc 1 697 36 discriminator 3
 3049 0026 3B68     		ldr	r3, [r7]
 3050 0028 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3051              		.loc 1 697 25 discriminator 3
 3052 002c C3F58053 		rsb	r3, r3, #4096
 3053              		.loc 1 697 10 discriminator 3
 3054 0030 3B61     		str	r3, [r7, #16]
 698:poly.c        ****     t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 3055              		.loc 1 698 38 discriminator 3
 3056 0032 FB6A     		ldr	r3, [r7, #44]
 3057 0034 DB00     		lsls	r3, r3, #3
 3058              		.loc 1 698 40 discriminator 3
 3059 0036 9A1C     		adds	r2, r3, #2
 3060              		.loc 1 698 36 discriminator 3
 3061 0038 3B68     		ldr	r3, [r7]
 3062 003a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3063              		.loc 1 698 25 discriminator 3
 3064 003e C3F58053 		rsb	r3, r3, #4096
 3065              		.loc 1 698 10 discriminator 3
 3066 0042 7B61     		str	r3, [r7, #20]
 699:poly.c        ****     t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 3067              		.loc 1 699 38 discriminator 3
 3068 0044 FB6A     		ldr	r3, [r7, #44]
 3069 0046 DB00     		lsls	r3, r3, #3
 3070              		.loc 1 699 40 discriminator 3
 3071 0048 DA1C     		adds	r2, r3, #3
 3072              		.loc 1 699 36 discriminator 3
 3073 004a 3B68     		ldr	r3, [r7]
 3074 004c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3075              		.loc 1 699 25 discriminator 3
 3076 0050 C3F58053 		rsb	r3, r3, #4096
 3077              		.loc 1 699 10 discriminator 3
 3078 0054 BB61     		str	r3, [r7, #24]
 700:poly.c        ****     t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 3079              		.loc 1 700 38 discriminator 3
 3080 0056 FB6A     		ldr	r3, [r7, #44]
 3081 0058 DB00     		lsls	r3, r3, #3
 3082              		.loc 1 700 40 discriminator 3
 3083 005a 1A1D     		adds	r2, r3, #4
 3084              		.loc 1 700 36 discriminator 3
 3085 005c 3B68     		ldr	r3, [r7]
 3086 005e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3087              		.loc 1 700 25 discriminator 3
 3088 0062 C3F58053 		rsb	r3, r3, #4096
 3089              		.loc 1 700 10 discriminator 3
 3090 0066 FB61     		str	r3, [r7, #28]
 701:poly.c        ****     t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 3091              		.loc 1 701 38 discriminator 3
 3092 0068 FB6A     		ldr	r3, [r7, #44]
 3093 006a DB00     		lsls	r3, r3, #3
 3094              		.loc 1 701 40 discriminator 3
 3095 006c 5A1D     		adds	r2, r3, #5
 3096              		.loc 1 701 36 discriminator 3
 3097 006e 3B68     		ldr	r3, [r7]
 3098 0070 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3099              		.loc 1 701 25 discriminator 3
 3100 0074 C3F58053 		rsb	r3, r3, #4096
 3101              		.loc 1 701 10 discriminator 3
 3102 0078 3B62     		str	r3, [r7, #32]
 702:poly.c        ****     t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 3103              		.loc 1 702 38 discriminator 3
 3104 007a FB6A     		ldr	r3, [r7, #44]
 3105 007c DB00     		lsls	r3, r3, #3
 3106              		.loc 1 702 40 discriminator 3
 3107 007e 9A1D     		adds	r2, r3, #6
 3108              		.loc 1 702 36 discriminator 3
 3109 0080 3B68     		ldr	r3, [r7]
 3110 0082 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3111              		.loc 1 702 25 discriminator 3
 3112 0086 C3F58053 		rsb	r3, r3, #4096
 3113              		.loc 1 702 10 discriminator 3
 3114 008a 7B62     		str	r3, [r7, #36]
 703:poly.c        ****     t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 3115              		.loc 1 703 38 discriminator 3
 3116 008c FB6A     		ldr	r3, [r7, #44]
 3117 008e DB00     		lsls	r3, r3, #3
 3118              		.loc 1 703 40 discriminator 3
 3119 0090 DA1D     		adds	r2, r3, #7
 3120              		.loc 1 703 36 discriminator 3
 3121 0092 3B68     		ldr	r3, [r7]
 3122 0094 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3123              		.loc 1 703 25 discriminator 3
 3124 0098 C3F58053 		rsb	r3, r3, #4096
 3125              		.loc 1 703 10 discriminator 3
 3126 009c BB62     		str	r3, [r7, #40]
 704:poly.c        **** 
 705:poly.c        ****     r[13*i+ 0]  =  t[0];
 3127              		.loc 1 705 21 discriminator 3
 3128 009e F968     		ldr	r1, [r7, #12]
 3129              		.loc 1 705 9 discriminator 3
 3130 00a0 FA6A     		ldr	r2, [r7, #44]
 3131 00a2 1346     		mov	r3, r2
 3132 00a4 5B00     		lsls	r3, r3, #1
 3133 00a6 1344     		add	r3, r3, r2
 3134 00a8 9B00     		lsls	r3, r3, #2
 3135 00aa 1344     		add	r3, r3, r2
 3136              		.loc 1 705 6 discriminator 3
 3137 00ac 7A68     		ldr	r2, [r7, #4]
 3138 00ae 1344     		add	r3, r3, r2
 3139              		.loc 1 705 17 discriminator 3
 3140 00b0 CAB2     		uxtb	r2, r1
 3141 00b2 1A70     		strb	r2, [r3]
 706:poly.c        ****     r[13*i+ 1]  =  t[0] >>  8;
 3142              		.loc 1 706 21 discriminator 3
 3143 00b4 FB68     		ldr	r3, [r7, #12]
 3144              		.loc 1 706 25 discriminator 3
 3145 00b6 190A     		lsrs	r1, r3, #8
 3146              		.loc 1 706 9 discriminator 3
 3147 00b8 FA6A     		ldr	r2, [r7, #44]
 3148 00ba 1346     		mov	r3, r2
 3149 00bc 5B00     		lsls	r3, r3, #1
 3150 00be 1344     		add	r3, r3, r2
 3151 00c0 9B00     		lsls	r3, r3, #2
 3152 00c2 1344     		add	r3, r3, r2
 3153              		.loc 1 706 6 discriminator 3
 3154 00c4 0133     		adds	r3, r3, #1
 3155 00c6 7A68     		ldr	r2, [r7, #4]
 3156 00c8 1344     		add	r3, r3, r2
 3157              		.loc 1 706 17 discriminator 3
 3158 00ca CAB2     		uxtb	r2, r1
 3159 00cc 1A70     		strb	r2, [r3]
 707:poly.c        ****     r[13*i+ 1] |=  t[1] <<  5;
 3160              		.loc 1 707 16 discriminator 3
 3161 00ce FA6A     		ldr	r2, [r7, #44]
 3162 00d0 1346     		mov	r3, r2
 3163 00d2 5B00     		lsls	r3, r3, #1
 3164 00d4 1344     		add	r3, r3, r2
 3165 00d6 9B00     		lsls	r3, r3, #2
 3166 00d8 1344     		add	r3, r3, r2
 3167 00da 0133     		adds	r3, r3, #1
 3168 00dc 7A68     		ldr	r2, [r7, #4]
 3169 00de 1344     		add	r3, r3, r2
 3170 00e0 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3171              		.loc 1 707 21 discriminator 3
 3172 00e2 3B69     		ldr	r3, [r7, #16]
 3173              		.loc 1 707 25 discriminator 3
 3174 00e4 DBB2     		uxtb	r3, r3
 3175 00e6 5B01     		lsls	r3, r3, #5
 3176 00e8 D9B2     		uxtb	r1, r3
 3177              		.loc 1 707 16 discriminator 3
 3178 00ea FA6A     		ldr	r2, [r7, #44]
 3179 00ec 1346     		mov	r3, r2
 3180 00ee 5B00     		lsls	r3, r3, #1
 3181 00f0 1344     		add	r3, r3, r2
 3182 00f2 9B00     		lsls	r3, r3, #2
 3183 00f4 1344     		add	r3, r3, r2
 3184 00f6 0133     		adds	r3, r3, #1
 3185 00f8 7A68     		ldr	r2, [r7, #4]
 3186 00fa 1344     		add	r3, r3, r2
 3187 00fc 40EA0102 		orr	r2, r0, r1
 3188 0100 D2B2     		uxtb	r2, r2
 3189 0102 1A70     		strb	r2, [r3]
 708:poly.c        ****     r[13*i+ 2]  =  t[1] >>  3;
 3190              		.loc 1 708 21 discriminator 3
 3191 0104 3B69     		ldr	r3, [r7, #16]
 3192              		.loc 1 708 25 discriminator 3
 3193 0106 D908     		lsrs	r1, r3, #3
 3194              		.loc 1 708 9 discriminator 3
 3195 0108 FA6A     		ldr	r2, [r7, #44]
 3196 010a 1346     		mov	r3, r2
 3197 010c 5B00     		lsls	r3, r3, #1
 3198 010e 1344     		add	r3, r3, r2
 3199 0110 9B00     		lsls	r3, r3, #2
 3200 0112 1344     		add	r3, r3, r2
 3201              		.loc 1 708 6 discriminator 3
 3202 0114 0233     		adds	r3, r3, #2
 3203 0116 7A68     		ldr	r2, [r7, #4]
 3204 0118 1344     		add	r3, r3, r2
 3205              		.loc 1 708 17 discriminator 3
 3206 011a CAB2     		uxtb	r2, r1
 3207 011c 1A70     		strb	r2, [r3]
 709:poly.c        ****     r[13*i+ 3]  =  t[1] >> 11;
 3208              		.loc 1 709 21 discriminator 3
 3209 011e 3B69     		ldr	r3, [r7, #16]
 3210              		.loc 1 709 25 discriminator 3
 3211 0120 D90A     		lsrs	r1, r3, #11
 3212              		.loc 1 709 9 discriminator 3
 3213 0122 FA6A     		ldr	r2, [r7, #44]
 3214 0124 1346     		mov	r3, r2
 3215 0126 5B00     		lsls	r3, r3, #1
 3216 0128 1344     		add	r3, r3, r2
 3217 012a 9B00     		lsls	r3, r3, #2
 3218 012c 1344     		add	r3, r3, r2
 3219              		.loc 1 709 6 discriminator 3
 3220 012e 0333     		adds	r3, r3, #3
 3221 0130 7A68     		ldr	r2, [r7, #4]
 3222 0132 1344     		add	r3, r3, r2
 3223              		.loc 1 709 17 discriminator 3
 3224 0134 CAB2     		uxtb	r2, r1
 3225 0136 1A70     		strb	r2, [r3]
 710:poly.c        ****     r[13*i+ 3] |=  t[2] <<  2;
 3226              		.loc 1 710 16 discriminator 3
 3227 0138 FA6A     		ldr	r2, [r7, #44]
 3228 013a 1346     		mov	r3, r2
 3229 013c 5B00     		lsls	r3, r3, #1
 3230 013e 1344     		add	r3, r3, r2
 3231 0140 9B00     		lsls	r3, r3, #2
 3232 0142 1344     		add	r3, r3, r2
 3233 0144 0333     		adds	r3, r3, #3
 3234 0146 7A68     		ldr	r2, [r7, #4]
 3235 0148 1344     		add	r3, r3, r2
 3236 014a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3237              		.loc 1 710 21 discriminator 3
 3238 014c 7B69     		ldr	r3, [r7, #20]
 3239              		.loc 1 710 25 discriminator 3
 3240 014e DBB2     		uxtb	r3, r3
 3241 0150 9B00     		lsls	r3, r3, #2
 3242 0152 D9B2     		uxtb	r1, r3
 3243              		.loc 1 710 16 discriminator 3
 3244 0154 FA6A     		ldr	r2, [r7, #44]
 3245 0156 1346     		mov	r3, r2
 3246 0158 5B00     		lsls	r3, r3, #1
 3247 015a 1344     		add	r3, r3, r2
 3248 015c 9B00     		lsls	r3, r3, #2
 3249 015e 1344     		add	r3, r3, r2
 3250 0160 0333     		adds	r3, r3, #3
 3251 0162 7A68     		ldr	r2, [r7, #4]
 3252 0164 1344     		add	r3, r3, r2
 3253 0166 40EA0102 		orr	r2, r0, r1
 3254 016a D2B2     		uxtb	r2, r2
 3255 016c 1A70     		strb	r2, [r3]
 711:poly.c        ****     r[13*i+ 4]  =  t[2] >>  6;
 3256              		.loc 1 711 21 discriminator 3
 3257 016e 7B69     		ldr	r3, [r7, #20]
 3258              		.loc 1 711 25 discriminator 3
 3259 0170 9909     		lsrs	r1, r3, #6
 3260              		.loc 1 711 9 discriminator 3
 3261 0172 FA6A     		ldr	r2, [r7, #44]
 3262 0174 1346     		mov	r3, r2
 3263 0176 5B00     		lsls	r3, r3, #1
 3264 0178 1344     		add	r3, r3, r2
 3265 017a 9B00     		lsls	r3, r3, #2
 3266 017c 1344     		add	r3, r3, r2
 3267              		.loc 1 711 6 discriminator 3
 3268 017e 0433     		adds	r3, r3, #4
 3269 0180 7A68     		ldr	r2, [r7, #4]
 3270 0182 1344     		add	r3, r3, r2
 3271              		.loc 1 711 17 discriminator 3
 3272 0184 CAB2     		uxtb	r2, r1
 3273 0186 1A70     		strb	r2, [r3]
 712:poly.c        ****     r[13*i+ 4] |=  t[3] <<  7;
 3274              		.loc 1 712 16 discriminator 3
 3275 0188 FA6A     		ldr	r2, [r7, #44]
 3276 018a 1346     		mov	r3, r2
 3277 018c 5B00     		lsls	r3, r3, #1
 3278 018e 1344     		add	r3, r3, r2
 3279 0190 9B00     		lsls	r3, r3, #2
 3280 0192 1344     		add	r3, r3, r2
 3281 0194 0433     		adds	r3, r3, #4
 3282 0196 7A68     		ldr	r2, [r7, #4]
 3283 0198 1344     		add	r3, r3, r2
 3284 019a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3285              		.loc 1 712 21 discriminator 3
 3286 019c BB69     		ldr	r3, [r7, #24]
 3287              		.loc 1 712 25 discriminator 3
 3288 019e DBB2     		uxtb	r3, r3
 3289 01a0 DB01     		lsls	r3, r3, #7
 3290 01a2 D9B2     		uxtb	r1, r3
 3291              		.loc 1 712 16 discriminator 3
 3292 01a4 FA6A     		ldr	r2, [r7, #44]
 3293 01a6 1346     		mov	r3, r2
 3294 01a8 5B00     		lsls	r3, r3, #1
 3295 01aa 1344     		add	r3, r3, r2
 3296 01ac 9B00     		lsls	r3, r3, #2
 3297 01ae 1344     		add	r3, r3, r2
 3298 01b0 0433     		adds	r3, r3, #4
 3299 01b2 7A68     		ldr	r2, [r7, #4]
 3300 01b4 1344     		add	r3, r3, r2
 3301 01b6 40EA0102 		orr	r2, r0, r1
 3302 01ba D2B2     		uxtb	r2, r2
 3303 01bc 1A70     		strb	r2, [r3]
 713:poly.c        ****     r[13*i+ 5]  =  t[3] >>  1;
 3304              		.loc 1 713 21 discriminator 3
 3305 01be BB69     		ldr	r3, [r7, #24]
 3306              		.loc 1 713 25 discriminator 3
 3307 01c0 5908     		lsrs	r1, r3, #1
 3308              		.loc 1 713 9 discriminator 3
 3309 01c2 FA6A     		ldr	r2, [r7, #44]
 3310 01c4 1346     		mov	r3, r2
 3311 01c6 5B00     		lsls	r3, r3, #1
 3312 01c8 1344     		add	r3, r3, r2
 3313 01ca 9B00     		lsls	r3, r3, #2
 3314 01cc 1344     		add	r3, r3, r2
 3315              		.loc 1 713 6 discriminator 3
 3316 01ce 0533     		adds	r3, r3, #5
 3317 01d0 7A68     		ldr	r2, [r7, #4]
 3318 01d2 1344     		add	r3, r3, r2
 3319              		.loc 1 713 17 discriminator 3
 3320 01d4 CAB2     		uxtb	r2, r1
 3321 01d6 1A70     		strb	r2, [r3]
 714:poly.c        ****     r[13*i+ 6]  =  t[3] >>  9;
 3322              		.loc 1 714 21 discriminator 3
 3323 01d8 BB69     		ldr	r3, [r7, #24]
 3324              		.loc 1 714 25 discriminator 3
 3325 01da 590A     		lsrs	r1, r3, #9
 3326              		.loc 1 714 9 discriminator 3
 3327 01dc FA6A     		ldr	r2, [r7, #44]
 3328 01de 1346     		mov	r3, r2
 3329 01e0 5B00     		lsls	r3, r3, #1
 3330 01e2 1344     		add	r3, r3, r2
 3331 01e4 9B00     		lsls	r3, r3, #2
 3332 01e6 1344     		add	r3, r3, r2
 3333              		.loc 1 714 6 discriminator 3
 3334 01e8 0633     		adds	r3, r3, #6
 3335 01ea 7A68     		ldr	r2, [r7, #4]
 3336 01ec 1344     		add	r3, r3, r2
 3337              		.loc 1 714 17 discriminator 3
 3338 01ee CAB2     		uxtb	r2, r1
 3339 01f0 1A70     		strb	r2, [r3]
 715:poly.c        ****     r[13*i+ 6] |=  t[4] <<  4;
 3340              		.loc 1 715 16 discriminator 3
 3341 01f2 FA6A     		ldr	r2, [r7, #44]
 3342 01f4 1346     		mov	r3, r2
 3343 01f6 5B00     		lsls	r3, r3, #1
 3344 01f8 1344     		add	r3, r3, r2
 3345 01fa 9B00     		lsls	r3, r3, #2
 3346 01fc 1344     		add	r3, r3, r2
 3347 01fe 0633     		adds	r3, r3, #6
 3348 0200 7A68     		ldr	r2, [r7, #4]
 3349 0202 1344     		add	r3, r3, r2
 3350 0204 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3351              		.loc 1 715 21 discriminator 3
 3352 0206 FB69     		ldr	r3, [r7, #28]
 3353              		.loc 1 715 25 discriminator 3
 3354 0208 DBB2     		uxtb	r3, r3
 3355 020a 1B01     		lsls	r3, r3, #4
 3356 020c D9B2     		uxtb	r1, r3
 3357              		.loc 1 715 16 discriminator 3
 3358 020e FA6A     		ldr	r2, [r7, #44]
 3359 0210 1346     		mov	r3, r2
 3360 0212 5B00     		lsls	r3, r3, #1
 3361 0214 1344     		add	r3, r3, r2
 3362 0216 9B00     		lsls	r3, r3, #2
 3363 0218 1344     		add	r3, r3, r2
 3364 021a 0633     		adds	r3, r3, #6
 3365 021c 7A68     		ldr	r2, [r7, #4]
 3366 021e 1344     		add	r3, r3, r2
 3367 0220 40EA0102 		orr	r2, r0, r1
 3368 0224 D2B2     		uxtb	r2, r2
 3369 0226 1A70     		strb	r2, [r3]
 716:poly.c        ****     r[13*i+ 7]  =  t[4] >>  4;
 3370              		.loc 1 716 21 discriminator 3
 3371 0228 FB69     		ldr	r3, [r7, #28]
 3372              		.loc 1 716 25 discriminator 3
 3373 022a 1909     		lsrs	r1, r3, #4
 3374              		.loc 1 716 9 discriminator 3
 3375 022c FA6A     		ldr	r2, [r7, #44]
 3376 022e 1346     		mov	r3, r2
 3377 0230 5B00     		lsls	r3, r3, #1
 3378 0232 1344     		add	r3, r3, r2
 3379 0234 9B00     		lsls	r3, r3, #2
 3380 0236 1344     		add	r3, r3, r2
 3381              		.loc 1 716 6 discriminator 3
 3382 0238 0733     		adds	r3, r3, #7
 3383 023a 7A68     		ldr	r2, [r7, #4]
 3384 023c 1344     		add	r3, r3, r2
 3385              		.loc 1 716 17 discriminator 3
 3386 023e CAB2     		uxtb	r2, r1
 3387 0240 1A70     		strb	r2, [r3]
 717:poly.c        ****     r[13*i+ 8]  =  t[4] >> 12;
 3388              		.loc 1 717 21 discriminator 3
 3389 0242 FB69     		ldr	r3, [r7, #28]
 3390              		.loc 1 717 25 discriminator 3
 3391 0244 190B     		lsrs	r1, r3, #12
 3392              		.loc 1 717 9 discriminator 3
 3393 0246 FA6A     		ldr	r2, [r7, #44]
 3394 0248 1346     		mov	r3, r2
 3395 024a 5B00     		lsls	r3, r3, #1
 3396 024c 1344     		add	r3, r3, r2
 3397 024e 9B00     		lsls	r3, r3, #2
 3398 0250 1344     		add	r3, r3, r2
 3399              		.loc 1 717 6 discriminator 3
 3400 0252 0833     		adds	r3, r3, #8
 3401 0254 7A68     		ldr	r2, [r7, #4]
 3402 0256 1344     		add	r3, r3, r2
 3403              		.loc 1 717 17 discriminator 3
 3404 0258 CAB2     		uxtb	r2, r1
 3405 025a 1A70     		strb	r2, [r3]
 718:poly.c        ****     r[13*i+ 8] |=  t[5] <<  1;
 3406              		.loc 1 718 16 discriminator 3
 3407 025c FA6A     		ldr	r2, [r7, #44]
 3408 025e 1346     		mov	r3, r2
 3409 0260 5B00     		lsls	r3, r3, #1
 3410 0262 1344     		add	r3, r3, r2
 3411 0264 9B00     		lsls	r3, r3, #2
 3412 0266 1344     		add	r3, r3, r2
 3413 0268 0833     		adds	r3, r3, #8
 3414 026a 7A68     		ldr	r2, [r7, #4]
 3415 026c 1344     		add	r3, r3, r2
 3416 026e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3417              		.loc 1 718 21 discriminator 3
 3418 0270 3B6A     		ldr	r3, [r7, #32]
 3419              		.loc 1 718 25 discriminator 3
 3420 0272 DBB2     		uxtb	r3, r3
 3421 0274 5B00     		lsls	r3, r3, #1
 3422 0276 D9B2     		uxtb	r1, r3
 3423              		.loc 1 718 16 discriminator 3
 3424 0278 FA6A     		ldr	r2, [r7, #44]
 3425 027a 1346     		mov	r3, r2
 3426 027c 5B00     		lsls	r3, r3, #1
 3427 027e 1344     		add	r3, r3, r2
 3428 0280 9B00     		lsls	r3, r3, #2
 3429 0282 1344     		add	r3, r3, r2
 3430 0284 0833     		adds	r3, r3, #8
 3431 0286 7A68     		ldr	r2, [r7, #4]
 3432 0288 1344     		add	r3, r3, r2
 3433 028a 40EA0102 		orr	r2, r0, r1
 3434 028e D2B2     		uxtb	r2, r2
 3435 0290 1A70     		strb	r2, [r3]
 719:poly.c        ****     r[13*i+ 9]  =  t[5] >>  7;
 3436              		.loc 1 719 21 discriminator 3
 3437 0292 3B6A     		ldr	r3, [r7, #32]
 3438              		.loc 1 719 25 discriminator 3
 3439 0294 D909     		lsrs	r1, r3, #7
 3440              		.loc 1 719 9 discriminator 3
 3441 0296 FA6A     		ldr	r2, [r7, #44]
 3442 0298 1346     		mov	r3, r2
 3443 029a 5B00     		lsls	r3, r3, #1
 3444 029c 1344     		add	r3, r3, r2
 3445 029e 9B00     		lsls	r3, r3, #2
 3446 02a0 1344     		add	r3, r3, r2
 3447              		.loc 1 719 6 discriminator 3
 3448 02a2 0933     		adds	r3, r3, #9
 3449 02a4 7A68     		ldr	r2, [r7, #4]
 3450 02a6 1344     		add	r3, r3, r2
 3451              		.loc 1 719 17 discriminator 3
 3452 02a8 CAB2     		uxtb	r2, r1
 3453 02aa 1A70     		strb	r2, [r3]
 720:poly.c        ****     r[13*i+ 9] |=  t[6] <<  6;
 3454              		.loc 1 720 16 discriminator 3
 3455 02ac FA6A     		ldr	r2, [r7, #44]
 3456 02ae 1346     		mov	r3, r2
 3457 02b0 5B00     		lsls	r3, r3, #1
 3458 02b2 1344     		add	r3, r3, r2
 3459 02b4 9B00     		lsls	r3, r3, #2
 3460 02b6 1344     		add	r3, r3, r2
 3461 02b8 0933     		adds	r3, r3, #9
 3462 02ba 7A68     		ldr	r2, [r7, #4]
 3463 02bc 1344     		add	r3, r3, r2
 3464 02be 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3465              		.loc 1 720 21 discriminator 3
 3466 02c0 7B6A     		ldr	r3, [r7, #36]
 3467              		.loc 1 720 25 discriminator 3
 3468 02c2 DBB2     		uxtb	r3, r3
 3469 02c4 9B01     		lsls	r3, r3, #6
 3470 02c6 D9B2     		uxtb	r1, r3
 3471              		.loc 1 720 16 discriminator 3
 3472 02c8 FA6A     		ldr	r2, [r7, #44]
 3473 02ca 1346     		mov	r3, r2
 3474 02cc 5B00     		lsls	r3, r3, #1
 3475 02ce 1344     		add	r3, r3, r2
 3476 02d0 9B00     		lsls	r3, r3, #2
 3477 02d2 1344     		add	r3, r3, r2
 3478 02d4 0933     		adds	r3, r3, #9
 3479 02d6 7A68     		ldr	r2, [r7, #4]
 3480 02d8 1344     		add	r3, r3, r2
 3481 02da 40EA0102 		orr	r2, r0, r1
 3482 02de D2B2     		uxtb	r2, r2
 3483 02e0 1A70     		strb	r2, [r3]
 721:poly.c        ****     r[13*i+10]  =  t[6] >>  2;
 3484              		.loc 1 721 21 discriminator 3
 3485 02e2 7B6A     		ldr	r3, [r7, #36]
 3486              		.loc 1 721 25 discriminator 3
 3487 02e4 9908     		lsrs	r1, r3, #2
 3488              		.loc 1 721 9 discriminator 3
 3489 02e6 FA6A     		ldr	r2, [r7, #44]
 3490 02e8 1346     		mov	r3, r2
 3491 02ea 5B00     		lsls	r3, r3, #1
 3492 02ec 1344     		add	r3, r3, r2
 3493 02ee 9B00     		lsls	r3, r3, #2
 3494 02f0 1344     		add	r3, r3, r2
 3495              		.loc 1 721 6 discriminator 3
 3496 02f2 0A33     		adds	r3, r3, #10
 3497 02f4 7A68     		ldr	r2, [r7, #4]
 3498 02f6 1344     		add	r3, r3, r2
 3499              		.loc 1 721 17 discriminator 3
 3500 02f8 CAB2     		uxtb	r2, r1
 3501 02fa 1A70     		strb	r2, [r3]
 722:poly.c        ****     r[13*i+11]  =  t[6] >> 10;
 3502              		.loc 1 722 21 discriminator 3
 3503 02fc 7B6A     		ldr	r3, [r7, #36]
 3504              		.loc 1 722 25 discriminator 3
 3505 02fe 990A     		lsrs	r1, r3, #10
 3506              		.loc 1 722 9 discriminator 3
 3507 0300 FA6A     		ldr	r2, [r7, #44]
 3508 0302 1346     		mov	r3, r2
 3509 0304 5B00     		lsls	r3, r3, #1
 3510 0306 1344     		add	r3, r3, r2
 3511 0308 9B00     		lsls	r3, r3, #2
 3512 030a 1344     		add	r3, r3, r2
 3513              		.loc 1 722 6 discriminator 3
 3514 030c 0B33     		adds	r3, r3, #11
 3515 030e 7A68     		ldr	r2, [r7, #4]
 3516 0310 1344     		add	r3, r3, r2
 3517              		.loc 1 722 17 discriminator 3
 3518 0312 CAB2     		uxtb	r2, r1
 3519 0314 1A70     		strb	r2, [r3]
 723:poly.c        ****     r[13*i+11] |=  t[7] <<  3;
 3520              		.loc 1 723 16 discriminator 3
 3521 0316 FA6A     		ldr	r2, [r7, #44]
 3522 0318 1346     		mov	r3, r2
 3523 031a 5B00     		lsls	r3, r3, #1
 3524 031c 1344     		add	r3, r3, r2
 3525 031e 9B00     		lsls	r3, r3, #2
 3526 0320 1344     		add	r3, r3, r2
 3527 0322 0B33     		adds	r3, r3, #11
 3528 0324 7A68     		ldr	r2, [r7, #4]
 3529 0326 1344     		add	r3, r3, r2
 3530 0328 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3531              		.loc 1 723 21 discriminator 3
 3532 032a BB6A     		ldr	r3, [r7, #40]
 3533              		.loc 1 723 25 discriminator 3
 3534 032c DBB2     		uxtb	r3, r3
 3535 032e DB00     		lsls	r3, r3, #3
 3536 0330 D9B2     		uxtb	r1, r3
 3537              		.loc 1 723 16 discriminator 3
 3538 0332 FA6A     		ldr	r2, [r7, #44]
 3539 0334 1346     		mov	r3, r2
 3540 0336 5B00     		lsls	r3, r3, #1
 3541 0338 1344     		add	r3, r3, r2
 3542 033a 9B00     		lsls	r3, r3, #2
 3543 033c 1344     		add	r3, r3, r2
 3544 033e 0B33     		adds	r3, r3, #11
 3545 0340 7A68     		ldr	r2, [r7, #4]
 3546 0342 1344     		add	r3, r3, r2
 3547 0344 40EA0102 		orr	r2, r0, r1
 3548 0348 D2B2     		uxtb	r2, r2
 3549 034a 1A70     		strb	r2, [r3]
 724:poly.c        ****     r[13*i+12]  =  t[7] >>  5;
 3550              		.loc 1 724 21 discriminator 3
 3551 034c BB6A     		ldr	r3, [r7, #40]
 3552              		.loc 1 724 25 discriminator 3
 3553 034e 5909     		lsrs	r1, r3, #5
 3554              		.loc 1 724 9 discriminator 3
 3555 0350 FA6A     		ldr	r2, [r7, #44]
 3556 0352 1346     		mov	r3, r2
 3557 0354 5B00     		lsls	r3, r3, #1
 3558 0356 1344     		add	r3, r3, r2
 3559 0358 9B00     		lsls	r3, r3, #2
 3560 035a 1344     		add	r3, r3, r2
 3561              		.loc 1 724 6 discriminator 3
 3562 035c 0C33     		adds	r3, r3, #12
 3563 035e 7A68     		ldr	r2, [r7, #4]
 3564 0360 1344     		add	r3, r3, r2
 3565              		.loc 1 724 17 discriminator 3
 3566 0362 CAB2     		uxtb	r2, r1
 3567 0364 1A70     		strb	r2, [r3]
 695:poly.c        ****     t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 3568              		.loc 1 695 23 discriminator 3
 3569 0366 FB6A     		ldr	r3, [r7, #44]
 3570 0368 0133     		adds	r3, r3, #1
 3571 036a FB62     		str	r3, [r7, #44]
 3572              	.L90:
 695:poly.c        ****     t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 3573              		.loc 1 695 3 discriminator 1
 3574 036c FB6A     		ldr	r3, [r7, #44]
 3575 036e 1F2B     		cmp	r3, #31
 3576 0370 7FF64EAE 		bls	.L91
 725:poly.c        ****   }
 726:poly.c        **** 
 727:poly.c        ****   DBENCH_STOP(*tpack);
 728:poly.c        **** }
 3577              		.loc 1 728 1
 3578 0374 00BF     		nop
 3579 0376 00BF     		nop
 3580 0378 3437     		adds	r7, r7, #52
 3581              	.LCFI133:
 3582              		.cfi_def_cfa_offset 4
 3583 037a BD46     		mov	sp, r7
 3584              	.LCFI134:
 3585              		.cfi_def_cfa_register 13
 3586              		@ sp needed
 3587 037c 80BC     		pop	{r7}
 3588              	.LCFI135:
 3589              		.cfi_restore 7
 3590              		.cfi_def_cfa_offset 0
 3591 037e 7047     		bx	lr
 3592              		.cfi_endproc
 3593              	.LFE24:
 3595              		.section	.text.pqcrystals_dilithium2_ref_polyt0_unpack,"ax",%progbits
 3596              		.align	1
 3597              		.global	pqcrystals_dilithium2_ref_polyt0_unpack
 3598              		.syntax unified
 3599              		.thumb
 3600              		.thumb_func
 3601              		.fpu softvfp
 3603              	pqcrystals_dilithium2_ref_polyt0_unpack:
 3604              	.LFB25:
 729:poly.c        **** 
 730:poly.c        **** /*************************************************
 731:poly.c        **** * Name:        polyt0_unpack
 732:poly.c        **** *
 733:poly.c        **** * Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
 734:poly.c        **** *
 735:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 736:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 737:poly.c        **** **************************************************/
 738:poly.c        **** void polyt0_unpack(poly *r, const uint8_t *a) {
 3605              		.loc 1 738 47
 3606              		.cfi_startproc
 3607              		@ args = 0, pretend = 0, frame = 16
 3608              		@ frame_needed = 1, uses_anonymous_args = 0
 3609              		@ link register save eliminated.
 3610 0000 80B4     		push	{r7}
 3611              	.LCFI136:
 3612              		.cfi_def_cfa_offset 4
 3613              		.cfi_offset 7, -4
 3614 0002 85B0     		sub	sp, sp, #20
 3615              	.LCFI137:
 3616              		.cfi_def_cfa_offset 24
 3617 0004 00AF     		add	r7, sp, #0
 3618              	.LCFI138:
 3619              		.cfi_def_cfa_register 7
 3620 0006 7860     		str	r0, [r7, #4]
 3621 0008 3960     		str	r1, [r7]
 739:poly.c        ****   unsigned int i;
 740:poly.c        ****   DBENCH_START();
 741:poly.c        **** 
 742:poly.c        ****   for(i = 0; i < N/8; ++i) {
 3622              		.loc 1 742 9
 3623 000a 0023     		movs	r3, #0
 3624 000c FB60     		str	r3, [r7, #12]
 3625              		.loc 1 742 3
 3626 000e 94E2     		b	.L93
 3627              	.L94:
 743:poly.c        ****     r->coeffs[8*i+0]  = a[13*i+0];
 3628              		.loc 1 743 29 discriminator 3
 3629 0010 FA68     		ldr	r2, [r7, #12]
 3630 0012 1346     		mov	r3, r2
 3631 0014 5B00     		lsls	r3, r3, #1
 3632 0016 1344     		add	r3, r3, r2
 3633 0018 9B00     		lsls	r3, r3, #2
 3634 001a 1344     		add	r3, r3, r2
 3635              		.loc 1 743 26 discriminator 3
 3636 001c 3A68     		ldr	r2, [r7]
 3637 001e 1344     		add	r3, r3, r2
 3638 0020 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3639              		.loc 1 743 18 discriminator 3
 3640 0022 FB68     		ldr	r3, [r7, #12]
 3641 0024 DA00     		lsls	r2, r3, #3
 3642              		.loc 1 743 23 discriminator 3
 3643 0026 7B68     		ldr	r3, [r7, #4]
 3644 0028 43F82210 		str	r1, [r3, r2, lsl #2]
 744:poly.c        ****     r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 3645              		.loc 1 744 22 discriminator 3
 3646 002c FB68     		ldr	r3, [r7, #12]
 3647 002e DA00     		lsls	r2, r3, #3
 3648 0030 7B68     		ldr	r3, [r7, #4]
 3649 0032 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3650 0036 1946     		mov	r1, r3
 3651              		.loc 1 744 39 discriminator 3
 3652 0038 FA68     		ldr	r2, [r7, #12]
 3653 003a 1346     		mov	r3, r2
 3654 003c 5B00     		lsls	r3, r3, #1
 3655 003e 1344     		add	r3, r3, r2
 3656 0040 9B00     		lsls	r3, r3, #2
 3657 0042 1344     		add	r3, r3, r2
 3658              		.loc 1 744 36 discriminator 3
 3659 0044 0133     		adds	r3, r3, #1
 3660 0046 3A68     		ldr	r2, [r7]
 3661 0048 1344     		add	r3, r3, r2
 3662 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3663              		.loc 1 744 45 discriminator 3
 3664 004c 1B02     		lsls	r3, r3, #8
 3665              		.loc 1 744 22 discriminator 3
 3666 004e 1943     		orrs	r1, r1, r3
 3667 0050 FB68     		ldr	r3, [r7, #12]
 3668 0052 DA00     		lsls	r2, r3, #3
 3669 0054 7B68     		ldr	r3, [r7, #4]
 3670 0056 43F82210 		str	r1, [r3, r2, lsl #2]
 745:poly.c        ****     r->coeffs[8*i+0] &= 0x1FFF;
 3671              		.loc 1 745 22 discriminator 3
 3672 005a FB68     		ldr	r3, [r7, #12]
 3673 005c DA00     		lsls	r2, r3, #3
 3674 005e 7B68     		ldr	r3, [r7, #4]
 3675 0060 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3676 0064 FA68     		ldr	r2, [r7, #12]
 3677 0066 D200     		lsls	r2, r2, #3
 3678 0068 C3F30C01 		ubfx	r1, r3, #0, #13
 3679 006c 7B68     		ldr	r3, [r7, #4]
 3680 006e 43F82210 		str	r1, [r3, r2, lsl #2]
 746:poly.c        **** 
 747:poly.c        ****     r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 3681              		.loc 1 747 29 discriminator 3
 3682 0072 FA68     		ldr	r2, [r7, #12]
 3683 0074 1346     		mov	r3, r2
 3684 0076 5B00     		lsls	r3, r3, #1
 3685 0078 1344     		add	r3, r3, r2
 3686 007a 9B00     		lsls	r3, r3, #2
 3687 007c 1344     		add	r3, r3, r2
 3688              		.loc 1 747 26 discriminator 3
 3689 007e 0133     		adds	r3, r3, #1
 3690 0080 3A68     		ldr	r2, [r7]
 3691 0082 1344     		add	r3, r3, r2
 3692 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3693              		.loc 1 747 35 discriminator 3
 3694 0086 5B09     		lsrs	r3, r3, #5
 3695 0088 D9B2     		uxtb	r1, r3
 3696              		.loc 1 747 16 discriminator 3
 3697 008a FB68     		ldr	r3, [r7, #12]
 3698 008c DB00     		lsls	r3, r3, #3
 3699              		.loc 1 747 18 discriminator 3
 3700 008e 5A1C     		adds	r2, r3, #1
 3701              		.loc 1 747 23 discriminator 3
 3702 0090 7B68     		ldr	r3, [r7, #4]
 3703 0092 43F82210 		str	r1, [r3, r2, lsl #2]
 748:poly.c        ****     r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 3704              		.loc 1 748 22 discriminator 3
 3705 0096 FB68     		ldr	r3, [r7, #12]
 3706 0098 DB00     		lsls	r3, r3, #3
 3707 009a 5A1C     		adds	r2, r3, #1
 3708 009c 7B68     		ldr	r3, [r7, #4]
 3709 009e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3710 00a2 1946     		mov	r1, r3
 3711              		.loc 1 748 39 discriminator 3
 3712 00a4 FA68     		ldr	r2, [r7, #12]
 3713 00a6 1346     		mov	r3, r2
 3714 00a8 5B00     		lsls	r3, r3, #1
 3715 00aa 1344     		add	r3, r3, r2
 3716 00ac 9B00     		lsls	r3, r3, #2
 3717 00ae 1344     		add	r3, r3, r2
 3718              		.loc 1 748 36 discriminator 3
 3719 00b0 0233     		adds	r3, r3, #2
 3720 00b2 3A68     		ldr	r2, [r7]
 3721 00b4 1344     		add	r3, r3, r2
 3722 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3723              		.loc 1 748 45 discriminator 3
 3724 00b8 DB00     		lsls	r3, r3, #3
 3725              		.loc 1 748 22 discriminator 3
 3726 00ba 1943     		orrs	r1, r1, r3
 3727 00bc FB68     		ldr	r3, [r7, #12]
 3728 00be DB00     		lsls	r3, r3, #3
 3729 00c0 5A1C     		adds	r2, r3, #1
 3730 00c2 7B68     		ldr	r3, [r7, #4]
 3731 00c4 43F82210 		str	r1, [r3, r2, lsl #2]
 749:poly.c        ****     r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 3732              		.loc 1 749 22 discriminator 3
 3733 00c8 FB68     		ldr	r3, [r7, #12]
 3734 00ca DB00     		lsls	r3, r3, #3
 3735 00cc 5A1C     		adds	r2, r3, #1
 3736 00ce 7B68     		ldr	r3, [r7, #4]
 3737 00d0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3738 00d4 1946     		mov	r1, r3
 3739              		.loc 1 749 39 discriminator 3
 3740 00d6 FA68     		ldr	r2, [r7, #12]
 3741 00d8 1346     		mov	r3, r2
 3742 00da 5B00     		lsls	r3, r3, #1
 3743 00dc 1344     		add	r3, r3, r2
 3744 00de 9B00     		lsls	r3, r3, #2
 3745 00e0 1344     		add	r3, r3, r2
 3746              		.loc 1 749 36 discriminator 3
 3747 00e2 0333     		adds	r3, r3, #3
 3748 00e4 3A68     		ldr	r2, [r7]
 3749 00e6 1344     		add	r3, r3, r2
 3750 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3751              		.loc 1 749 45 discriminator 3
 3752 00ea DB02     		lsls	r3, r3, #11
 3753              		.loc 1 749 22 discriminator 3
 3754 00ec 1943     		orrs	r1, r1, r3
 3755 00ee FB68     		ldr	r3, [r7, #12]
 3756 00f0 DB00     		lsls	r3, r3, #3
 3757 00f2 5A1C     		adds	r2, r3, #1
 3758 00f4 7B68     		ldr	r3, [r7, #4]
 3759 00f6 43F82210 		str	r1, [r3, r2, lsl #2]
 750:poly.c        ****     r->coeffs[8*i+1] &= 0x1FFF;
 3760              		.loc 1 750 22 discriminator 3
 3761 00fa FB68     		ldr	r3, [r7, #12]
 3762 00fc DB00     		lsls	r3, r3, #3
 3763 00fe 5A1C     		adds	r2, r3, #1
 3764 0100 7B68     		ldr	r3, [r7, #4]
 3765 0102 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3766 0106 FA68     		ldr	r2, [r7, #12]
 3767 0108 D200     		lsls	r2, r2, #3
 3768 010a 0132     		adds	r2, r2, #1
 3769 010c C3F30C01 		ubfx	r1, r3, #0, #13
 3770 0110 7B68     		ldr	r3, [r7, #4]
 3771 0112 43F82210 		str	r1, [r3, r2, lsl #2]
 751:poly.c        **** 
 752:poly.c        ****     r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 3772              		.loc 1 752 29 discriminator 3
 3773 0116 FA68     		ldr	r2, [r7, #12]
 3774 0118 1346     		mov	r3, r2
 3775 011a 5B00     		lsls	r3, r3, #1
 3776 011c 1344     		add	r3, r3, r2
 3777 011e 9B00     		lsls	r3, r3, #2
 3778 0120 1344     		add	r3, r3, r2
 3779              		.loc 1 752 26 discriminator 3
 3780 0122 0333     		adds	r3, r3, #3
 3781 0124 3A68     		ldr	r2, [r7]
 3782 0126 1344     		add	r3, r3, r2
 3783 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3784              		.loc 1 752 35 discriminator 3
 3785 012a 9B08     		lsrs	r3, r3, #2
 3786 012c D9B2     		uxtb	r1, r3
 3787              		.loc 1 752 16 discriminator 3
 3788 012e FB68     		ldr	r3, [r7, #12]
 3789 0130 DB00     		lsls	r3, r3, #3
 3790              		.loc 1 752 18 discriminator 3
 3791 0132 9A1C     		adds	r2, r3, #2
 3792              		.loc 1 752 23 discriminator 3
 3793 0134 7B68     		ldr	r3, [r7, #4]
 3794 0136 43F82210 		str	r1, [r3, r2, lsl #2]
 753:poly.c        ****     r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 3795              		.loc 1 753 22 discriminator 3
 3796 013a FB68     		ldr	r3, [r7, #12]
 3797 013c DB00     		lsls	r3, r3, #3
 3798 013e 9A1C     		adds	r2, r3, #2
 3799 0140 7B68     		ldr	r3, [r7, #4]
 3800 0142 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3801 0146 1946     		mov	r1, r3
 3802              		.loc 1 753 39 discriminator 3
 3803 0148 FA68     		ldr	r2, [r7, #12]
 3804 014a 1346     		mov	r3, r2
 3805 014c 5B00     		lsls	r3, r3, #1
 3806 014e 1344     		add	r3, r3, r2
 3807 0150 9B00     		lsls	r3, r3, #2
 3808 0152 1344     		add	r3, r3, r2
 3809              		.loc 1 753 36 discriminator 3
 3810 0154 0433     		adds	r3, r3, #4
 3811 0156 3A68     		ldr	r2, [r7]
 3812 0158 1344     		add	r3, r3, r2
 3813 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3814              		.loc 1 753 45 discriminator 3
 3815 015c 9B01     		lsls	r3, r3, #6
 3816              		.loc 1 753 22 discriminator 3
 3817 015e 1943     		orrs	r1, r1, r3
 3818 0160 FB68     		ldr	r3, [r7, #12]
 3819 0162 DB00     		lsls	r3, r3, #3
 3820 0164 9A1C     		adds	r2, r3, #2
 3821 0166 7B68     		ldr	r3, [r7, #4]
 3822 0168 43F82210 		str	r1, [r3, r2, lsl #2]
 754:poly.c        ****     r->coeffs[8*i+2] &= 0x1FFF;
 3823              		.loc 1 754 22 discriminator 3
 3824 016c FB68     		ldr	r3, [r7, #12]
 3825 016e DB00     		lsls	r3, r3, #3
 3826 0170 9A1C     		adds	r2, r3, #2
 3827 0172 7B68     		ldr	r3, [r7, #4]
 3828 0174 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3829 0178 FA68     		ldr	r2, [r7, #12]
 3830 017a D200     		lsls	r2, r2, #3
 3831 017c 0232     		adds	r2, r2, #2
 3832 017e C3F30C01 		ubfx	r1, r3, #0, #13
 3833 0182 7B68     		ldr	r3, [r7, #4]
 3834 0184 43F82210 		str	r1, [r3, r2, lsl #2]
 755:poly.c        **** 
 756:poly.c        ****     r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 3835              		.loc 1 756 29 discriminator 3
 3836 0188 FA68     		ldr	r2, [r7, #12]
 3837 018a 1346     		mov	r3, r2
 3838 018c 5B00     		lsls	r3, r3, #1
 3839 018e 1344     		add	r3, r3, r2
 3840 0190 9B00     		lsls	r3, r3, #2
 3841 0192 1344     		add	r3, r3, r2
 3842              		.loc 1 756 26 discriminator 3
 3843 0194 0433     		adds	r3, r3, #4
 3844 0196 3A68     		ldr	r2, [r7]
 3845 0198 1344     		add	r3, r3, r2
 3846 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3847              		.loc 1 756 35 discriminator 3
 3848 019c DB09     		lsrs	r3, r3, #7
 3849 019e D9B2     		uxtb	r1, r3
 3850              		.loc 1 756 16 discriminator 3
 3851 01a0 FB68     		ldr	r3, [r7, #12]
 3852 01a2 DB00     		lsls	r3, r3, #3
 3853              		.loc 1 756 18 discriminator 3
 3854 01a4 DA1C     		adds	r2, r3, #3
 3855              		.loc 1 756 23 discriminator 3
 3856 01a6 7B68     		ldr	r3, [r7, #4]
 3857 01a8 43F82210 		str	r1, [r3, r2, lsl #2]
 757:poly.c        ****     r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 3858              		.loc 1 757 22 discriminator 3
 3859 01ac FB68     		ldr	r3, [r7, #12]
 3860 01ae DB00     		lsls	r3, r3, #3
 3861 01b0 DA1C     		adds	r2, r3, #3
 3862 01b2 7B68     		ldr	r3, [r7, #4]
 3863 01b4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3864 01b8 1946     		mov	r1, r3
 3865              		.loc 1 757 39 discriminator 3
 3866 01ba FA68     		ldr	r2, [r7, #12]
 3867 01bc 1346     		mov	r3, r2
 3868 01be 5B00     		lsls	r3, r3, #1
 3869 01c0 1344     		add	r3, r3, r2
 3870 01c2 9B00     		lsls	r3, r3, #2
 3871 01c4 1344     		add	r3, r3, r2
 3872              		.loc 1 757 36 discriminator 3
 3873 01c6 0533     		adds	r3, r3, #5
 3874 01c8 3A68     		ldr	r2, [r7]
 3875 01ca 1344     		add	r3, r3, r2
 3876 01cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3877              		.loc 1 757 45 discriminator 3
 3878 01ce 5B00     		lsls	r3, r3, #1
 3879              		.loc 1 757 22 discriminator 3
 3880 01d0 1943     		orrs	r1, r1, r3
 3881 01d2 FB68     		ldr	r3, [r7, #12]
 3882 01d4 DB00     		lsls	r3, r3, #3
 3883 01d6 DA1C     		adds	r2, r3, #3
 3884 01d8 7B68     		ldr	r3, [r7, #4]
 3885 01da 43F82210 		str	r1, [r3, r2, lsl #2]
 758:poly.c        ****     r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 3886              		.loc 1 758 22 discriminator 3
 3887 01de FB68     		ldr	r3, [r7, #12]
 3888 01e0 DB00     		lsls	r3, r3, #3
 3889 01e2 DA1C     		adds	r2, r3, #3
 3890 01e4 7B68     		ldr	r3, [r7, #4]
 3891 01e6 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3892 01ea 1946     		mov	r1, r3
 3893              		.loc 1 758 39 discriminator 3
 3894 01ec FA68     		ldr	r2, [r7, #12]
 3895 01ee 1346     		mov	r3, r2
 3896 01f0 5B00     		lsls	r3, r3, #1
 3897 01f2 1344     		add	r3, r3, r2
 3898 01f4 9B00     		lsls	r3, r3, #2
 3899 01f6 1344     		add	r3, r3, r2
 3900              		.loc 1 758 36 discriminator 3
 3901 01f8 0633     		adds	r3, r3, #6
 3902 01fa 3A68     		ldr	r2, [r7]
 3903 01fc 1344     		add	r3, r3, r2
 3904 01fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3905              		.loc 1 758 45 discriminator 3
 3906 0200 5B02     		lsls	r3, r3, #9
 3907              		.loc 1 758 22 discriminator 3
 3908 0202 1943     		orrs	r1, r1, r3
 3909 0204 FB68     		ldr	r3, [r7, #12]
 3910 0206 DB00     		lsls	r3, r3, #3
 3911 0208 DA1C     		adds	r2, r3, #3
 3912 020a 7B68     		ldr	r3, [r7, #4]
 3913 020c 43F82210 		str	r1, [r3, r2, lsl #2]
 759:poly.c        ****     r->coeffs[8*i+3] &= 0x1FFF;
 3914              		.loc 1 759 22 discriminator 3
 3915 0210 FB68     		ldr	r3, [r7, #12]
 3916 0212 DB00     		lsls	r3, r3, #3
 3917 0214 DA1C     		adds	r2, r3, #3
 3918 0216 7B68     		ldr	r3, [r7, #4]
 3919 0218 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3920 021c FA68     		ldr	r2, [r7, #12]
 3921 021e D200     		lsls	r2, r2, #3
 3922 0220 0332     		adds	r2, r2, #3
 3923 0222 C3F30C01 		ubfx	r1, r3, #0, #13
 3924 0226 7B68     		ldr	r3, [r7, #4]
 3925 0228 43F82210 		str	r1, [r3, r2, lsl #2]
 760:poly.c        **** 
 761:poly.c        ****     r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 3926              		.loc 1 761 29 discriminator 3
 3927 022c FA68     		ldr	r2, [r7, #12]
 3928 022e 1346     		mov	r3, r2
 3929 0230 5B00     		lsls	r3, r3, #1
 3930 0232 1344     		add	r3, r3, r2
 3931 0234 9B00     		lsls	r3, r3, #2
 3932 0236 1344     		add	r3, r3, r2
 3933              		.loc 1 761 26 discriminator 3
 3934 0238 0633     		adds	r3, r3, #6
 3935 023a 3A68     		ldr	r2, [r7]
 3936 023c 1344     		add	r3, r3, r2
 3937 023e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3938              		.loc 1 761 35 discriminator 3
 3939 0240 1B09     		lsrs	r3, r3, #4
 3940 0242 D9B2     		uxtb	r1, r3
 3941              		.loc 1 761 16 discriminator 3
 3942 0244 FB68     		ldr	r3, [r7, #12]
 3943 0246 DB00     		lsls	r3, r3, #3
 3944              		.loc 1 761 18 discriminator 3
 3945 0248 1A1D     		adds	r2, r3, #4
 3946              		.loc 1 761 23 discriminator 3
 3947 024a 7B68     		ldr	r3, [r7, #4]
 3948 024c 43F82210 		str	r1, [r3, r2, lsl #2]
 762:poly.c        ****     r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 3949              		.loc 1 762 22 discriminator 3
 3950 0250 FB68     		ldr	r3, [r7, #12]
 3951 0252 DB00     		lsls	r3, r3, #3
 3952 0254 1A1D     		adds	r2, r3, #4
 3953 0256 7B68     		ldr	r3, [r7, #4]
 3954 0258 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3955 025c 1946     		mov	r1, r3
 3956              		.loc 1 762 39 discriminator 3
 3957 025e FA68     		ldr	r2, [r7, #12]
 3958 0260 1346     		mov	r3, r2
 3959 0262 5B00     		lsls	r3, r3, #1
 3960 0264 1344     		add	r3, r3, r2
 3961 0266 9B00     		lsls	r3, r3, #2
 3962 0268 1344     		add	r3, r3, r2
 3963              		.loc 1 762 36 discriminator 3
 3964 026a 0733     		adds	r3, r3, #7
 3965 026c 3A68     		ldr	r2, [r7]
 3966 026e 1344     		add	r3, r3, r2
 3967 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3968              		.loc 1 762 45 discriminator 3
 3969 0272 1B01     		lsls	r3, r3, #4
 3970              		.loc 1 762 22 discriminator 3
 3971 0274 1943     		orrs	r1, r1, r3
 3972 0276 FB68     		ldr	r3, [r7, #12]
 3973 0278 DB00     		lsls	r3, r3, #3
 3974 027a 1A1D     		adds	r2, r3, #4
 3975 027c 7B68     		ldr	r3, [r7, #4]
 3976 027e 43F82210 		str	r1, [r3, r2, lsl #2]
 763:poly.c        ****     r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 3977              		.loc 1 763 22 discriminator 3
 3978 0282 FB68     		ldr	r3, [r7, #12]
 3979 0284 DB00     		lsls	r3, r3, #3
 3980 0286 1A1D     		adds	r2, r3, #4
 3981 0288 7B68     		ldr	r3, [r7, #4]
 3982 028a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3983 028e 1946     		mov	r1, r3
 3984              		.loc 1 763 39 discriminator 3
 3985 0290 FA68     		ldr	r2, [r7, #12]
 3986 0292 1346     		mov	r3, r2
 3987 0294 5B00     		lsls	r3, r3, #1
 3988 0296 1344     		add	r3, r3, r2
 3989 0298 9B00     		lsls	r3, r3, #2
 3990 029a 1344     		add	r3, r3, r2
 3991              		.loc 1 763 36 discriminator 3
 3992 029c 0833     		adds	r3, r3, #8
 3993 029e 3A68     		ldr	r2, [r7]
 3994 02a0 1344     		add	r3, r3, r2
 3995 02a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3996              		.loc 1 763 45 discriminator 3
 3997 02a4 1B03     		lsls	r3, r3, #12
 3998              		.loc 1 763 22 discriminator 3
 3999 02a6 1943     		orrs	r1, r1, r3
 4000 02a8 FB68     		ldr	r3, [r7, #12]
 4001 02aa DB00     		lsls	r3, r3, #3
 4002 02ac 1A1D     		adds	r2, r3, #4
 4003 02ae 7B68     		ldr	r3, [r7, #4]
 4004 02b0 43F82210 		str	r1, [r3, r2, lsl #2]
 764:poly.c        ****     r->coeffs[8*i+4] &= 0x1FFF;
 4005              		.loc 1 764 22 discriminator 3
 4006 02b4 FB68     		ldr	r3, [r7, #12]
 4007 02b6 DB00     		lsls	r3, r3, #3
 4008 02b8 1A1D     		adds	r2, r3, #4
 4009 02ba 7B68     		ldr	r3, [r7, #4]
 4010 02bc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4011 02c0 FA68     		ldr	r2, [r7, #12]
 4012 02c2 D200     		lsls	r2, r2, #3
 4013 02c4 0432     		adds	r2, r2, #4
 4014 02c6 C3F30C01 		ubfx	r1, r3, #0, #13
 4015 02ca 7B68     		ldr	r3, [r7, #4]
 4016 02cc 43F82210 		str	r1, [r3, r2, lsl #2]
 765:poly.c        **** 
 766:poly.c        ****     r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 4017              		.loc 1 766 29 discriminator 3
 4018 02d0 FA68     		ldr	r2, [r7, #12]
 4019 02d2 1346     		mov	r3, r2
 4020 02d4 5B00     		lsls	r3, r3, #1
 4021 02d6 1344     		add	r3, r3, r2
 4022 02d8 9B00     		lsls	r3, r3, #2
 4023 02da 1344     		add	r3, r3, r2
 4024              		.loc 1 766 26 discriminator 3
 4025 02dc 0833     		adds	r3, r3, #8
 4026 02de 3A68     		ldr	r2, [r7]
 4027 02e0 1344     		add	r3, r3, r2
 4028 02e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4029              		.loc 1 766 35 discriminator 3
 4030 02e4 5B08     		lsrs	r3, r3, #1
 4031 02e6 D9B2     		uxtb	r1, r3
 4032              		.loc 1 766 16 discriminator 3
 4033 02e8 FB68     		ldr	r3, [r7, #12]
 4034 02ea DB00     		lsls	r3, r3, #3
 4035              		.loc 1 766 18 discriminator 3
 4036 02ec 5A1D     		adds	r2, r3, #5
 4037              		.loc 1 766 23 discriminator 3
 4038 02ee 7B68     		ldr	r3, [r7, #4]
 4039 02f0 43F82210 		str	r1, [r3, r2, lsl #2]
 767:poly.c        ****     r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 4040              		.loc 1 767 22 discriminator 3
 4041 02f4 FB68     		ldr	r3, [r7, #12]
 4042 02f6 DB00     		lsls	r3, r3, #3
 4043 02f8 5A1D     		adds	r2, r3, #5
 4044 02fa 7B68     		ldr	r3, [r7, #4]
 4045 02fc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4046 0300 1946     		mov	r1, r3
 4047              		.loc 1 767 39 discriminator 3
 4048 0302 FA68     		ldr	r2, [r7, #12]
 4049 0304 1346     		mov	r3, r2
 4050 0306 5B00     		lsls	r3, r3, #1
 4051 0308 1344     		add	r3, r3, r2
 4052 030a 9B00     		lsls	r3, r3, #2
 4053 030c 1344     		add	r3, r3, r2
 4054              		.loc 1 767 36 discriminator 3
 4055 030e 0933     		adds	r3, r3, #9
 4056 0310 3A68     		ldr	r2, [r7]
 4057 0312 1344     		add	r3, r3, r2
 4058 0314 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4059              		.loc 1 767 45 discriminator 3
 4060 0316 DB01     		lsls	r3, r3, #7
 4061              		.loc 1 767 22 discriminator 3
 4062 0318 1943     		orrs	r1, r1, r3
 4063 031a FB68     		ldr	r3, [r7, #12]
 4064 031c DB00     		lsls	r3, r3, #3
 4065 031e 5A1D     		adds	r2, r3, #5
 4066 0320 7B68     		ldr	r3, [r7, #4]
 4067 0322 43F82210 		str	r1, [r3, r2, lsl #2]
 768:poly.c        ****     r->coeffs[8*i+5] &= 0x1FFF;
 4068              		.loc 1 768 22 discriminator 3
 4069 0326 FB68     		ldr	r3, [r7, #12]
 4070 0328 DB00     		lsls	r3, r3, #3
 4071 032a 5A1D     		adds	r2, r3, #5
 4072 032c 7B68     		ldr	r3, [r7, #4]
 4073 032e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4074 0332 FA68     		ldr	r2, [r7, #12]
 4075 0334 D200     		lsls	r2, r2, #3
 4076 0336 0532     		adds	r2, r2, #5
 4077 0338 C3F30C01 		ubfx	r1, r3, #0, #13
 4078 033c 7B68     		ldr	r3, [r7, #4]
 4079 033e 43F82210 		str	r1, [r3, r2, lsl #2]
 769:poly.c        **** 
 770:poly.c        ****     r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 4080              		.loc 1 770 29 discriminator 3
 4081 0342 FA68     		ldr	r2, [r7, #12]
 4082 0344 1346     		mov	r3, r2
 4083 0346 5B00     		lsls	r3, r3, #1
 4084 0348 1344     		add	r3, r3, r2
 4085 034a 9B00     		lsls	r3, r3, #2
 4086 034c 1344     		add	r3, r3, r2
 4087              		.loc 1 770 26 discriminator 3
 4088 034e 0933     		adds	r3, r3, #9
 4089 0350 3A68     		ldr	r2, [r7]
 4090 0352 1344     		add	r3, r3, r2
 4091 0354 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4092              		.loc 1 770 35 discriminator 3
 4093 0356 9B09     		lsrs	r3, r3, #6
 4094 0358 D9B2     		uxtb	r1, r3
 4095              		.loc 1 770 16 discriminator 3
 4096 035a FB68     		ldr	r3, [r7, #12]
 4097 035c DB00     		lsls	r3, r3, #3
 4098              		.loc 1 770 18 discriminator 3
 4099 035e 9A1D     		adds	r2, r3, #6
 4100              		.loc 1 770 23 discriminator 3
 4101 0360 7B68     		ldr	r3, [r7, #4]
 4102 0362 43F82210 		str	r1, [r3, r2, lsl #2]
 771:poly.c        ****     r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 4103              		.loc 1 771 22 discriminator 3
 4104 0366 FB68     		ldr	r3, [r7, #12]
 4105 0368 DB00     		lsls	r3, r3, #3
 4106 036a 9A1D     		adds	r2, r3, #6
 4107 036c 7B68     		ldr	r3, [r7, #4]
 4108 036e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4109 0372 1946     		mov	r1, r3
 4110              		.loc 1 771 39 discriminator 3
 4111 0374 FA68     		ldr	r2, [r7, #12]
 4112 0376 1346     		mov	r3, r2
 4113 0378 5B00     		lsls	r3, r3, #1
 4114 037a 1344     		add	r3, r3, r2
 4115 037c 9B00     		lsls	r3, r3, #2
 4116 037e 1344     		add	r3, r3, r2
 4117              		.loc 1 771 36 discriminator 3
 4118 0380 0A33     		adds	r3, r3, #10
 4119 0382 3A68     		ldr	r2, [r7]
 4120 0384 1344     		add	r3, r3, r2
 4121 0386 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4122              		.loc 1 771 46 discriminator 3
 4123 0388 9B00     		lsls	r3, r3, #2
 4124              		.loc 1 771 22 discriminator 3
 4125 038a 1943     		orrs	r1, r1, r3
 4126 038c FB68     		ldr	r3, [r7, #12]
 4127 038e DB00     		lsls	r3, r3, #3
 4128 0390 9A1D     		adds	r2, r3, #6
 4129 0392 7B68     		ldr	r3, [r7, #4]
 4130 0394 43F82210 		str	r1, [r3, r2, lsl #2]
 772:poly.c        ****     r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 4131              		.loc 1 772 22 discriminator 3
 4132 0398 FB68     		ldr	r3, [r7, #12]
 4133 039a DB00     		lsls	r3, r3, #3
 4134 039c 9A1D     		adds	r2, r3, #6
 4135 039e 7B68     		ldr	r3, [r7, #4]
 4136 03a0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4137 03a4 1946     		mov	r1, r3
 4138              		.loc 1 772 39 discriminator 3
 4139 03a6 FA68     		ldr	r2, [r7, #12]
 4140 03a8 1346     		mov	r3, r2
 4141 03aa 5B00     		lsls	r3, r3, #1
 4142 03ac 1344     		add	r3, r3, r2
 4143 03ae 9B00     		lsls	r3, r3, #2
 4144 03b0 1344     		add	r3, r3, r2
 4145              		.loc 1 772 36 discriminator 3
 4146 03b2 0B33     		adds	r3, r3, #11
 4147 03b4 3A68     		ldr	r2, [r7]
 4148 03b6 1344     		add	r3, r3, r2
 4149 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4150              		.loc 1 772 46 discriminator 3
 4151 03ba 9B02     		lsls	r3, r3, #10
 4152              		.loc 1 772 22 discriminator 3
 4153 03bc 1943     		orrs	r1, r1, r3
 4154 03be FB68     		ldr	r3, [r7, #12]
 4155 03c0 DB00     		lsls	r3, r3, #3
 4156 03c2 9A1D     		adds	r2, r3, #6
 4157 03c4 7B68     		ldr	r3, [r7, #4]
 4158 03c6 43F82210 		str	r1, [r3, r2, lsl #2]
 773:poly.c        ****     r->coeffs[8*i+6] &= 0x1FFF;
 4159              		.loc 1 773 22 discriminator 3
 4160 03ca FB68     		ldr	r3, [r7, #12]
 4161 03cc DB00     		lsls	r3, r3, #3
 4162 03ce 9A1D     		adds	r2, r3, #6
 4163 03d0 7B68     		ldr	r3, [r7, #4]
 4164 03d2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4165 03d6 FA68     		ldr	r2, [r7, #12]
 4166 03d8 D200     		lsls	r2, r2, #3
 4167 03da 0632     		adds	r2, r2, #6
 4168 03dc C3F30C01 		ubfx	r1, r3, #0, #13
 4169 03e0 7B68     		ldr	r3, [r7, #4]
 4170 03e2 43F82210 		str	r1, [r3, r2, lsl #2]
 774:poly.c        **** 
 775:poly.c        ****     r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 4171              		.loc 1 775 29 discriminator 3
 4172 03e6 FA68     		ldr	r2, [r7, #12]
 4173 03e8 1346     		mov	r3, r2
 4174 03ea 5B00     		lsls	r3, r3, #1
 4175 03ec 1344     		add	r3, r3, r2
 4176 03ee 9B00     		lsls	r3, r3, #2
 4177 03f0 1344     		add	r3, r3, r2
 4178              		.loc 1 775 26 discriminator 3
 4179 03f2 0B33     		adds	r3, r3, #11
 4180 03f4 3A68     		ldr	r2, [r7]
 4181 03f6 1344     		add	r3, r3, r2
 4182 03f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4183              		.loc 1 775 36 discriminator 3
 4184 03fa DB08     		lsrs	r3, r3, #3
 4185 03fc D9B2     		uxtb	r1, r3
 4186              		.loc 1 775 16 discriminator 3
 4187 03fe FB68     		ldr	r3, [r7, #12]
 4188 0400 DB00     		lsls	r3, r3, #3
 4189              		.loc 1 775 18 discriminator 3
 4190 0402 DA1D     		adds	r2, r3, #7
 4191              		.loc 1 775 23 discriminator 3
 4192 0404 7B68     		ldr	r3, [r7, #4]
 4193 0406 43F82210 		str	r1, [r3, r2, lsl #2]
 776:poly.c        ****     r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 4194              		.loc 1 776 22 discriminator 3
 4195 040a FB68     		ldr	r3, [r7, #12]
 4196 040c DB00     		lsls	r3, r3, #3
 4197 040e DA1D     		adds	r2, r3, #7
 4198 0410 7B68     		ldr	r3, [r7, #4]
 4199 0412 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4200 0416 1946     		mov	r1, r3
 4201              		.loc 1 776 39 discriminator 3
 4202 0418 FA68     		ldr	r2, [r7, #12]
 4203 041a 1346     		mov	r3, r2
 4204 041c 5B00     		lsls	r3, r3, #1
 4205 041e 1344     		add	r3, r3, r2
 4206 0420 9B00     		lsls	r3, r3, #2
 4207 0422 1344     		add	r3, r3, r2
 4208              		.loc 1 776 36 discriminator 3
 4209 0424 0C33     		adds	r3, r3, #12
 4210 0426 3A68     		ldr	r2, [r7]
 4211 0428 1344     		add	r3, r3, r2
 4212 042a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4213              		.loc 1 776 46 discriminator 3
 4214 042c 5B01     		lsls	r3, r3, #5
 4215              		.loc 1 776 22 discriminator 3
 4216 042e 1943     		orrs	r1, r1, r3
 4217 0430 FB68     		ldr	r3, [r7, #12]
 4218 0432 DB00     		lsls	r3, r3, #3
 4219 0434 DA1D     		adds	r2, r3, #7
 4220 0436 7B68     		ldr	r3, [r7, #4]
 4221 0438 43F82210 		str	r1, [r3, r2, lsl #2]
 777:poly.c        ****     r->coeffs[8*i+7] &= 0x1FFF;
 4222              		.loc 1 777 22 discriminator 3
 4223 043c FB68     		ldr	r3, [r7, #12]
 4224 043e DB00     		lsls	r3, r3, #3
 4225 0440 DA1D     		adds	r2, r3, #7
 4226 0442 7B68     		ldr	r3, [r7, #4]
 4227 0444 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4228 0448 FA68     		ldr	r2, [r7, #12]
 4229 044a D200     		lsls	r2, r2, #3
 4230 044c 0732     		adds	r2, r2, #7
 4231 044e C3F30C01 		ubfx	r1, r3, #0, #13
 4232 0452 7B68     		ldr	r3, [r7, #4]
 4233 0454 43F82210 		str	r1, [r3, r2, lsl #2]
 778:poly.c        **** 
 779:poly.c        ****     r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 4234              		.loc 1 779 52 discriminator 3
 4235 0458 FB68     		ldr	r3, [r7, #12]
 4236 045a DA00     		lsls	r2, r3, #3
 4237              		.loc 1 779 48 discriminator 3
 4238 045c 7B68     		ldr	r3, [r7, #4]
 4239 045e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4240              		.loc 1 779 18 discriminator 3
 4241 0462 FA68     		ldr	r2, [r7, #12]
 4242 0464 D200     		lsls	r2, r2, #3
 4243              		.loc 1 779 37 discriminator 3
 4244 0466 C3F58051 		rsb	r1, r3, #4096
 4245              		.loc 1 779 22 discriminator 3
 4246 046a 7B68     		ldr	r3, [r7, #4]
 4247 046c 43F82210 		str	r1, [r3, r2, lsl #2]
 780:poly.c        ****     r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 4248              		.loc 1 780 50 discriminator 3
 4249 0470 FB68     		ldr	r3, [r7, #12]
 4250 0472 DB00     		lsls	r3, r3, #3
 4251              		.loc 1 780 52 discriminator 3
 4252 0474 5A1C     		adds	r2, r3, #1
 4253              		.loc 1 780 48 discriminator 3
 4254 0476 7B68     		ldr	r3, [r7, #4]
 4255 0478 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4256              		.loc 1 780 16 discriminator 3
 4257 047c FA68     		ldr	r2, [r7, #12]
 4258 047e D200     		lsls	r2, r2, #3
 4259              		.loc 1 780 18 discriminator 3
 4260 0480 0132     		adds	r2, r2, #1
 4261              		.loc 1 780 37 discriminator 3
 4262 0482 C3F58051 		rsb	r1, r3, #4096
 4263              		.loc 1 780 22 discriminator 3
 4264 0486 7B68     		ldr	r3, [r7, #4]
 4265 0488 43F82210 		str	r1, [r3, r2, lsl #2]
 781:poly.c        ****     r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 4266              		.loc 1 781 50 discriminator 3
 4267 048c FB68     		ldr	r3, [r7, #12]
 4268 048e DB00     		lsls	r3, r3, #3
 4269              		.loc 1 781 52 discriminator 3
 4270 0490 9A1C     		adds	r2, r3, #2
 4271              		.loc 1 781 48 discriminator 3
 4272 0492 7B68     		ldr	r3, [r7, #4]
 4273 0494 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4274              		.loc 1 781 16 discriminator 3
 4275 0498 FA68     		ldr	r2, [r7, #12]
 4276 049a D200     		lsls	r2, r2, #3
 4277              		.loc 1 781 18 discriminator 3
 4278 049c 0232     		adds	r2, r2, #2
 4279              		.loc 1 781 37 discriminator 3
 4280 049e C3F58051 		rsb	r1, r3, #4096
 4281              		.loc 1 781 22 discriminator 3
 4282 04a2 7B68     		ldr	r3, [r7, #4]
 4283 04a4 43F82210 		str	r1, [r3, r2, lsl #2]
 782:poly.c        ****     r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 4284              		.loc 1 782 50 discriminator 3
 4285 04a8 FB68     		ldr	r3, [r7, #12]
 4286 04aa DB00     		lsls	r3, r3, #3
 4287              		.loc 1 782 52 discriminator 3
 4288 04ac DA1C     		adds	r2, r3, #3
 4289              		.loc 1 782 48 discriminator 3
 4290 04ae 7B68     		ldr	r3, [r7, #4]
 4291 04b0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4292              		.loc 1 782 16 discriminator 3
 4293 04b4 FA68     		ldr	r2, [r7, #12]
 4294 04b6 D200     		lsls	r2, r2, #3
 4295              		.loc 1 782 18 discriminator 3
 4296 04b8 0332     		adds	r2, r2, #3
 4297              		.loc 1 782 37 discriminator 3
 4298 04ba C3F58051 		rsb	r1, r3, #4096
 4299              		.loc 1 782 22 discriminator 3
 4300 04be 7B68     		ldr	r3, [r7, #4]
 4301 04c0 43F82210 		str	r1, [r3, r2, lsl #2]
 783:poly.c        ****     r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 4302              		.loc 1 783 50 discriminator 3
 4303 04c4 FB68     		ldr	r3, [r7, #12]
 4304 04c6 DB00     		lsls	r3, r3, #3
 4305              		.loc 1 783 52 discriminator 3
 4306 04c8 1A1D     		adds	r2, r3, #4
 4307              		.loc 1 783 48 discriminator 3
 4308 04ca 7B68     		ldr	r3, [r7, #4]
 4309 04cc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4310              		.loc 1 783 16 discriminator 3
 4311 04d0 FA68     		ldr	r2, [r7, #12]
 4312 04d2 D200     		lsls	r2, r2, #3
 4313              		.loc 1 783 18 discriminator 3
 4314 04d4 0432     		adds	r2, r2, #4
 4315              		.loc 1 783 37 discriminator 3
 4316 04d6 C3F58051 		rsb	r1, r3, #4096
 4317              		.loc 1 783 22 discriminator 3
 4318 04da 7B68     		ldr	r3, [r7, #4]
 4319 04dc 43F82210 		str	r1, [r3, r2, lsl #2]
 784:poly.c        ****     r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 4320              		.loc 1 784 50 discriminator 3
 4321 04e0 FB68     		ldr	r3, [r7, #12]
 4322 04e2 DB00     		lsls	r3, r3, #3
 4323              		.loc 1 784 52 discriminator 3
 4324 04e4 5A1D     		adds	r2, r3, #5
 4325              		.loc 1 784 48 discriminator 3
 4326 04e6 7B68     		ldr	r3, [r7, #4]
 4327 04e8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4328              		.loc 1 784 16 discriminator 3
 4329 04ec FA68     		ldr	r2, [r7, #12]
 4330 04ee D200     		lsls	r2, r2, #3
 4331              		.loc 1 784 18 discriminator 3
 4332 04f0 0532     		adds	r2, r2, #5
 4333              		.loc 1 784 37 discriminator 3
 4334 04f2 C3F58051 		rsb	r1, r3, #4096
 4335              		.loc 1 784 22 discriminator 3
 4336 04f6 7B68     		ldr	r3, [r7, #4]
 4337 04f8 43F82210 		str	r1, [r3, r2, lsl #2]
 785:poly.c        ****     r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 4338              		.loc 1 785 50 discriminator 3
 4339 04fc FB68     		ldr	r3, [r7, #12]
 4340 04fe DB00     		lsls	r3, r3, #3
 4341              		.loc 1 785 52 discriminator 3
 4342 0500 9A1D     		adds	r2, r3, #6
 4343              		.loc 1 785 48 discriminator 3
 4344 0502 7B68     		ldr	r3, [r7, #4]
 4345 0504 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4346              		.loc 1 785 16 discriminator 3
 4347 0508 FA68     		ldr	r2, [r7, #12]
 4348 050a D200     		lsls	r2, r2, #3
 4349              		.loc 1 785 18 discriminator 3
 4350 050c 0632     		adds	r2, r2, #6
 4351              		.loc 1 785 37 discriminator 3
 4352 050e C3F58051 		rsb	r1, r3, #4096
 4353              		.loc 1 785 22 discriminator 3
 4354 0512 7B68     		ldr	r3, [r7, #4]
 4355 0514 43F82210 		str	r1, [r3, r2, lsl #2]
 786:poly.c        ****     r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 4356              		.loc 1 786 50 discriminator 3
 4357 0518 FB68     		ldr	r3, [r7, #12]
 4358 051a DB00     		lsls	r3, r3, #3
 4359              		.loc 1 786 52 discriminator 3
 4360 051c DA1D     		adds	r2, r3, #7
 4361              		.loc 1 786 48 discriminator 3
 4362 051e 7B68     		ldr	r3, [r7, #4]
 4363 0520 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4364              		.loc 1 786 16 discriminator 3
 4365 0524 FA68     		ldr	r2, [r7, #12]
 4366 0526 D200     		lsls	r2, r2, #3
 4367              		.loc 1 786 18 discriminator 3
 4368 0528 0732     		adds	r2, r2, #7
 4369              		.loc 1 786 37 discriminator 3
 4370 052a C3F58051 		rsb	r1, r3, #4096
 4371              		.loc 1 786 22 discriminator 3
 4372 052e 7B68     		ldr	r3, [r7, #4]
 4373 0530 43F82210 		str	r1, [r3, r2, lsl #2]
 742:poly.c        ****     r->coeffs[8*i+0]  = a[13*i+0];
 4374              		.loc 1 742 23 discriminator 3
 4375 0534 FB68     		ldr	r3, [r7, #12]
 4376 0536 0133     		adds	r3, r3, #1
 4377 0538 FB60     		str	r3, [r7, #12]
 4378              	.L93:
 742:poly.c        ****     r->coeffs[8*i+0]  = a[13*i+0];
 4379              		.loc 1 742 3 discriminator 1
 4380 053a FB68     		ldr	r3, [r7, #12]
 4381 053c 1F2B     		cmp	r3, #31
 4382 053e 7FF667AD 		bls	.L94
 787:poly.c        ****   }
 788:poly.c        **** 
 789:poly.c        ****   DBENCH_STOP(*tpack);
 790:poly.c        **** }
 4383              		.loc 1 790 1
 4384 0542 00BF     		nop
 4385 0544 00BF     		nop
 4386 0546 1437     		adds	r7, r7, #20
 4387              	.LCFI139:
 4388              		.cfi_def_cfa_offset 4
 4389 0548 BD46     		mov	sp, r7
 4390              	.LCFI140:
 4391              		.cfi_def_cfa_register 13
 4392              		@ sp needed
 4393 054a 80BC     		pop	{r7}
 4394              	.LCFI141:
 4395              		.cfi_restore 7
 4396              		.cfi_def_cfa_offset 0
 4397 054c 7047     		bx	lr
 4398              		.cfi_endproc
 4399              	.LFE25:
 4401              		.section	.text.pqcrystals_dilithium2_ref_polyz_pack,"ax",%progbits
 4402              		.align	1
 4403              		.global	pqcrystals_dilithium2_ref_polyz_pack
 4404              		.syntax unified
 4405              		.thumb
 4406              		.thumb_func
 4407              		.fpu softvfp
 4409              	pqcrystals_dilithium2_ref_polyz_pack:
 4410              	.LFB26:
 791:poly.c        **** 
 792:poly.c        **** /*************************************************
 793:poly.c        **** * Name:        polyz_pack
 794:poly.c        **** *
 795:poly.c        **** * Description: Bit-pack polynomial with coefficients
 796:poly.c        **** *              in [-(GAMMA1 - 1), GAMMA1].
 797:poly.c        **** *
 798:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 799:poly.c        **** *                            POLYZ_PACKEDBYTES bytes
 800:poly.c        **** *              - const poly *a: pointer to input polynomial
 801:poly.c        **** **************************************************/
 802:poly.c        **** void polyz_pack(uint8_t *r, const poly *a) {
 4411              		.loc 1 802 44
 4412              		.cfi_startproc
 4413              		@ args = 0, pretend = 0, frame = 32
 4414              		@ frame_needed = 1, uses_anonymous_args = 0
 4415              		@ link register save eliminated.
 4416 0000 80B4     		push	{r7}
 4417              	.LCFI142:
 4418              		.cfi_def_cfa_offset 4
 4419              		.cfi_offset 7, -4
 4420 0002 89B0     		sub	sp, sp, #36
 4421              	.LCFI143:
 4422              		.cfi_def_cfa_offset 40
 4423 0004 00AF     		add	r7, sp, #0
 4424              	.LCFI144:
 4425              		.cfi_def_cfa_register 7
 4426 0006 7860     		str	r0, [r7, #4]
 4427 0008 3960     		str	r1, [r7]
 803:poly.c        ****   unsigned int i;
 804:poly.c        ****   uint32_t t[4];
 805:poly.c        ****   DBENCH_START();
 806:poly.c        **** 
 807:poly.c        **** #if GAMMA1 == (1 << 17)
 808:poly.c        ****   for(i = 0; i < N/4; ++i) {
 4428              		.loc 1 808 9
 4429 000a 0023     		movs	r3, #0
 4430 000c FB61     		str	r3, [r7, #28]
 4431              		.loc 1 808 3
 4432 000e CBE0     		b	.L96
 4433              	.L97:
 809:poly.c        ****     t[0] = GAMMA1 - a->coeffs[4*i+0];
 4434              		.loc 1 809 34 discriminator 3
 4435 0010 FB69     		ldr	r3, [r7, #28]
 4436 0012 9A00     		lsls	r2, r3, #2
 4437              		.loc 1 809 30 discriminator 3
 4438 0014 3B68     		ldr	r3, [r7]
 4439 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4440              		.loc 1 809 19 discriminator 3
 4441 001a C3F50033 		rsb	r3, r3, #131072
 4442              		.loc 1 809 10 discriminator 3
 4443 001e FB60     		str	r3, [r7, #12]
 810:poly.c        ****     t[1] = GAMMA1 - a->coeffs[4*i+1];
 4444              		.loc 1 810 32 discriminator 3
 4445 0020 FB69     		ldr	r3, [r7, #28]
 4446 0022 9B00     		lsls	r3, r3, #2
 4447              		.loc 1 810 34 discriminator 3
 4448 0024 5A1C     		adds	r2, r3, #1
 4449              		.loc 1 810 30 discriminator 3
 4450 0026 3B68     		ldr	r3, [r7]
 4451 0028 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4452              		.loc 1 810 19 discriminator 3
 4453 002c C3F50033 		rsb	r3, r3, #131072
 4454              		.loc 1 810 10 discriminator 3
 4455 0030 3B61     		str	r3, [r7, #16]
 811:poly.c        ****     t[2] = GAMMA1 - a->coeffs[4*i+2];
 4456              		.loc 1 811 32 discriminator 3
 4457 0032 FB69     		ldr	r3, [r7, #28]
 4458 0034 9B00     		lsls	r3, r3, #2
 4459              		.loc 1 811 34 discriminator 3
 4460 0036 9A1C     		adds	r2, r3, #2
 4461              		.loc 1 811 30 discriminator 3
 4462 0038 3B68     		ldr	r3, [r7]
 4463 003a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4464              		.loc 1 811 19 discriminator 3
 4465 003e C3F50033 		rsb	r3, r3, #131072
 4466              		.loc 1 811 10 discriminator 3
 4467 0042 7B61     		str	r3, [r7, #20]
 812:poly.c        ****     t[3] = GAMMA1 - a->coeffs[4*i+3];
 4468              		.loc 1 812 32 discriminator 3
 4469 0044 FB69     		ldr	r3, [r7, #28]
 4470 0046 9B00     		lsls	r3, r3, #2
 4471              		.loc 1 812 34 discriminator 3
 4472 0048 DA1C     		adds	r2, r3, #3
 4473              		.loc 1 812 30 discriminator 3
 4474 004a 3B68     		ldr	r3, [r7]
 4475 004c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4476              		.loc 1 812 19 discriminator 3
 4477 0050 C3F50033 		rsb	r3, r3, #131072
 4478              		.loc 1 812 10 discriminator 3
 4479 0054 BB61     		str	r3, [r7, #24]
 813:poly.c        **** 
 814:poly.c        ****     r[9*i+0]  = t[0];
 4480              		.loc 1 814 18 discriminator 3
 4481 0056 F968     		ldr	r1, [r7, #12]
 4482              		.loc 1 814 8 discriminator 3
 4483 0058 FA69     		ldr	r2, [r7, #28]
 4484 005a 1346     		mov	r3, r2
 4485 005c DB00     		lsls	r3, r3, #3
 4486 005e 1344     		add	r3, r3, r2
 4487              		.loc 1 814 6 discriminator 3
 4488 0060 7A68     		ldr	r2, [r7, #4]
 4489 0062 1344     		add	r3, r3, r2
 4490              		.loc 1 814 15 discriminator 3
 4491 0064 CAB2     		uxtb	r2, r1
 4492 0066 1A70     		strb	r2, [r3]
 815:poly.c        ****     r[9*i+1]  = t[0] >> 8;
 4493              		.loc 1 815 18 discriminator 3
 4494 0068 FB68     		ldr	r3, [r7, #12]
 4495              		.loc 1 815 22 discriminator 3
 4496 006a 190A     		lsrs	r1, r3, #8
 4497              		.loc 1 815 8 discriminator 3
 4498 006c FA69     		ldr	r2, [r7, #28]
 4499 006e 1346     		mov	r3, r2
 4500 0070 DB00     		lsls	r3, r3, #3
 4501 0072 1344     		add	r3, r3, r2
 4502              		.loc 1 815 6 discriminator 3
 4503 0074 0133     		adds	r3, r3, #1
 4504 0076 7A68     		ldr	r2, [r7, #4]
 4505 0078 1344     		add	r3, r3, r2
 4506              		.loc 1 815 15 discriminator 3
 4507 007a CAB2     		uxtb	r2, r1
 4508 007c 1A70     		strb	r2, [r3]
 816:poly.c        ****     r[9*i+2]  = t[0] >> 16;
 4509              		.loc 1 816 18 discriminator 3
 4510 007e FB68     		ldr	r3, [r7, #12]
 4511              		.loc 1 816 22 discriminator 3
 4512 0080 190C     		lsrs	r1, r3, #16
 4513              		.loc 1 816 8 discriminator 3
 4514 0082 FA69     		ldr	r2, [r7, #28]
 4515 0084 1346     		mov	r3, r2
 4516 0086 DB00     		lsls	r3, r3, #3
 4517 0088 1344     		add	r3, r3, r2
 4518              		.loc 1 816 6 discriminator 3
 4519 008a 0233     		adds	r3, r3, #2
 4520 008c 7A68     		ldr	r2, [r7, #4]
 4521 008e 1344     		add	r3, r3, r2
 4522              		.loc 1 816 15 discriminator 3
 4523 0090 CAB2     		uxtb	r2, r1
 4524 0092 1A70     		strb	r2, [r3]
 817:poly.c        ****     r[9*i+2] |= t[1] << 2;
 4525              		.loc 1 817 14 discriminator 3
 4526 0094 FA69     		ldr	r2, [r7, #28]
 4527 0096 1346     		mov	r3, r2
 4528 0098 DB00     		lsls	r3, r3, #3
 4529 009a 1344     		add	r3, r3, r2
 4530 009c 0233     		adds	r3, r3, #2
 4531 009e 7A68     		ldr	r2, [r7, #4]
 4532 00a0 1344     		add	r3, r3, r2
 4533 00a2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 4534              		.loc 1 817 18 discriminator 3
 4535 00a4 3B69     		ldr	r3, [r7, #16]
 4536              		.loc 1 817 22 discriminator 3
 4537 00a6 DBB2     		uxtb	r3, r3
 4538 00a8 9B00     		lsls	r3, r3, #2
 4539 00aa D9B2     		uxtb	r1, r3
 4540              		.loc 1 817 14 discriminator 3
 4541 00ac FA69     		ldr	r2, [r7, #28]
 4542 00ae 1346     		mov	r3, r2
 4543 00b0 DB00     		lsls	r3, r3, #3
 4544 00b2 1344     		add	r3, r3, r2
 4545 00b4 0233     		adds	r3, r3, #2
 4546 00b6 7A68     		ldr	r2, [r7, #4]
 4547 00b8 1344     		add	r3, r3, r2
 4548 00ba 40EA0102 		orr	r2, r0, r1
 4549 00be D2B2     		uxtb	r2, r2
 4550 00c0 1A70     		strb	r2, [r3]
 818:poly.c        ****     r[9*i+3]  = t[1] >> 6;
 4551              		.loc 1 818 18 discriminator 3
 4552 00c2 3B69     		ldr	r3, [r7, #16]
 4553              		.loc 1 818 22 discriminator 3
 4554 00c4 9909     		lsrs	r1, r3, #6
 4555              		.loc 1 818 8 discriminator 3
 4556 00c6 FA69     		ldr	r2, [r7, #28]
 4557 00c8 1346     		mov	r3, r2
 4558 00ca DB00     		lsls	r3, r3, #3
 4559 00cc 1344     		add	r3, r3, r2
 4560              		.loc 1 818 6 discriminator 3
 4561 00ce 0333     		adds	r3, r3, #3
 4562 00d0 7A68     		ldr	r2, [r7, #4]
 4563 00d2 1344     		add	r3, r3, r2
 4564              		.loc 1 818 15 discriminator 3
 4565 00d4 CAB2     		uxtb	r2, r1
 4566 00d6 1A70     		strb	r2, [r3]
 819:poly.c        ****     r[9*i+4]  = t[1] >> 14;
 4567              		.loc 1 819 18 discriminator 3
 4568 00d8 3B69     		ldr	r3, [r7, #16]
 4569              		.loc 1 819 22 discriminator 3
 4570 00da 990B     		lsrs	r1, r3, #14
 4571              		.loc 1 819 8 discriminator 3
 4572 00dc FA69     		ldr	r2, [r7, #28]
 4573 00de 1346     		mov	r3, r2
 4574 00e0 DB00     		lsls	r3, r3, #3
 4575 00e2 1344     		add	r3, r3, r2
 4576              		.loc 1 819 6 discriminator 3
 4577 00e4 0433     		adds	r3, r3, #4
 4578 00e6 7A68     		ldr	r2, [r7, #4]
 4579 00e8 1344     		add	r3, r3, r2
 4580              		.loc 1 819 15 discriminator 3
 4581 00ea CAB2     		uxtb	r2, r1
 4582 00ec 1A70     		strb	r2, [r3]
 820:poly.c        ****     r[9*i+4] |= t[2] << 4;
 4583              		.loc 1 820 14 discriminator 3
 4584 00ee FA69     		ldr	r2, [r7, #28]
 4585 00f0 1346     		mov	r3, r2
 4586 00f2 DB00     		lsls	r3, r3, #3
 4587 00f4 1344     		add	r3, r3, r2
 4588 00f6 0433     		adds	r3, r3, #4
 4589 00f8 7A68     		ldr	r2, [r7, #4]
 4590 00fa 1344     		add	r3, r3, r2
 4591 00fc 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 4592              		.loc 1 820 18 discriminator 3
 4593 00fe 7B69     		ldr	r3, [r7, #20]
 4594              		.loc 1 820 22 discriminator 3
 4595 0100 DBB2     		uxtb	r3, r3
 4596 0102 1B01     		lsls	r3, r3, #4
 4597 0104 D9B2     		uxtb	r1, r3
 4598              		.loc 1 820 14 discriminator 3
 4599 0106 FA69     		ldr	r2, [r7, #28]
 4600 0108 1346     		mov	r3, r2
 4601 010a DB00     		lsls	r3, r3, #3
 4602 010c 1344     		add	r3, r3, r2
 4603 010e 0433     		adds	r3, r3, #4
 4604 0110 7A68     		ldr	r2, [r7, #4]
 4605 0112 1344     		add	r3, r3, r2
 4606 0114 40EA0102 		orr	r2, r0, r1
 4607 0118 D2B2     		uxtb	r2, r2
 4608 011a 1A70     		strb	r2, [r3]
 821:poly.c        ****     r[9*i+5]  = t[2] >> 4;
 4609              		.loc 1 821 18 discriminator 3
 4610 011c 7B69     		ldr	r3, [r7, #20]
 4611              		.loc 1 821 22 discriminator 3
 4612 011e 1909     		lsrs	r1, r3, #4
 4613              		.loc 1 821 8 discriminator 3
 4614 0120 FA69     		ldr	r2, [r7, #28]
 4615 0122 1346     		mov	r3, r2
 4616 0124 DB00     		lsls	r3, r3, #3
 4617 0126 1344     		add	r3, r3, r2
 4618              		.loc 1 821 6 discriminator 3
 4619 0128 0533     		adds	r3, r3, #5
 4620 012a 7A68     		ldr	r2, [r7, #4]
 4621 012c 1344     		add	r3, r3, r2
 4622              		.loc 1 821 15 discriminator 3
 4623 012e CAB2     		uxtb	r2, r1
 4624 0130 1A70     		strb	r2, [r3]
 822:poly.c        ****     r[9*i+6]  = t[2] >> 12;
 4625              		.loc 1 822 18 discriminator 3
 4626 0132 7B69     		ldr	r3, [r7, #20]
 4627              		.loc 1 822 22 discriminator 3
 4628 0134 190B     		lsrs	r1, r3, #12
 4629              		.loc 1 822 8 discriminator 3
 4630 0136 FA69     		ldr	r2, [r7, #28]
 4631 0138 1346     		mov	r3, r2
 4632 013a DB00     		lsls	r3, r3, #3
 4633 013c 1344     		add	r3, r3, r2
 4634              		.loc 1 822 6 discriminator 3
 4635 013e 0633     		adds	r3, r3, #6
 4636 0140 7A68     		ldr	r2, [r7, #4]
 4637 0142 1344     		add	r3, r3, r2
 4638              		.loc 1 822 15 discriminator 3
 4639 0144 CAB2     		uxtb	r2, r1
 4640 0146 1A70     		strb	r2, [r3]
 823:poly.c        ****     r[9*i+6] |= t[3] << 6;
 4641              		.loc 1 823 14 discriminator 3
 4642 0148 FA69     		ldr	r2, [r7, #28]
 4643 014a 1346     		mov	r3, r2
 4644 014c DB00     		lsls	r3, r3, #3
 4645 014e 1344     		add	r3, r3, r2
 4646 0150 0633     		adds	r3, r3, #6
 4647 0152 7A68     		ldr	r2, [r7, #4]
 4648 0154 1344     		add	r3, r3, r2
 4649 0156 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 4650              		.loc 1 823 18 discriminator 3
 4651 0158 BB69     		ldr	r3, [r7, #24]
 4652              		.loc 1 823 22 discriminator 3
 4653 015a DBB2     		uxtb	r3, r3
 4654 015c 9B01     		lsls	r3, r3, #6
 4655 015e D9B2     		uxtb	r1, r3
 4656              		.loc 1 823 14 discriminator 3
 4657 0160 FA69     		ldr	r2, [r7, #28]
 4658 0162 1346     		mov	r3, r2
 4659 0164 DB00     		lsls	r3, r3, #3
 4660 0166 1344     		add	r3, r3, r2
 4661 0168 0633     		adds	r3, r3, #6
 4662 016a 7A68     		ldr	r2, [r7, #4]
 4663 016c 1344     		add	r3, r3, r2
 4664 016e 40EA0102 		orr	r2, r0, r1
 4665 0172 D2B2     		uxtb	r2, r2
 4666 0174 1A70     		strb	r2, [r3]
 824:poly.c        ****     r[9*i+7]  = t[3] >> 2;
 4667              		.loc 1 824 18 discriminator 3
 4668 0176 BB69     		ldr	r3, [r7, #24]
 4669              		.loc 1 824 22 discriminator 3
 4670 0178 9908     		lsrs	r1, r3, #2
 4671              		.loc 1 824 8 discriminator 3
 4672 017a FA69     		ldr	r2, [r7, #28]
 4673 017c 1346     		mov	r3, r2
 4674 017e DB00     		lsls	r3, r3, #3
 4675 0180 1344     		add	r3, r3, r2
 4676              		.loc 1 824 6 discriminator 3
 4677 0182 0733     		adds	r3, r3, #7
 4678 0184 7A68     		ldr	r2, [r7, #4]
 4679 0186 1344     		add	r3, r3, r2
 4680              		.loc 1 824 15 discriminator 3
 4681 0188 CAB2     		uxtb	r2, r1
 4682 018a 1A70     		strb	r2, [r3]
 825:poly.c        ****     r[9*i+8]  = t[3] >> 10;
 4683              		.loc 1 825 18 discriminator 3
 4684 018c BB69     		ldr	r3, [r7, #24]
 4685              		.loc 1 825 22 discriminator 3
 4686 018e 990A     		lsrs	r1, r3, #10
 4687              		.loc 1 825 8 discriminator 3
 4688 0190 FA69     		ldr	r2, [r7, #28]
 4689 0192 1346     		mov	r3, r2
 4690 0194 DB00     		lsls	r3, r3, #3
 4691 0196 1344     		add	r3, r3, r2
 4692              		.loc 1 825 6 discriminator 3
 4693 0198 0833     		adds	r3, r3, #8
 4694 019a 7A68     		ldr	r2, [r7, #4]
 4695 019c 1344     		add	r3, r3, r2
 4696              		.loc 1 825 15 discriminator 3
 4697 019e CAB2     		uxtb	r2, r1
 4698 01a0 1A70     		strb	r2, [r3]
 808:poly.c        ****     t[0] = GAMMA1 - a->coeffs[4*i+0];
 4699              		.loc 1 808 23 discriminator 3
 4700 01a2 FB69     		ldr	r3, [r7, #28]
 4701 01a4 0133     		adds	r3, r3, #1
 4702 01a6 FB61     		str	r3, [r7, #28]
 4703              	.L96:
 808:poly.c        ****     t[0] = GAMMA1 - a->coeffs[4*i+0];
 4704              		.loc 1 808 3 discriminator 1
 4705 01a8 FB69     		ldr	r3, [r7, #28]
 4706 01aa 3F2B     		cmp	r3, #63
 4707 01ac 7FF630AF 		bls	.L97
 826:poly.c        ****   }
 827:poly.c        **** #elif GAMMA1 == (1 << 19)
 828:poly.c        ****   for(i = 0; i < N/2; ++i) {
 829:poly.c        ****     t[0] = GAMMA1 - a->coeffs[2*i+0];
 830:poly.c        ****     t[1] = GAMMA1 - a->coeffs[2*i+1];
 831:poly.c        **** 
 832:poly.c        ****     r[5*i+0]  = t[0];
 833:poly.c        ****     r[5*i+1]  = t[0] >> 8;
 834:poly.c        ****     r[5*i+2]  = t[0] >> 16;
 835:poly.c        ****     r[5*i+2] |= t[1] << 4;
 836:poly.c        ****     r[5*i+3]  = t[1] >> 4;
 837:poly.c        ****     r[5*i+4]  = t[1] >> 12;
 838:poly.c        ****   }
 839:poly.c        **** #endif
 840:poly.c        **** 
 841:poly.c        ****   DBENCH_STOP(*tpack);
 842:poly.c        **** }
 4708              		.loc 1 842 1
 4709 01b0 00BF     		nop
 4710 01b2 00BF     		nop
 4711 01b4 2437     		adds	r7, r7, #36
 4712              	.LCFI145:
 4713              		.cfi_def_cfa_offset 4
 4714 01b6 BD46     		mov	sp, r7
 4715              	.LCFI146:
 4716              		.cfi_def_cfa_register 13
 4717              		@ sp needed
 4718 01b8 80BC     		pop	{r7}
 4719              	.LCFI147:
 4720              		.cfi_restore 7
 4721              		.cfi_def_cfa_offset 0
 4722 01ba 7047     		bx	lr
 4723              		.cfi_endproc
 4724              	.LFE26:
 4726              		.section	.text.pqcrystals_dilithium2_ref_polyz_unpack,"ax",%progbits
 4727              		.align	1
 4728              		.global	pqcrystals_dilithium2_ref_polyz_unpack
 4729              		.syntax unified
 4730              		.thumb
 4731              		.thumb_func
 4732              		.fpu softvfp
 4734              	pqcrystals_dilithium2_ref_polyz_unpack:
 4735              	.LFB27:
 843:poly.c        **** 
 844:poly.c        **** /*************************************************
 845:poly.c        **** * Name:        polyz_unpack
 846:poly.c        **** *
 847:poly.c        **** * Description: Unpack polynomial z with coefficients
 848:poly.c        **** *              in [-(GAMMA1 - 1), GAMMA1].
 849:poly.c        **** *
 850:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 851:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 852:poly.c        **** **************************************************/
 853:poly.c        **** void polyz_unpack(poly *r, const uint8_t *a) {
 4736              		.loc 1 853 46
 4737              		.cfi_startproc
 4738              		@ args = 0, pretend = 0, frame = 16
 4739              		@ frame_needed = 1, uses_anonymous_args = 0
 4740              		@ link register save eliminated.
 4741 0000 80B4     		push	{r7}
 4742              	.LCFI148:
 4743              		.cfi_def_cfa_offset 4
 4744              		.cfi_offset 7, -4
 4745 0002 85B0     		sub	sp, sp, #20
 4746              	.LCFI149:
 4747              		.cfi_def_cfa_offset 24
 4748 0004 00AF     		add	r7, sp, #0
 4749              	.LCFI150:
 4750              		.cfi_def_cfa_register 7
 4751 0006 7860     		str	r0, [r7, #4]
 4752 0008 3960     		str	r1, [r7]
 854:poly.c        ****   unsigned int i;
 855:poly.c        ****   DBENCH_START();
 856:poly.c        **** 
 857:poly.c        **** #if GAMMA1 == (1 << 17)
 858:poly.c        ****   for(i = 0; i < N/4; ++i) {
 4753              		.loc 1 858 9
 4754 000a 0023     		movs	r3, #0
 4755 000c FB60     		str	r3, [r7, #12]
 4756              		.loc 1 858 3
 4757 000e 5EE1     		b	.L99
 4758              	.L100:
 859:poly.c        ****     r->coeffs[4*i+0]  = a[9*i+0];
 4759              		.loc 1 859 28 discriminator 3
 4760 0010 FA68     		ldr	r2, [r7, #12]
 4761 0012 1346     		mov	r3, r2
 4762 0014 DB00     		lsls	r3, r3, #3
 4763 0016 1344     		add	r3, r3, r2
 4764              		.loc 1 859 26 discriminator 3
 4765 0018 3A68     		ldr	r2, [r7]
 4766 001a 1344     		add	r3, r3, r2
 4767 001c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4768              		.loc 1 859 18 discriminator 3
 4769 001e FB68     		ldr	r3, [r7, #12]
 4770 0020 9A00     		lsls	r2, r3, #2
 4771              		.loc 1 859 23 discriminator 3
 4772 0022 7B68     		ldr	r3, [r7, #4]
 4773 0024 43F82210 		str	r1, [r3, r2, lsl #2]
 860:poly.c        ****     r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 4774              		.loc 1 860 22 discriminator 3
 4775 0028 FB68     		ldr	r3, [r7, #12]
 4776 002a 9A00     		lsls	r2, r3, #2
 4777 002c 7B68     		ldr	r3, [r7, #4]
 4778 002e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4779 0032 1946     		mov	r1, r3
 4780              		.loc 1 860 38 discriminator 3
 4781 0034 FA68     		ldr	r2, [r7, #12]
 4782 0036 1346     		mov	r3, r2
 4783 0038 DB00     		lsls	r3, r3, #3
 4784 003a 1344     		add	r3, r3, r2
 4785              		.loc 1 860 36 discriminator 3
 4786 003c 0133     		adds	r3, r3, #1
 4787 003e 3A68     		ldr	r2, [r7]
 4788 0040 1344     		add	r3, r3, r2
 4789 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4790              		.loc 1 860 44 discriminator 3
 4791 0044 1B02     		lsls	r3, r3, #8
 4792              		.loc 1 860 22 discriminator 3
 4793 0046 1943     		orrs	r1, r1, r3
 4794 0048 FB68     		ldr	r3, [r7, #12]
 4795 004a 9A00     		lsls	r2, r3, #2
 4796 004c 7B68     		ldr	r3, [r7, #4]
 4797 004e 43F82210 		str	r1, [r3, r2, lsl #2]
 861:poly.c        ****     r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 4798              		.loc 1 861 22 discriminator 3
 4799 0052 FB68     		ldr	r3, [r7, #12]
 4800 0054 9A00     		lsls	r2, r3, #2
 4801 0056 7B68     		ldr	r3, [r7, #4]
 4802 0058 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4803 005c 1946     		mov	r1, r3
 4804              		.loc 1 861 38 discriminator 3
 4805 005e FA68     		ldr	r2, [r7, #12]
 4806 0060 1346     		mov	r3, r2
 4807 0062 DB00     		lsls	r3, r3, #3
 4808 0064 1344     		add	r3, r3, r2
 4809              		.loc 1 861 36 discriminator 3
 4810 0066 0233     		adds	r3, r3, #2
 4811 0068 3A68     		ldr	r2, [r7]
 4812 006a 1344     		add	r3, r3, r2
 4813 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4814              		.loc 1 861 44 discriminator 3
 4815 006e 1B04     		lsls	r3, r3, #16
 4816              		.loc 1 861 22 discriminator 3
 4817 0070 1943     		orrs	r1, r1, r3
 4818 0072 FB68     		ldr	r3, [r7, #12]
 4819 0074 9A00     		lsls	r2, r3, #2
 4820 0076 7B68     		ldr	r3, [r7, #4]
 4821 0078 43F82210 		str	r1, [r3, r2, lsl #2]
 862:poly.c        ****     r->coeffs[4*i+0] &= 0x3FFFF;
 4822              		.loc 1 862 22 discriminator 3
 4823 007c FB68     		ldr	r3, [r7, #12]
 4824 007e 9A00     		lsls	r2, r3, #2
 4825 0080 7B68     		ldr	r3, [r7, #4]
 4826 0082 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4827 0086 FA68     		ldr	r2, [r7, #12]
 4828 0088 9200     		lsls	r2, r2, #2
 4829 008a C3F31101 		ubfx	r1, r3, #0, #18
 4830 008e 7B68     		ldr	r3, [r7, #4]
 4831 0090 43F82210 		str	r1, [r3, r2, lsl #2]
 863:poly.c        **** 
 864:poly.c        ****     r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 4832              		.loc 1 864 28 discriminator 3
 4833 0094 FA68     		ldr	r2, [r7, #12]
 4834 0096 1346     		mov	r3, r2
 4835 0098 DB00     		lsls	r3, r3, #3
 4836 009a 1344     		add	r3, r3, r2
 4837              		.loc 1 864 26 discriminator 3
 4838 009c 0233     		adds	r3, r3, #2
 4839 009e 3A68     		ldr	r2, [r7]
 4840 00a0 1344     		add	r3, r3, r2
 4841 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4842              		.loc 1 864 34 discriminator 3
 4843 00a4 9B08     		lsrs	r3, r3, #2
 4844 00a6 D9B2     		uxtb	r1, r3
 4845              		.loc 1 864 16 discriminator 3
 4846 00a8 FB68     		ldr	r3, [r7, #12]
 4847 00aa 9B00     		lsls	r3, r3, #2
 4848              		.loc 1 864 18 discriminator 3
 4849 00ac 5A1C     		adds	r2, r3, #1
 4850              		.loc 1 864 23 discriminator 3
 4851 00ae 7B68     		ldr	r3, [r7, #4]
 4852 00b0 43F82210 		str	r1, [r3, r2, lsl #2]
 865:poly.c        ****     r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 4853              		.loc 1 865 22 discriminator 3
 4854 00b4 FB68     		ldr	r3, [r7, #12]
 4855 00b6 9B00     		lsls	r3, r3, #2
 4856 00b8 5A1C     		adds	r2, r3, #1
 4857 00ba 7B68     		ldr	r3, [r7, #4]
 4858 00bc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4859 00c0 1946     		mov	r1, r3
 4860              		.loc 1 865 38 discriminator 3
 4861 00c2 FA68     		ldr	r2, [r7, #12]
 4862 00c4 1346     		mov	r3, r2
 4863 00c6 DB00     		lsls	r3, r3, #3
 4864 00c8 1344     		add	r3, r3, r2
 4865              		.loc 1 865 36 discriminator 3
 4866 00ca 0333     		adds	r3, r3, #3
 4867 00cc 3A68     		ldr	r2, [r7]
 4868 00ce 1344     		add	r3, r3, r2
 4869 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4870              		.loc 1 865 44 discriminator 3
 4871 00d2 9B01     		lsls	r3, r3, #6
 4872              		.loc 1 865 22 discriminator 3
 4873 00d4 1943     		orrs	r1, r1, r3
 4874 00d6 FB68     		ldr	r3, [r7, #12]
 4875 00d8 9B00     		lsls	r3, r3, #2
 4876 00da 5A1C     		adds	r2, r3, #1
 4877 00dc 7B68     		ldr	r3, [r7, #4]
 4878 00de 43F82210 		str	r1, [r3, r2, lsl #2]
 866:poly.c        ****     r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 4879              		.loc 1 866 22 discriminator 3
 4880 00e2 FB68     		ldr	r3, [r7, #12]
 4881 00e4 9B00     		lsls	r3, r3, #2
 4882 00e6 5A1C     		adds	r2, r3, #1
 4883 00e8 7B68     		ldr	r3, [r7, #4]
 4884 00ea 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4885 00ee 1946     		mov	r1, r3
 4886              		.loc 1 866 38 discriminator 3
 4887 00f0 FA68     		ldr	r2, [r7, #12]
 4888 00f2 1346     		mov	r3, r2
 4889 00f4 DB00     		lsls	r3, r3, #3
 4890 00f6 1344     		add	r3, r3, r2
 4891              		.loc 1 866 36 discriminator 3
 4892 00f8 0433     		adds	r3, r3, #4
 4893 00fa 3A68     		ldr	r2, [r7]
 4894 00fc 1344     		add	r3, r3, r2
 4895 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4896              		.loc 1 866 44 discriminator 3
 4897 0100 9B03     		lsls	r3, r3, #14
 4898              		.loc 1 866 22 discriminator 3
 4899 0102 1943     		orrs	r1, r1, r3
 4900 0104 FB68     		ldr	r3, [r7, #12]
 4901 0106 9B00     		lsls	r3, r3, #2
 4902 0108 5A1C     		adds	r2, r3, #1
 4903 010a 7B68     		ldr	r3, [r7, #4]
 4904 010c 43F82210 		str	r1, [r3, r2, lsl #2]
 867:poly.c        ****     r->coeffs[4*i+1] &= 0x3FFFF;
 4905              		.loc 1 867 22 discriminator 3
 4906 0110 FB68     		ldr	r3, [r7, #12]
 4907 0112 9B00     		lsls	r3, r3, #2
 4908 0114 5A1C     		adds	r2, r3, #1
 4909 0116 7B68     		ldr	r3, [r7, #4]
 4910 0118 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4911 011c FA68     		ldr	r2, [r7, #12]
 4912 011e 9200     		lsls	r2, r2, #2
 4913 0120 0132     		adds	r2, r2, #1
 4914 0122 C3F31101 		ubfx	r1, r3, #0, #18
 4915 0126 7B68     		ldr	r3, [r7, #4]
 4916 0128 43F82210 		str	r1, [r3, r2, lsl #2]
 868:poly.c        **** 
 869:poly.c        ****     r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 4917              		.loc 1 869 28 discriminator 3
 4918 012c FA68     		ldr	r2, [r7, #12]
 4919 012e 1346     		mov	r3, r2
 4920 0130 DB00     		lsls	r3, r3, #3
 4921 0132 1344     		add	r3, r3, r2
 4922              		.loc 1 869 26 discriminator 3
 4923 0134 0433     		adds	r3, r3, #4
 4924 0136 3A68     		ldr	r2, [r7]
 4925 0138 1344     		add	r3, r3, r2
 4926 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4927              		.loc 1 869 34 discriminator 3
 4928 013c 1B09     		lsrs	r3, r3, #4
 4929 013e D9B2     		uxtb	r1, r3
 4930              		.loc 1 869 16 discriminator 3
 4931 0140 FB68     		ldr	r3, [r7, #12]
 4932 0142 9B00     		lsls	r3, r3, #2
 4933              		.loc 1 869 18 discriminator 3
 4934 0144 9A1C     		adds	r2, r3, #2
 4935              		.loc 1 869 23 discriminator 3
 4936 0146 7B68     		ldr	r3, [r7, #4]
 4937 0148 43F82210 		str	r1, [r3, r2, lsl #2]
 870:poly.c        ****     r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 4938              		.loc 1 870 22 discriminator 3
 4939 014c FB68     		ldr	r3, [r7, #12]
 4940 014e 9B00     		lsls	r3, r3, #2
 4941 0150 9A1C     		adds	r2, r3, #2
 4942 0152 7B68     		ldr	r3, [r7, #4]
 4943 0154 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4944 0158 1946     		mov	r1, r3
 4945              		.loc 1 870 38 discriminator 3
 4946 015a FA68     		ldr	r2, [r7, #12]
 4947 015c 1346     		mov	r3, r2
 4948 015e DB00     		lsls	r3, r3, #3
 4949 0160 1344     		add	r3, r3, r2
 4950              		.loc 1 870 36 discriminator 3
 4951 0162 0533     		adds	r3, r3, #5
 4952 0164 3A68     		ldr	r2, [r7]
 4953 0166 1344     		add	r3, r3, r2
 4954 0168 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4955              		.loc 1 870 44 discriminator 3
 4956 016a 1B01     		lsls	r3, r3, #4
 4957              		.loc 1 870 22 discriminator 3
 4958 016c 1943     		orrs	r1, r1, r3
 4959 016e FB68     		ldr	r3, [r7, #12]
 4960 0170 9B00     		lsls	r3, r3, #2
 4961 0172 9A1C     		adds	r2, r3, #2
 4962 0174 7B68     		ldr	r3, [r7, #4]
 4963 0176 43F82210 		str	r1, [r3, r2, lsl #2]
 871:poly.c        ****     r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 4964              		.loc 1 871 22 discriminator 3
 4965 017a FB68     		ldr	r3, [r7, #12]
 4966 017c 9B00     		lsls	r3, r3, #2
 4967 017e 9A1C     		adds	r2, r3, #2
 4968 0180 7B68     		ldr	r3, [r7, #4]
 4969 0182 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4970 0186 1946     		mov	r1, r3
 4971              		.loc 1 871 38 discriminator 3
 4972 0188 FA68     		ldr	r2, [r7, #12]
 4973 018a 1346     		mov	r3, r2
 4974 018c DB00     		lsls	r3, r3, #3
 4975 018e 1344     		add	r3, r3, r2
 4976              		.loc 1 871 36 discriminator 3
 4977 0190 0633     		adds	r3, r3, #6
 4978 0192 3A68     		ldr	r2, [r7]
 4979 0194 1344     		add	r3, r3, r2
 4980 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4981              		.loc 1 871 44 discriminator 3
 4982 0198 1B03     		lsls	r3, r3, #12
 4983              		.loc 1 871 22 discriminator 3
 4984 019a 1943     		orrs	r1, r1, r3
 4985 019c FB68     		ldr	r3, [r7, #12]
 4986 019e 9B00     		lsls	r3, r3, #2
 4987 01a0 9A1C     		adds	r2, r3, #2
 4988 01a2 7B68     		ldr	r3, [r7, #4]
 4989 01a4 43F82210 		str	r1, [r3, r2, lsl #2]
 872:poly.c        ****     r->coeffs[4*i+2] &= 0x3FFFF;
 4990              		.loc 1 872 22 discriminator 3
 4991 01a8 FB68     		ldr	r3, [r7, #12]
 4992 01aa 9B00     		lsls	r3, r3, #2
 4993 01ac 9A1C     		adds	r2, r3, #2
 4994 01ae 7B68     		ldr	r3, [r7, #4]
 4995 01b0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4996 01b4 FA68     		ldr	r2, [r7, #12]
 4997 01b6 9200     		lsls	r2, r2, #2
 4998 01b8 0232     		adds	r2, r2, #2
 4999 01ba C3F31101 		ubfx	r1, r3, #0, #18
 5000 01be 7B68     		ldr	r3, [r7, #4]
 5001 01c0 43F82210 		str	r1, [r3, r2, lsl #2]
 873:poly.c        **** 
 874:poly.c        ****     r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 5002              		.loc 1 874 28 discriminator 3
 5003 01c4 FA68     		ldr	r2, [r7, #12]
 5004 01c6 1346     		mov	r3, r2
 5005 01c8 DB00     		lsls	r3, r3, #3
 5006 01ca 1344     		add	r3, r3, r2
 5007              		.loc 1 874 26 discriminator 3
 5008 01cc 0633     		adds	r3, r3, #6
 5009 01ce 3A68     		ldr	r2, [r7]
 5010 01d0 1344     		add	r3, r3, r2
 5011 01d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5012              		.loc 1 874 34 discriminator 3
 5013 01d4 9B09     		lsrs	r3, r3, #6
 5014 01d6 D9B2     		uxtb	r1, r3
 5015              		.loc 1 874 16 discriminator 3
 5016 01d8 FB68     		ldr	r3, [r7, #12]
 5017 01da 9B00     		lsls	r3, r3, #2
 5018              		.loc 1 874 18 discriminator 3
 5019 01dc DA1C     		adds	r2, r3, #3
 5020              		.loc 1 874 23 discriminator 3
 5021 01de 7B68     		ldr	r3, [r7, #4]
 5022 01e0 43F82210 		str	r1, [r3, r2, lsl #2]
 875:poly.c        ****     r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 5023              		.loc 1 875 22 discriminator 3
 5024 01e4 FB68     		ldr	r3, [r7, #12]
 5025 01e6 9B00     		lsls	r3, r3, #2
 5026 01e8 DA1C     		adds	r2, r3, #3
 5027 01ea 7B68     		ldr	r3, [r7, #4]
 5028 01ec 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5029 01f0 1946     		mov	r1, r3
 5030              		.loc 1 875 38 discriminator 3
 5031 01f2 FA68     		ldr	r2, [r7, #12]
 5032 01f4 1346     		mov	r3, r2
 5033 01f6 DB00     		lsls	r3, r3, #3
 5034 01f8 1344     		add	r3, r3, r2
 5035              		.loc 1 875 36 discriminator 3
 5036 01fa 0733     		adds	r3, r3, #7
 5037 01fc 3A68     		ldr	r2, [r7]
 5038 01fe 1344     		add	r3, r3, r2
 5039 0200 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5040              		.loc 1 875 44 discriminator 3
 5041 0202 9B00     		lsls	r3, r3, #2
 5042              		.loc 1 875 22 discriminator 3
 5043 0204 1943     		orrs	r1, r1, r3
 5044 0206 FB68     		ldr	r3, [r7, #12]
 5045 0208 9B00     		lsls	r3, r3, #2
 5046 020a DA1C     		adds	r2, r3, #3
 5047 020c 7B68     		ldr	r3, [r7, #4]
 5048 020e 43F82210 		str	r1, [r3, r2, lsl #2]
 876:poly.c        ****     r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 5049              		.loc 1 876 22 discriminator 3
 5050 0212 FB68     		ldr	r3, [r7, #12]
 5051 0214 9B00     		lsls	r3, r3, #2
 5052 0216 DA1C     		adds	r2, r3, #3
 5053 0218 7B68     		ldr	r3, [r7, #4]
 5054 021a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5055 021e 1946     		mov	r1, r3
 5056              		.loc 1 876 38 discriminator 3
 5057 0220 FA68     		ldr	r2, [r7, #12]
 5058 0222 1346     		mov	r3, r2
 5059 0224 DB00     		lsls	r3, r3, #3
 5060 0226 1344     		add	r3, r3, r2
 5061              		.loc 1 876 36 discriminator 3
 5062 0228 0833     		adds	r3, r3, #8
 5063 022a 3A68     		ldr	r2, [r7]
 5064 022c 1344     		add	r3, r3, r2
 5065 022e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5066              		.loc 1 876 44 discriminator 3
 5067 0230 9B02     		lsls	r3, r3, #10
 5068              		.loc 1 876 22 discriminator 3
 5069 0232 1943     		orrs	r1, r1, r3
 5070 0234 FB68     		ldr	r3, [r7, #12]
 5071 0236 9B00     		lsls	r3, r3, #2
 5072 0238 DA1C     		adds	r2, r3, #3
 5073 023a 7B68     		ldr	r3, [r7, #4]
 5074 023c 43F82210 		str	r1, [r3, r2, lsl #2]
 877:poly.c        ****     r->coeffs[4*i+3] &= 0x3FFFF;
 5075              		.loc 1 877 22 discriminator 3
 5076 0240 FB68     		ldr	r3, [r7, #12]
 5077 0242 9B00     		lsls	r3, r3, #2
 5078 0244 DA1C     		adds	r2, r3, #3
 5079 0246 7B68     		ldr	r3, [r7, #4]
 5080 0248 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5081 024c FA68     		ldr	r2, [r7, #12]
 5082 024e 9200     		lsls	r2, r2, #2
 5083 0250 0332     		adds	r2, r2, #3
 5084 0252 C3F31101 		ubfx	r1, r3, #0, #18
 5085 0256 7B68     		ldr	r3, [r7, #4]
 5086 0258 43F82210 		str	r1, [r3, r2, lsl #2]
 878:poly.c        **** 
 879:poly.c        ****     r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 5087              		.loc 1 879 46 discriminator 3
 5088 025c FB68     		ldr	r3, [r7, #12]
 5089 025e 9A00     		lsls	r2, r3, #2
 5090              		.loc 1 879 42 discriminator 3
 5091 0260 7B68     		ldr	r3, [r7, #4]
 5092 0262 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5093              		.loc 1 879 18 discriminator 3
 5094 0266 FA68     		ldr	r2, [r7, #12]
 5095 0268 9200     		lsls	r2, r2, #2
 5096              		.loc 1 879 31 discriminator 3
 5097 026a C3F50031 		rsb	r1, r3, #131072
 5098              		.loc 1 879 22 discriminator 3
 5099 026e 7B68     		ldr	r3, [r7, #4]
 5100 0270 43F82210 		str	r1, [r3, r2, lsl #2]
 880:poly.c        ****     r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 5101              		.loc 1 880 44 discriminator 3
 5102 0274 FB68     		ldr	r3, [r7, #12]
 5103 0276 9B00     		lsls	r3, r3, #2
 5104              		.loc 1 880 46 discriminator 3
 5105 0278 5A1C     		adds	r2, r3, #1
 5106              		.loc 1 880 42 discriminator 3
 5107 027a 7B68     		ldr	r3, [r7, #4]
 5108 027c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5109              		.loc 1 880 16 discriminator 3
 5110 0280 FA68     		ldr	r2, [r7, #12]
 5111 0282 9200     		lsls	r2, r2, #2
 5112              		.loc 1 880 18 discriminator 3
 5113 0284 0132     		adds	r2, r2, #1
 5114              		.loc 1 880 31 discriminator 3
 5115 0286 C3F50031 		rsb	r1, r3, #131072
 5116              		.loc 1 880 22 discriminator 3
 5117 028a 7B68     		ldr	r3, [r7, #4]
 5118 028c 43F82210 		str	r1, [r3, r2, lsl #2]
 881:poly.c        ****     r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 5119              		.loc 1 881 44 discriminator 3
 5120 0290 FB68     		ldr	r3, [r7, #12]
 5121 0292 9B00     		lsls	r3, r3, #2
 5122              		.loc 1 881 46 discriminator 3
 5123 0294 9A1C     		adds	r2, r3, #2
 5124              		.loc 1 881 42 discriminator 3
 5125 0296 7B68     		ldr	r3, [r7, #4]
 5126 0298 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5127              		.loc 1 881 16 discriminator 3
 5128 029c FA68     		ldr	r2, [r7, #12]
 5129 029e 9200     		lsls	r2, r2, #2
 5130              		.loc 1 881 18 discriminator 3
 5131 02a0 0232     		adds	r2, r2, #2
 5132              		.loc 1 881 31 discriminator 3
 5133 02a2 C3F50031 		rsb	r1, r3, #131072
 5134              		.loc 1 881 22 discriminator 3
 5135 02a6 7B68     		ldr	r3, [r7, #4]
 5136 02a8 43F82210 		str	r1, [r3, r2, lsl #2]
 882:poly.c        ****     r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 5137              		.loc 1 882 44 discriminator 3
 5138 02ac FB68     		ldr	r3, [r7, #12]
 5139 02ae 9B00     		lsls	r3, r3, #2
 5140              		.loc 1 882 46 discriminator 3
 5141 02b0 DA1C     		adds	r2, r3, #3
 5142              		.loc 1 882 42 discriminator 3
 5143 02b2 7B68     		ldr	r3, [r7, #4]
 5144 02b4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5145              		.loc 1 882 16 discriminator 3
 5146 02b8 FA68     		ldr	r2, [r7, #12]
 5147 02ba 9200     		lsls	r2, r2, #2
 5148              		.loc 1 882 18 discriminator 3
 5149 02bc 0332     		adds	r2, r2, #3
 5150              		.loc 1 882 31 discriminator 3
 5151 02be C3F50031 		rsb	r1, r3, #131072
 5152              		.loc 1 882 22 discriminator 3
 5153 02c2 7B68     		ldr	r3, [r7, #4]
 5154 02c4 43F82210 		str	r1, [r3, r2, lsl #2]
 858:poly.c        ****     r->coeffs[4*i+0]  = a[9*i+0];
 5155              		.loc 1 858 23 discriminator 3
 5156 02c8 FB68     		ldr	r3, [r7, #12]
 5157 02ca 0133     		adds	r3, r3, #1
 5158 02cc FB60     		str	r3, [r7, #12]
 5159              	.L99:
 858:poly.c        ****     r->coeffs[4*i+0]  = a[9*i+0];
 5160              		.loc 1 858 3 discriminator 1
 5161 02ce FB68     		ldr	r3, [r7, #12]
 5162 02d0 3F2B     		cmp	r3, #63
 5163 02d2 7FF69DAE 		bls	.L100
 883:poly.c        ****   }
 884:poly.c        **** #elif GAMMA1 == (1 << 19)
 885:poly.c        ****   for(i = 0; i < N/2; ++i) {
 886:poly.c        ****     r->coeffs[2*i+0]  = a[5*i+0];
 887:poly.c        ****     r->coeffs[2*i+0] |= (uint32_t)a[5*i+1] << 8;
 888:poly.c        ****     r->coeffs[2*i+0] |= (uint32_t)a[5*i+2] << 16;
 889:poly.c        ****     r->coeffs[2*i+0] &= 0xFFFFF;
 890:poly.c        **** 
 891:poly.c        ****     r->coeffs[2*i+1]  = a[5*i+2] >> 4;
 892:poly.c        ****     r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
 893:poly.c        ****     r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;
 894:poly.c        ****     r->coeffs[2*i+0] &= 0xFFFFF;
 895:poly.c        **** 
 896:poly.c        ****     r->coeffs[2*i+0] = GAMMA1 - r->coeffs[2*i+0];
 897:poly.c        ****     r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
 898:poly.c        ****   }
 899:poly.c        **** #endif
 900:poly.c        **** 
 901:poly.c        ****   DBENCH_STOP(*tpack);
 902:poly.c        **** }
 5164              		.loc 1 902 1
 5165 02d6 00BF     		nop
 5166 02d8 00BF     		nop
 5167 02da 1437     		adds	r7, r7, #20
 5168              	.LCFI151:
 5169              		.cfi_def_cfa_offset 4
 5170 02dc BD46     		mov	sp, r7
 5171              	.LCFI152:
 5172              		.cfi_def_cfa_register 13
 5173              		@ sp needed
 5174 02de 80BC     		pop	{r7}
 5175              	.LCFI153:
 5176              		.cfi_restore 7
 5177              		.cfi_def_cfa_offset 0
 5178 02e0 7047     		bx	lr
 5179              		.cfi_endproc
 5180              	.LFE27:
 5182              		.section	.text.pqcrystals_dilithium2_ref_polyw1_pack,"ax",%progbits
 5183              		.align	1
 5184              		.global	pqcrystals_dilithium2_ref_polyw1_pack
 5185              		.syntax unified
 5186              		.thumb
 5187              		.thumb_func
 5188              		.fpu softvfp
 5190              	pqcrystals_dilithium2_ref_polyw1_pack:
 5191              	.LFB28:
 903:poly.c        **** 
 904:poly.c        **** /*************************************************
 905:poly.c        **** * Name:        polyw1_pack
 906:poly.c        **** *
 907:poly.c        **** * Description: Bit-pack polynomial w1 with coefficients in [0,15] or [0,43].
 908:poly.c        **** *              Input coefficients are assumed to be standard representatives.
 909:poly.c        **** *
 910:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 911:poly.c        **** *                            POLYW1_PACKEDBYTES bytes
 912:poly.c        **** *              - const poly *a: pointer to input polynomial
 913:poly.c        **** **************************************************/
 914:poly.c        **** void polyw1_pack(uint8_t *r, const poly *a) {
 5192              		.loc 1 914 45
 5193              		.cfi_startproc
 5194              		@ args = 0, pretend = 0, frame = 16
 5195              		@ frame_needed = 1, uses_anonymous_args = 0
 5196              		@ link register save eliminated.
 5197 0000 80B4     		push	{r7}
 5198              	.LCFI154:
 5199              		.cfi_def_cfa_offset 4
 5200              		.cfi_offset 7, -4
 5201 0002 85B0     		sub	sp, sp, #20
 5202              	.LCFI155:
 5203              		.cfi_def_cfa_offset 24
 5204 0004 00AF     		add	r7, sp, #0
 5205              	.LCFI156:
 5206              		.cfi_def_cfa_register 7
 5207 0006 7860     		str	r0, [r7, #4]
 5208 0008 3960     		str	r1, [r7]
 915:poly.c        ****   unsigned int i;
 916:poly.c        ****   DBENCH_START();
 917:poly.c        **** 
 918:poly.c        **** #if GAMMA2 == (Q-1)/88
 919:poly.c        ****   for(i = 0; i < N/4; ++i) {
 5209              		.loc 1 919 9
 5210 000a 0023     		movs	r3, #0
 5211 000c FB60     		str	r3, [r7, #12]
 5212              		.loc 1 919 3
 5213 000e 81E0     		b	.L102
 5214              	.L103:
 920:poly.c        ****     r[3*i+0]  = a->coeffs[4*i+0];
 5215              		.loc 1 920 30 discriminator 3
 5216 0010 FB68     		ldr	r3, [r7, #12]
 5217 0012 9A00     		lsls	r2, r3, #2
 5218              		.loc 1 920 26 discriminator 3
 5219 0014 3B68     		ldr	r3, [r7]
 5220 0016 53F82210 		ldr	r1, [r3, r2, lsl #2]
 5221              		.loc 1 920 8 discriminator 3
 5222 001a FA68     		ldr	r2, [r7, #12]
 5223 001c 1346     		mov	r3, r2
 5224 001e 5B00     		lsls	r3, r3, #1
 5225 0020 1344     		add	r3, r3, r2
 5226              		.loc 1 920 6 discriminator 3
 5227 0022 7A68     		ldr	r2, [r7, #4]
 5228 0024 1344     		add	r3, r3, r2
 5229              		.loc 1 920 15 discriminator 3
 5230 0026 CAB2     		uxtb	r2, r1
 5231 0028 1A70     		strb	r2, [r3]
 921:poly.c        ****     r[3*i+0] |= a->coeffs[4*i+1] << 6;
 5232              		.loc 1 921 14 discriminator 3
 5233 002a FA68     		ldr	r2, [r7, #12]
 5234 002c 1346     		mov	r3, r2
 5235 002e 5B00     		lsls	r3, r3, #1
 5236 0030 1344     		add	r3, r3, r2
 5237 0032 7A68     		ldr	r2, [r7, #4]
 5238 0034 1344     		add	r3, r3, r2
 5239 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5240 0038 5AB2     		sxtb	r2, r3
 5241              		.loc 1 921 28 discriminator 3
 5242 003a FB68     		ldr	r3, [r7, #12]
 5243 003c 9B00     		lsls	r3, r3, #2
 5244              		.loc 1 921 30 discriminator 3
 5245 003e 591C     		adds	r1, r3, #1
 5246              		.loc 1 921 26 discriminator 3
 5247 0040 3B68     		ldr	r3, [r7]
 5248 0042 53F82130 		ldr	r3, [r3, r1, lsl #2]
 5249              		.loc 1 921 34 discriminator 3
 5250 0046 9B01     		lsls	r3, r3, #6
 5251              		.loc 1 921 14 discriminator 3
 5252 0048 5BB2     		sxtb	r3, r3
 5253 004a 1343     		orrs	r3, r3, r2
 5254 004c 59B2     		sxtb	r1, r3
 5255 004e FA68     		ldr	r2, [r7, #12]
 5256 0050 1346     		mov	r3, r2
 5257 0052 5B00     		lsls	r3, r3, #1
 5258 0054 1344     		add	r3, r3, r2
 5259 0056 7A68     		ldr	r2, [r7, #4]
 5260 0058 1344     		add	r3, r3, r2
 5261 005a CAB2     		uxtb	r2, r1
 5262 005c 1A70     		strb	r2, [r3]
 922:poly.c        ****     r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 5263              		.loc 1 922 28 discriminator 3
 5264 005e FB68     		ldr	r3, [r7, #12]
 5265 0060 9B00     		lsls	r3, r3, #2
 5266              		.loc 1 922 30 discriminator 3
 5267 0062 5A1C     		adds	r2, r3, #1
 5268              		.loc 1 922 26 discriminator 3
 5269 0064 3B68     		ldr	r3, [r7]
 5270 0066 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5271              		.loc 1 922 34 discriminator 3
 5272 006a 9910     		asrs	r1, r3, #2
 5273              		.loc 1 922 8 discriminator 3
 5274 006c FA68     		ldr	r2, [r7, #12]
 5275 006e 1346     		mov	r3, r2
 5276 0070 5B00     		lsls	r3, r3, #1
 5277 0072 1344     		add	r3, r3, r2
 5278              		.loc 1 922 6 discriminator 3
 5279 0074 0133     		adds	r3, r3, #1
 5280 0076 7A68     		ldr	r2, [r7, #4]
 5281 0078 1344     		add	r3, r3, r2
 5282              		.loc 1 922 15 discriminator 3
 5283 007a CAB2     		uxtb	r2, r1
 5284 007c 1A70     		strb	r2, [r3]
 923:poly.c        ****     r[3*i+1] |= a->coeffs[4*i+2] << 4;
 5285              		.loc 1 923 14 discriminator 3
 5286 007e FA68     		ldr	r2, [r7, #12]
 5287 0080 1346     		mov	r3, r2
 5288 0082 5B00     		lsls	r3, r3, #1
 5289 0084 1344     		add	r3, r3, r2
 5290 0086 0133     		adds	r3, r3, #1
 5291 0088 7A68     		ldr	r2, [r7, #4]
 5292 008a 1344     		add	r3, r3, r2
 5293 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5294 008e 5AB2     		sxtb	r2, r3
 5295              		.loc 1 923 28 discriminator 3
 5296 0090 FB68     		ldr	r3, [r7, #12]
 5297 0092 9B00     		lsls	r3, r3, #2
 5298              		.loc 1 923 30 discriminator 3
 5299 0094 991C     		adds	r1, r3, #2
 5300              		.loc 1 923 26 discriminator 3
 5301 0096 3B68     		ldr	r3, [r7]
 5302 0098 53F82130 		ldr	r3, [r3, r1, lsl #2]
 5303              		.loc 1 923 34 discriminator 3
 5304 009c 1B01     		lsls	r3, r3, #4
 5305              		.loc 1 923 14 discriminator 3
 5306 009e 5BB2     		sxtb	r3, r3
 5307 00a0 1343     		orrs	r3, r3, r2
 5308 00a2 59B2     		sxtb	r1, r3
 5309 00a4 FA68     		ldr	r2, [r7, #12]
 5310 00a6 1346     		mov	r3, r2
 5311 00a8 5B00     		lsls	r3, r3, #1
 5312 00aa 1344     		add	r3, r3, r2
 5313 00ac 0133     		adds	r3, r3, #1
 5314 00ae 7A68     		ldr	r2, [r7, #4]
 5315 00b0 1344     		add	r3, r3, r2
 5316 00b2 CAB2     		uxtb	r2, r1
 5317 00b4 1A70     		strb	r2, [r3]
 924:poly.c        ****     r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 5318              		.loc 1 924 28 discriminator 3
 5319 00b6 FB68     		ldr	r3, [r7, #12]
 5320 00b8 9B00     		lsls	r3, r3, #2
 5321              		.loc 1 924 30 discriminator 3
 5322 00ba 9A1C     		adds	r2, r3, #2
 5323              		.loc 1 924 26 discriminator 3
 5324 00bc 3B68     		ldr	r3, [r7]
 5325 00be 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5326              		.loc 1 924 34 discriminator 3
 5327 00c2 1911     		asrs	r1, r3, #4
 5328              		.loc 1 924 8 discriminator 3
 5329 00c4 FA68     		ldr	r2, [r7, #12]
 5330 00c6 1346     		mov	r3, r2
 5331 00c8 5B00     		lsls	r3, r3, #1
 5332 00ca 1344     		add	r3, r3, r2
 5333              		.loc 1 924 6 discriminator 3
 5334 00cc 0233     		adds	r3, r3, #2
 5335 00ce 7A68     		ldr	r2, [r7, #4]
 5336 00d0 1344     		add	r3, r3, r2
 5337              		.loc 1 924 15 discriminator 3
 5338 00d2 CAB2     		uxtb	r2, r1
 5339 00d4 1A70     		strb	r2, [r3]
 925:poly.c        ****     r[3*i+2] |= a->coeffs[4*i+3] << 2;
 5340              		.loc 1 925 14 discriminator 3
 5341 00d6 FA68     		ldr	r2, [r7, #12]
 5342 00d8 1346     		mov	r3, r2
 5343 00da 5B00     		lsls	r3, r3, #1
 5344 00dc 1344     		add	r3, r3, r2
 5345 00de 0233     		adds	r3, r3, #2
 5346 00e0 7A68     		ldr	r2, [r7, #4]
 5347 00e2 1344     		add	r3, r3, r2
 5348 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5349 00e6 5AB2     		sxtb	r2, r3
 5350              		.loc 1 925 28 discriminator 3
 5351 00e8 FB68     		ldr	r3, [r7, #12]
 5352 00ea 9B00     		lsls	r3, r3, #2
 5353              		.loc 1 925 30 discriminator 3
 5354 00ec D91C     		adds	r1, r3, #3
 5355              		.loc 1 925 26 discriminator 3
 5356 00ee 3B68     		ldr	r3, [r7]
 5357 00f0 53F82130 		ldr	r3, [r3, r1, lsl #2]
 5358              		.loc 1 925 34 discriminator 3
 5359 00f4 9B00     		lsls	r3, r3, #2
 5360              		.loc 1 925 14 discriminator 3
 5361 00f6 5BB2     		sxtb	r3, r3
 5362 00f8 1343     		orrs	r3, r3, r2
 5363 00fa 59B2     		sxtb	r1, r3
 5364 00fc FA68     		ldr	r2, [r7, #12]
 5365 00fe 1346     		mov	r3, r2
 5366 0100 5B00     		lsls	r3, r3, #1
 5367 0102 1344     		add	r3, r3, r2
 5368 0104 0233     		adds	r3, r3, #2
 5369 0106 7A68     		ldr	r2, [r7, #4]
 5370 0108 1344     		add	r3, r3, r2
 5371 010a CAB2     		uxtb	r2, r1
 5372 010c 1A70     		strb	r2, [r3]
 919:poly.c        ****     r[3*i+0]  = a->coeffs[4*i+0];
 5373              		.loc 1 919 23 discriminator 3
 5374 010e FB68     		ldr	r3, [r7, #12]
 5375 0110 0133     		adds	r3, r3, #1
 5376 0112 FB60     		str	r3, [r7, #12]
 5377              	.L102:
 919:poly.c        ****     r[3*i+0]  = a->coeffs[4*i+0];
 5378              		.loc 1 919 3 discriminator 1
 5379 0114 FB68     		ldr	r3, [r7, #12]
 5380 0116 3F2B     		cmp	r3, #63
 5381 0118 7FF67AAF 		bls	.L103
 926:poly.c        ****   }
 927:poly.c        **** #elif GAMMA2 == (Q-1)/32
 928:poly.c        ****   for(i = 0; i < N/2; ++i)
 929:poly.c        ****     r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
 930:poly.c        **** #endif
 931:poly.c        **** 
 932:poly.c        ****   DBENCH_STOP(*tpack);
 933:poly.c        **** }
 5382              		.loc 1 933 1
 5383 011c 00BF     		nop
 5384 011e 00BF     		nop
 5385 0120 1437     		adds	r7, r7, #20
 5386              	.LCFI157:
 5387              		.cfi_def_cfa_offset 4
 5388 0122 BD46     		mov	sp, r7
 5389              	.LCFI158:
 5390              		.cfi_def_cfa_register 13
 5391              		@ sp needed
 5392 0124 80BC     		pop	{r7}
 5393              	.LCFI159:
 5394              		.cfi_restore 7
 5395              		.cfi_def_cfa_offset 0
 5396 0126 7047     		bx	lr
 5397              		.cfi_endproc
 5398              	.LFE28:
 5400              		.text
 5401              	.Letext0:
 5402              		.file 2 "c:\\users\\shagua\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\machine\
 5403              		.file 3 "c:\\users\\shagua\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\_st
 5404              		.file 4 "poly.h"
 5405              		.file 5 "fips202.h"
 5406              		.file 6 "symmetric.h"
DEFINED SYMBOLS
                            *ABS*:00000000 poly.c
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:16     .text.pqcrystals_dilithium2_ref_poly_reduce:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:24     .text.pqcrystals_dilithium2_ref_poly_reduce:00000000 pqcrystals_dilithium2_ref_poly_reduce
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:84     .text.pqcrystals_dilithium2_ref_poly_caddq:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:91     .text.pqcrystals_dilithium2_ref_poly_caddq:00000000 pqcrystals_dilithium2_ref_poly_caddq
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:150    .text.pqcrystals_dilithium2_ref_poly_freeze:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:157    .text.pqcrystals_dilithium2_ref_poly_freeze:00000000 pqcrystals_dilithium2_ref_poly_freeze
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:216    .text.pqcrystals_dilithium2_ref_poly_add:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:223    .text.pqcrystals_dilithium2_ref_poly_add:00000000 pqcrystals_dilithium2_ref_poly_add
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:291    .text.pqcrystals_dilithium2_ref_poly_sub:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:298    .text.pqcrystals_dilithium2_ref_poly_sub:00000000 pqcrystals_dilithium2_ref_poly_sub
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:366    .text.pqcrystals_dilithium2_ref_poly_shiftl:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:373    .text.pqcrystals_dilithium2_ref_poly_shiftl:00000000 pqcrystals_dilithium2_ref_poly_shiftl
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:433    .text.pqcrystals_dilithium2_ref_poly_ntt:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:440    .text.pqcrystals_dilithium2_ref_poly_ntt:00000000 pqcrystals_dilithium2_ref_poly_ntt
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:477    .text.pqcrystals_dilithium2_ref_poly_invntt_tomont:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:484    .text.pqcrystals_dilithium2_ref_poly_invntt_tomont:00000000 pqcrystals_dilithium2_ref_poly_invntt_tomont
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:521    .text.pqcrystals_dilithium2_ref_poly_pointwise_montgomery:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:528    .text.pqcrystals_dilithium2_ref_poly_pointwise_montgomery:00000000 pqcrystals_dilithium2_ref_poly_pointwise_montgomery
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:614    .text.pqcrystals_dilithium2_ref_poly_power2round:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:621    .text.pqcrystals_dilithium2_ref_poly_power2round:00000000 pqcrystals_dilithium2_ref_poly_power2round
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:686    .text.pqcrystals_dilithium2_ref_poly_decompose:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:693    .text.pqcrystals_dilithium2_ref_poly_decompose:00000000 pqcrystals_dilithium2_ref_poly_decompose
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:758    .text.pqcrystals_dilithium2_ref_poly_make_hint:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:765    .text.pqcrystals_dilithium2_ref_poly_make_hint:00000000 pqcrystals_dilithium2_ref_poly_make_hint
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:843    .text.pqcrystals_dilithium2_ref_poly_use_hint:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:850    .text.pqcrystals_dilithium2_ref_poly_use_hint:00000000 pqcrystals_dilithium2_ref_poly_use_hint
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:916    .text.pqcrystals_dilithium2_ref_poly_chknorm:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:923    .text.pqcrystals_dilithium2_ref_poly_chknorm:00000000 pqcrystals_dilithium2_ref_poly_chknorm
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1018   .text.pqcrystals_dilithium2_ref_poly_chknorm:00000068 $d
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1023   .text.rej_uniform:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1029   .text.rej_uniform:00000000 rej_uniform
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1150   .text.rej_uniform:0000008c $d
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1155   .text.pqcrystals_dilithium2_ref_poly_uniform:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1162   .text.pqcrystals_dilithium2_ref_poly_uniform:00000000 pqcrystals_dilithium2_ref_poly_uniform
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1313   .text.pqcrystals_dilithium2_ref_poly_uniform:00000144 $d
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1318   .text.rej_eta:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1324   .text.rej_eta:00000000 rej_eta
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1479   .text.pqcrystals_dilithium2_ref_poly_uniform_eta:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1486   .text.pqcrystals_dilithium2_ref_poly_uniform_eta:00000000 pqcrystals_dilithium2_ref_poly_uniform_eta
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1588   .text.pqcrystals_dilithium2_ref_poly_uniform_gamma1:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1595   .text.pqcrystals_dilithium2_ref_poly_uniform_gamma1:00000000 pqcrystals_dilithium2_ref_poly_uniform_gamma1
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:4734   .text.pqcrystals_dilithium2_ref_polyz_unpack:00000000 pqcrystals_dilithium2_ref_polyz_unpack
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1661   .text.pqcrystals_dilithium2_ref_poly_challenge:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1668   .text.pqcrystals_dilithium2_ref_poly_challenge:00000000 pqcrystals_dilithium2_ref_poly_challenge
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1880   .text.pqcrystals_dilithium2_ref_polyeta_pack:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:1887   .text.pqcrystals_dilithium2_ref_polyeta_pack:00000000 pqcrystals_dilithium2_ref_polyeta_pack
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:2159   .text.pqcrystals_dilithium2_ref_polyeta_unpack:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:2166   .text.pqcrystals_dilithium2_ref_polyeta_unpack:00000000 pqcrystals_dilithium2_ref_polyeta_unpack
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:2572   .text.pqcrystals_dilithium2_ref_polyt1_pack:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:2579   .text.pqcrystals_dilithium2_ref_polyt1_pack:00000000 pqcrystals_dilithium2_ref_polyt1_pack
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:2786   .text.pqcrystals_dilithium2_ref_polyt1_unpack:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:2793   .text.pqcrystals_dilithium2_ref_polyt1_unpack:00000000 pqcrystals_dilithium2_ref_polyt1_unpack
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:3001   .text.pqcrystals_dilithium2_ref_polyt0_pack:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:3008   .text.pqcrystals_dilithium2_ref_polyt0_pack:00000000 pqcrystals_dilithium2_ref_polyt0_pack
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:3596   .text.pqcrystals_dilithium2_ref_polyt0_unpack:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:3603   .text.pqcrystals_dilithium2_ref_polyt0_unpack:00000000 pqcrystals_dilithium2_ref_polyt0_unpack
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:4402   .text.pqcrystals_dilithium2_ref_polyz_pack:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:4409   .text.pqcrystals_dilithium2_ref_polyz_pack:00000000 pqcrystals_dilithium2_ref_polyz_pack
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:4727   .text.pqcrystals_dilithium2_ref_polyz_unpack:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:5183   .text.pqcrystals_dilithium2_ref_polyw1_pack:00000000 $t
C:\Users\shagua\AppData\Local\Temp\ccYj1Mfx.s:5190   .text.pqcrystals_dilithium2_ref_polyw1_pack:00000000 pqcrystals_dilithium2_ref_polyw1_pack

UNDEFINED SYMBOLS
pqcrystals_dilithium2_ref_reduce32
pqcrystals_dilithium2_ref_caddq
pqcrystals_dilithium2_ref_freeze
pqcrystals_dilithium2_ref_ntt
pqcrystals_dilithium2_ref_invntt_tomont
pqcrystals_dilithium2_ref_montgomery_reduce
pqcrystals_dilithium2_ref_power2round
pqcrystals_dilithium2_ref_decompose
pqcrystals_dilithium2_ref_make_hint
pqcrystals_dilithium2_ref_use_hint
pqcrystals_dilithium2_ref_dilithium_shake128_stream_init
pqcrystals_fips202_ref_shake128_squeezeblocks
pqcrystals_dilithium2_ref_dilithium_shake256_stream_init
pqcrystals_fips202_ref_shake256_squeezeblocks
trigger_high
trigger_low
pqcrystals_fips202_ref_shake256_init
pqcrystals_fips202_ref_shake256_absorb
pqcrystals_fips202_ref_shake256_finalize
