
simple-test-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005b28  08005b28  00015b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bec  08005bec  0002043c  2**0
                  CONTENTS
  4 .ARM          00000000  08005bec  08005bec  0002043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bec  08005bec  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005bec  08005bec  00015bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  08005bf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002860  2000043c  08006034  0002043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20002c9c  08006034  00022c9c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000550c  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000efb  00000000  00000000  00025972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000024f8  00000000  00000000  0002686d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000450  00000000  00000000  00028d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000400  00000000  00000000  000291b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004f13  00000000  00000000  000295b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001aba  00000000  00000000  0002e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002ff82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001358  00000000  00000000  0002ffd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00031328  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000006f  00000000  00000000  0003146c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000043c 	.word	0x2000043c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b10 	.word	0x08005b10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000440 	.word	0x20000440
 80001c4:	08005b10 	.word	0x08005b10

080001c8 <memcpy>:
 80001c8:	4684      	mov	ip, r0
 80001ca:	ea41 0300 	orr.w	r3, r1, r0
 80001ce:	f013 0303 	ands.w	r3, r3, #3
 80001d2:	d16d      	bne.n	80002b0 <memcpy+0xe8>
 80001d4:	3a40      	subs	r2, #64	; 0x40
 80001d6:	d341      	bcc.n	800025c <memcpy+0x94>
 80001d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001dc:	f840 3b04 	str.w	r3, [r0], #4
 80001e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001e4:	f840 3b04 	str.w	r3, [r0], #4
 80001e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ec:	f840 3b04 	str.w	r3, [r0], #4
 80001f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f4:	f840 3b04 	str.w	r3, [r0], #4
 80001f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001fc:	f840 3b04 	str.w	r3, [r0], #4
 8000200:	f851 3b04 	ldr.w	r3, [r1], #4
 8000204:	f840 3b04 	str.w	r3, [r0], #4
 8000208:	f851 3b04 	ldr.w	r3, [r1], #4
 800020c:	f840 3b04 	str.w	r3, [r0], #4
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	f851 3b04 	ldr.w	r3, [r1], #4
 800021c:	f840 3b04 	str.w	r3, [r0], #4
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	f851 3b04 	ldr.w	r3, [r1], #4
 800022c:	f840 3b04 	str.w	r3, [r0], #4
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	f851 3b04 	ldr.w	r3, [r1], #4
 8000254:	f840 3b04 	str.w	r3, [r0], #4
 8000258:	3a40      	subs	r2, #64	; 0x40
 800025a:	d2bd      	bcs.n	80001d8 <memcpy+0x10>
 800025c:	3230      	adds	r2, #48	; 0x30
 800025e:	d311      	bcc.n	8000284 <memcpy+0xbc>
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	3a10      	subs	r2, #16
 8000282:	d2ed      	bcs.n	8000260 <memcpy+0x98>
 8000284:	320c      	adds	r2, #12
 8000286:	d305      	bcc.n	8000294 <memcpy+0xcc>
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	3a04      	subs	r2, #4
 8000292:	d2f9      	bcs.n	8000288 <memcpy+0xc0>
 8000294:	3204      	adds	r2, #4
 8000296:	d008      	beq.n	80002aa <memcpy+0xe2>
 8000298:	07d2      	lsls	r2, r2, #31
 800029a:	bf1c      	itt	ne
 800029c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002a0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002a4:	d301      	bcc.n	80002aa <memcpy+0xe2>
 80002a6:	880b      	ldrh	r3, [r1, #0]
 80002a8:	8003      	strh	r3, [r0, #0]
 80002aa:	4660      	mov	r0, ip
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	2a08      	cmp	r2, #8
 80002b2:	d313      	bcc.n	80002dc <memcpy+0x114>
 80002b4:	078b      	lsls	r3, r1, #30
 80002b6:	d08d      	beq.n	80001d4 <memcpy+0xc>
 80002b8:	f010 0303 	ands.w	r3, r0, #3
 80002bc:	d08a      	beq.n	80001d4 <memcpy+0xc>
 80002be:	f1c3 0304 	rsb	r3, r3, #4
 80002c2:	1ad2      	subs	r2, r2, r3
 80002c4:	07db      	lsls	r3, r3, #31
 80002c6:	bf1c      	itt	ne
 80002c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002cc:	f800 3b01 	strbne.w	r3, [r0], #1
 80002d0:	d380      	bcc.n	80001d4 <memcpy+0xc>
 80002d2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002d6:	f820 3b02 	strh.w	r3, [r0], #2
 80002da:	e77b      	b.n	80001d4 <memcpy+0xc>
 80002dc:	3a04      	subs	r2, #4
 80002de:	d3d9      	bcc.n	8000294 <memcpy+0xcc>
 80002e0:	3a01      	subs	r2, #1
 80002e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e6:	f800 3b01 	strb.w	r3, [r0], #1
 80002ea:	d2f9      	bcs.n	80002e0 <memcpy+0x118>
 80002ec:	780b      	ldrb	r3, [r1, #0]
 80002ee:	7003      	strb	r3, [r0, #0]
 80002f0:	784b      	ldrb	r3, [r1, #1]
 80002f2:	7043      	strb	r3, [r0, #1]
 80002f4:	788b      	ldrb	r3, [r1, #2]
 80002f6:	7083      	strb	r3, [r0, #2]
 80002f8:	4660      	mov	r0, ip
 80002fa:	4770      	bx	lr

080002fc <recv_9>:
  return 0;
}


uint8_t recv_9(uint8_t* data, uint8_t dlen)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
  simpleserial_put('k', 4, sm+MLEN + CRYPTO_BYTES - 4);
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <recv_9+0x24>)
 800030a:	461a      	mov	r2, r3
 800030c:	2104      	movs	r1, #4
 800030e:	206b      	movs	r0, #107	; 0x6b
 8000310:	f004 f8ee 	bl	80044f0 <simpleserial_put>
  return 0;
 8000314:	2300      	movs	r3, #0
}
 8000316:	4618      	mov	r0, r3
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000e0d 	.word	0x20000e0d

08000324 <recv_final>:

uint8_t recv_final(uint8_t* data, uint8_t dlen)
{ 
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
  uint8_t dst[8] = {0};
 8000330:	2300      	movs	r3, #0
 8000332:	60bb      	str	r3, [r7, #8]
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <recv_final+0x40>)
 800033a:	681b      	ldr	r3, [r3, #0]
  memcpy(dst, sm+255*0, 4);
 800033c:	60bb      	str	r3, [r7, #8]
  memcpy(dst+4, sm+MLEN + CRYPTO_BYTES - 4, 4);
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	3304      	adds	r3, #4
 8000344:	4a08      	ldr	r2, [pc, #32]	; (8000368 <recv_final+0x44>)
 8000346:	6812      	ldr	r2, [r2, #0]
 8000348:	601a      	str	r2, [r3, #0]
  simpleserial_put('c', 8, dst);
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	461a      	mov	r2, r3
 8000350:	2108      	movs	r1, #8
 8000352:	2063      	movs	r0, #99	; 0x63
 8000354:	f004 f8cc 	bl	80044f0 <simpleserial_put>
  return 0;
 8000358:	2300      	movs	r3, #0
}
 800035a:	4618      	mov	r0, r3
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000047c 	.word	0x2000047c
 8000368:	20000e0d 	.word	0x20000e0d

0800036c <main_func>:

uint8_t dst[8] = {0};
uint8_t rhoprime[CRHBYTES];
poly y;
uint8_t main_func(uint8_t* data, uint8_t dlen)
{
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	70fb      	strb	r3, [r7, #3]
  
  unsigned int i, j;
  int ret;
  size_t mlen, smlen;
  uint16_t nonce=0;
 8000378:	2300      	movs	r3, #0
 800037a:	81fb      	strh	r3, [r7, #14]

  ////////////////////////
  //!!!!!!!!!!!!!!!!!!!!!!!L*nonce + i
  
    //randombytes(m, MLEN); 随机数
    memcpy(rhoprime, data, CRHBYTES);
 800037c:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <main_func+0x74>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	461c      	mov	r4, r3
 8000382:	4616      	mov	r6, r2
 8000384:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000388:	4635      	mov	r5, r6
 800038a:	4623      	mov	r3, r4
 800038c:	6818      	ldr	r0, [r3, #0]
 800038e:	6859      	ldr	r1, [r3, #4]
 8000390:	689a      	ldr	r2, [r3, #8]
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000396:	3410      	adds	r4, #16
 8000398:	3610      	adds	r6, #16
 800039a:	4564      	cmp	r4, ip
 800039c:	d1f4      	bne.n	8000388 <main_func+0x1c>
    memcpy((uint8_t*)&nonce, data+CRHBYTES, 2);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3330      	adds	r3, #48	; 0x30
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	81fb      	strh	r3, [r7, #14]

   
    poly_uniform_gamma1(&y, rhoprime, nonce);
 80003a8:	89fb      	ldrh	r3, [r7, #14]
 80003aa:	461a      	mov	r2, r3
 80003ac:	490c      	ldr	r1, [pc, #48]	; (80003e0 <main_func+0x74>)
 80003ae:	480d      	ldr	r0, [pc, #52]	; (80003e4 <main_func+0x78>)
 80003b0:	f000 f842 	bl	8000438 <pqcrystals_dilithium2_ref_poly_uniform_gamma1>
 

  	//simpleserial_put('r', 4, (uint8_t*)sm);// 这个没有问题

    
    memcpy(dst, (uint8_t *)y.coeffs, 16);
 80003b4:	2210      	movs	r2, #16
 80003b6:	490b      	ldr	r1, [pc, #44]	; (80003e4 <main_func+0x78>)
 80003b8:	480b      	ldr	r0, [pc, #44]	; (80003e8 <main_func+0x7c>)
 80003ba:	f7ff ff05 	bl	80001c8 <memcpy>
    memcpy(dst+16, (uint8_t *)y.coeffs + 256 * 4 - 16, 16);
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <main_func+0x80>)
 80003c0:	490b      	ldr	r1, [pc, #44]	; (80003f0 <main_func+0x84>)
 80003c2:	2210      	movs	r2, #16
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff feff 	bl	80001c8 <memcpy>
    simpleserial_put('r', 32, (uint8_t *)dst);
 80003ca:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <main_func+0x7c>)
 80003cc:	2120      	movs	r1, #32
 80003ce:	2072      	movs	r0, #114	; 0x72
 80003d0:	f004 f88e 	bl	80044f0 <simpleserial_put>
    
  return 0;
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003de:	bf00      	nop
 80003e0:	200026c4 	.word	0x200026c4
 80003e4:	200026f4 	.word	0x200026f4
 80003e8:	200026bc 	.word	0x200026bc
 80003ec:	200026cc 	.word	0x200026cc
 80003f0:	20002ae4 	.word	0x20002ae4

080003f4 <main>:


int main(void)
{	
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	platform_init();
 80003f8:	f004 f8b0 	bl	800455c <platform_init>
	init_uart();
 80003fc:	f004 f8fe 	bl	80045fc <init_uart>
	trigger_setup();	
 8000400:	f004 f952 	bl	80046a8 <trigger_setup>
	simpleserial_init();
 8000404:	f003 ff22 	bl	800424c <simpleserial_init>
  
  //59 + 32 = 91
	simpleserial_addcmd('z', 50, main_func);
 8000408:	4a08      	ldr	r2, [pc, #32]	; (800042c <main+0x38>)
 800040a:	2132      	movs	r1, #50	; 0x32
 800040c:	207a      	movs	r0, #122	; 0x7a
 800040e:	f003 ff37 	bl	8004280 <simpleserial_addcmd>
  // simpleserial_addcmd('e', 1, recv_4);
  // simpleserial_addcmd('f', 1, recv_5);
  // simpleserial_addcmd('g', 1, recv_6);
  // simpleserial_addcmd('h', 1, recv_7);
  // simpleserial_addcmd('i', 1, recv_8);
  simpleserial_addcmd('j', 1, recv_9);
 8000412:	4a07      	ldr	r2, [pc, #28]	; (8000430 <main+0x3c>)
 8000414:	2101      	movs	r1, #1
 8000416:	206a      	movs	r0, #106	; 0x6a
 8000418:	f003 ff32 	bl	8004280 <simpleserial_addcmd>
  simpleserial_addcmd('b', 1, recv_final);
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <main+0x40>)
 800041e:	2101      	movs	r1, #1
 8000420:	2062      	movs	r0, #98	; 0x62
 8000422:	f003 ff2d 	bl	8004280 <simpleserial_addcmd>


//  uint8_t data[2] = {1,0};
// 	test(data);
	while(1)
		simpleserial_get();
 8000426:	f003 ff81 	bl	800432c <simpleserial_get>
 800042a:	e7fc      	b.n	8000426 <main+0x32>
 800042c:	0800036d 	.word	0x0800036d
 8000430:	080002fd 	.word	0x080002fd
 8000434:	08000325 	.word	0x08000325

08000438 <pqcrystals_dilithium2_ref_poly_uniform_gamma1>:
#define POLY_UNIFORM_GAMMA1_NBLOCKS ((640 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_gamma1(poly *a,
                         const uint8_t seed[CRHBYTES],
                         uint16_t nonce)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
 800043e:	af00      	add	r7, sp, #0
 8000440:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000444:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8000448:	6018      	str	r0, [r3, #0]
 800044a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800044e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000452:	6019      	str	r1, [r3, #0]
 8000454:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000458:	f2a3 3382 	subw	r3, r3, #898	; 0x382
 800045c:	801a      	strh	r2, [r3, #0]
  uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 800045e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000462:	f2a3 3382 	subw	r3, r3, #898	; 0x382
 8000466:	881a      	ldrh	r2, [r3, #0]
 8000468:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800046c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000470:	f107 0010 	add.w	r0, r7, #16
 8000474:	6819      	ldr	r1, [r3, #0]
 8000476:	f003 fda6 	bl	8003fc6 <pqcrystals_dilithium2_ref_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 800047a:	f107 0210 	add.w	r2, r7, #16
 800047e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000482:	2105      	movs	r1, #5
 8000484:	4618      	mov	r0, r3
 8000486:	f003 fd8e 	bl	8003fa6 <pqcrystals_fips202_ref_shake256_squeezeblocks>
  trigger_high();
 800048a:	f004 f935 	bl	80046f8 <trigger_high>
  polyz_unpack(a, buf);
 800048e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000492:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000496:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800049a:	4611      	mov	r1, r2
 800049c:	6818      	ldr	r0, [r3, #0]
 800049e:	f000 f807 	bl	80004b0 <pqcrystals_dilithium2_ref_polyz_unpack>
  trigger_low();
 80004a2:	f004 f935 	bl	8004710 <trigger_low>
}
 80004a6:	bf00      	nop
 80004a8:	f507 7762 	add.w	r7, r7, #904	; 0x388
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <pqcrystals_dilithium2_ref_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a) {
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N/4; ++i) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	e15e      	b.n	800077e <pqcrystals_dilithium2_ref_polyz_unpack+0x2ce>
    r->coeffs[4*i+0]  = a[9*i+0];
 80004c0:	68fa      	ldr	r2, [r7, #12]
 80004c2:	4613      	mov	r3, r2
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	4413      	add	r3, r2
 80004c8:	683a      	ldr	r2, [r7, #0]
 80004ca:	4413      	add	r3, r2
 80004cc:	7819      	ldrb	r1, [r3, #0]
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	009a      	lsls	r2, r3, #2
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	009a      	lsls	r2, r3, #2
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004e2:	4619      	mov	r1, r3
 80004e4:	68fa      	ldr	r2, [r7, #12]
 80004e6:	4613      	mov	r3, r2
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	4413      	add	r3, r2
 80004ec:	3301      	adds	r3, #1
 80004ee:	683a      	ldr	r2, [r7, #0]
 80004f0:	4413      	add	r3, r2
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	021b      	lsls	r3, r3, #8
 80004f6:	4319      	orrs	r1, r3
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	009a      	lsls	r2, r3, #2
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	009a      	lsls	r2, r3, #2
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800050c:	4619      	mov	r1, r3
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	4613      	mov	r3, r2
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4413      	add	r3, r2
 8000516:	3302      	adds	r3, #2
 8000518:	683a      	ldr	r2, [r7, #0]
 800051a:	4413      	add	r3, r2
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	041b      	lsls	r3, r3, #16
 8000520:	4319      	orrs	r1, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	009a      	lsls	r2, r3, #2
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] &= 0x3FFFF;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	009a      	lsls	r2, r3, #2
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	0092      	lsls	r2, r2, #2
 800053a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	4613      	mov	r3, r2
 8000548:	00db      	lsls	r3, r3, #3
 800054a:	4413      	add	r3, r2
 800054c:	3302      	adds	r3, #2
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	4413      	add	r3, r2
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	089b      	lsrs	r3, r3, #2
 8000556:	b2d9      	uxtb	r1, r3
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	1c5a      	adds	r2, r3, #1
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000570:	4619      	mov	r1, r3
 8000572:	68fa      	ldr	r2, [r7, #12]
 8000574:	4613      	mov	r3, r2
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	4413      	add	r3, r2
 800057a:	3303      	adds	r3, #3
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	4413      	add	r3, r2
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	019b      	lsls	r3, r3, #6
 8000584:	4319      	orrs	r1, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	1c5a      	adds	r2, r3, #1
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800059e:	4619      	mov	r1, r3
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	4613      	mov	r3, r2
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	4413      	add	r3, r2
 80005a8:	3304      	adds	r3, #4
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	039b      	lsls	r3, r3, #14
 80005b2:	4319      	orrs	r1, r3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] &= 0x3FFFF;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	1c5a      	adds	r2, r3, #1
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	0092      	lsls	r2, r2, #2
 80005d0:	3201      	adds	r2, #1
 80005d2:	f3c3 0111 	ubfx	r1, r3, #0, #18
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	4613      	mov	r3, r2
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	4413      	add	r3, r2
 80005e4:	3304      	adds	r3, #4
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	4413      	add	r3, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	091b      	lsrs	r3, r3, #4
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	1c9a      	adds	r2, r3, #2
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	1c9a      	adds	r2, r3, #2
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000608:	4619      	mov	r1, r3
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	4613      	mov	r3, r2
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	4413      	add	r3, r2
 8000612:	3305      	adds	r3, #5
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	011b      	lsls	r3, r3, #4
 800061c:	4319      	orrs	r1, r3
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	1c9a      	adds	r2, r3, #2
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	1c9a      	adds	r2, r3, #2
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000636:	4619      	mov	r1, r3
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4613      	mov	r3, r2
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	4413      	add	r3, r2
 8000640:	3306      	adds	r3, #6
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	4413      	add	r3, r2
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	031b      	lsls	r3, r3, #12
 800064a:	4319      	orrs	r1, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	1c9a      	adds	r2, r3, #2
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] &= 0x3FFFF;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	1c9a      	adds	r2, r3, #2
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	0092      	lsls	r2, r2, #2
 8000668:	3202      	adds	r2, #2
 800066a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	4613      	mov	r3, r2
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	4413      	add	r3, r2
 800067c:	3306      	adds	r3, #6
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	099b      	lsrs	r3, r3, #6
 8000686:	b2d9      	uxtb	r1, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	1cda      	adds	r2, r3, #3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	1cda      	adds	r2, r3, #3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006a0:	4619      	mov	r1, r3
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4613      	mov	r3, r2
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	4413      	add	r3, r2
 80006aa:	3307      	adds	r3, #7
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4319      	orrs	r1, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	1cda      	adds	r2, r3, #3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	1cda      	adds	r2, r3, #3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ce:	4619      	mov	r1, r3
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	4613      	mov	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	4413      	add	r3, r2
 80006d8:	3308      	adds	r3, #8
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	029b      	lsls	r3, r3, #10
 80006e2:	4319      	orrs	r1, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	1cda      	adds	r2, r3, #3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] &= 0x3FFFF;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	1cda      	adds	r2, r3, #3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	0092      	lsls	r2, r2, #2
 8000700:	3203      	adds	r2, #3
 8000702:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	009a      	lsls	r2, r3, #2
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	0092      	lsls	r2, r2, #2
 800071a:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	0092      	lsls	r2, r2, #2
 8000734:	3201      	adds	r2, #1
 8000736:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	1c9a      	adds	r2, r3, #2
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800074c:	68fa      	ldr	r2, [r7, #12]
 800074e:	0092      	lsls	r2, r2, #2
 8000750:	3202      	adds	r2, #2
 8000752:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	1cda      	adds	r2, r3, #3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	0092      	lsls	r2, r2, #2
 800076c:	3203      	adds	r2, #3
 800076e:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N/4; ++i) {
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	2b3f      	cmp	r3, #63	; 0x3f
 8000782:	f67f ae9d 	bls.w	80004c0 <pqcrystals_dilithium2_ref_polyz_unpack+0x10>
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 8000792:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 80007a8:	2100      	movs	r1, #0
 80007aa:	6179      	str	r1, [r7, #20]
 80007ac:	e022      	b.n	80007f4 <load64+0x62>
    r |= (uint64_t)x[i] << 8*i;
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	6979      	ldr	r1, [r7, #20]
 80007b2:	4401      	add	r1, r0
 80007b4:	7809      	ldrb	r1, [r1, #0]
 80007b6:	b2c9      	uxtb	r1, r1
 80007b8:	2000      	movs	r0, #0
 80007ba:	460c      	mov	r4, r1
 80007bc:	4605      	mov	r5, r0
 80007be:	6979      	ldr	r1, [r7, #20]
 80007c0:	00c9      	lsls	r1, r1, #3
 80007c2:	f1a1 0620 	sub.w	r6, r1, #32
 80007c6:	f1c1 0020 	rsb	r0, r1, #32
 80007ca:	fa05 f301 	lsl.w	r3, r5, r1
 80007ce:	fa04 f606 	lsl.w	r6, r4, r6
 80007d2:	4333      	orrs	r3, r6
 80007d4:	fa24 f000 	lsr.w	r0, r4, r0
 80007d8:	4303      	orrs	r3, r0
 80007da:	fa04 f201 	lsl.w	r2, r4, r1
 80007de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80007e2:	ea40 0802 	orr.w	r8, r0, r2
 80007e6:	ea41 0903 	orr.w	r9, r1, r3
 80007ea:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 80007ee:	6979      	ldr	r1, [r7, #20]
 80007f0:	3101      	adds	r1, #1
 80007f2:	6179      	str	r1, [r7, #20]
 80007f4:	6979      	ldr	r1, [r7, #20]
 80007f6:	2907      	cmp	r1, #7
 80007f8:	d9d9      	bls.n	80007ae <load64+0x1c>

  return r;
 80007fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80007fe:	4610      	mov	r0, r2
 8000800:	4619      	mov	r1, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800080a:	4770      	bx	lr

0800080c <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 800080c:	b4f0      	push	{r4, r5, r6, r7}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	e019      	b.n	8000852 <store64+0x46>
    x[i] = u >> 8*i;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	00d9      	lsls	r1, r3, #3
 8000822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000826:	f1c1 0620 	rsb	r6, r1, #32
 800082a:	f1a1 0020 	sub.w	r0, r1, #32
 800082e:	fa22 f401 	lsr.w	r4, r2, r1
 8000832:	fa03 f606 	lsl.w	r6, r3, r6
 8000836:	4334      	orrs	r4, r6
 8000838:	fa23 f000 	lsr.w	r0, r3, r0
 800083c:	4304      	orrs	r4, r0
 800083e:	fa23 f501 	lsr.w	r5, r3, r1
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	4413      	add	r3, r2
 8000848:	b2e2      	uxtb	r2, r4
 800084a:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	2b07      	cmp	r3, #7
 8000856:	d9e2      	bls.n	800081e <store64+0x12>
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bcf0      	pop	{r4, r5, r6, r7}
 8000862:	4770      	bx	lr

08000864 <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 8000864:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000868:	f6ad 3d8c 	subw	sp, sp, #2956	; 0xb8c
 800086c:	af00      	add	r7, sp, #0
 800086e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000872:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000876:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 8000878:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800087c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000886:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800088a:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 800088e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000892:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800089c:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80008a0:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 80008a4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80008a8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80008b2:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 80008b6:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 80008ba:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80008be:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80008c8:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 80008cc:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 80008d0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80008d4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80008de:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 80008e2:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 80008e6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80008ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80008f4:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 80008f8:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 80008fc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000900:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800090a:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800090e:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 8000912:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000916:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000920:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8000924:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 8000928:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800092c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000936:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800093a:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 800093e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000942:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800094c:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8000950:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 8000954:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000958:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8000962:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8000966:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 800096a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800096e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000978:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800097c:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 8000980:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000984:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800098e:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8000992:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 8000996:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800099a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80009a4:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 80009a8:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 80009ac:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009b0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80009ba:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 80009be:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 80009c2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009c6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80009d0:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 80009d4:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 80009d8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009dc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80009e6:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 80009ea:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 80009ee:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80009fc:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8000a00:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 8000a04:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a08:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8000a12:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8000a16:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 8000a1a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a1e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8000a28:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8000a2c:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 8000a30:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a34:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8000a3e:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8000a42:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 8000a46:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a4a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8000a54:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8000a58:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 8000a5c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a60:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8000a6a:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8000a6e:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 8000a72:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a76:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8000a80:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8000a84:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 8000a88:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a8c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8000a96:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8000a9a:	e9c1 2300 	strd	r2, r3, [r1]

        for( round = 0; round < NROUNDS; round += 2 )
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8000aa4:	f002 bf10 	b.w	80038c8 <KeccakF1600_StatePermute+0x3064>
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 8000aa8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8000aac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ab0:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab8:	ea80 0c02 	eor.w	ip, r0, r2
 8000abc:	f8c7 c990 	str.w	ip, [r7, #2448]	; 0x990
 8000ac0:	404b      	eors	r3, r1
 8000ac2:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 8000ac6:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8000aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ace:	f507 6119 	add.w	r1, r7, #2448	; 0x990
 8000ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ad6:	4684      	mov	ip, r0
 8000ad8:	ea8c 0c02 	eor.w	ip, ip, r2
 8000adc:	f8c7 c988 	str.w	ip, [r7, #2440]	; 0x988
 8000ae0:	404b      	eors	r3, r1
 8000ae2:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 8000ae6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aee:	f607 1188 	addw	r1, r7, #2440	; 0x988
 8000af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000af6:	4684      	mov	ip, r0
 8000af8:	ea8c 0c02 	eor.w	ip, ip, r2
 8000afc:	f8c7 c980 	str.w	ip, [r7, #2432]	; 0x980
 8000b00:	404b      	eors	r3, r1
 8000b02:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 8000b06:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8000b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0e:	f507 6118 	add.w	r1, r7, #2432	; 0x980
 8000b12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b16:	4684      	mov	ip, r0
 8000b18:	ea82 0c0c 	eor.w	ip, r2, ip
 8000b1c:	f8c7 c548 	str.w	ip, [r7, #1352]	; 0x548
 8000b20:	404b      	eors	r3, r1
 8000b22:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8000b26:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8000b32:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 8000b36:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8000b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b3e:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8000b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b46:	ea80 0c02 	eor.w	ip, r0, r2
 8000b4a:	f8c7 c978 	str.w	ip, [r7, #2424]	; 0x978
 8000b4e:	404b      	eors	r3, r1
 8000b50:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 8000b54:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8000b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5c:	f607 1178 	addw	r1, r7, #2424	; 0x978
 8000b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b64:	4684      	mov	ip, r0
 8000b66:	ea8c 0c02 	eor.w	ip, ip, r2
 8000b6a:	f8c7 c970 	str.w	ip, [r7, #2416]	; 0x970
 8000b6e:	404b      	eors	r3, r1
 8000b70:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8000b74:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8000b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7c:	f507 6117 	add.w	r1, r7, #2416	; 0x970
 8000b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b84:	4684      	mov	ip, r0
 8000b86:	ea8c 0c02 	eor.w	ip, ip, r2
 8000b8a:	f8c7 c968 	str.w	ip, [r7, #2408]	; 0x968
 8000b8e:	404b      	eors	r3, r1
 8000b90:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8000b94:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9c:	f607 1168 	addw	r1, r7, #2408	; 0x968
 8000ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	ea82 0c0c 	eor.w	ip, r2, ip
 8000baa:	f8c7 c540 	str.w	ip, [r7, #1344]	; 0x540
 8000bae:	404b      	eors	r3, r1
 8000bb0:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8000bb4:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8000bc0:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000bc4:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8000bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bcc:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8000bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd4:	ea80 0c02 	eor.w	ip, r0, r2
 8000bd8:	f8c7 c960 	str.w	ip, [r7, #2400]	; 0x960
 8000bdc:	404b      	eors	r3, r1
 8000bde:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8000be2:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8000be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bea:	f507 6116 	add.w	r1, r7, #2400	; 0x960
 8000bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bf2:	4684      	mov	ip, r0
 8000bf4:	ea8c 0c02 	eor.w	ip, ip, r2
 8000bf8:	f8c7 c958 	str.w	ip, [r7, #2392]	; 0x958
 8000bfc:	404b      	eors	r3, r1
 8000bfe:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 8000c02:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8000c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0a:	f607 1158 	addw	r1, r7, #2392	; 0x958
 8000c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c12:	4684      	mov	ip, r0
 8000c14:	ea8c 0c02 	eor.w	ip, ip, r2
 8000c18:	f8c7 c950 	str.w	ip, [r7, #2384]	; 0x950
 8000c1c:	404b      	eors	r3, r1
 8000c1e:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8000c22:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8000c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2a:	f507 6115 	add.w	r1, r7, #2384	; 0x950
 8000c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c32:	4684      	mov	ip, r0
 8000c34:	ea82 0c0c 	eor.w	ip, r2, ip
 8000c38:	f8c7 c538 	str.w	ip, [r7, #1336]	; 0x538
 8000c3c:	404b      	eors	r3, r1
 8000c3e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8000c42:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8000c4e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000c52:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8000c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c5a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8000c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c62:	ea80 0c02 	eor.w	ip, r0, r2
 8000c66:	f8c7 c948 	str.w	ip, [r7, #2376]	; 0x948
 8000c6a:	404b      	eors	r3, r1
 8000c6c:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 8000c70:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	f607 1148 	addw	r1, r7, #2376	; 0x948
 8000c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c80:	4684      	mov	ip, r0
 8000c82:	ea8c 0c02 	eor.w	ip, ip, r2
 8000c86:	f8c7 c940 	str.w	ip, [r7, #2368]	; 0x940
 8000c8a:	404b      	eors	r3, r1
 8000c8c:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 8000c90:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8000c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ca0:	4684      	mov	ip, r0
 8000ca2:	ea8c 0c02 	eor.w	ip, ip, r2
 8000ca6:	f8c7 c938 	str.w	ip, [r7, #2360]	; 0x938
 8000caa:	404b      	eors	r3, r1
 8000cac:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 8000cb0:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8000cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000cc0:	4684      	mov	ip, r0
 8000cc2:	ea82 0c0c 	eor.w	ip, r2, ip
 8000cc6:	f8c7 c530 	str.w	ip, [r7, #1328]	; 0x530
 8000cca:	404b      	eors	r3, r1
 8000ccc:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8000cd0:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8000cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd8:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8000cdc:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000ce0:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8000ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce8:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8000cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf0:	ea80 0c02 	eor.w	ip, r0, r2
 8000cf4:	f8c7 c930 	str.w	ip, [r7, #2352]	; 0x930
 8000cf8:	404b      	eors	r3, r1
 8000cfa:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8000cfe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8000d0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d0e:	4684      	mov	ip, r0
 8000d10:	ea8c 0c02 	eor.w	ip, ip, r2
 8000d14:	f8c7 c928 	str.w	ip, [r7, #2344]	; 0x928
 8000d18:	404b      	eors	r3, r1
 8000d1a:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8000d1e:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8000d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d26:	f607 1128 	addw	r1, r7, #2344	; 0x928
 8000d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d2e:	4684      	mov	ip, r0
 8000d30:	ea8c 0c02 	eor.w	ip, ip, r2
 8000d34:	f8c7 c920 	str.w	ip, [r7, #2336]	; 0x920
 8000d38:	404b      	eors	r3, r1
 8000d3a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 8000d3e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8000d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d46:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 8000d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d4e:	4684      	mov	ip, r0
 8000d50:	ea82 0c0c 	eor.w	ip, r2, ip
 8000d54:	f8c7 c528 	str.w	ip, [r7, #1320]	; 0x528
 8000d58:	404b      	eors	r3, r1
 8000d5a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8000d5e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8000d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d66:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8000d6a:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 8000d6e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8000d72:	0fda      	lsrs	r2, r3, #31
 8000d74:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8000d80:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8000d84:	0fda      	lsrs	r2, r3, #31
 8000d86:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 8000d92:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8000d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9a:	f607 1118 	addw	r1, r7, #2328	; 0x918
 8000d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000da2:	4684      	mov	ip, r0
 8000da4:	ea82 0c0c 	eor.w	ip, r2, ip
 8000da8:	f8c7 c520 	str.w	ip, [r7, #1312]	; 0x520
 8000dac:	404b      	eors	r3, r1
 8000dae:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8000db2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dba:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 8000dbe:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8000dc2:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8000dc6:	0fda      	lsrs	r2, r3, #31
 8000dc8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 8000dd4:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8000dd8:	0fda      	lsrs	r2, r3, #31
 8000dda:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4313      	orrs	r3, r2
 8000de2:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8000de6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	f507 6111 	add.w	r1, r7, #2320	; 0x910
 8000df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000df6:	4684      	mov	ip, r0
 8000df8:	ea82 0c0c 	eor.w	ip, r2, ip
 8000dfc:	f8c7 c518 	str.w	ip, [r7, #1304]	; 0x518
 8000e00:	404b      	eors	r3, r1
 8000e02:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8000e06:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0e:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8000e12:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8000e16:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8000e1a:	0fda      	lsrs	r2, r3, #31
 8000e1c:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4313      	orrs	r3, r2
 8000e24:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 8000e28:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8000e2c:	0fda      	lsrs	r2, r3, #31
 8000e2e:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4313      	orrs	r3, r2
 8000e36:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8000e3a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	f607 1108 	addw	r1, r7, #2312	; 0x908
 8000e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e4a:	4684      	mov	ip, r0
 8000e4c:	ea82 0c0c 	eor.w	ip, r2, ip
 8000e50:	f8c7 c510 	str.w	ip, [r7, #1296]	; 0x510
 8000e54:	404b      	eors	r3, r1
 8000e56:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8000e5a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 8000e66:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8000e6a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8000e6e:	0fda      	lsrs	r2, r3, #31
 8000e70:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4313      	orrs	r3, r2
 8000e78:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 8000e7c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8000e80:	0fda      	lsrs	r2, r3, #31
 8000e82:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 8000e8e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8000e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e9e:	4684      	mov	ip, r0
 8000ea0:	ea82 0c0c 	eor.w	ip, r2, ip
 8000ea4:	f8c7 c508 	str.w	ip, [r7, #1288]	; 0x508
 8000ea8:	404b      	eors	r3, r1
 8000eaa:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8000eae:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 8000eba:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8000ebe:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8000ec2:	0fda      	lsrs	r2, r3, #31
 8000ec4:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 8000ed0:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8000ed4:	0fda      	lsrs	r2, r3, #31
 8000ed6:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4313      	orrs	r3, r2
 8000ede:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 8000ee2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	f607 01f8 	addw	r1, r7, #2296	; 0x8f8
 8000eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ef2:	4684      	mov	ip, r0
 8000ef4:	ea82 0c0c 	eor.w	ip, r2, ip
 8000ef8:	f8c7 c500 	str.w	ip, [r7, #1280]	; 0x500
 8000efc:	404b      	eors	r3, r1
 8000efe:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8000f02:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8000f0e:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 8000f12:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8000f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f1a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	ea80 0c02 	eor.w	ip, r0, r2
 8000f26:	f8c7 c4f8 	str.w	ip, [r7, #1272]	; 0x4f8
 8000f2a:	404b      	eors	r3, r1
 8000f2c:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8000f30:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8000f3c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 8000f40:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8000f4c:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 8000f50:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8000f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f58:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	ea80 0c02 	eor.w	ip, r0, r2
 8000f64:	f8c7 c4f0 	str.w	ip, [r7, #1264]	; 0x4f0
 8000f68:	404b      	eors	r3, r1
 8000f6a:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8000f6e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8000f7a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 8000f7e:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8000f82:	031a      	lsls	r2, r3, #12
 8000f84:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8000f88:	0d1b      	lsrs	r3, r3, #20
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8000f90:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8000f94:	031a      	lsls	r2, r3, #12
 8000f96:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8000f9a:	0d1b      	lsrs	r3, r3, #20
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8000fa2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8000fae:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 8000fb2:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8000fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fba:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	ea80 0c02 	eor.w	ip, r0, r2
 8000fc6:	f8c7 c4e0 	str.w	ip, [r7, #1248]	; 0x4e0
 8000fca:	404b      	eors	r3, r1
 8000fcc:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8000fd0:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8000fdc:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 8000fe0:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8000fe4:	02da      	lsls	r2, r3, #11
 8000fe6:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8000fea:	0d5b      	lsrs	r3, r3, #21
 8000fec:	4313      	orrs	r3, r2
 8000fee:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8000ff2:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8000ff6:	02da      	lsls	r2, r3, #11
 8000ff8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8000ffc:	0d5b      	lsrs	r3, r3, #21
 8000ffe:	4313      	orrs	r3, r2
 8001000:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 8001004:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001010:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 8001014:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8001018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800101c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	ea80 0c02 	eor.w	ip, r0, r2
 8001028:	f8c7 c4d0 	str.w	ip, [r7, #1232]	; 0x4d0
 800102c:	404b      	eors	r3, r1
 800102e:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8001032:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800103e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 8001042:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 8001046:	0ada      	lsrs	r2, r3, #11
 8001048:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800104c:	055b      	lsls	r3, r3, #21
 800104e:	4313      	orrs	r3, r2
 8001050:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8001054:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 8001058:	0ada      	lsrs	r2, r3, #11
 800105a:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800105e:	055b      	lsls	r3, r3, #21
 8001060:	4313      	orrs	r3, r2
 8001062:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8001066:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8001072:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 8001076:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800107a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800107e:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	ea80 0c02 	eor.w	ip, r0, r2
 800108a:	f8c7 c4c0 	str.w	ip, [r7, #1216]	; 0x4c0
 800108e:	404b      	eors	r3, r1
 8001090:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8001094:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 80010a0:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 80010a4:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 80010a8:	0c9a      	lsrs	r2, r3, #18
 80010aa:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 80010ae:	039b      	lsls	r3, r3, #14
 80010b0:	4313      	orrs	r3, r2
 80010b2:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 80010b6:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 80010ba:	0c9a      	lsrs	r2, r3, #18
 80010bc:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 80010c0:	039b      	lsls	r3, r3, #14
 80010c2:	4313      	orrs	r3, r2
 80010c4:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 80010c8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80010d4:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 80010d8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	43d1      	mvns	r1, r2
 80010e2:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 80010e6:	43db      	mvns	r3, r3
 80010e8:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 80010ec:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 80010f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010fc:	4684      	mov	ip, r0
 80010fe:	ea0c 0c02 	and.w	ip, ip, r2
 8001102:	f8c7 c8e8 	str.w	ip, [r7, #2280]	; 0x8e8
 8001106:	400b      	ands	r3, r1
 8001108:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 800110c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 8001118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800111c:	4684      	mov	ip, r0
 800111e:	ea82 0c0c 	eor.w	ip, r2, ip
 8001122:	f8c7 c4b0 	str.w	ip, [r7, #1200]	; 0x4b0
 8001126:	404b      	eors	r3, r1
 8001128:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800112c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 8001138:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 800113c:	4ac7      	ldr	r2, [pc, #796]	; (800145c <KeccakF1600_StatePermute+0xbf8>)
 800113e:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4413      	add	r3, r2
 8001146:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114a:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	ea82 0c00 	eor.w	ip, r2, r0
 8001156:	f8c7 c4a8 	str.w	ip, [r7, #1192]	; 0x4a8
 800115a:	404b      	eors	r3, r1
 800115c:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8001160:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800116c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 8001170:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	43d1      	mvns	r1, r2
 800117a:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 800117e:	43db      	mvns	r3, r3
 8001180:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 8001184:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f507 610e 	add.w	r1, r7, #2272	; 0x8e0
 8001190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001194:	4684      	mov	ip, r0
 8001196:	ea0c 0c02 	and.w	ip, ip, r2
 800119a:	f8c7 c8d8 	str.w	ip, [r7, #2264]	; 0x8d8
 800119e:	400b      	ands	r3, r1
 80011a0:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 80011a4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80011b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b4:	4684      	mov	ip, r0
 80011b6:	ea82 0c0c 	eor.w	ip, r2, ip
 80011ba:	f8c7 c4a0 	str.w	ip, [r7, #1184]	; 0x4a0
 80011be:	404b      	eors	r3, r1
 80011c0:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 80011c4:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 80011d0:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 80011d4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	43d1      	mvns	r1, r2
 80011de:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 80011e2:	43db      	mvns	r3, r3
 80011e4:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 80011e8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f507 610d 	add.w	r1, r7, #2256	; 0x8d0
 80011f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011f8:	4684      	mov	ip, r0
 80011fa:	ea0c 0c02 	and.w	ip, ip, r2
 80011fe:	f8c7 c8c8 	str.w	ip, [r7, #2248]	; 0x8c8
 8001202:	400b      	ands	r3, r1
 8001204:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 8001208:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8001214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001218:	4684      	mov	ip, r0
 800121a:	ea82 0c0c 	eor.w	ip, r2, ip
 800121e:	f8c7 c498 	str.w	ip, [r7, #1176]	; 0x498
 8001222:	404b      	eors	r3, r1
 8001224:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8001228:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8001234:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 8001238:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	43d1      	mvns	r1, r2
 8001242:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 8001246:	43db      	mvns	r3, r3
 8001248:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800124c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f507 610c 	add.w	r1, r7, #2240	; 0x8c0
 8001258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800125c:	4684      	mov	ip, r0
 800125e:	ea0c 0c02 	and.w	ip, ip, r2
 8001262:	f8c7 c8b8 	str.w	ip, [r7, #2232]	; 0x8b8
 8001266:	400b      	ands	r3, r1
 8001268:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800126c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f607 01b8 	addw	r1, r7, #2232	; 0x8b8
 8001278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800127c:	4684      	mov	ip, r0
 800127e:	ea82 0c0c 	eor.w	ip, r2, ip
 8001282:	f8c7 c490 	str.w	ip, [r7, #1168]	; 0x490
 8001286:	404b      	eors	r3, r1
 8001288:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800128c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8001298:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 800129c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	43d1      	mvns	r1, r2
 80012a6:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 80012aa:	43db      	mvns	r3, r3
 80012ac:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 80012b0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80012bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012c0:	4684      	mov	ip, r0
 80012c2:	ea0c 0c02 	and.w	ip, ip, r2
 80012c6:	f8c7 c8a8 	str.w	ip, [r7, #2216]	; 0x8a8
 80012ca:	400b      	ands	r3, r1
 80012cc:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 80012d0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 80012dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012e0:	4684      	mov	ip, r0
 80012e2:	ea82 0c0c 	eor.w	ip, r2, ip
 80012e6:	f8c7 c488 	str.w	ip, [r7, #1160]	; 0x488
 80012ea:	404b      	eors	r3, r1
 80012ec:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 80012f0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 80012fc:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 8001300:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8001304:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001308:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	ea80 0c02 	eor.w	ip, r0, r2
 8001314:	f8c7 c480 	str.w	ip, [r7, #1152]	; 0x480
 8001318:	404b      	eors	r3, r1
 800131a:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800131e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800132a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 800132e:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001332:	091a      	lsrs	r2, r3, #4
 8001334:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8001338:	071b      	lsls	r3, r3, #28
 800133a:	4313      	orrs	r3, r2
 800133c:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8001340:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8001344:	091a      	lsrs	r2, r3, #4
 8001346:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800134a:	071b      	lsls	r3, r3, #28
 800134c:	4313      	orrs	r3, r2
 800134e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8001352:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800135e:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 8001362:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	ea80 0c02 	eor.w	ip, r0, r2
 8001376:	f8c7 c470 	str.w	ip, [r7, #1136]	; 0x470
 800137a:	404b      	eors	r3, r1
 800137c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8001380:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800138c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 8001390:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 8001394:	0b1a      	lsrs	r2, r3, #12
 8001396:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800139a:	051b      	lsls	r3, r3, #20
 800139c:	4313      	orrs	r3, r2
 800139e:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 80013a2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80013a6:	0b1a      	lsrs	r2, r3, #12
 80013a8:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80013ac:	051b      	lsls	r3, r3, #20
 80013ae:	4313      	orrs	r3, r2
 80013b0:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80013b4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80013c0:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 80013c4:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80013c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013cc:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	ea80 0c02 	eor.w	ip, r0, r2
 80013d8:	f8c7 c460 	str.w	ip, [r7, #1120]	; 0x460
 80013dc:	404b      	eors	r3, r1
 80013de:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 80013e2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 80013ee:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 80013f2:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 80013f6:	0f5a      	lsrs	r2, r3, #29
 80013f8:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4313      	orrs	r3, r2
 8001400:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8001404:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 8001408:	0f5a      	lsrs	r2, r3, #29
 800140a:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4313      	orrs	r3, r2
 8001412:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8001416:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 8001426:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800142a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800142e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	ea80 0c02 	eor.w	ip, r0, r2
 800143a:	f8c7 c450 	str.w	ip, [r7, #1104]	; 0x450
 800143e:	404b      	eors	r3, r1
 8001440:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001444:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8001450:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 8001454:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8001458:	035a      	lsls	r2, r3, #13
 800145a:	e001      	b.n	8001460 <KeccakF1600_StatePermute+0xbfc>
 800145c:	08005b28 	.word	0x08005b28
 8001460:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8001464:	0cdb      	lsrs	r3, r3, #19
 8001466:	4313      	orrs	r3, r2
 8001468:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800146c:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8001470:	035a      	lsls	r2, r3, #13
 8001472:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8001476:	0cdb      	lsrs	r3, r3, #19
 8001478:	4313      	orrs	r3, r2
 800147a:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800147e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800148a:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 800148e:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8001492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001496:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	ea80 0c02 	eor.w	ip, r0, r2
 80014a2:	f8c7 c440 	str.w	ip, [r7, #1088]	; 0x440
 80014a6:	404b      	eors	r3, r1
 80014a8:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 80014ac:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 80014b8:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 80014bc:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 80014c0:	075a      	lsls	r2, r3, #29
 80014c2:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 80014c6:	08db      	lsrs	r3, r3, #3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80014ce:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 80014d2:	075a      	lsls	r2, r3, #29
 80014d4:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	4313      	orrs	r3, r2
 80014dc:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 80014e0:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80014ec:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 80014f0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	43d1      	mvns	r1, r2
 80014fa:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 80014fe:	43db      	mvns	r3, r3
 8001500:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 8001504:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8001510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001514:	4684      	mov	ip, r0
 8001516:	ea0c 0c02 	and.w	ip, ip, r2
 800151a:	f8c7 c898 	str.w	ip, [r7, #2200]	; 0x898
 800151e:	400b      	ands	r3, r1
 8001520:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 8001524:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f607 0198 	addw	r1, r7, #2200	; 0x898
 8001530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001534:	4684      	mov	ip, r0
 8001536:	ea82 0c0c 	eor.w	ip, r2, ip
 800153a:	f8c7 c430 	str.w	ip, [r7, #1072]	; 0x430
 800153e:	404b      	eors	r3, r1
 8001540:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001544:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8001550:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 8001554:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	43d1      	mvns	r1, r2
 800155e:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 8001562:	43db      	mvns	r3, r3
 8001564:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 8001568:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8001574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001578:	4684      	mov	ip, r0
 800157a:	ea0c 0c02 	and.w	ip, ip, r2
 800157e:	f8c7 c888 	str.w	ip, [r7, #2184]	; 0x888
 8001582:	400b      	ands	r3, r1
 8001584:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 8001588:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f607 0188 	addw	r1, r7, #2184	; 0x888
 8001594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001598:	4684      	mov	ip, r0
 800159a:	ea82 0c0c 	eor.w	ip, r2, ip
 800159e:	f8c7 c428 	str.w	ip, [r7, #1064]	; 0x428
 80015a2:	404b      	eors	r3, r1
 80015a4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80015a8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 80015b4:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 80015b8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	43d1      	mvns	r1, r2
 80015c2:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 80015c6:	43db      	mvns	r3, r3
 80015c8:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 80015cc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 80015d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015dc:	4684      	mov	ip, r0
 80015de:	ea0c 0c02 	and.w	ip, ip, r2
 80015e2:	f8c7 c878 	str.w	ip, [r7, #2168]	; 0x878
 80015e6:	400b      	ands	r3, r1
 80015e8:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 80015ec:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f607 0178 	addw	r1, r7, #2168	; 0x878
 80015f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015fc:	4684      	mov	ip, r0
 80015fe:	ea82 0c0c 	eor.w	ip, r2, ip
 8001602:	f8c7 c420 	str.w	ip, [r7, #1056]	; 0x420
 8001606:	404b      	eors	r3, r1
 8001608:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800160c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8001618:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 800161c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	43d1      	mvns	r1, r2
 8001626:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 800162a:	43db      	mvns	r3, r3
 800162c:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 8001630:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 800163c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001640:	4684      	mov	ip, r0
 8001642:	ea0c 0c02 	and.w	ip, ip, r2
 8001646:	f8c7 c868 	str.w	ip, [r7, #2152]	; 0x868
 800164a:	400b      	ands	r3, r1
 800164c:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8001650:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f607 0168 	addw	r1, r7, #2152	; 0x868
 800165c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001660:	4684      	mov	ip, r0
 8001662:	ea82 0c0c 	eor.w	ip, r2, ip
 8001666:	f8c7 c418 	str.w	ip, [r7, #1048]	; 0x418
 800166a:	404b      	eors	r3, r1
 800166c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001670:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 800167c:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 8001680:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	43d1      	mvns	r1, r2
 800168a:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 800168e:	43db      	mvns	r3, r3
 8001690:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 8001694:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 80016a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016a4:	4684      	mov	ip, r0
 80016a6:	ea0c 0c02 	and.w	ip, ip, r2
 80016aa:	f8c7 c858 	str.w	ip, [r7, #2136]	; 0x858
 80016ae:	400b      	ands	r3, r1
 80016b0:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 80016b4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f607 0158 	addw	r1, r7, #2136	; 0x858
 80016c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016c4:	4684      	mov	ip, r0
 80016c6:	ea82 0c0c 	eor.w	ip, r2, ip
 80016ca:	f8c7 c410 	str.w	ip, [r7, #1040]	; 0x410
 80016ce:	404b      	eors	r3, r1
 80016d0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80016d4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 80016e0:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 80016e4:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80016e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ec:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	ea80 0c02 	eor.w	ip, r0, r2
 80016f8:	f8c7 c408 	str.w	ip, [r7, #1032]	; 0x408
 80016fc:	404b      	eors	r3, r1
 80016fe:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001702:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800170e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 8001712:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 8001716:	0fda      	lsrs	r2, r3, #31
 8001718:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4313      	orrs	r3, r2
 8001720:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8001724:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 8001728:	0fda      	lsrs	r2, r3, #31
 800172a:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4313      	orrs	r3, r2
 8001732:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8001736:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001742:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 8001746:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800174a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800174e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	ea80 0c02 	eor.w	ip, r0, r2
 800175a:	f8c7 c3f8 	str.w	ip, [r7, #1016]	; 0x3f8
 800175e:	404b      	eors	r3, r1
 8001760:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8001764:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8001768:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800176c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 8001770:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 8001774:	0e9a      	lsrs	r2, r3, #26
 8001776:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800177a:	019b      	lsls	r3, r3, #6
 800177c:	4313      	orrs	r3, r2
 800177e:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8001782:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 8001786:	0e9a      	lsrs	r2, r3, #26
 8001788:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800178c:	019b      	lsls	r3, r3, #6
 800178e:	4313      	orrs	r3, r2
 8001790:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8001794:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8001798:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800179c:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 80017a0:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80017a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	ea80 0c02 	eor.w	ip, r0, r2
 80017b4:	f8c7 c3e8 	str.w	ip, [r7, #1000]	; 0x3e8
 80017b8:	404b      	eors	r3, r1
 80017ba:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80017be:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 80017c2:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 80017c6:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 80017ca:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 80017ce:	09da      	lsrs	r2, r3, #7
 80017d0:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80017d4:	065b      	lsls	r3, r3, #25
 80017d6:	4313      	orrs	r3, r2
 80017d8:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 80017dc:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 80017e0:	09da      	lsrs	r2, r3, #7
 80017e2:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 80017e6:	065b      	lsls	r3, r3, #25
 80017e8:	4313      	orrs	r3, r2
 80017ea:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80017ee:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 80017f2:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80017f6:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 80017fa:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 80017fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001802:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	ea80 0c02 	eor.w	ip, r0, r2
 800180e:	f8c7 c3d8 	str.w	ip, [r7, #984]	; 0x3d8
 8001812:	404b      	eors	r3, r1
 8001814:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8001818:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800181c:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8001820:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 8001824:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 8001828:	0e1a      	lsrs	r2, r3, #24
 800182a:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	4313      	orrs	r3, r2
 8001832:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8001836:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800183a:	0e1a      	lsrs	r2, r3, #24
 800183c:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	4313      	orrs	r3, r2
 8001844:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8001848:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800184c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8001850:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 8001854:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8001858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800185c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	ea80 0c02 	eor.w	ip, r0, r2
 8001868:	f8c7 c3c8 	str.w	ip, [r7, #968]	; 0x3c8
 800186c:	404b      	eors	r3, r1
 800186e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8001872:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 8001876:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800187a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 800187e:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 8001882:	0b9a      	lsrs	r2, r3, #14
 8001884:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 8001888:	049b      	lsls	r3, r3, #18
 800188a:	4313      	orrs	r3, r2
 800188c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8001890:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 8001894:	0b9a      	lsrs	r2, r3, #14
 8001896:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800189a:	049b      	lsls	r3, r3, #18
 800189c:	4313      	orrs	r3, r2
 800189e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 80018a2:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 80018a6:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80018aa:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 80018ae:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	43d1      	mvns	r1, r2
 80018b8:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 80018bc:	43db      	mvns	r3, r3
 80018be:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 80018c2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 80018ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018d2:	4684      	mov	ip, r0
 80018d4:	ea0c 0c02 	and.w	ip, ip, r2
 80018d8:	f8c7 c848 	str.w	ip, [r7, #2120]	; 0x848
 80018dc:	400b      	ands	r3, r1
 80018de:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 80018e2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f607 0148 	addw	r1, r7, #2120	; 0x848
 80018ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018f2:	4684      	mov	ip, r0
 80018f4:	ea82 0c0c 	eor.w	ip, r2, ip
 80018f8:	f8c7 c3b8 	str.w	ip, [r7, #952]	; 0x3b8
 80018fc:	404b      	eors	r3, r1
 80018fe:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8001902:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8001906:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 800190a:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 800190e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	43d1      	mvns	r1, r2
 8001918:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 800191c:	43db      	mvns	r3, r3
 800191e:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8001922:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f507 6104 	add.w	r1, r7, #2112	; 0x840
 800192e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001932:	4684      	mov	ip, r0
 8001934:	ea0c 0c02 	and.w	ip, ip, r2
 8001938:	f8c7 c838 	str.w	ip, [r7, #2104]	; 0x838
 800193c:	400b      	ands	r3, r1
 800193e:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8001942:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f607 0138 	addw	r1, r7, #2104	; 0x838
 800194e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001952:	4684      	mov	ip, r0
 8001954:	ea82 0c0c 	eor.w	ip, r2, ip
 8001958:	f8c7 c3b0 	str.w	ip, [r7, #944]	; 0x3b0
 800195c:	404b      	eors	r3, r1
 800195e:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8001962:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 8001966:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800196a:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 800196e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	43d1      	mvns	r1, r2
 8001978:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 800197c:	43db      	mvns	r3, r3
 800197e:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8001982:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f507 6103 	add.w	r1, r7, #2096	; 0x830
 800198e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001992:	4684      	mov	ip, r0
 8001994:	ea0c 0c02 	and.w	ip, ip, r2
 8001998:	f8c7 c828 	str.w	ip, [r7, #2088]	; 0x828
 800199c:	400b      	ands	r3, r1
 800199e:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 80019a2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f607 0128 	addw	r1, r7, #2088	; 0x828
 80019ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019b2:	4684      	mov	ip, r0
 80019b4:	ea82 0c0c 	eor.w	ip, r2, ip
 80019b8:	f8c7 c3a8 	str.w	ip, [r7, #936]	; 0x3a8
 80019bc:	404b      	eors	r3, r1
 80019be:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 80019c2:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 80019c6:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 80019ca:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 80019ce:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	43d1      	mvns	r1, r2
 80019d8:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 80019dc:	43db      	mvns	r3, r3
 80019de:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 80019e2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 80019ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019f2:	4684      	mov	ip, r0
 80019f4:	ea0c 0c02 	and.w	ip, ip, r2
 80019f8:	f8c7 c818 	str.w	ip, [r7, #2072]	; 0x818
 80019fc:	400b      	ands	r3, r1
 80019fe:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8001a02:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8001a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a12:	4684      	mov	ip, r0
 8001a14:	ea82 0c0c 	eor.w	ip, r2, ip
 8001a18:	f8c7 c3a0 	str.w	ip, [r7, #928]	; 0x3a0
 8001a1c:	404b      	eors	r3, r1
 8001a1e:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8001a22:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 8001a26:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8001a2a:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 8001a2e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a36:	43d1      	mvns	r1, r2
 8001a38:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8001a42:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8001a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a52:	4684      	mov	ip, r0
 8001a54:	ea0c 0c02 	and.w	ip, ip, r2
 8001a58:	f8c7 c808 	str.w	ip, [r7, #2056]	; 0x808
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8001a62:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8001a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a72:	4684      	mov	ip, r0
 8001a74:	ea82 0c0c 	eor.w	ip, r2, ip
 8001a78:	f8c7 c398 	str.w	ip, [r7, #920]	; 0x398
 8001a7c:	404b      	eors	r3, r1
 8001a7e:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8001a82:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 8001a86:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8001a8a:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 8001a8e:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8001a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a96:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	ea80 0c02 	eor.w	ip, r0, r2
 8001aa2:	f8c7 c390 	str.w	ip, [r7, #912]	; 0x390
 8001aa6:	404b      	eors	r3, r1
 8001aa8:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8001aac:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 8001ab0:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8001ab4:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 8001ab8:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 8001abc:	095a      	lsrs	r2, r3, #5
 8001abe:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 8001ac2:	06db      	lsls	r3, r3, #27
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8001aca:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 8001ace:	095a      	lsrs	r2, r3, #5
 8001ad0:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 8001ad4:	06db      	lsls	r3, r3, #27
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8001adc:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8001ae0:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001ae4:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 8001ae8:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af0:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	ea80 0c02 	eor.w	ip, r0, r2
 8001afc:	f8c7 c380 	str.w	ip, [r7, #896]	; 0x380
 8001b00:	404b      	eors	r3, r1
 8001b02:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8001b06:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8001b0a:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8001b0e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 8001b12:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8001b16:	011a      	lsls	r2, r3, #4
 8001b18:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8001b1c:	0f1b      	lsrs	r3, r3, #28
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8001b24:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8001b28:	011a      	lsls	r2, r3, #4
 8001b2a:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8001b2e:	0f1b      	lsrs	r3, r3, #28
 8001b30:	4313      	orrs	r3, r2
 8001b32:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8001b36:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8001b3a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8001b3e:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 8001b42:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001b46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b4a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	ea80 0c02 	eor.w	ip, r0, r2
 8001b56:	f8c7 c370 	str.w	ip, [r7, #880]	; 0x370
 8001b5a:	404b      	eors	r3, r1
 8001b5c:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8001b60:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8001b64:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8001b68:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 8001b6c:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8001b70:	0d9a      	lsrs	r2, r3, #22
 8001b72:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8001b76:	029b      	lsls	r3, r3, #10
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001b7e:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8001b82:	0d9a      	lsrs	r2, r3, #22
 8001b84:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8001b88:	029b      	lsls	r3, r3, #10
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8001b90:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8001b94:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001b98:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 8001b9c:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8001ba0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ba4:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	ea80 0c02 	eor.w	ip, r0, r2
 8001bb0:	f8c7 c360 	str.w	ip, [r7, #864]	; 0x360
 8001bb4:	404b      	eors	r3, r1
 8001bb6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8001bba:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8001bbe:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8001bc2:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 8001bc6:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8001bca:	0c5a      	lsrs	r2, r3, #17
 8001bcc:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8001bd0:	03db      	lsls	r3, r3, #15
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8001bd8:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8001bdc:	0c5a      	lsrs	r2, r3, #17
 8001bde:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8001be2:	03db      	lsls	r3, r3, #15
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8001bea:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8001bee:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8001bf2:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 8001bf6:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfe:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	ea80 0c02 	eor.w	ip, r0, r2
 8001c0a:	f8c7 c350 	str.w	ip, [r7, #848]	; 0x350
 8001c0e:	404b      	eors	r3, r1
 8001c10:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001c14:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8001c18:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8001c1c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 8001c20:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8001c24:	061a      	lsls	r2, r3, #24
 8001c26:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8001c32:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8001c36:	061a      	lsls	r2, r3, #24
 8001c38:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001c44:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8001c48:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8001c4c:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 8001c50:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	43d1      	mvns	r1, r2
 8001c5a:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8001c64:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 8001c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c74:	4684      	mov	ip, r0
 8001c76:	ea0c 0c02 	and.w	ip, ip, r2
 8001c7a:	f8c7 c7f8 	str.w	ip, [r7, #2040]	; 0x7f8
 8001c7e:	400b      	ands	r3, r1
 8001c80:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8001c84:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	f507 61ff 	add.w	r1, r7, #2040	; 0x7f8
 8001c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c94:	4684      	mov	ip, r0
 8001c96:	ea82 0c0c 	eor.w	ip, r2, ip
 8001c9a:	f8c7 c340 	str.w	ip, [r7, #832]	; 0x340
 8001c9e:	404b      	eors	r3, r1
 8001ca0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8001ca4:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8001ca8:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8001cac:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 8001cb0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	43d1      	mvns	r1, r2
 8001cba:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8001cc4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8001cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cd4:	4684      	mov	ip, r0
 8001cd6:	ea0c 0c02 	and.w	ip, ip, r2
 8001cda:	f8c7 c7e8 	str.w	ip, [r7, #2024]	; 0x7e8
 8001cde:	400b      	ands	r3, r1
 8001ce0:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8001ce4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f507 61fd 	add.w	r1, r7, #2024	; 0x7e8
 8001cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cf4:	4684      	mov	ip, r0
 8001cf6:	ea82 0c0c 	eor.w	ip, r2, ip
 8001cfa:	f8c7 c338 	str.w	ip, [r7, #824]	; 0x338
 8001cfe:	404b      	eors	r3, r1
 8001d00:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8001d04:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8001d08:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8001d0c:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 8001d10:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	43d1      	mvns	r1, r2
 8001d1a:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 8001d24:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f507 61fc 	add.w	r1, r7, #2016	; 0x7e0
 8001d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d34:	4684      	mov	ip, r0
 8001d36:	ea0c 0c02 	and.w	ip, ip, r2
 8001d3a:	f8c7 c7d8 	str.w	ip, [r7, #2008]	; 0x7d8
 8001d3e:	400b      	ands	r3, r1
 8001d40:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8001d44:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8001d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d54:	4684      	mov	ip, r0
 8001d56:	ea82 0c0c 	eor.w	ip, r2, ip
 8001d5a:	f8c7 c330 	str.w	ip, [r7, #816]	; 0x330
 8001d5e:	404b      	eors	r3, r1
 8001d60:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001d64:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8001d68:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8001d6c:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 8001d70:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	43d1      	mvns	r1, r2
 8001d7a:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8001d84:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f507 61fa 	add.w	r1, r7, #2000	; 0x7d0
 8001d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d94:	4684      	mov	ip, r0
 8001d96:	ea0c 0c02 	and.w	ip, ip, r2
 8001d9a:	f8c7 c7c8 	str.w	ip, [r7, #1992]	; 0x7c8
 8001d9e:	400b      	ands	r3, r1
 8001da0:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 8001da4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 8001db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001db4:	4684      	mov	ip, r0
 8001db6:	ea82 0c0c 	eor.w	ip, r2, ip
 8001dba:	f8c7 c328 	str.w	ip, [r7, #808]	; 0x328
 8001dbe:	404b      	eors	r3, r1
 8001dc0:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8001dc4:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8001dc8:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8001dcc:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 8001dd0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	43d1      	mvns	r1, r2
 8001dda:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 8001dde:	43db      	mvns	r3, r3
 8001de0:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 8001de4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f507 61f8 	add.w	r1, r7, #1984	; 0x7c0
 8001df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001df4:	4684      	mov	ip, r0
 8001df6:	ea0c 0c02 	and.w	ip, ip, r2
 8001dfa:	f8c7 c7b8 	str.w	ip, [r7, #1976]	; 0x7b8
 8001dfe:	400b      	ands	r3, r1
 8001e00:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 8001e04:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8001e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e14:	4684      	mov	ip, r0
 8001e16:	ea82 0c0c 	eor.w	ip, r2, ip
 8001e1a:	f8c7 c320 	str.w	ip, [r7, #800]	; 0x320
 8001e1e:	404b      	eors	r3, r1
 8001e20:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8001e24:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8001e28:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8001e2c:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 8001e30:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8001e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e38:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	ea80 0c02 	eor.w	ip, r0, r2
 8001e44:	f8c7 c318 	str.w	ip, [r7, #792]	; 0x318
 8001e48:	404b      	eors	r3, r1
 8001e4a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8001e4e:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8001e52:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8001e56:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 8001e5a:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8001e5e:	079a      	lsls	r2, r3, #30
 8001e60:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8001e6c:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8001e70:	079a      	lsls	r2, r3, #30
 8001e72:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8001e7e:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8001e82:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001e86:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 8001e8a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8001e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e92:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	ea80 0c02 	eor.w	ip, r0, r2
 8001e9e:	f8c7 c308 	str.w	ip, [r7, #776]	; 0x308
 8001ea2:	404b      	eors	r3, r1
 8001ea4:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8001ea8:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8001eac:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8001eb0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 8001eb4:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8001eb8:	05da      	lsls	r2, r3, #23
 8001eba:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8001ec6:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8001eca:	05da      	lsls	r2, r3, #23
 8001ecc:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8001ed0:	0a5b      	lsrs	r3, r3, #9
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8001ed8:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8001edc:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8001ee0:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 8001ee4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001ee8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eec:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	ea80 0c02 	eor.w	ip, r0, r2
 8001ef8:	f8c7 c2f8 	str.w	ip, [r7, #760]	; 0x2f8
 8001efc:	404b      	eors	r3, r1
 8001efe:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8001f02:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8001f06:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8001f0a:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 8001f0e:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8001f12:	01da      	lsls	r2, r3, #7
 8001f14:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8001f18:	0e5b      	lsrs	r3, r3, #25
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8001f20:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8001f24:	01da      	lsls	r2, r3, #7
 8001f26:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8001f2a:	0e5b      	lsrs	r3, r3, #25
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8001f32:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8001f36:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001f3a:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 8001f3e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001f42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f46:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	ea80 0c02 	eor.w	ip, r0, r2
 8001f52:	f8c7 c2e8 	str.w	ip, [r7, #744]	; 0x2e8
 8001f56:	404b      	eors	r3, r1
 8001f58:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8001f5c:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8001f60:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8001f64:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 8001f68:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8001f6c:	025a      	lsls	r2, r3, #9
 8001f6e:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8001f72:	0ddb      	lsrs	r3, r3, #23
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8001f7a:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8001f7e:	025a      	lsls	r2, r3, #9
 8001f80:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8001f84:	0ddb      	lsrs	r3, r3, #23
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8001f8c:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8001f90:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8001f94:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 8001f98:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8001f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	ea80 0c02 	eor.w	ip, r0, r2
 8001fac:	f8c7 c2d8 	str.w	ip, [r7, #728]	; 0x2d8
 8001fb0:	404b      	eors	r3, r1
 8001fb2:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8001fb6:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8001fba:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8001fbe:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 8001fc2:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8001fc6:	0f9a      	lsrs	r2, r3, #30
 8001fc8:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8001fd4:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8001fd8:	0f9a      	lsrs	r2, r3, #30
 8001fda:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8001fe6:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8001fea:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8001fee:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 8001ff2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	43d1      	mvns	r1, r2
 8001ffc:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 8002000:	43db      	mvns	r3, r3
 8002002:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8002006:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 8002012:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002016:	4684      	mov	ip, r0
 8002018:	ea0c 0c02 	and.w	ip, ip, r2
 800201c:	f8c7 c7a8 	str.w	ip, [r7, #1960]	; 0x7a8
 8002020:	400b      	ands	r3, r1
 8002022:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 8002026:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 8002032:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002036:	4684      	mov	ip, r0
 8002038:	ea82 0c0c 	eor.w	ip, r2, ip
 800203c:	f8c7 c2c8 	str.w	ip, [r7, #712]	; 0x2c8
 8002040:	404b      	eors	r3, r1
 8002042:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8002046:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800204a:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 800204e:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 8002052:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	43d1      	mvns	r1, r2
 800205c:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 8002060:	43db      	mvns	r3, r3
 8002062:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 8002066:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8002072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002076:	4684      	mov	ip, r0
 8002078:	ea0c 0c02 	and.w	ip, ip, r2
 800207c:	f8c7 c798 	str.w	ip, [r7, #1944]	; 0x798
 8002080:	400b      	ands	r3, r1
 8002082:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 8002086:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 8002092:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002096:	4684      	mov	ip, r0
 8002098:	ea82 0c0c 	eor.w	ip, r2, ip
 800209c:	f8c7 c2c0 	str.w	ip, [r7, #704]	; 0x2c0
 80020a0:	404b      	eors	r3, r1
 80020a2:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80020a6:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80020aa:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 80020ae:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 80020b2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	43d1      	mvns	r1, r2
 80020bc:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 80020c0:	43db      	mvns	r3, r3
 80020c2:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 80020c6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 80020d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020d6:	4684      	mov	ip, r0
 80020d8:	ea0c 0c02 	and.w	ip, ip, r2
 80020dc:	f8c7 c788 	str.w	ip, [r7, #1928]	; 0x788
 80020e0:	400b      	ands	r3, r1
 80020e2:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 80020e6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 80020f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020f6:	4684      	mov	ip, r0
 80020f8:	ea82 0c0c 	eor.w	ip, r2, ip
 80020fc:	f8c7 c2b8 	str.w	ip, [r7, #696]	; 0x2b8
 8002100:	404b      	eors	r3, r1
 8002102:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8002106:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800210a:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 800210e:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 8002112:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	43d1      	mvns	r1, r2
 800211c:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 8002120:	43db      	mvns	r3, r3
 8002122:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 8002126:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8002132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002136:	4684      	mov	ip, r0
 8002138:	ea0c 0c02 	and.w	ip, ip, r2
 800213c:	f8c7 c778 	str.w	ip, [r7, #1912]	; 0x778
 8002140:	400b      	ands	r3, r1
 8002142:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 8002146:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 8002152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002156:	4684      	mov	ip, r0
 8002158:	ea82 0c0c 	eor.w	ip, r2, ip
 800215c:	f8c7 c2b0 	str.w	ip, [r7, #688]	; 0x2b0
 8002160:	404b      	eors	r3, r1
 8002162:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8002166:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800216a:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800216e:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 8002172:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	43d1      	mvns	r1, r2
 800217c:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 8002180:	43db      	mvns	r3, r3
 8002182:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 8002186:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8002192:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002196:	4684      	mov	ip, r0
 8002198:	ea0c 0c02 	and.w	ip, ip, r2
 800219c:	f8c7 c768 	str.w	ip, [r7, #1896]	; 0x768
 80021a0:	400b      	ands	r3, r1
 80021a2:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 80021a6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 80021b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021b6:	4684      	mov	ip, r0
 80021b8:	ea82 0c0c 	eor.w	ip, r2, ip
 80021bc:	f8c7 c2a8 	str.w	ip, [r7, #680]	; 0x2a8
 80021c0:	404b      	eors	r3, r1
 80021c2:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80021c6:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80021ca:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 80021ce:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 80021d2:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80021d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021da:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 80021de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e2:	ea80 0c02 	eor.w	ip, r0, r2
 80021e6:	f8c7 c760 	str.w	ip, [r7, #1888]	; 0x760
 80021ea:	404b      	eors	r3, r1
 80021ec:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 80021f0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 80021fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002200:	4684      	mov	ip, r0
 8002202:	ea8c 0c02 	eor.w	ip, ip, r2
 8002206:	f8c7 c758 	str.w	ip, [r7, #1880]	; 0x758
 800220a:	404b      	eors	r3, r1
 800220c:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 8002210:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8002214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002218:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800221c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002220:	4684      	mov	ip, r0
 8002222:	ea8c 0c02 	eor.w	ip, ip, r2
 8002226:	f8c7 c750 	str.w	ip, [r7, #1872]	; 0x750
 800222a:	404b      	eors	r3, r1
 800222c:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 8002230:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 800223c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002240:	4684      	mov	ip, r0
 8002242:	ea82 0c0c 	eor.w	ip, r2, ip
 8002246:	f8c7 c2a0 	str.w	ip, [r7, #672]	; 0x2a0
 800224a:	404b      	eors	r3, r1
 800224c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8002250:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8002254:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8002258:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 800225c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8002260:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002264:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	ea80 0c02 	eor.w	ip, r0, r2
 8002270:	f8c7 c748 	str.w	ip, [r7, #1864]	; 0x748
 8002274:	404b      	eors	r3, r1
 8002276:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 800227a:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 8002286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800228a:	4684      	mov	ip, r0
 800228c:	ea8c 0c02 	eor.w	ip, ip, r2
 8002290:	f8c7 c740 	str.w	ip, [r7, #1856]	; 0x740
 8002294:	404b      	eors	r3, r1
 8002296:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 800229a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 80022a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022aa:	4684      	mov	ip, r0
 80022ac:	ea8c 0c02 	eor.w	ip, ip, r2
 80022b0:	f8c7 c738 	str.w	ip, [r7, #1848]	; 0x738
 80022b4:	404b      	eors	r3, r1
 80022b6:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 80022ba:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 80022c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022ca:	4684      	mov	ip, r0
 80022cc:	ea82 0c0c 	eor.w	ip, r2, ip
 80022d0:	f8c7 c298 	str.w	ip, [r7, #664]	; 0x298
 80022d4:	404b      	eors	r3, r1
 80022d6:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80022da:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 80022de:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80022e2:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 80022e6:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80022ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ee:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	ea80 0c02 	eor.w	ip, r0, r2
 80022fa:	f8c7 c730 	str.w	ip, [r7, #1840]	; 0x730
 80022fe:	404b      	eors	r3, r1
 8002300:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 8002304:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8002310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002314:	4684      	mov	ip, r0
 8002316:	ea8c 0c02 	eor.w	ip, ip, r2
 800231a:	f8c7 c728 	str.w	ip, [r7, #1832]	; 0x728
 800231e:	404b      	eors	r3, r1
 8002320:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 8002324:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 8002330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002334:	4684      	mov	ip, r0
 8002336:	ea8c 0c02 	eor.w	ip, ip, r2
 800233a:	f8c7 c720 	str.w	ip, [r7, #1824]	; 0x720
 800233e:	404b      	eors	r3, r1
 8002340:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8002344:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8002350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002354:	4684      	mov	ip, r0
 8002356:	ea82 0c0c 	eor.w	ip, r2, ip
 800235a:	f8c7 c290 	str.w	ip, [r7, #656]	; 0x290
 800235e:	404b      	eors	r3, r1
 8002360:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002364:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8002368:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800236c:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8002370:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002374:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002378:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	ea80 0c02 	eor.w	ip, r0, r2
 8002384:	f8c7 c718 	str.w	ip, [r7, #1816]	; 0x718
 8002388:	404b      	eors	r3, r1
 800238a:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 800238e:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 800239a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800239e:	4684      	mov	ip, r0
 80023a0:	ea8c 0c02 	eor.w	ip, ip, r2
 80023a4:	f8c7 c710 	str.w	ip, [r7, #1808]	; 0x710
 80023a8:	404b      	eors	r3, r1
 80023aa:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80023ae:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 80023ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023be:	4684      	mov	ip, r0
 80023c0:	ea8c 0c02 	eor.w	ip, ip, r2
 80023c4:	f8c7 c708 	str.w	ip, [r7, #1800]	; 0x708
 80023c8:	404b      	eors	r3, r1
 80023ca:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 80023ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 80023da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023de:	4684      	mov	ip, r0
 80023e0:	ea82 0c0c 	eor.w	ip, r2, ip
 80023e4:	f8c7 c288 	str.w	ip, [r7, #648]	; 0x288
 80023e8:	404b      	eors	r3, r1
 80023ea:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80023ee:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 80023f2:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80023f6:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80023fa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80023fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002402:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	ea80 0c02 	eor.w	ip, r0, r2
 800240e:	f8c7 c700 	str.w	ip, [r7, #1792]	; 0x700
 8002412:	404b      	eors	r3, r1
 8002414:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8002418:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 8002424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002428:	4684      	mov	ip, r0
 800242a:	ea8c 0c02 	eor.w	ip, ip, r2
 800242e:	f8c7 c6f8 	str.w	ip, [r7, #1784]	; 0x6f8
 8002432:	404b      	eors	r3, r1
 8002434:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 8002438:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 8002444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002448:	4684      	mov	ip, r0
 800244a:	ea8c 0c02 	eor.w	ip, ip, r2
 800244e:	f8c7 c6f0 	str.w	ip, [r7, #1776]	; 0x6f0
 8002452:	404b      	eors	r3, r1
 8002454:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 8002458:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8002464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002468:	4684      	mov	ip, r0
 800246a:	ea82 0c0c 	eor.w	ip, r2, ip
 800246e:	f8c7 c280 	str.w	ip, [r7, #640]	; 0x280
 8002472:	404b      	eors	r3, r1
 8002474:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002478:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800247c:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002480:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 8002484:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8002488:	0fda      	lsrs	r2, r3, #31
 800248a:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 8002496:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800249a:	0fda      	lsrs	r2, r3, #31
 800249c:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 80024a8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 80024b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024b8:	4684      	mov	ip, r0
 80024ba:	ea82 0c0c 	eor.w	ip, r2, ip
 80024be:	f8c7 c278 	str.w	ip, [r7, #632]	; 0x278
 80024c2:	404b      	eors	r3, r1
 80024c4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80024c8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80024cc:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 80024d0:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 80024d4:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80024d8:	0fda      	lsrs	r2, r3, #31
 80024da:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 80024e6:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80024ea:	0fda      	lsrs	r2, r3, #31
 80024ec:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 80024f8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8002504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002508:	4684      	mov	ip, r0
 800250a:	ea82 0c0c 	eor.w	ip, r2, ip
 800250e:	f8c7 c270 	str.w	ip, [r7, #624]	; 0x270
 8002512:	404b      	eors	r3, r1
 8002514:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8002518:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800251c:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8002520:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8002524:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8002528:	0fda      	lsrs	r2, r3, #31
 800252a:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 8002536:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800253a:	0fda      	lsrs	r2, r3, #31
 800253c:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 8002548:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8002554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002558:	4684      	mov	ip, r0
 800255a:	ea82 0c0c 	eor.w	ip, r2, ip
 800255e:	f8c7 c268 	str.w	ip, [r7, #616]	; 0x268
 8002562:	404b      	eors	r3, r1
 8002564:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8002568:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800256c:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 8002570:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8002574:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8002578:	0fda      	lsrs	r2, r3, #31
 800257a:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 8002586:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800258a:	0fda      	lsrs	r2, r3, #31
 800258c:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 8002598:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 80025a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025a8:	4684      	mov	ip, r0
 80025aa:	ea82 0c0c 	eor.w	ip, r2, ip
 80025ae:	f8c7 c260 	str.w	ip, [r7, #608]	; 0x260
 80025b2:	404b      	eors	r3, r1
 80025b4:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80025b8:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 80025bc:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 80025c0:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 80025c4:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80025c8:	0fda      	lsrs	r2, r3, #31
 80025ca:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 80025d6:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80025da:	0fda      	lsrs	r2, r3, #31
 80025dc:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 80025e8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 80025f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025f8:	4684      	mov	ip, r0
 80025fa:	ea82 0c0c 	eor.w	ip, r2, ip
 80025fe:	f8c7 c258 	str.w	ip, [r7, #600]	; 0x258
 8002602:	404b      	eors	r3, r1
 8002604:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8002608:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800260c:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8002610:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 8002614:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002618:	e9d3 0100 	ldrd	r0, r1, [r3]
 800261c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	ea80 0c02 	eor.w	ip, r0, r2
 8002628:	f8c7 c250 	str.w	ip, [r7, #592]	; 0x250
 800262c:	404b      	eors	r3, r1
 800262e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8002632:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8002636:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800263a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 800263e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800264a:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 800264e:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8002652:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002656:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265e:	ea80 0c02 	eor.w	ip, r0, r2
 8002662:	f8c7 c248 	str.w	ip, [r7, #584]	; 0x248
 8002666:	404b      	eors	r3, r1
 8002668:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800266c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8002670:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8002674:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 8002678:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800267c:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 8002680:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002684:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 8002688:	6803      	ldr	r3, [r0, #0]
 800268a:	031a      	lsls	r2, r3, #12
 800268c:	680b      	ldr	r3, [r1, #0]
 800268e:	0d1b      	lsrs	r3, r3, #20
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8002696:	680b      	ldr	r3, [r1, #0]
 8002698:	031a      	lsls	r2, r3, #12
 800269a:	6803      	ldr	r3, [r0, #0]
 800269c:	0d1b      	lsrs	r3, r3, #20
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80026a4:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80026a8:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80026ac:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 80026b0:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80026b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026b8:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	ea80 0c02 	eor.w	ip, r0, r2
 80026c4:	f8c7 c238 	str.w	ip, [r7, #568]	; 0x238
 80026c8:	404b      	eors	r3, r1
 80026ca:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80026ce:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80026d2:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 80026d6:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 80026da:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80026de:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 80026e2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80026e6:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 80026ea:	6803      	ldr	r3, [r0, #0]
 80026ec:	02da      	lsls	r2, r3, #11
 80026ee:	680b      	ldr	r3, [r1, #0]
 80026f0:	0d5b      	lsrs	r3, r3, #21
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80026f8:	680b      	ldr	r3, [r1, #0]
 80026fa:	02da      	lsls	r2, r3, #11
 80026fc:	6803      	ldr	r3, [r0, #0]
 80026fe:	0d5b      	lsrs	r3, r3, #21
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8002706:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800270a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800270e:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 8002712:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8002716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800271a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	ea80 0c02 	eor.w	ip, r0, r2
 8002726:	f8c7 c228 	str.w	ip, [r7, #552]	; 0x228
 800272a:	404b      	eors	r3, r1
 800272c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8002730:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8002734:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8002738:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 800273c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002740:	f5a3 70dc 	sub.w	r0, r3, #440	; 0x1b8
 8002744:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002748:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 800274c:	6803      	ldr	r3, [r0, #0]
 800274e:	0ada      	lsrs	r2, r3, #11
 8002750:	680b      	ldr	r3, [r1, #0]
 8002752:	055b      	lsls	r3, r3, #21
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800275a:	680b      	ldr	r3, [r1, #0]
 800275c:	0ada      	lsrs	r2, r3, #11
 800275e:	6803      	ldr	r3, [r0, #0]
 8002760:	055b      	lsls	r3, r3, #21
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8002768:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 800276c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002770:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 8002774:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8002778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800277c:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8002780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002784:	ea80 0c02 	eor.w	ip, r0, r2
 8002788:	f8c7 c218 	str.w	ip, [r7, #536]	; 0x218
 800278c:	404b      	eors	r3, r1
 800278e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002792:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8002796:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 800279a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 800279e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80027a2:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 80027a6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80027aa:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 80027ae:	6803      	ldr	r3, [r0, #0]
 80027b0:	0c9a      	lsrs	r2, r3, #18
 80027b2:	680b      	ldr	r3, [r1, #0]
 80027b4:	039b      	lsls	r3, r3, #14
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80027bc:	680b      	ldr	r3, [r1, #0]
 80027be:	0c9a      	lsrs	r2, r3, #18
 80027c0:	6803      	ldr	r3, [r0, #0]
 80027c2:	039b      	lsls	r3, r3, #14
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80027ca:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 80027ce:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80027d2:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 80027d6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	43d1      	mvns	r1, r2
 80027e0:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 80027e4:	43db      	mvns	r3, r3
 80027e6:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 80027ea:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 80027f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027fa:	4684      	mov	ip, r0
 80027fc:	ea0c 0c02 	and.w	ip, ip, r2
 8002800:	f8c7 c6b8 	str.w	ip, [r7, #1720]	; 0x6b8
 8002804:	400b      	ands	r3, r1
 8002806:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 800280a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8002816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800281a:	4684      	mov	ip, r0
 800281c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002820:	f8c7 c208 	str.w	ip, [r7, #520]	; 0x208
 8002824:	404b      	eors	r3, r1
 8002826:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800282a:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 800282e:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8002832:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8002836:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800283a:	3301      	adds	r3, #1
 800283c:	4ac1      	ldr	r2, [pc, #772]	; (8002b44 <KeccakF1600_StatePermute+0x22e0>)
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002846:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	ea82 0c00 	eor.w	ip, r2, r0
 8002852:	f8c7 c200 	str.w	ip, [r7, #512]	; 0x200
 8002856:	404b      	eors	r3, r1
 8002858:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800285c:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8002860:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8002864:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 8002868:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	43d1      	mvns	r1, r2
 8002872:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 8002876:	43db      	mvns	r3, r3
 8002878:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 800287c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8002888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800288c:	4684      	mov	ip, r0
 800288e:	ea0c 0c02 	and.w	ip, ip, r2
 8002892:	f8c7 c6a8 	str.w	ip, [r7, #1704]	; 0x6a8
 8002896:	400b      	ands	r3, r1
 8002898:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 800289c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 80028a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028ac:	4684      	mov	ip, r0
 80028ae:	ea82 0c0c 	eor.w	ip, r2, ip
 80028b2:	f8c7 c1f8 	str.w	ip, [r7, #504]	; 0x1f8
 80028b6:	404b      	eors	r3, r1
 80028b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80028bc:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 80028c0:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80028c4:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 80028c8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	43d1      	mvns	r1, r2
 80028d2:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 80028d6:	43db      	mvns	r3, r3
 80028d8:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 80028dc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80028e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028ec:	4684      	mov	ip, r0
 80028ee:	ea0c 0c02 	and.w	ip, ip, r2
 80028f2:	f8c7 c698 	str.w	ip, [r7, #1688]	; 0x698
 80028f6:	400b      	ands	r3, r1
 80028f8:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 80028fc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8002908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800290c:	4684      	mov	ip, r0
 800290e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002912:	f8c7 c1f0 	str.w	ip, [r7, #496]	; 0x1f0
 8002916:	404b      	eors	r3, r1
 8002918:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800291c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8002920:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8002924:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 8002928:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	43d1      	mvns	r1, r2
 8002932:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 8002936:	43db      	mvns	r3, r3
 8002938:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 800293c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 8002948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800294c:	4684      	mov	ip, r0
 800294e:	ea0c 0c02 	and.w	ip, ip, r2
 8002952:	f8c7 c688 	str.w	ip, [r7, #1672]	; 0x688
 8002956:	400b      	ands	r3, r1
 8002958:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 800295c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8002968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800296c:	4684      	mov	ip, r0
 800296e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002972:	f8c7 c1e8 	str.w	ip, [r7, #488]	; 0x1e8
 8002976:	404b      	eors	r3, r1
 8002978:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800297c:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8002980:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8002984:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 8002988:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	43d1      	mvns	r1, r2
 8002992:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 8002996:	43db      	mvns	r3, r3
 8002998:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 800299c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 80029a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029ac:	4684      	mov	ip, r0
 80029ae:	ea0c 0c02 	and.w	ip, ip, r2
 80029b2:	f8c7 c678 	str.w	ip, [r7, #1656]	; 0x678
 80029b6:	400b      	ands	r3, r1
 80029b8:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 80029bc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 80029c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029cc:	4684      	mov	ip, r0
 80029ce:	ea82 0c0c 	eor.w	ip, r2, ip
 80029d2:	f8c7 c1e0 	str.w	ip, [r7, #480]	; 0x1e0
 80029d6:	404b      	eors	r3, r1
 80029d8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029dc:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80029e0:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 80029e4:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 80029e8:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80029ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029f0:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	ea80 0c02 	eor.w	ip, r0, r2
 80029fc:	f8c7 c1d8 	str.w	ip, [r7, #472]	; 0x1d8
 8002a00:	404b      	eors	r3, r1
 8002a02:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a06:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8002a0a:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8002a0e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 8002a12:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002a16:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 8002a1a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002a1e:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8002a22:	6803      	ldr	r3, [r0, #0]
 8002a24:	091a      	lsrs	r2, r3, #4
 8002a26:	680b      	ldr	r3, [r1, #0]
 8002a28:	071b      	lsls	r3, r3, #28
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8002a30:	680b      	ldr	r3, [r1, #0]
 8002a32:	091a      	lsrs	r2, r3, #4
 8002a34:	6803      	ldr	r3, [r0, #0]
 8002a36:	071b      	lsls	r3, r3, #28
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002a3e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8002a42:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8002a46:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 8002a4a:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8002a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a52:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	ea80 0c02 	eor.w	ip, r0, r2
 8002a5e:	f8c7 c1c8 	str.w	ip, [r7, #456]	; 0x1c8
 8002a62:	404b      	eors	r3, r1
 8002a64:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8002a68:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8002a6c:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8002a70:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 8002a74:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002a78:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 8002a7c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002a80:	f5a3 71b6 	sub.w	r1, r3, #364	; 0x16c
 8002a84:	6803      	ldr	r3, [r0, #0]
 8002a86:	0b1a      	lsrs	r2, r3, #12
 8002a88:	680b      	ldr	r3, [r1, #0]
 8002a8a:	051b      	lsls	r3, r3, #20
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a92:	680b      	ldr	r3, [r1, #0]
 8002a94:	0b1a      	lsrs	r2, r3, #12
 8002a96:	6803      	ldr	r3, [r0, #0]
 8002a98:	051b      	lsls	r3, r3, #20
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002aa0:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8002aa4:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002aa8:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8002aac:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8002ab0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ab4:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	ea80 0c02 	eor.w	ip, r0, r2
 8002ac0:	f8c7 c1b8 	str.w	ip, [r7, #440]	; 0x1b8
 8002ac4:	404b      	eors	r3, r1
 8002ac6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002aca:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8002ace:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8002ad2:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8002ad6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002ada:	f5a3 70bc 	sub.w	r0, r3, #376	; 0x178
 8002ade:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002ae2:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 8002ae6:	6803      	ldr	r3, [r0, #0]
 8002ae8:	0f5a      	lsrs	r2, r3, #29
 8002aea:	680b      	ldr	r3, [r1, #0]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8002af4:	680b      	ldr	r3, [r1, #0]
 8002af6:	0f5a      	lsrs	r2, r3, #29
 8002af8:	6803      	ldr	r3, [r0, #0]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002b02:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8002b06:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8002b0a:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8002b0e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8002b12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b16:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	ea80 0c02 	eor.w	ip, r0, r2
 8002b22:	f8c7 c1a8 	str.w	ip, [r7, #424]	; 0x1a8
 8002b26:	404b      	eors	r3, r1
 8002b28:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002b2c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8002b30:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8002b34:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 8002b38:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002b3c:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 8002b40:	e002      	b.n	8002b48 <KeccakF1600_StatePermute+0x22e4>
 8002b42:	bf00      	nop
 8002b44:	08005b28 	.word	0x08005b28
 8002b48:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002b4c:	f5a3 71d4 	sub.w	r1, r3, #424	; 0x1a8
 8002b50:	6803      	ldr	r3, [r0, #0]
 8002b52:	035a      	lsls	r2, r3, #13
 8002b54:	680b      	ldr	r3, [r1, #0]
 8002b56:	0cdb      	lsrs	r3, r3, #19
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b5e:	680b      	ldr	r3, [r1, #0]
 8002b60:	035a      	lsls	r2, r3, #13
 8002b62:	6803      	ldr	r3, [r0, #0]
 8002b64:	0cdb      	lsrs	r3, r3, #19
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b6c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002b70:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002b74:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8002b78:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8002b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b80:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8002b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b88:	ea80 0c02 	eor.w	ip, r0, r2
 8002b8c:	f8c7 c198 	str.w	ip, [r7, #408]	; 0x198
 8002b90:	404b      	eors	r3, r1
 8002b92:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b96:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8002b9a:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8002b9e:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8002ba2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002ba6:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8002baa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002bae:	f5a3 71ec 	sub.w	r1, r3, #472	; 0x1d8
 8002bb2:	6803      	ldr	r3, [r0, #0]
 8002bb4:	075a      	lsls	r2, r3, #29
 8002bb6:	680b      	ldr	r3, [r1, #0]
 8002bb8:	08db      	lsrs	r3, r3, #3
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002bc0:	680b      	ldr	r3, [r1, #0]
 8002bc2:	075a      	lsls	r2, r3, #29
 8002bc4:	6803      	ldr	r3, [r0, #0]
 8002bc6:	08db      	lsrs	r3, r3, #3
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8002bce:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8002bd2:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002bd6:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 8002bda:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	43d1      	mvns	r1, r2
 8002be4:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 8002be8:	43db      	mvns	r3, r3
 8002bea:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8002bee:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8002bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bfe:	4684      	mov	ip, r0
 8002c00:	ea0c 0c02 	and.w	ip, ip, r2
 8002c04:	f8c7 c668 	str.w	ip, [r7, #1640]	; 0x668
 8002c08:	400b      	ands	r3, r1
 8002c0a:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 8002c0e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8002c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c1e:	4684      	mov	ip, r0
 8002c20:	ea82 0c0c 	eor.w	ip, r2, ip
 8002c24:	f8c7 c188 	str.w	ip, [r7, #392]	; 0x188
 8002c28:	404b      	eors	r3, r1
 8002c2a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002c2e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002c32:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8002c36:	e9c1 2300 	strd	r2, r3, [r1]
            Age =   BCe ^((~BCi)&  BCo );
 8002c3a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	43d1      	mvns	r1, r2
 8002c44:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8002c4e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c56:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8002c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c5e:	4684      	mov	ip, r0
 8002c60:	ea0c 0c02 	and.w	ip, ip, r2
 8002c64:	f8c7 c658 	str.w	ip, [r7, #1624]	; 0x658
 8002c68:	400b      	ands	r3, r1
 8002c6a:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8002c6e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8002c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c7e:	4684      	mov	ip, r0
 8002c80:	ea82 0c0c 	eor.w	ip, r2, ip
 8002c84:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
 8002c88:	404b      	eors	r3, r1
 8002c8a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c8e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002c92:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8002c96:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8002c9a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	43d1      	mvns	r1, r2
 8002ca4:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8002cae:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8002cba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cbe:	4684      	mov	ip, r0
 8002cc0:	ea0c 0c02 	and.w	ip, ip, r2
 8002cc4:	f8c7 c648 	str.w	ip, [r7, #1608]	; 0x648
 8002cc8:	400b      	ands	r3, r1
 8002cca:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8002cce:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd6:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8002cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cde:	4684      	mov	ip, r0
 8002ce0:	ea82 0c0c 	eor.w	ip, r2, ip
 8002ce4:	f8c7 c178 	str.w	ip, [r7, #376]	; 0x178
 8002ce8:	404b      	eors	r3, r1
 8002cea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cee:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002cf2:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8002cf6:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8002cfa:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	43d1      	mvns	r1, r2
 8002d04:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8002d0e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8002d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d1e:	4684      	mov	ip, r0
 8002d20:	ea0c 0c02 	and.w	ip, ip, r2
 8002d24:	f8c7 c638 	str.w	ip, [r7, #1592]	; 0x638
 8002d28:	400b      	ands	r3, r1
 8002d2a:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8002d2e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d36:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 8002d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d3e:	4684      	mov	ip, r0
 8002d40:	ea82 0c0c 	eor.w	ip, r2, ip
 8002d44:	f8c7 c170 	str.w	ip, [r7, #368]	; 0x170
 8002d48:	404b      	eors	r3, r1
 8002d4a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002d4e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002d52:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8002d56:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8002d5a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d62:	43d1      	mvns	r1, r2
 8002d64:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8002d6e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8002d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d7e:	4684      	mov	ip, r0
 8002d80:	ea0c 0c02 	and.w	ip, ip, r2
 8002d84:	f8c7 c628 	str.w	ip, [r7, #1576]	; 0x628
 8002d88:	400b      	ands	r3, r1
 8002d8a:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8002d8e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8002d9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d9e:	4684      	mov	ip, r0
 8002da0:	ea82 0c0c 	eor.w	ip, r2, ip
 8002da4:	f8c7 c168 	str.w	ip, [r7, #360]	; 0x168
 8002da8:	404b      	eors	r3, r1
 8002daa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002dae:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8002db2:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8002db6:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8002dba:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8002dbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dc2:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dca:	ea80 0c02 	eor.w	ip, r0, r2
 8002dce:	f8c7 c160 	str.w	ip, [r7, #352]	; 0x160
 8002dd2:	404b      	eors	r3, r1
 8002dd4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002dd8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8002ddc:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8002de0:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8002de4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002de8:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8002dec:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002df0:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	0fda      	lsrs	r2, r3, #31
 8002df8:	680b      	ldr	r3, [r1, #0]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002e02:	680b      	ldr	r3, [r1, #0]
 8002e04:	0fda      	lsrs	r2, r3, #31
 8002e06:	6803      	ldr	r3, [r0, #0]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002e10:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8002e14:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8002e18:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8002e1c:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8002e20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e24:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	ea80 0c02 	eor.w	ip, r0, r2
 8002e30:	f8c7 c150 	str.w	ip, [r7, #336]	; 0x150
 8002e34:	404b      	eors	r3, r1
 8002e36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e3a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8002e3e:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8002e42:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8002e46:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002e4a:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8002e4e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002e52:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 8002e56:	6803      	ldr	r3, [r0, #0]
 8002e58:	0e9a      	lsrs	r2, r3, #26
 8002e5a:	680b      	ldr	r3, [r1, #0]
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e64:	680b      	ldr	r3, [r1, #0]
 8002e66:	0e9a      	lsrs	r2, r3, #26
 8002e68:	6803      	ldr	r3, [r0, #0]
 8002e6a:	019b      	lsls	r3, r3, #6
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002e72:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8002e76:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002e7a:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8002e7e:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8002e82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e86:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	ea80 0c02 	eor.w	ip, r0, r2
 8002e92:	f8c7 c140 	str.w	ip, [r7, #320]	; 0x140
 8002e96:	404b      	eors	r3, r1
 8002e98:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002e9c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002ea0:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8002ea4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8002ea8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002eac:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8002eb0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002eb4:	f5a3 71c6 	sub.w	r1, r3, #396	; 0x18c
 8002eb8:	6803      	ldr	r3, [r0, #0]
 8002eba:	09da      	lsrs	r2, r3, #7
 8002ebc:	680b      	ldr	r3, [r1, #0]
 8002ebe:	065b      	lsls	r3, r3, #25
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002ec6:	680b      	ldr	r3, [r1, #0]
 8002ec8:	09da      	lsrs	r2, r3, #7
 8002eca:	6803      	ldr	r3, [r0, #0]
 8002ecc:	065b      	lsls	r3, r3, #25
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002ed4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002ed8:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8002edc:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8002ee0:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8002ee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ee8:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	ea80 0c02 	eor.w	ip, r0, r2
 8002ef4:	f8c7 c130 	str.w	ip, [r7, #304]	; 0x130
 8002ef8:	404b      	eors	r3, r1
 8002efa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002efe:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002f02:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8002f06:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 8002f0a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f0e:	f5a3 70e0 	sub.w	r0, r3, #448	; 0x1c0
 8002f12:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f16:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 8002f1a:	6803      	ldr	r3, [r0, #0]
 8002f1c:	0e1a      	lsrs	r2, r3, #24
 8002f1e:	680b      	ldr	r3, [r1, #0]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002f28:	680b      	ldr	r3, [r1, #0]
 8002f2a:	0e1a      	lsrs	r2, r3, #24
 8002f2c:	6803      	ldr	r3, [r0, #0]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002f36:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002f3a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002f3e:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8002f42:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f4a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8002f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f52:	ea80 0c02 	eor.w	ip, r0, r2
 8002f56:	f8c7 c120 	str.w	ip, [r7, #288]	; 0x120
 8002f5a:	404b      	eors	r3, r1
 8002f5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f60:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002f64:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8002f68:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 8002f6c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f70:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8002f74:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f78:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8002f7c:	6803      	ldr	r3, [r0, #0]
 8002f7e:	0b9a      	lsrs	r2, r3, #14
 8002f80:	680b      	ldr	r3, [r1, #0]
 8002f82:	049b      	lsls	r3, r3, #18
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f8a:	680b      	ldr	r3, [r1, #0]
 8002f8c:	0b9a      	lsrs	r2, r3, #14
 8002f8e:	6803      	ldr	r3, [r0, #0]
 8002f90:	049b      	lsls	r3, r3, #18
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002f98:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002f9c:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002fa0:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 8002fa4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	43d1      	mvns	r1, r2
 8002fae:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 8002fb8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8002fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fc8:	4684      	mov	ip, r0
 8002fca:	ea0c 0c02 	and.w	ip, ip, r2
 8002fce:	f8c7 c618 	str.w	ip, [r7, #1560]	; 0x618
 8002fd2:	400b      	ands	r3, r1
 8002fd4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8002fd8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 8002fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fe8:	4684      	mov	ip, r0
 8002fea:	ea82 0c0c 	eor.w	ip, r2, ip
 8002fee:	f8c7 c110 	str.w	ip, [r7, #272]	; 0x110
 8002ff2:	404b      	eors	r3, r1
 8002ff4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ff8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002ffc:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8003000:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 8003004:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	43d1      	mvns	r1, r2
 800300e:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 8003012:	43db      	mvns	r3, r3
 8003014:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8003018:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8003024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003028:	4684      	mov	ip, r0
 800302a:	ea0c 0c02 	and.w	ip, ip, r2
 800302e:	f8c7 c608 	str.w	ip, [r7, #1544]	; 0x608
 8003032:	400b      	ands	r3, r1
 8003034:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8003038:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 8003044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003048:	4684      	mov	ip, r0
 800304a:	ea82 0c0c 	eor.w	ip, r2, ip
 800304e:	f8c7 c108 	str.w	ip, [r7, #264]	; 0x108
 8003052:	404b      	eors	r3, r1
 8003054:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003058:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800305c:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8003060:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 8003064:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	43d1      	mvns	r1, r2
 800306e:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 8003072:	43db      	mvns	r3, r3
 8003074:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 8003078:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8003084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003088:	4684      	mov	ip, r0
 800308a:	ea0c 0c02 	and.w	ip, ip, r2
 800308e:	f8c7 c5f8 	str.w	ip, [r7, #1528]	; 0x5f8
 8003092:	400b      	ands	r3, r1
 8003094:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8003098:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 80030a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030a8:	4684      	mov	ip, r0
 80030aa:	ea82 0c0c 	eor.w	ip, r2, ip
 80030ae:	f8c7 c100 	str.w	ip, [r7, #256]	; 0x100
 80030b2:	404b      	eors	r3, r1
 80030b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030b8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80030bc:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 80030c0:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 80030c4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	43d1      	mvns	r1, r2
 80030ce:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 80030d2:	43db      	mvns	r3, r3
 80030d4:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80030d8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 80030e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030e8:	4684      	mov	ip, r0
 80030ea:	ea0c 0c02 	and.w	ip, ip, r2
 80030ee:	f8c7 c5e8 	str.w	ip, [r7, #1512]	; 0x5e8
 80030f2:	400b      	ands	r3, r1
 80030f4:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 80030f8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8003104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003108:	4684      	mov	ip, r0
 800310a:	ea82 0c0c 	eor.w	ip, r2, ip
 800310e:	f8c7 c0f8 	str.w	ip, [r7, #248]	; 0xf8
 8003112:	404b      	eors	r3, r1
 8003114:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003118:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800311c:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8003120:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 8003124:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	43d1      	mvns	r1, r2
 800312e:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 8003132:	43db      	mvns	r3, r3
 8003134:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 8003138:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 8003144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003148:	4684      	mov	ip, r0
 800314a:	ea0c 0c02 	and.w	ip, ip, r2
 800314e:	f8c7 c5d8 	str.w	ip, [r7, #1496]	; 0x5d8
 8003152:	400b      	ands	r3, r1
 8003154:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 8003158:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 8003164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003168:	4684      	mov	ip, r0
 800316a:	ea82 0c0c 	eor.w	ip, r2, ip
 800316e:	f8c7 c0f0 	str.w	ip, [r7, #240]	; 0xf0
 8003172:	404b      	eors	r3, r1
 8003174:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003178:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800317c:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8003180:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 8003184:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003188:	e9d3 0100 	ldrd	r0, r1, [r3]
 800318c:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	ea80 0c02 	eor.w	ip, r0, r2
 8003198:	f8c7 c0e8 	str.w	ip, [r7, #232]	; 0xe8
 800319c:	404b      	eors	r3, r1
 800319e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80031a2:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80031a6:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 80031aa:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 80031ae:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80031b2:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 80031b6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80031ba:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 80031be:	6803      	ldr	r3, [r0, #0]
 80031c0:	095a      	lsrs	r2, r3, #5
 80031c2:	680b      	ldr	r3, [r1, #0]
 80031c4:	06db      	lsls	r3, r3, #27
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031cc:	680b      	ldr	r3, [r1, #0]
 80031ce:	095a      	lsrs	r2, r3, #5
 80031d0:	6803      	ldr	r3, [r0, #0]
 80031d2:	06db      	lsls	r3, r3, #27
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031da:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80031de:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80031e2:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 80031e6:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 80031ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ee:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	ea80 0c02 	eor.w	ip, r0, r2
 80031fa:	f8c7 c0d8 	str.w	ip, [r7, #216]	; 0xd8
 80031fe:	404b      	eors	r3, r1
 8003200:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003204:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8003208:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800320c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 8003210:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003214:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8003218:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800321c:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8003220:	6803      	ldr	r3, [r0, #0]
 8003222:	011a      	lsls	r2, r3, #4
 8003224:	680b      	ldr	r3, [r1, #0]
 8003226:	0f1b      	lsrs	r3, r3, #28
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800322e:	680b      	ldr	r3, [r1, #0]
 8003230:	011a      	lsls	r2, r3, #4
 8003232:	6803      	ldr	r3, [r0, #0]
 8003234:	0f1b      	lsrs	r3, r3, #28
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800323c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003240:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003244:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 8003248:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800324c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003250:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	ea80 0c02 	eor.w	ip, r0, r2
 800325c:	f8c7 c0c8 	str.w	ip, [r7, #200]	; 0xc8
 8003260:	404b      	eors	r3, r1
 8003262:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003266:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800326a:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800326e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 8003272:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003276:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 800327a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800327e:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 8003282:	6803      	ldr	r3, [r0, #0]
 8003284:	0d9a      	lsrs	r2, r3, #22
 8003286:	680b      	ldr	r3, [r1, #0]
 8003288:	029b      	lsls	r3, r3, #10
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003290:	680b      	ldr	r3, [r1, #0]
 8003292:	0d9a      	lsrs	r2, r3, #22
 8003294:	6803      	ldr	r3, [r0, #0]
 8003296:	029b      	lsls	r3, r3, #10
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800329e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80032a2:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80032a6:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 80032aa:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 80032ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032b2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	ea80 0c02 	eor.w	ip, r0, r2
 80032be:	f8c7 c0b8 	str.w	ip, [r7, #184]	; 0xb8
 80032c2:	404b      	eors	r3, r1
 80032c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80032c8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80032cc:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 80032d0:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 80032d4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80032d8:	f5a3 70d8 	sub.w	r0, r3, #432	; 0x1b0
 80032dc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80032e0:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 80032e4:	6803      	ldr	r3, [r0, #0]
 80032e6:	0c5a      	lsrs	r2, r3, #17
 80032e8:	680b      	ldr	r3, [r1, #0]
 80032ea:	03db      	lsls	r3, r3, #15
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032f2:	680b      	ldr	r3, [r1, #0]
 80032f4:	0c5a      	lsrs	r2, r3, #17
 80032f6:	6803      	ldr	r3, [r0, #0]
 80032f8:	03db      	lsls	r3, r3, #15
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003300:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003304:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8003308:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 800330c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8003310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003314:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	ea80 0c02 	eor.w	ip, r0, r2
 8003320:	f8c7 c0a8 	str.w	ip, [r7, #168]	; 0xa8
 8003324:	404b      	eors	r3, r1
 8003326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800332a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800332e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8003332:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 8003336:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800333a:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 800333e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003342:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 8003346:	6803      	ldr	r3, [r0, #0]
 8003348:	061a      	lsls	r2, r3, #24
 800334a:	680b      	ldr	r3, [r1, #0]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003354:	680b      	ldr	r3, [r1, #0]
 8003356:	061a      	lsls	r2, r3, #24
 8003358:	6803      	ldr	r3, [r0, #0]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003362:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003366:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800336a:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 800336e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	43d1      	mvns	r1, r2
 8003378:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 800337c:	43db      	mvns	r3, r3
 800337e:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8003382:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 800338e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003392:	4684      	mov	ip, r0
 8003394:	ea0c 0c02 	and.w	ip, ip, r2
 8003398:	f8c7 c5c8 	str.w	ip, [r7, #1480]	; 0x5c8
 800339c:	400b      	ands	r3, r1
 800339e:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 80033a2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 80033ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033b2:	4684      	mov	ip, r0
 80033b4:	ea82 0c0c 	eor.w	ip, r2, ip
 80033b8:	f8c7 c098 	str.w	ip, [r7, #152]	; 0x98
 80033bc:	404b      	eors	r3, r1
 80033be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80033c6:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 80033ca:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 80033ce:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	43d1      	mvns	r1, r2
 80033d8:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 80033dc:	43db      	mvns	r3, r3
 80033de:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80033e2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 80033ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033f2:	4684      	mov	ip, r0
 80033f4:	ea0c 0c02 	and.w	ip, ip, r2
 80033f8:	f8c7 c5b8 	str.w	ip, [r7, #1464]	; 0x5b8
 80033fc:	400b      	ands	r3, r1
 80033fe:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8003402:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340a:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 800340e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003412:	4684      	mov	ip, r0
 8003414:	ea82 0c0c 	eor.w	ip, r2, ip
 8003418:	f8c7 c090 	str.w	ip, [r7, #144]	; 0x90
 800341c:	404b      	eors	r3, r1
 800341e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003422:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003426:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800342a:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 800342e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	43d1      	mvns	r1, r2
 8003438:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800343c:	43db      	mvns	r3, r3
 800343e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8003442:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 800344e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003452:	4684      	mov	ip, r0
 8003454:	ea0c 0c02 	and.w	ip, ip, r2
 8003458:	f8c7 c5a8 	str.w	ip, [r7, #1448]	; 0x5a8
 800345c:	400b      	ands	r3, r1
 800345e:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8003462:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346a:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 800346e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003472:	4684      	mov	ip, r0
 8003474:	ea82 0c0c 	eor.w	ip, r2, ip
 8003478:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
 800347c:	404b      	eors	r3, r1
 800347e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003482:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003486:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800348a:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 800348e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	43d1      	mvns	r1, r2
 8003498:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 800349c:	43db      	mvns	r3, r3
 800349e:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80034a2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 80034ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034b2:	4684      	mov	ip, r0
 80034b4:	ea0c 0c02 	and.w	ip, ip, r2
 80034b8:	f8c7 c598 	str.w	ip, [r7, #1432]	; 0x598
 80034bc:	400b      	ands	r3, r1
 80034be:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80034c2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80034ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034d2:	4684      	mov	ip, r0
 80034d4:	ea82 0c0c 	eor.w	ip, r2, ip
 80034d8:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 80034dc:	404b      	eors	r3, r1
 80034de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034e2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80034e6:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 80034ea:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 80034ee:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	43d1      	mvns	r1, r2
 80034f8:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 80034fc:	43db      	mvns	r3, r3
 80034fe:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8003502:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 800350e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003512:	4684      	mov	ip, r0
 8003514:	ea0c 0c02 	and.w	ip, ip, r2
 8003518:	f8c7 c588 	str.w	ip, [r7, #1416]	; 0x588
 800351c:	400b      	ands	r3, r1
 800351e:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8003522:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 800352e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003532:	4684      	mov	ip, r0
 8003534:	ea82 0c0c 	eor.w	ip, r2, ip
 8003538:	f8c7 c078 	str.w	ip, [r7, #120]	; 0x78
 800353c:	404b      	eors	r3, r1
 800353e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003540:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003544:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8003548:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 800354c:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003554:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	ea80 0c02 	eor.w	ip, r0, r2
 8003560:	f8c7 c070 	str.w	ip, [r7, #112]	; 0x70
 8003564:	404b      	eors	r3, r1
 8003566:	677b      	str	r3, [r7, #116]	; 0x74
 8003568:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800356c:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8003570:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 8003574:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003578:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 800357c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003580:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 8003584:	6803      	ldr	r3, [r0, #0]
 8003586:	079a      	lsls	r2, r3, #30
 8003588:	680b      	ldr	r3, [r1, #0]
 800358a:	089b      	lsrs	r3, r3, #2
 800358c:	4313      	orrs	r3, r2
 800358e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003590:	680b      	ldr	r3, [r1, #0]
 8003592:	079a      	lsls	r2, r3, #30
 8003594:	6803      	ldr	r3, [r0, #0]
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	4313      	orrs	r3, r2
 800359a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800359c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80035a0:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80035a4:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 80035a8:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80035ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035b0:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	ea80 0c02 	eor.w	ip, r0, r2
 80035bc:	f8c7 c060 	str.w	ip, [r7, #96]	; 0x60
 80035c0:	404b      	eors	r3, r1
 80035c2:	667b      	str	r3, [r7, #100]	; 0x64
 80035c4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80035c8:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 80035cc:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 80035d0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80035d4:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 80035d8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80035dc:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 80035e0:	6803      	ldr	r3, [r0, #0]
 80035e2:	05da      	lsls	r2, r3, #23
 80035e4:	680b      	ldr	r3, [r1, #0]
 80035e6:	0a5b      	lsrs	r3, r3, #9
 80035e8:	4313      	orrs	r3, r2
 80035ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80035ec:	680b      	ldr	r3, [r1, #0]
 80035ee:	05da      	lsls	r2, r3, #23
 80035f0:	6803      	ldr	r3, [r0, #0]
 80035f2:	0a5b      	lsrs	r3, r3, #9
 80035f4:	4313      	orrs	r3, r2
 80035f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035fc:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003600:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 8003604:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8003608:	e9d3 0100 	ldrd	r0, r1, [r3]
 800360c:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	ea80 0c02 	eor.w	ip, r0, r2
 8003618:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800361c:	404b      	eors	r3, r1
 800361e:	657b      	str	r3, [r7, #84]	; 0x54
 8003620:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003624:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8003628:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 800362c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003630:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 8003634:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003638:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 800363c:	6803      	ldr	r3, [r0, #0]
 800363e:	01da      	lsls	r2, r3, #7
 8003640:	680b      	ldr	r3, [r1, #0]
 8003642:	0e5b      	lsrs	r3, r3, #25
 8003644:	4313      	orrs	r3, r2
 8003646:	64bb      	str	r3, [r7, #72]	; 0x48
 8003648:	680b      	ldr	r3, [r1, #0]
 800364a:	01da      	lsls	r2, r3, #7
 800364c:	6803      	ldr	r3, [r0, #0]
 800364e:	0e5b      	lsrs	r3, r3, #25
 8003650:	4313      	orrs	r3, r2
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003654:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003658:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800365c:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 8003660:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8003664:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003668:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	ea80 0c02 	eor.w	ip, r0, r2
 8003674:	f8c7 c040 	str.w	ip, [r7, #64]	; 0x40
 8003678:	404b      	eors	r3, r1
 800367a:	647b      	str	r3, [r7, #68]	; 0x44
 800367c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003680:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8003684:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 8003688:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800368c:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8003690:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003694:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8003698:	6803      	ldr	r3, [r0, #0]
 800369a:	025a      	lsls	r2, r3, #9
 800369c:	680b      	ldr	r3, [r1, #0]
 800369e:	0ddb      	lsrs	r3, r3, #23
 80036a0:	4313      	orrs	r3, r2
 80036a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a4:	680b      	ldr	r3, [r1, #0]
 80036a6:	025a      	lsls	r2, r3, #9
 80036a8:	6803      	ldr	r3, [r0, #0]
 80036aa:	0ddb      	lsrs	r3, r3, #23
 80036ac:	4313      	orrs	r3, r2
 80036ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036b4:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80036b8:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 80036bc:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80036c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	ea80 0c02 	eor.w	ip, r0, r2
 80036d0:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 80036d4:	404b      	eors	r3, r1
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
 80036d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036dc:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 80036e0:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 80036e4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80036e8:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 80036ec:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80036f0:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 80036f4:	6803      	ldr	r3, [r0, #0]
 80036f6:	0f9a      	lsrs	r2, r3, #30
 80036f8:	680b      	ldr	r3, [r1, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4313      	orrs	r3, r2
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003700:	680b      	ldr	r3, [r1, #0]
 8003702:	0f9a      	lsrs	r2, r3, #30
 8003704:	6803      	ldr	r3, [r0, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4313      	orrs	r3, r2
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
 800370c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003710:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8003714:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 8003718:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	43d1      	mvns	r1, r2
 8003722:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 8003726:	43db      	mvns	r3, r3
 8003728:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800372c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8003738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800373c:	4684      	mov	ip, r0
 800373e:	ea0c 0c02 	and.w	ip, ip, r2
 8003742:	f8c7 c578 	str.w	ip, [r7, #1400]	; 0x578
 8003746:	400b      	ands	r3, r1
 8003748:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800374c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8003758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800375c:	4684      	mov	ip, r0
 800375e:	ea82 0c0c 	eor.w	ip, r2, ip
 8003762:	f8c7 c020 	str.w	ip, [r7, #32]
 8003766:	404b      	eors	r3, r1
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
 800376a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800376e:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8003772:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 8003776:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	43d1      	mvns	r1, r2
 8003780:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 8003784:	43db      	mvns	r3, r3
 8003786:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800378a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 8003796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800379a:	4684      	mov	ip, r0
 800379c:	ea0c 0c02 	and.w	ip, ip, r2
 80037a0:	f8c7 c568 	str.w	ip, [r7, #1384]	; 0x568
 80037a4:	400b      	ands	r3, r1
 80037a6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80037aa:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 80037b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037ba:	4684      	mov	ip, r0
 80037bc:	ea82 0c0c 	eor.w	ip, r2, ip
 80037c0:	f8c7 c018 	str.w	ip, [r7, #24]
 80037c4:	404b      	eors	r3, r1
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037cc:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 80037d0:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 80037d4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	43d1      	mvns	r1, r2
 80037de:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 80037e2:	43db      	mvns	r3, r3
 80037e4:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 80037e8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 80037f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037f8:	4684      	mov	ip, r0
 80037fa:	ea0c 0c02 	and.w	ip, ip, r2
 80037fe:	f8c7 c558 	str.w	ip, [r7, #1368]	; 0x558
 8003802:	400b      	ands	r3, r1
 8003804:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8003808:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8003814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003818:	4684      	mov	ip, r0
 800381a:	ea82 0c0c 	eor.w	ip, r2, ip
 800381e:	f8c7 c010 	str.w	ip, [r7, #16]
 8003822:	404b      	eors	r3, r1
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800382a:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800382e:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 8003832:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	43d1      	mvns	r1, r2
 800383c:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 8003840:	43db      	mvns	r3, r3
 8003842:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8003846:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8003852:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003856:	4684      	mov	ip, r0
 8003858:	ea0c 0a02 	and.w	sl, ip, r2
 800385c:	ea01 0b03 	and.w	fp, r1, r3
 8003860:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	ea82 010a 	eor.w	r1, r2, sl
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	ea83 030b 	eor.w	r3, r3, fp
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003878:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800387c:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 8003880:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	ea6f 0802 	mvn.w	r8, r2
 800388c:	ea6f 0903 	mvn.w	r9, r3
 8003890:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	ea08 0402 	and.w	r4, r8, r2
 800389c:	ea09 0503 	and.w	r5, r9, r3
 80038a0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	ea82 0104 	eor.w	r1, r2, r4
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	406b      	eors	r3, r5
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038b6:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 80038ba:	e9c1 2300 	strd	r2, r3, [r1]
        for( round = 0; round < NROUNDS; round += 2 )
 80038be:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80038c2:	3302      	adds	r3, #2
 80038c4:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 80038c8:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80038cc:	2b17      	cmp	r3, #23
 80038ce:	f77d a8eb 	ble.w	8000aa8 <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 80038d2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80038d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 80038e8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80038ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f103 0108 	add.w	r1, r3, #8
 80038f6:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 8003902:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003906:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f103 0110 	add.w	r1, r3, #16
 8003910:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 800391c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003920:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f103 0118 	add.w	r1, r3, #24
 800392a:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 8003936:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800393a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f103 0120 	add.w	r1, r3, #32
 8003944:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 8003950:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003954:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800395e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 800396a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800396e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003978:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 8003984:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003988:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003992:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 800399e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80039ac:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 80039b8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039bc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80039c6:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 80039d2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80039e0:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 80039ec:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039f0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80039fa:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 8003a06:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8003a14:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 8003a20:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a24:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8003a2e:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8003a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a36:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 8003a3a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8003a48:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 8003a54:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a58:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8003a62:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 8003a6e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a72:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8003a7c:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 8003a88:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a8c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8003a96:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 8003aa2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003aa6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8003ab0:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 8003abc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ac0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8003aca:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 8003ad6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ada:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8003ae4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 8003af0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003af4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8003afe:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 8003b0a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003b0e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8003b18:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 8003b24:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003b28:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8003b32:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8003b3e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003b42:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8003b4c:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003b58:	bf00      	nop
 8003b5a:	f607 378c 	addw	r7, r7, #2956	; 0xb8c
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop

08003b68 <keccak_init>:
* Description: Initializes the Keccak state.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
static void keccak_init(keccak_state *state)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<25;i++)
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e00c      	b.n	8003b90 <keccak_init+0x28>
    state->s[i] = 0;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	18d1      	adds	r1, r2, r3
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b18      	cmp	r3, #24
 8003b94:	d9ef      	bls.n	8003b76 <keccak_init+0xe>
  state->pos = 0;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
 8003ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bac:	b08e      	sub	sp, #56	; 0x38
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6278      	str	r0, [r7, #36]	; 0x24
 8003bb2:	6239      	str	r1, [r7, #32]
 8003bb4:	61fa      	str	r2, [r7, #28]
 8003bb6:	61bb      	str	r3, [r7, #24]
  unsigned int i;
  uint8_t t[8] = {0};
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30

  if(pos & 7) {
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d039      	beq.n	8003c3e <keccak_absorb+0x96>
    i = pos & 7;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
    while(i < 8 && mlen > 0) {
 8003bd2:	e011      	b.n	8003bf8 <keccak_absorb+0x50>
      t[i++] = *m++;
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	1c53      	adds	r3, r2, #1
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bdc:	1c59      	adds	r1, r3, #1
 8003bde:	6379      	str	r1, [r7, #52]	; 0x34
 8003be0:	7812      	ldrb	r2, [r2, #0]
 8003be2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003be6:	440b      	add	r3, r1
 8003be8:	f803 2c0c 	strb.w	r2, [r3, #-12]
      mlen--;
 8003bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	65bb      	str	r3, [r7, #88]	; 0x58
      pos++;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	61fb      	str	r3, [r7, #28]
    while(i < 8 && mlen > 0) {
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	2b07      	cmp	r3, #7
 8003bfc:	d802      	bhi.n	8003c04 <keccak_absorb+0x5c>
 8003bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e7      	bne.n	8003bd4 <keccak_absorb+0x2c>
    }
    s[(pos-i)/8] ^= load64(t);
 8003c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc fdc2 	bl	8000792 <load64>
 8003c0e:	4604      	mov	r4, r0
 8003c10:	460d      	mov	r5, r1
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f023 0307 	bic.w	r3, r3, #7
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1e:	4413      	add	r3, r2
 8003c20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f023 0207 	bic.w	r2, r3, #7
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	4413      	add	r3, r2
 8003c32:	ea84 0800 	eor.w	r8, r4, r0
 8003c36:	ea85 0901 	eor.w	r9, r5, r1
 8003c3a:	e9c3 8900 	strd	r8, r9, [r3]
  }

  if(pos && mlen >= r-pos) {
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d075      	beq.n	8003d30 <keccak_absorb+0x188>
 8003c44:	6a3a      	ldr	r2, [r7, #32]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d36f      	bcc.n	8003d30 <keccak_absorb+0x188>
    for(i=0;i<(r-pos)/8;i++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	637b      	str	r3, [r7, #52]	; 0x34
 8003c54:	e023      	b.n	8003c9e <keccak_absorb+0xf6>
      s[pos/8+i] ^= load64(m+8*i);
 8003c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc fd97 	bl	8000792 <load64>
 8003c64:	4680      	mov	r8, r0
 8003c66:	4689      	mov	r9, r1
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	08dc      	lsrs	r4, r3, #3
 8003c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6e:	4423      	add	r3, r4
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	4413      	add	r3, r2
 8003c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7c:	4423      	add	r3, r4
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c82:	4413      	add	r3, r2
 8003c84:	ea88 0200 	eor.w	r2, r8, r0
 8003c88:	613a      	str	r2, [r7, #16]
 8003c8a:	ea89 0201 	eor.w	r2, r9, r1
 8003c8e:	617a      	str	r2, [r7, #20]
 8003c90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c94:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<(r-pos)/8;i++)
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c9e:	6a3a      	ldr	r2, [r7, #32]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	08db      	lsrs	r3, r3, #3
 8003ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d3d4      	bcc.n	8003c56 <keccak_absorb+0xae>
    m += r-pos;
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
    mlen -= r-pos;
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cc0:	4413      	add	r3, r2
 8003cc2:	65bb      	str	r3, [r7, #88]	; 0x58
    pos = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
    KeccakF1600_StatePermute(s);
 8003cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cca:	f7fc fdcb 	bl	8000864 <KeccakF1600_StatePermute>
  }

  while(mlen >= r) {
 8003cce:	e02f      	b.n	8003d30 <keccak_absorb+0x188>
    for(i=0;i<r/8;i++)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd4:	e01c      	b.n	8003d10 <keccak_absorb+0x168>
      s[i] ^= load64(m+8*i);
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4413      	add	r3, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fc fd57 	bl	8000792 <load64>
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cea:	4413      	add	r3, r2
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8003cf2:	00e4      	lsls	r4, r4, #3
 8003cf4:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8003cf6:	442c      	add	r4, r5
 8003cf8:	ea80 0502 	eor.w	r5, r0, r2
 8003cfc:	60bd      	str	r5, [r7, #8]
 8003cfe:	404b      	eors	r3, r1
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d06:	e9c4 2300 	strd	r2, r3, [r4]
    for(i=0;i<r/8;i++)
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	08db      	lsrs	r3, r3, #3
 8003d14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d3dd      	bcc.n	8003cd6 <keccak_absorb+0x12e>
    m += r;
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	4413      	add	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
    mlen -= r;
 8003d22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	65bb      	str	r3, [r7, #88]	; 0x58
    KeccakF1600_StatePermute(s);
 8003d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d2c:	f7fc fd9a 	bl	8000864 <KeccakF1600_StatePermute>
  while(mlen >= r) {
 8003d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d2cb      	bcs.n	8003cd0 <keccak_absorb+0x128>
  }

  for(i=0;i<mlen/8;i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3c:	e020      	b.n	8003d80 <keccak_absorb+0x1d8>
    s[pos/8+i] ^= load64(m+8*i);
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4413      	add	r3, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fc fd23 	bl	8000792 <load64>
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	08dc      	lsrs	r4, r3, #3
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d52:	4423      	add	r3, r4
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d58:	4413      	add	r3, r2
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8003d60:	442c      	add	r4, r5
 8003d62:	00e4      	lsls	r4, r4, #3
 8003d64:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8003d66:	442c      	add	r4, r5
 8003d68:	ea80 0502 	eor.w	r5, r0, r2
 8003d6c:	603d      	str	r5, [r7, #0]
 8003d6e:	404b      	eors	r3, r1
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d76:	e9c4 2300 	strd	r2, r3, [r4]
  for(i=0;i<mlen/8;i++)
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d82:	08db      	lsrs	r3, r3, #3
 8003d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d3d9      	bcc.n	8003d3e <keccak_absorb+0x196>
  m += 8*i;
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4413      	add	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
  mlen -= 8*i;
 8003d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	65bb      	str	r3, [r7, #88]	; 0x58
  pos += 8*i;
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	61fb      	str	r3, [r7, #28]

  if(mlen) {
 8003da8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d03d      	beq.n	8003e2a <keccak_absorb+0x282>
    for(i=0;i<8;i++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
 8003db2:	e008      	b.n	8003dc6 <keccak_absorb+0x21e>
      t[i] = 0;
 8003db4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dba:	4413      	add	r3, r2
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]
    for(i=0;i<8;i++)
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc8:	2b07      	cmp	r3, #7
 8003dca:	d9f3      	bls.n	8003db4 <keccak_absorb+0x20c>
    for(i=0;i<mlen;i++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd0:	e00c      	b.n	8003dec <keccak_absorb+0x244>
      t[i] = m[i];
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd6:	4413      	add	r3, r2
 8003dd8:	7819      	ldrb	r1, [r3, #0]
 8003dda:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de0:	4413      	add	r3, r2
 8003de2:	460a      	mov	r2, r1
 8003de4:	701a      	strb	r2, [r3, #0]
    for(i=0;i<mlen;i++)
 8003de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de8:	3301      	adds	r3, #1
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
 8003dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d3ee      	bcc.n	8003dd2 <keccak_absorb+0x22a>
    s[pos/8] ^= load64(t);
 8003df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc fcca 	bl	8000792 <load64>
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f023 0307 	bic.w	r3, r3, #7
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	4413      	add	r3, r2
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	69fc      	ldr	r4, [r7, #28]
 8003e0e:	f024 0407 	bic.w	r4, r4, #7
 8003e12:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8003e14:	442c      	add	r4, r5
 8003e16:	ea80 0a02 	eor.w	sl, r0, r2
 8003e1a:	ea81 0b03 	eor.w	fp, r1, r3
 8003e1e:	e9c4 ab00 	strd	sl, fp, [r4]
    pos += mlen;
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e26:	4413      	add	r3, r2
 8003e28:	61fb      	str	r3, [r7, #28]
  }

  return pos;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3738      	adds	r7, #56	; 0x38
 8003e30:	46bd      	mov	sp, r7
 8003e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e36 <keccak_finalize>:
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: position in current block to be absorbed
*              - uint8_t p:        domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int r, unsigned int pos, uint8_t p)
{
 8003e36:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6178      	str	r0, [r7, #20]
 8003e40:	6139      	str	r1, [r7, #16]
 8003e42:	60fa      	str	r2, [r7, #12]
 8003e44:	72fb      	strb	r3, [r7, #11]
  unsigned int i,j;

  i = pos >> 3;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	08db      	lsrs	r3, r3, #3
 8003e4a:	61fb      	str	r3, [r7, #28]
  j = pos & 7;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	61bb      	str	r3, [r7, #24]
  s[i] ^= (uint64_t)p << 8*j;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e60:	7afb      	ldrb	r3, [r7, #11]
 8003e62:	2200      	movs	r2, #0
 8003e64:	4698      	mov	r8, r3
 8003e66:	4691      	mov	r9, r2
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	f1a3 0620 	sub.w	r6, r3, #32
 8003e70:	f1c3 0220 	rsb	r2, r3, #32
 8003e74:	fa09 f503 	lsl.w	r5, r9, r3
 8003e78:	fa08 f606 	lsl.w	r6, r8, r6
 8003e7c:	4335      	orrs	r5, r6
 8003e7e:	fa28 f202 	lsr.w	r2, r8, r2
 8003e82:	4315      	orrs	r5, r2
 8003e84:	fa08 f403 	lsl.w	r4, r8, r3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4413      	add	r3, r2
 8003e90:	ea80 0a04 	eor.w	sl, r0, r4
 8003e94:	ea81 0b05 	eor.w	fp, r1, r5
 8003e98:	e9c3 ab00 	strd	sl, fp, [r3]
  s[r/8-1] ^= 1ULL << 63;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f023 0307 	bic.w	r3, r3, #7
 8003ea2:	3b08      	subs	r3, #8
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	6939      	ldr	r1, [r7, #16]
 8003eae:	f021 0107 	bic.w	r1, r1, #7
 8003eb2:	3908      	subs	r1, #8
 8003eb4:	6978      	ldr	r0, [r7, #20]
 8003eb6:	4401      	add	r1, r0
 8003eb8:	603a      	str	r2, [r7, #0]
 8003eba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ec4:	e9c1 3400 	strd	r3, r4, [r1]
}
 8003ec8:	bf00      	nop
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ed2:	4770      	bx	lr

08003ed4 <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(nblocks > 0) {
 8003ee2:	e021      	b.n	8003f28 <keccak_squeezeblocks+0x54>
    KeccakF1600_StatePermute(s);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7fc fcbd 	bl	8000864 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e00f      	b.n	8003f10 <keccak_squeezeblocks+0x3c>
      store64(out + 8*i, s[i]);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	18d1      	adds	r1, r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	4608      	mov	r0, r1
 8003f06:	f7fc fc81 	bl	800080c <store64>
    for(i=0;i<r/8;i++)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	08db      	lsrs	r3, r3, #3
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d3ea      	bcc.n	8003ef0 <keccak_squeezeblocks+0x1c>
    out += r;
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
    nblocks--;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	60bb      	str	r3, [r7, #8]
  while(nblocks > 0) {
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1da      	bne.n	8003ee4 <keccak_squeezeblocks+0x10>
  }
}
 8003f2e:	bf00      	nop
 8003f30:	bf00      	nop
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <pqcrystals_fips202_ref_shake256_init>:
*
* Arguments:   - keccak_state *state: pointer to (uninitialized)
*                                     Keccak state
**************************************************/
void shake256_init(keccak_state *state)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  keccak_init(state);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff fe11 	bl	8003b68 <keccak_init>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <pqcrystals_fips202_ref_shake256_absorb>:
*                                     Keccak state
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af02      	add	r7, sp, #8
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2188      	movs	r1, #136	; 0x88
 8003f6a:	f7ff fe1d 	bl	8003ba8 <keccak_absorb>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <pqcrystals_fips202_ref_shake256_finalize>:
* Description: Finalize absorb step of the SHAKE256 XOF.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f8e:	231f      	movs	r3, #31
 8003f90:	2188      	movs	r1, #136	; 0x88
 8003f92:	f7ff ff50 	bl	8003e36 <keccak_finalize>
  state->pos = 0;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <pqcrystals_fips202_ref_shake256_squeezeblocks>:
*              - size_t nblocks:  number of blocks to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	2388      	movs	r3, #136	; 0x88
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7ff ff8b 	bl	8003ed4 <keccak_squeezeblocks>
}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <pqcrystals_dilithium2_ref_dilithium_shake256_stream_init>:
}

void dilithium_shake256_stream_init(keccak_state *state,
                                    const uint8_t seed[CRHBYTES],
                                    uint16_t nonce)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	80fb      	strh	r3, [r7, #6]
  uint8_t t[2];
  t[0] = nonce;
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	753b      	strb	r3, [r7, #20]
  t[1] = nonce >> 8;
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	757b      	strb	r3, [r7, #21]

  shake256_init(state);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff ffa7 	bl	8003f38 <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(state, seed, CRHBYTES);
 8003fea:	2230      	movs	r2, #48	; 0x30
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff ffad 	bl	8003f4e <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(state, t, 2);
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f7ff ffa6 	bl	8003f4e <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(state);
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f7ff ffbb 	bl	8003f7e <pqcrystals_fips202_ref_shake256_finalize>
}
 8004008:	bf00      	nop
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <check_version>:
} ss_cmd;
static ss_cmd commands[MAX_SS_CMDS];
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	70fb      	strb	r3, [r7, #3]
	return SS_VER;
 800401c:	2301      	movs	r3, #1
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <ss_num_commands>:

uint8_t ss_num_commands(uint8_t *x, uint8_t len)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	70fb      	strb	r3, [r7, #3]
    uint8_t ncmds = num_commands & 0xFF;
 8004034:	4b07      	ldr	r3, [pc, #28]	; (8004054 <ss_num_commands+0x2c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	73fb      	strb	r3, [r7, #15]
    simpleserial_put('r', 0x01, &ncmds);
 800403c:	f107 030f 	add.w	r3, r7, #15
 8004040:	461a      	mov	r2, r3
 8004042:	2101      	movs	r1, #1
 8004044:	2072      	movs	r0, #114	; 0x72
 8004046:	f000 fa53 	bl	80044f0 <simpleserial_put>
    return 0x00;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20002af4 	.word	0x20002af4

08004058 <ss_get_commands>:
    uint8_t len;
    uint8_t flags;
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b090      	sub	sp, #64	; 0x40
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8004064:	2300      	movs	r3, #0
 8004066:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800406a:	e03a      	b.n	80040e2 <ss_get_commands+0x8a>
        repr_cmd_buf[i].c = commands[i].c;
 800406c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004070:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004074:	4927      	ldr	r1, [pc, #156]	; (8004114 <ss_get_commands+0xbc>)
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	440b      	add	r3, r1
 800407a:	7819      	ldrb	r1, [r3, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	4413      	add	r3, r2
 8004082:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004086:	4413      	add	r3, r2
 8004088:	3b34      	subs	r3, #52	; 0x34
 800408a:	460a      	mov	r2, r1
 800408c:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].len = commands[i].len;
 800408e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004092:	4a20      	ldr	r2, [pc, #128]	; (8004114 <ss_get_commands+0xbc>)
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	4413      	add	r3, r2
 8004098:	3304      	adds	r3, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80040a0:	b2d9      	uxtb	r1, r3
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80040ac:	4413      	add	r3, r2
 80040ae:	3b33      	subs	r3, #51	; 0x33
 80040b0:	460a      	mov	r2, r1
 80040b2:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].flags = commands[i].flags;
 80040b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040b8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80040bc:	4915      	ldr	r1, [pc, #84]	; (8004114 <ss_get_commands+0xbc>)
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	440b      	add	r3, r1
 80040c2:	330c      	adds	r3, #12
 80040c4:	7819      	ldrb	r1, [r3, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80040d0:	4413      	add	r3, r2
 80040d2:	3b32      	subs	r3, #50	; 0x32
 80040d4:	460a      	mov	r2, r1
 80040d6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80040d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040dc:	3301      	adds	r3, #1
 80040de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80040e2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <ss_get_commands+0xc0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dbbd      	blt.n	800406c <ss_get_commands+0x14>
    }

    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <ss_get_commands+0xc0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	0052      	lsls	r2, r2, #1
 80040fa:	4413      	add	r3, r2
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f107 020c 	add.w	r2, r7, #12
 8004102:	4619      	mov	r1, r3
 8004104:	2072      	movs	r0, #114	; 0x72
 8004106:	f000 f9f3 	bl	80044f0 <simpleserial_put>
    return 0x00;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3740      	adds	r7, #64	; 0x40
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20002af8 	.word	0x20002af8
 8004118:	20002af4 	.word	0x20002af4

0800411c <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e083      	b.n	8004236 <hex_decode+0x11a>
	{
		char n_hi = ascii_buf[2*i];
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4413      	add	r3, r2
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	74fb      	strb	r3, [r7, #19]
		char n_lo = ascii_buf[2*i+1];
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	3301      	adds	r3, #1
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	4413      	add	r3, r2
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	74bb      	strb	r3, [r7, #18]

		if(n_lo >= '0' && n_lo <= '9')
 800414a:	7cbb      	ldrb	r3, [r7, #18]
 800414c:	2b2f      	cmp	r3, #47	; 0x2f
 800414e:	d90a      	bls.n	8004166 <hex_decode+0x4a>
 8004150:	7cbb      	ldrb	r3, [r7, #18]
 8004152:	2b39      	cmp	r3, #57	; 0x39
 8004154:	d807      	bhi.n	8004166 <hex_decode+0x4a>
			data_buf[i] = n_lo - '0';
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	7cba      	ldrb	r2, [r7, #18]
 800415e:	3a30      	subs	r2, #48	; 0x30
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	e01d      	b.n	80041a2 <hex_decode+0x86>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8004166:	7cbb      	ldrb	r3, [r7, #18]
 8004168:	2b40      	cmp	r3, #64	; 0x40
 800416a:	d90a      	bls.n	8004182 <hex_decode+0x66>
 800416c:	7cbb      	ldrb	r3, [r7, #18]
 800416e:	2b46      	cmp	r3, #70	; 0x46
 8004170:	d807      	bhi.n	8004182 <hex_decode+0x66>
			data_buf[i] = n_lo - 'A' + 10;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	7cba      	ldrb	r2, [r7, #18]
 800417a:	3a37      	subs	r2, #55	; 0x37
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e00f      	b.n	80041a2 <hex_decode+0x86>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8004182:	7cbb      	ldrb	r3, [r7, #18]
 8004184:	2b60      	cmp	r3, #96	; 0x60
 8004186:	d90a      	bls.n	800419e <hex_decode+0x82>
 8004188:	7cbb      	ldrb	r3, [r7, #18]
 800418a:	2b66      	cmp	r3, #102	; 0x66
 800418c:	d807      	bhi.n	800419e <hex_decode+0x82>
			data_buf[i] = n_lo - 'a' + 10;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	4413      	add	r3, r2
 8004194:	7cba      	ldrb	r2, [r7, #18]
 8004196:	3a57      	subs	r2, #87	; 0x57
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	e001      	b.n	80041a2 <hex_decode+0x86>
		else
			return 1;
 800419e:	2301      	movs	r3, #1
 80041a0:	e04f      	b.n	8004242 <hex_decode+0x126>

		if(n_hi >= '0' && n_hi <= '9')
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	2b2f      	cmp	r3, #47	; 0x2f
 80041a6:	d913      	bls.n	80041d0 <hex_decode+0xb4>
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	2b39      	cmp	r3, #57	; 0x39
 80041ac:	d810      	bhi.n	80041d0 <hex_decode+0xb4>
			data_buf[i] |= (n_hi - '0') << 4;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	4413      	add	r3, r2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	b25a      	sxtb	r2, r3
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	3b30      	subs	r3, #48	; 0x30
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	b25b      	sxtb	r3, r3
 80041c0:	4313      	orrs	r3, r2
 80041c2:	b259      	sxtb	r1, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	b2ca      	uxtb	r2, r1
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e02f      	b.n	8004230 <hex_decode+0x114>
		else if(n_hi >= 'A' && n_hi <= 'F')
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d913      	bls.n	80041fe <hex_decode+0xe2>
 80041d6:	7cfb      	ldrb	r3, [r7, #19]
 80041d8:	2b46      	cmp	r3, #70	; 0x46
 80041da:	d810      	bhi.n	80041fe <hex_decode+0xe2>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b25a      	sxtb	r2, r3
 80041e6:	7cfb      	ldrb	r3, [r7, #19]
 80041e8:	3b37      	subs	r3, #55	; 0x37
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	b25b      	sxtb	r3, r3
 80041ee:	4313      	orrs	r3, r2
 80041f0:	b259      	sxtb	r1, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4413      	add	r3, r2
 80041f8:	b2ca      	uxtb	r2, r1
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	e018      	b.n	8004230 <hex_decode+0x114>
		else if(n_hi >= 'a' && n_hi <= 'f')
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b60      	cmp	r3, #96	; 0x60
 8004202:	d913      	bls.n	800422c <hex_decode+0x110>
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	2b66      	cmp	r3, #102	; 0x66
 8004208:	d810      	bhi.n	800422c <hex_decode+0x110>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4413      	add	r3, r2
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b25a      	sxtb	r2, r3
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	3b57      	subs	r3, #87	; 0x57
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	b25b      	sxtb	r3, r3
 800421c:	4313      	orrs	r3, r2
 800421e:	b259      	sxtb	r1, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	b2ca      	uxtb	r2, r1
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	e001      	b.n	8004230 <hex_decode+0x114>
		else
			return 1;
 800422c:	2301      	movs	r3, #1
 800422e:	e008      	b.n	8004242 <hex_decode+0x126>
	for(int i = 0; i < len; i++)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	3301      	adds	r3, #1
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	429a      	cmp	r2, r3
 800423c:	f6ff af77 	blt.w	800412e <hex_decode+0x12>
	}

	return 0;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <simpleserial_init>:


// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 8004250:	4a08      	ldr	r2, [pc, #32]	; (8004274 <simpleserial_init+0x28>)
 8004252:	2100      	movs	r1, #0
 8004254:	2076      	movs	r0, #118	; 0x76
 8004256:	f000 f813 	bl	8004280 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 800425a:	4a07      	ldr	r2, [pc, #28]	; (8004278 <simpleserial_init+0x2c>)
 800425c:	2100      	movs	r1, #0
 800425e:	2077      	movs	r0, #119	; 0x77
 8004260:	f000 f80e 	bl	8004280 <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 8004264:	4a05      	ldr	r2, [pc, #20]	; (800427c <simpleserial_init+0x30>)
 8004266:	2100      	movs	r1, #0
 8004268:	2079      	movs	r0, #121	; 0x79
 800426a:	f000 f809 	bl	8004280 <simpleserial_addcmd>
}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	08004011 	.word	0x08004011
 8004278:	08004059 	.word	0x08004059
 800427c:	08004029 	.word	0x08004029

08004280 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	73fb      	strb	r3, [r7, #15]
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 800428e:	7bf8      	ldrb	r0, [r7, #15]
 8004290:	2300      	movs	r3, #0
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	f000 f805 	bl	80042a4 <simpleserial_addcmd_flags>
 800429a:	4603      	mov	r3, r0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <simpleserial_addcmd_flags>:

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	461a      	mov	r2, r3
 80042b0:	4603      	mov	r3, r0
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	4613      	mov	r3, r2
 80042b6:	73bb      	strb	r3, [r7, #14]
	if(num_commands >= MAX_SS_CMDS)
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <simpleserial_addcmd_flags+0x80>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b0f      	cmp	r3, #15
 80042be:	dd01      	ble.n	80042c4 <simpleserial_addcmd_flags+0x20>
		return 1;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e029      	b.n	8004318 <simpleserial_addcmd_flags+0x74>

	if(len >= MAX_SS_LEN)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2bff      	cmp	r3, #255	; 0xff
 80042c8:	d901      	bls.n	80042ce <simpleserial_addcmd_flags+0x2a>
		return 1;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e024      	b.n	8004318 <simpleserial_addcmd_flags+0x74>

	commands[num_commands].c   = c;
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <simpleserial_addcmd_flags+0x80>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <simpleserial_addcmd_flags+0x84>)
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	4413      	add	r3, r2
 80042d8:	7bfa      	ldrb	r2, [r7, #15]
 80042da:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <simpleserial_addcmd_flags+0x80>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a11      	ldr	r2, [pc, #68]	; (8004328 <simpleserial_addcmd_flags+0x84>)
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	4413      	add	r3, r2
 80042e6:	3304      	adds	r3, #4
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 80042ec:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <simpleserial_addcmd_flags+0x80>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0d      	ldr	r2, [pc, #52]	; (8004328 <simpleserial_addcmd_flags+0x84>)
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	4413      	add	r3, r2
 80042f6:	3308      	adds	r3, #8
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	601a      	str	r2, [r3, #0]
	commands[num_commands].flags = fl;
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <simpleserial_addcmd_flags+0x80>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a09      	ldr	r2, [pc, #36]	; (8004328 <simpleserial_addcmd_flags+0x84>)
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	4413      	add	r3, r2
 8004306:	330c      	adds	r3, #12
 8004308:	7bba      	ldrb	r2, [r7, #14]
 800430a:	701a      	strb	r2, [r3, #0]
	num_commands++;
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <simpleserial_addcmd_flags+0x80>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3301      	adds	r3, #1
 8004312:	4a04      	ldr	r2, [pc, #16]	; (8004324 <simpleserial_addcmd_flags+0x80>)
 8004314:	6013      	str	r3, [r2, #0]

	return 0;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20002af4 	.word	0x20002af4
 8004328:	20002af8 	.word	0x20002af8

0800432c <simpleserial_get>:

void simpleserial_get(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8004332:	af00      	add	r7, sp, #0
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 8004334:	f000 f9f8 	bl	8004728 <getch>
 8004338:	4603      	mov	r3, r0
 800433a:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8004344:	e00e      	b.n	8004364 <simpleserial_get+0x38>
	{
		if(commands[cmd].c == c)
 8004346:	4a68      	ldr	r2, [pc, #416]	; (80044e8 <simpleserial_get+0x1bc>)
 8004348:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	4413      	add	r3, r2
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 8004356:	429a      	cmp	r2, r3
 8004358:	d00b      	beq.n	8004372 <simpleserial_get+0x46>
	for(cmd = 0; cmd < num_commands; cmd++)
 800435a:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800435e:	3301      	adds	r3, #1
 8004360:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8004364:	4b61      	ldr	r3, [pc, #388]	; (80044ec <simpleserial_get+0x1c0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 800436c:	429a      	cmp	r2, r3
 800436e:	dbea      	blt.n	8004346 <simpleserial_get+0x1a>
 8004370:	e000      	b.n	8004374 <simpleserial_get+0x48>
			break;
 8004372:	bf00      	nop
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 8004374:	4b5d      	ldr	r3, [pc, #372]	; (80044ec <simpleserial_get+0x1c0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 800437c:	429a      	cmp	r2, r3
 800437e:	f000 80a6 	beq.w	80044ce <simpleserial_get+0x1a2>
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8004382:	4a59      	ldr	r2, [pc, #356]	; (80044e8 <simpleserial_get+0x1bc>)
 8004384:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	4413      	add	r3, r2
 800438c:	330c      	adds	r3, #12
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02d      	beq.n	80043f4 <simpleserial_get+0xc8>
	{
		uint8_t l = 0;
 8004398:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800439c:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
		char buff[2];
		buff[0] = getch();
 80043a4:	f000 f9c0 	bl	8004728 <getch>
 80043a8:	4603      	mov	r3, r0
 80043aa:	461a      	mov	r2, r3
 80043ac:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80043b0:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80043b4:	701a      	strb	r2, [r3, #0]
		buff[1] = getch();
 80043b6:	f000 f9b7 	bl	8004728 <getch>
 80043ba:	4603      	mov	r3, r0
 80043bc:	461a      	mov	r2, r3
 80043be:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80043c2:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80043c6:	705a      	strb	r2, [r3, #1]
		if (hex_decode(1, buff, &l))
 80043c8:	1dfa      	adds	r2, r7, #7
 80043ca:	1d3b      	adds	r3, r7, #4
 80043cc:	4619      	mov	r1, r3
 80043ce:	2001      	movs	r0, #1
 80043d0:	f7ff fea4 	bl	800411c <hex_decode>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d17b      	bne.n	80044d2 <simpleserial_get+0x1a6>
			return;
		commands[cmd].len = l;
 80043da:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80043de:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	4619      	mov	r1, r3
 80043e6:	4a40      	ldr	r2, [pc, #256]	; (80044e8 <simpleserial_get+0x1bc>)
 80043e8:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	4413      	add	r3, r2
 80043f0:	3304      	adds	r3, #4
 80043f2:	6019      	str	r1, [r3, #0]
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80043fa:	e01b      	b.n	8004434 <simpleserial_get+0x108>
	{
		c = getch();
 80043fc:	f000 f994 	bl	8004728 <getch>
 8004400:	4603      	mov	r3, r0
 8004402:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

		// Check for early \n
		if(c == '\n' || c == '\r')
 8004406:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800440a:	2b0a      	cmp	r3, #10
 800440c:	d063      	beq.n	80044d6 <simpleserial_get+0x1aa>
 800440e:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8004412:	2b0d      	cmp	r3, #13
 8004414:	d05f      	beq.n	80044d6 <simpleserial_get+0x1aa>
			return;

		ascii_buf[i] = c;
 8004416:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800441a:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800441e:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8004422:	4413      	add	r3, r2
 8004424:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 8004428:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 800442a:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800442e:	3301      	adds	r3, #1
 8004430:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8004434:	4a2c      	ldr	r2, [pc, #176]	; (80044e8 <simpleserial_get+0x1bc>)
 8004436:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	4413      	add	r3, r2
 800443e:	3304      	adds	r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	005a      	lsls	r2, r3, #1
 8004444:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8004448:	429a      	cmp	r2, r3
 800444a:	d8d7      	bhi.n	80043fc <simpleserial_get+0xd0>
	}

	// Assert that last character is \n or \r
	c = getch();
 800444c:	f000 f96c 	bl	8004728 <getch>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
	if(c != '\n' && c != '\r')
 8004456:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800445a:	2b0a      	cmp	r3, #10
 800445c:	d003      	beq.n	8004466 <simpleserial_get+0x13a>
 800445e:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8004462:	2b0d      	cmp	r3, #13
 8004464:	d139      	bne.n	80044da <simpleserial_get+0x1ae>
		return;

	// ASCII buffer is full: convert to bytes
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8004466:	4a20      	ldr	r2, [pc, #128]	; (80044e8 <simpleserial_get+0x1bc>)
 8004468:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	4413      	add	r3, r2
 8004470:	3304      	adds	r3, #4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f107 020c 	add.w	r2, r7, #12
 800447a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800447e:	4619      	mov	r1, r3
 8004480:	f7ff fe4c 	bl	800411c <hex_decode>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d129      	bne.n	80044de <simpleserial_get+0x1b2>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <simpleserial_get+0x1bc>)
 800448c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	4413      	add	r3, r2
 8004494:	3308      	adds	r3, #8
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4913      	ldr	r1, [pc, #76]	; (80044e8 <simpleserial_get+0x1bc>)
 800449a:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 800449e:	0112      	lsls	r2, r2, #4
 80044a0:	440a      	add	r2, r1
 80044a2:	3204      	adds	r2, #4
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	b2d1      	uxtb	r1, r2
 80044a8:	f107 020c 	add.w	r2, r7, #12
 80044ac:	4610      	mov	r0, r2
 80044ae:	4798      	blx	r3
 80044b0:	4603      	mov	r3, r0
 80044b2:	461a      	mov	r2, r3
 80044b4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80044b8:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80044bc:	701a      	strb	r2, [r3, #0]

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 80044be:	f107 0308 	add.w	r3, r7, #8
 80044c2:	461a      	mov	r2, r3
 80044c4:	2101      	movs	r1, #1
 80044c6:	207a      	movs	r0, #122	; 0x7a
 80044c8:	f000 f812 	bl	80044f0 <simpleserial_put>
 80044cc:	e008      	b.n	80044e0 <simpleserial_get+0x1b4>
		return;
 80044ce:	bf00      	nop
 80044d0:	e006      	b.n	80044e0 <simpleserial_get+0x1b4>
			return;
 80044d2:	bf00      	nop
 80044d4:	e004      	b.n	80044e0 <simpleserial_get+0x1b4>
			return;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <simpleserial_get+0x1b4>
		return;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <simpleserial_get+0x1b4>
		return;
 80044de:	bf00      	nop
#endif
}
 80044e0:	f507 7746 	add.w	r7, r7, #792	; 0x318
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20002af8 	.word	0x20002af8
 80044ec:	20002af4 	.word	0x20002af4

080044f0 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	603a      	str	r2, [r7, #0]
 80044fa:	71fb      	strb	r3, [r7, #7]
 80044fc:	460b      	mov	r3, r1
 80044fe:	71bb      	strb	r3, [r7, #6]
	// Write first character
	putch(c);
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f926 	bl	8004754 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e019      	b.n	8004542 <simpleserial_put+0x52>
	{
		putch(hex_lookup[output[i] >> 4 ]);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	4413      	add	r3, r2
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	b2db      	uxtb	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <simpleserial_put+0x68>)
 800451e:	5c9b      	ldrb	r3, [r3, r2]
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f917 	bl	8004754 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	4a09      	ldr	r2, [pc, #36]	; (8004558 <simpleserial_put+0x68>)
 8004534:	5cd3      	ldrb	r3, [r2, r3]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f90c 	bl	8004754 <putch>
	for(int i = 0; i < size; i++)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3301      	adds	r3, #1
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	79bb      	ldrb	r3, [r7, #6]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	429a      	cmp	r2, r3
 8004548:	dbe1      	blt.n	800450e <simpleserial_put+0x1e>
	}

	// Write trailing '\n'
	putch('\n');
 800454a:	200a      	movs	r0, #10
 800454c:	f000 f902 	bl	8004754 <putch>
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000000 	.word	0x20000000

0800455c <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b092      	sub	sp, #72	; 0x48
 8004560:	af00      	add	r7, sp, #0
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_5WS);
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8004562:	2303      	movs	r3, #3
 8004564:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8004566:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800456a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 800456c:	2301      	movs	r3, #1
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
 8004570:	2302      	movs	r3, #2
 8004572:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8004574:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004578:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
 800457a:	230c      	movs	r3, #12
 800457c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN       = 196;
 800457e:	23c4      	movs	r3, #196	; 0xc4
 8004580:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
 8004582:	2304      	movs	r3, #4
 8004584:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 8004586:	2307      	movs	r3, #7
 8004588:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800458a:	f107 0318 	add.w	r3, r7, #24
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f904 	bl	800479c <HAL_RCC_OscConfig>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d000      	beq.n	800459c <platform_init+0x40>
        for(;;);
 800459a:	e7fe      	b.n	800459a <platform_init+0x3e>
    }

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800459c:	230f      	movs	r3, #15
 800459e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80045a0:	2301      	movs	r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 80045b0:	1d3b      	adds	r3, r7, #4
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fb53 	bl	8004c60 <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <platform_init+0x94>)
 80045c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c2:	4a0b      	ldr	r2, [pc, #44]	; (80045f0 <platform_init+0x94>)
 80045c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c8:	6353      	str	r3, [r2, #52]	; 0x34
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <platform_init+0x94>)
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
	RngHandle.Instance = RNG;
 80045d6:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <platform_init+0x98>)
 80045d8:	4a07      	ldr	r2, [pc, #28]	; (80045f8 <platform_init+0x9c>)
 80045da:	601a      	str	r2, [r3, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <platform_init+0x98>)
 80045de:	2200      	movs	r2, #0
 80045e0:	715a      	strb	r2, [r3, #5]
	HAL_RNG_Init(&RngHandle);
 80045e2:	4804      	ldr	r0, [pc, #16]	; (80045f4 <platform_init+0x98>)
 80045e4:	f001 f99e 	bl	8005924 <HAL_RNG_Init>

}
 80045e8:	bf00      	nop
 80045ea:	3748      	adds	r7, #72	; 0x48
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	20002bf8 	.word	0x20002bf8
 80045f8:	50060800 	.word	0x50060800

080045fc <init_uart>:

void init_uart(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8004602:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004606:	60fb      	str	r3, [r7, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8004608:	2302      	movs	r3, #2
 800460a:	613b      	str	r3, [r7, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 800460c:	2301      	movs	r3, #1
 800460e:	617b      	str	r3, [r7, #20]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004610:	2302      	movs	r3, #2
 8004612:	61bb      	str	r3, [r7, #24]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8004614:	2307      	movs	r3, #7
 8004616:	61fb      	str	r3, [r7, #28]
	__GPIOA_CLK_ENABLE();
 8004618:	2300      	movs	r3, #0
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <init_uart+0x9c>)
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <init_uart+0x9c>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6313      	str	r3, [r2, #48]	; 0x30
 8004628:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <init_uart+0x9c>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8004634:	f107 030c 	add.w	r3, r7, #12
 8004638:	4619      	mov	r1, r3
 800463a:	4818      	ldr	r0, [pc, #96]	; (800469c <init_uart+0xa0>)
 800463c:	f000 fc18 	bl	8004e70 <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <init_uart+0xa4>)
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <init_uart+0xa8>)
 8004644:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8004646:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <init_uart+0xa4>)
 8004648:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800464c:	605a      	str	r2, [r3, #4]
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <init_uart+0xa4>)
 8004650:	2200      	movs	r2, #0
 8004652:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8004654:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <init_uart+0xa4>)
 8004656:	2200      	movs	r2, #0
 8004658:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <init_uart+0xa4>)
 800465c:	2200      	movs	r2, #0
 800465e:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <init_uart+0xa4>)
 8004662:	2200      	movs	r2, #0
 8004664:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8004666:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <init_uart+0xa4>)
 8004668:	220c      	movs	r2, #12
 800466a:	615a      	str	r2, [r3, #20]
	__USART1_CLK_ENABLE();
 800466c:	2300      	movs	r3, #0
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <init_uart+0x9c>)
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	4a08      	ldr	r2, [pc, #32]	; (8004698 <init_uart+0x9c>)
 8004676:	f043 0310 	orr.w	r3, r3, #16
 800467a:	6453      	str	r3, [r2, #68]	; 0x44
 800467c:	4b06      	ldr	r3, [pc, #24]	; (8004698 <init_uart+0x9c>)
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
	HAL_UART_Init(&UartHandle);
 8004688:	4805      	ldr	r0, [pc, #20]	; (80046a0 <init_uart+0xa4>)
 800468a:	f000 ffbf 	bl	800560c <HAL_UART_Init>
}
 800468e:	bf00      	nop
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
 800469c:	40020000 	.word	0x40020000
 80046a0:	20002c04 	.word	0x20002c04
 80046a4:	40011000 	.word	0x40011000

080046a8 <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <trigger_setup+0x48>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	4a0e      	ldr	r2, [pc, #56]	; (80046f0 <trigger_setup+0x48>)
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	6313      	str	r3, [r2, #48]	; 0x30
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <trigger_setup+0x48>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
    __GPIOD_CLK_ENABLE();
    HAL_GPIO_Init(GPIOD, &GpioInit);
#else
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
 80046ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046ce:	607b      	str	r3, [r7, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80046d0:	2301      	movs	r3, #1
 80046d2:	60bb      	str	r3, [r7, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80046d8:	2302      	movs	r3, #2
 80046da:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80046dc:	1d3b      	adds	r3, r7, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	4804      	ldr	r0, [pc, #16]	; (80046f4 <trigger_setup+0x4c>)
 80046e2:	f000 fbc5 	bl	8004e70 <HAL_GPIO_Init>
#endif
}
 80046e6:	bf00      	nop
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40020000 	.word	0x40020000

080046f8 <trigger_high>:
void trigger_high(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80046fc:	2201      	movs	r2, #1
 80046fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004702:	4802      	ldr	r0, [pc, #8]	; (800470c <trigger_high+0x14>)
 8004704:	f000 fd4e 	bl	80051a4 <HAL_GPIO_WritePin>
#endif
}
 8004708:	bf00      	nop
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40020000 	.word	0x40020000

08004710 <trigger_low>:

void trigger_low(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8004714:	2200      	movs	r2, #0
 8004716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800471a:	4802      	ldr	r0, [pc, #8]	; (8004724 <trigger_low+0x14>)
 800471c:	f000 fd42 	bl	80051a4 <HAL_GPIO_WritePin>
#endif
}
 8004720:	bf00      	nop
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40020000 	.word	0x40020000

08004728 <getch>:
char getch(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 800472e:	bf00      	nop
 8004730:	1df9      	adds	r1, r7, #7
 8004732:	f241 3388 	movw	r3, #5000	; 0x1388
 8004736:	2201      	movs	r2, #1
 8004738:	4805      	ldr	r0, [pc, #20]	; (8004750 <getch+0x28>)
 800473a:	f001 f858 	bl	80057ee <HAL_UART_Receive>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f5      	bne.n	8004730 <getch+0x8>
	return d;
 8004744:	79fb      	ldrb	r3, [r7, #7]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20002c04 	.word	0x20002c04

08004754 <putch>:

void putch(char c)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	71fb      	strb	r3, [r7, #7]
	uint8_t d  = c;
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8004762:	f107 010f 	add.w	r1, r7, #15
 8004766:	f241 3388 	movw	r3, #5000	; 0x1388
 800476a:	2201      	movs	r2, #1
 800476c:	4803      	ldr	r0, [pc, #12]	; (800477c <putch+0x28>)
 800476e:	f000 ffb4 	bl	80056da <HAL_UART_Transmit>
}
 8004772:	bf00      	nop
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20002c04 	.word	0x20002c04

08004780 <HAL_GetTick>:

#define CLOCKSWITCH_TIMEOUT_VALUE  5000U /* 5 s */


uint32_t HAL_GetTick(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
	static uint32_t tick;
	return tick++;;
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <HAL_GetTick+0x18>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	4903      	ldr	r1, [pc, #12]	; (8004798 <HAL_GetTick+0x18>)
 800478c:	600a      	str	r2, [r1, #0]
}
 800478e:	4618      	mov	r0, r3
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20002c94 	.word	0x20002c94

0800479c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08e      	sub	sp, #56	; 0x38
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d077      	beq.n	80048a4 <HAL_RCC_OscConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b4:	4b93      	ldr	r3, [pc, #588]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 030c 	and.w	r3, r3, #12
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d00c      	beq.n	80047da <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c0:	4b90      	ldr	r3, [pc, #576]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d112      	bne.n	80047f2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047cc:	4b8d      	ldr	r3, [pc, #564]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d8:	d10b      	bne.n	80047f2 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047da:	4b8a      	ldr	r3, [pc, #552]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d05d      	beq.n	80048a2 <HAL_RCC_OscConfig+0x106>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d159      	bne.n	80048a2 <HAL_RCC_OscConfig+0x106>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e22a      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fa:	d106      	bne.n	800480a <HAL_RCC_OscConfig+0x6e>
 80047fc:	4b81      	ldr	r3, [pc, #516]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a80      	ldr	r2, [pc, #512]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 8004802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	e01d      	b.n	8004846 <HAL_RCC_OscConfig+0xaa>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004812:	d10c      	bne.n	800482e <HAL_RCC_OscConfig+0x92>
 8004814:	4b7b      	ldr	r3, [pc, #492]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a7a      	ldr	r2, [pc, #488]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 800481a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	4b78      	ldr	r3, [pc, #480]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a77      	ldr	r2, [pc, #476]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 8004826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	e00b      	b.n	8004846 <HAL_RCC_OscConfig+0xaa>
 800482e:	4b75      	ldr	r3, [pc, #468]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a74      	ldr	r2, [pc, #464]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 8004834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	4b72      	ldr	r3, [pc, #456]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a71      	ldr	r2, [pc, #452]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 8004840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004844:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d014      	beq.n	8004878 <HAL_RCC_OscConfig+0xdc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7ff ff97 	bl	8004780 <HAL_GetTick>
 8004852:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004854:	e009      	b.n	800486a <HAL_RCC_OscConfig+0xce>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004856:	f7ff ff93 	bl	8004780 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	4a69      	ldr	r2, [pc, #420]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e1ee      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486a:	4b66      	ldr	r3, [pc, #408]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0ef      	beq.n	8004856 <HAL_RCC_OscConfig+0xba>
 8004876:	e015      	b.n	80048a4 <HAL_RCC_OscConfig+0x108>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7ff ff82 	bl	8004780 <HAL_GetTick>
 800487c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487e:	e009      	b.n	8004894 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004880:	f7ff ff7e 	bl	8004780 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	4a5f      	ldr	r2, [pc, #380]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e1d9      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004894:	4b5b      	ldr	r3, [pc, #364]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ef      	bne.n	8004880 <HAL_RCC_OscConfig+0xe4>
 80048a0:	e000      	b.n	80048a4 <HAL_RCC_OscConfig+0x108>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d077      	beq.n	80049a0 <HAL_RCC_OscConfig+0x204>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048b0:	4b54      	ldr	r3, [pc, #336]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00b      	beq.n	80048d4 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048bc:	4b51      	ldr	r3, [pc, #324]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d126      	bne.n	8004916 <HAL_RCC_OscConfig+0x17a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048c8:	4b4e      	ldr	r3, [pc, #312]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d120      	bne.n	8004916 <HAL_RCC_OscConfig+0x17a>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d4:	4b4b      	ldr	r3, [pc, #300]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_OscConfig+0x150>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x150>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e1ad      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ec:	4b45      	ldr	r3, [pc, #276]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6919      	ldr	r1, [r3, #16]
 80048f8:	23f8      	movs	r3, #248	; 0xf8
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	493d      	ldr	r1, [pc, #244]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004914:	e044      	b.n	80049a0 <HAL_RCC_OscConfig+0x204>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d02a      	beq.n	8004974 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800491e:	4b3b      	ldr	r3, [pc, #236]	; (8004a0c <HAL_RCC_OscConfig+0x270>)
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7ff ff2c 	bl	8004780 <HAL_GetTick>
 8004928:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800492c:	f7ff ff28 	bl	8004780 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x1a2>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e184      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493e:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x190>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494a:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6919      	ldr	r1, [r3, #16]
 8004956:	23f8      	movs	r3, #248	; 0xf8
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	fa93 f3a3 	rbit	r3, r3
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	fab3 f383 	clz	r3, r3
 8004968:	fa01 f303 	lsl.w	r3, r1, r3
 800496c:	4925      	ldr	r1, [pc, #148]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
 8004972:	e015      	b.n	80049a0 <HAL_RCC_OscConfig+0x204>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <HAL_RCC_OscConfig+0x270>)
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7ff ff01 	bl	8004780 <HAL_GetTick>
 800497e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004982:	f7ff fefd 	bl	8004780 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e159      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0x1e6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d039      	beq.n	8004a20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d016      	beq.n	80049e2 <HAL_RCC_OscConfig+0x246>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b4:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ba:	f7ff fee1 	bl	8004780 <HAL_GetTick>
 80049be:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x238>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c2:	f7ff fedd 	bl	8004780 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x238>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e139      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d4:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_RCC_OscConfig+0x268>)
 80049d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0f0      	beq.n	80049c2 <HAL_RCC_OscConfig+0x226>
 80049e0:	e01e      	b.n	8004a20 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e8:	f7ff feca 	bl	8004780 <HAL_GetTick>
 80049ec:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ee:	e011      	b.n	8004a14 <HAL_RCC_OscConfig+0x278>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f0:	f7ff fec6 	bl	8004780 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d90a      	bls.n	8004a14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e122      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800
 8004a08:	05f5e100 	.word	0x05f5e100
 8004a0c:	42470000 	.word	0x42470000
 8004a10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a14:	4b8e      	ldr	r3, [pc, #568]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e7      	bne.n	80049f0 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d07d      	beq.n	8004b28 <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	4b87      	ldr	r3, [pc, #540]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	4a86      	ldr	r2, [pc, #536]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3c:	4b84      	ldr	r3, [pc, #528]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a48:	4b82      	ldr	r3, [pc, #520]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a81      	ldr	r2, [pc, #516]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8004a54:	f7ff fe94 	bl	8004780 <HAL_GetTick>
 8004a58:	6378      	str	r0, [r7, #52]	; 0x34

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x2d2>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a5c:	f7ff fe90 	bl	8004780 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x2d2>
      {
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e0ec      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a6e:	4b79      	ldr	r3, [pc, #484]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x2c0>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d106      	bne.n	8004a90 <HAL_RCC_OscConfig+0x2f4>
 8004a82:	4b73      	ldr	r3, [pc, #460]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a72      	ldr	r2, [pc, #456]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	e01c      	b.n	8004aca <HAL_RCC_OscConfig+0x32e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x316>
 8004a98:	4b6d      	ldr	r3, [pc, #436]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	4a6c      	ldr	r2, [pc, #432]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa4:	4b6a      	ldr	r3, [pc, #424]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	4a69      	ldr	r2, [pc, #420]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab0:	e00b      	b.n	8004aca <HAL_RCC_OscConfig+0x32e>
 8004ab2:	4b67      	ldr	r3, [pc, #412]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	4a66      	ldr	r2, [pc, #408]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6713      	str	r3, [r2, #112]	; 0x70
 8004abe:	4b64      	ldr	r3, [pc, #400]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac2:	4a63      	ldr	r2, [pc, #396]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004ac4:	f023 0304 	bic.w	r3, r3, #4
 8004ac8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d015      	beq.n	8004afe <HAL_RCC_OscConfig+0x362>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad2:	f7ff fe55 	bl	8004780 <HAL_GetTick>
 8004ad6:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x354>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7ff fe51 	bl	8004780 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0ab      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af0:	4b57      	ldr	r3, [pc, #348]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ee      	beq.n	8004ada <HAL_RCC_OscConfig+0x33e>
 8004afc:	e014      	b.n	8004b28 <HAL_RCC_OscConfig+0x38c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afe:	f7ff fe3f 	bl	8004780 <HAL_GetTick>
 8004b02:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x380>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7ff fe3b 	bl	8004780 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e095      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1c:	4b4c      	ldr	r3, [pc, #304]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ee      	bne.n	8004b06 <HAL_RCC_OscConfig+0x36a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 808a 	beq.w	8004c46 <HAL_RCC_OscConfig+0x4aa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b32:	4b47      	ldr	r3, [pc, #284]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	f000 8081 	beq.w	8004c42 <HAL_RCC_OscConfig+0x4a6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d164      	bne.n	8004c12 <HAL_RCC_OscConfig+0x476>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b48:	4b43      	ldr	r3, [pc, #268]	; (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4e:	f7ff fe17 	bl	8004780 <HAL_GetTick>
 8004b52:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b54:	e009      	b.n	8004b6a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b56:	f7ff fe13 	bl	8004780 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	4a3e      	ldr	r2, [pc, #248]	; (8004c5c <HAL_RCC_OscConfig+0x4c0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e06e      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	4b39      	ldr	r3, [pc, #228]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ef      	bne.n	8004b56 <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	fa93 f3a3 	rbit	r3, r3
 8004b90:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	fab3 f383 	clz	r3, r3
 8004b98:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	1e59      	subs	r1, r3, #1
 8004ba6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004baa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	fa93 f3a3 	rbit	r3, r3
 8004bb2:	617b      	str	r3, [r7, #20]
  return(result);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	fab3 f383 	clz	r3, r3
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bc4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	fab3 f383 	clz	r3, r3
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	491c      	ldr	r1, [pc, #112]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be2:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7ff fdca 	bl	8004780 <HAL_GetTick>
 8004bec:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bee:	e009      	b.n	8004c04 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7ff fdc6 	bl	8004780 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	4a18      	ldr	r2, [pc, #96]	; (8004c5c <HAL_RCC_OscConfig+0x4c0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e021      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c04:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ef      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x454>
 8004c10:	e019      	b.n	8004c46 <HAL_RCC_OscConfig+0x4aa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c12:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7ff fdb2 	bl	8004780 <HAL_GetTick>
 8004c1c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1e:	e009      	b.n	8004c34 <HAL_RCC_OscConfig+0x498>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c20:	f7ff fdae 	bl	8004780 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	4a0c      	ldr	r2, [pc, #48]	; (8004c5c <HAL_RCC_OscConfig+0x4c0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x498>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e009      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1ef      	bne.n	8004c20 <HAL_RCC_OscConfig+0x484>
 8004c40:	e001      	b.n	8004c46 <HAL_RCC_OscConfig+0x4aa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ac>
    }
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3738      	adds	r7, #56	; 0x38
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40007000 	.word	0x40007000
 8004c58:	42470060 	.word	0x42470060
 8004c5c:	001e8480 	.word	0x001e8480

08004c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004c6e:	4b74      	ldr	r3, [pc, #464]	; (8004e40 <HAL_RCC_ClockConfig+0x1e0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d90c      	bls.n	8004c96 <HAL_RCC_ClockConfig+0x36>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7c:	4b70      	ldr	r3, [pc, #448]	; (8004e40 <HAL_RCC_ClockConfig+0x1e0>)
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c84:	4b6e      	ldr	r3, [pc, #440]	; (8004e40 <HAL_RCC_ClockConfig+0x1e0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e0cf      	b.n	8004e36 <HAL_RCC_ClockConfig+0x1d6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d008      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca2:	4b68      	ldr	r3, [pc, #416]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	4965      	ldr	r1, [pc, #404]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 8086 	beq.w	8004dce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b5e      	ldr	r3, [pc, #376]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d119      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0ad      	b.n	8004e36 <HAL_RCC_ClockConfig+0x1d6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d003      	beq.n	8004cea <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	4b56      	ldr	r3, [pc, #344]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e09d      	b.n	8004e36 <HAL_RCC_ClockConfig+0x1d6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfa:	4b52      	ldr	r3, [pc, #328]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e095      	b.n	8004e36 <HAL_RCC_ClockConfig+0x1d6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0a:	4b4e      	ldr	r3, [pc, #312]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f023 0203 	bic.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	494b      	ldr	r1, [pc, #300]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1c:	f7ff fd30 	bl	8004780 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d112      	bne.n	8004d50 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d2a:	e00a      	b.n	8004d42 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2c:	f7ff fd28 	bl	8004780 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e079      	b.n	8004e36 <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d42:	4b40      	ldr	r3, [pc, #256]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d1ee      	bne.n	8004d2c <HAL_RCC_ClockConfig+0xcc>
 8004d4e:	e03e      	b.n	8004dce <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d112      	bne.n	8004d7e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d58:	e00a      	b.n	8004d70 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d5a:	f7ff fd11 	bl	8004780 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e062      	b.n	8004e36 <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d70:	4b34      	ldr	r3, [pc, #208]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d1ee      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xfa>
 8004d7c:	e027      	b.n	8004dce <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d11d      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d88:	f7ff fcfa 	bl	8004780 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e04b      	b.n	8004e36 <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004d9e:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b0c      	cmp	r3, #12
 8004da8:	d1ee      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x128>
 8004daa:	e010      	b.n	8004dce <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dac:	f7ff fce8 	bl	8004780 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e039      	b.n	8004e36 <HAL_RCC_ClockConfig+0x1d6>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dc2:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1ee      	bne.n	8004dac <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004dce:	4b1c      	ldr	r3, [pc, #112]	; (8004e40 <HAL_RCC_ClockConfig+0x1e0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d20c      	bcs.n	8004df6 <HAL_RCC_ClockConfig+0x196>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ddc:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <HAL_RCC_ClockConfig+0x1e0>)
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004de4:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <HAL_RCC_ClockConfig+0x1e0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e01f      	b.n	8004e36 <HAL_RCC_ClockConfig+0x1d6>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	490d      	ldr	r1, [pc, #52]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d009      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e20:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4905      	ldr	r1, [pc, #20]	; (8004e44 <HAL_RCC_ClockConfig+0x1e4>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40023c00 	.word	0x40023c00
 8004e44:	40023800 	.word	0x40023800

08004e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
  return 7.37E6;
 8004e4c:	4b02      	ldr	r3, [pc, #8]	; (8004e58 <HAL_RCC_GetPCLK1Freq+0x10>)
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	00707510 	.word	0x00707510

08004e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return 7.37E6;
 8004e60:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <HAL_RCC_GetPCLK2Freq+0x10>)
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	00707510 	.word	0x00707510

08004e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	e16b      	b.n	8005164 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	f040 815a 	bne.w	800515e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_Init+0x4a>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b12      	cmp	r3, #18
 8004eb8:	d123      	bne.n	8004f02 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	08da      	lsrs	r2, r3, #3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3208      	adds	r2, #8
 8004ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	220f      	movs	r2, #15
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	08da      	lsrs	r2, r3, #3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3208      	adds	r2, #8
 8004efc:	69b9      	ldr	r1, [r7, #24]
 8004efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0203 	and.w	r2, r3, #3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d00b      	beq.n	8004f56 <HAL_GPIO_Init+0xe6>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d007      	beq.n	8004f56 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f4a:	2b11      	cmp	r3, #17
 8004f4c:	d003      	beq.n	8004f56 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b12      	cmp	r3, #18
 8004f54:	d130      	bne.n	8004fb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	2203      	movs	r2, #3
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	43db      	mvns	r3, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 0201 	and.w	r2, r3, #1
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80b4 	beq.w	800515e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	4b5f      	ldr	r3, [pc, #380]	; (8005178 <HAL_GPIO_Init+0x308>)
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffe:	4a5e      	ldr	r2, [pc, #376]	; (8005178 <HAL_GPIO_Init+0x308>)
 8005000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005004:	6453      	str	r3, [r2, #68]	; 0x44
 8005006:	4b5c      	ldr	r3, [pc, #368]	; (8005178 <HAL_GPIO_Init+0x308>)
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005012:	4a5a      	ldr	r2, [pc, #360]	; (800517c <HAL_GPIO_Init+0x30c>)
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	3302      	adds	r3, #2
 800501a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	220f      	movs	r2, #15
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a51      	ldr	r2, [pc, #324]	; (8005180 <HAL_GPIO_Init+0x310>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02b      	beq.n	8005096 <HAL_GPIO_Init+0x226>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a50      	ldr	r2, [pc, #320]	; (8005184 <HAL_GPIO_Init+0x314>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d025      	beq.n	8005092 <HAL_GPIO_Init+0x222>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a4f      	ldr	r2, [pc, #316]	; (8005188 <HAL_GPIO_Init+0x318>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01f      	beq.n	800508e <HAL_GPIO_Init+0x21e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a4e      	ldr	r2, [pc, #312]	; (800518c <HAL_GPIO_Init+0x31c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d019      	beq.n	800508a <HAL_GPIO_Init+0x21a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a4d      	ldr	r2, [pc, #308]	; (8005190 <HAL_GPIO_Init+0x320>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <HAL_GPIO_Init+0x216>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a4c      	ldr	r2, [pc, #304]	; (8005194 <HAL_GPIO_Init+0x324>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00d      	beq.n	8005082 <HAL_GPIO_Init+0x212>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a4b      	ldr	r2, [pc, #300]	; (8005198 <HAL_GPIO_Init+0x328>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d007      	beq.n	800507e <HAL_GPIO_Init+0x20e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a4a      	ldr	r2, [pc, #296]	; (800519c <HAL_GPIO_Init+0x32c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d101      	bne.n	800507a <HAL_GPIO_Init+0x20a>
 8005076:	2307      	movs	r3, #7
 8005078:	e00e      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800507a:	2308      	movs	r3, #8
 800507c:	e00c      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800507e:	2306      	movs	r3, #6
 8005080:	e00a      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005082:	2305      	movs	r3, #5
 8005084:	e008      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005086:	2304      	movs	r3, #4
 8005088:	e006      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800508a:	2303      	movs	r3, #3
 800508c:	e004      	b.n	8005098 <HAL_GPIO_Init+0x228>
 800508e:	2302      	movs	r3, #2
 8005090:	e002      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <HAL_GPIO_Init+0x228>
 8005096:	2300      	movs	r3, #0
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	f002 0203 	and.w	r2, r2, #3
 800509e:	0092      	lsls	r2, r2, #2
 80050a0:	4093      	lsls	r3, r2
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050a8:	4934      	ldr	r1, [pc, #208]	; (800517c <HAL_GPIO_Init+0x30c>)
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	089b      	lsrs	r3, r3, #2
 80050ae:	3302      	adds	r3, #2
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050b6:	4b3a      	ldr	r3, [pc, #232]	; (80051a0 <HAL_GPIO_Init+0x330>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050da:	4a31      	ldr	r2, [pc, #196]	; (80051a0 <HAL_GPIO_Init+0x330>)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050e0:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <HAL_GPIO_Init+0x330>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	43db      	mvns	r3, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4013      	ands	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005104:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <HAL_GPIO_Init+0x330>)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800510a:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <HAL_GPIO_Init+0x330>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	43db      	mvns	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800512e:	4a1c      	ldr	r2, [pc, #112]	; (80051a0 <HAL_GPIO_Init+0x330>)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005134:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <HAL_GPIO_Init+0x330>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005158:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <HAL_GPIO_Init+0x330>)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3301      	adds	r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b0f      	cmp	r3, #15
 8005168:	f67f ae90 	bls.w	8004e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	3724      	adds	r7, #36	; 0x24
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr
 8005178:	40023800 	.word	0x40023800
 800517c:	40013800 	.word	0x40013800
 8005180:	40020000 	.word	0x40020000
 8005184:	40020400 	.word	0x40020400
 8005188:	40020800 	.word	0x40020800
 800518c:	40020c00 	.word	0x40020c00
 8005190:	40021000 	.word	0x40021000
 8005194:	40021400 	.word	0x40021400
 8005198:	40021800 	.word	0x40021800
 800519c:	40021c00 	.word	0x40021c00
 80051a0:	40013c00 	.word	0x40013c00

080051a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	807b      	strh	r3, [r7, #2]
 80051b0:	4613      	mov	r3, r2
 80051b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051b4:	787b      	ldrb	r3, [r7, #1]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051ba:	887a      	ldrh	r2, [r7, #2]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051c0:	e003      	b.n	80051ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051c2:	887b      	ldrh	r3, [r7, #2]
 80051c4:	041a      	lsls	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	619a      	str	r2, [r3, #24]
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d4:	b5b0      	push	{r4, r5, r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005210:	f023 030c 	bic.w	r3, r3, #12
 8005214:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	4313      	orrs	r3, r2
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = huart->Instance->CR3;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	60fb      	str	r3, [r7, #12]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005248:	60fb      	str	r3, [r7, #12]

  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005264:	f040 80e4 	bne.w	8005430 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4aab      	ldr	r2, [pc, #684]	; (800551c <UART_SetConfig+0x348>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <UART_SetConfig+0xa8>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4aaa      	ldr	r2, [pc, #680]	; (8005520 <UART_SetConfig+0x34c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d16c      	bne.n	8005356 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800527c:	f7ff fdee 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 8005280:	4602      	mov	r2, r0
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009a      	lsls	r2, r3, #2
 800528a:	441a      	add	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	fbb2 f3f3 	udiv	r3, r2, r3
 8005296:	4aa3      	ldr	r2, [pc, #652]	; (8005524 <UART_SetConfig+0x350>)
 8005298:	fba2 2303 	umull	r2, r3, r2, r3
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	011c      	lsls	r4, r3, #4
 80052a0:	f7ff fddc 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	009a      	lsls	r2, r3, #2
 80052ae:	441a      	add	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80052ba:	f7ff fdcf 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 80052be:	4602      	mov	r2, r0
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	009a      	lsls	r2, r3, #2
 80052c8:	441a      	add	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	4a93      	ldr	r2, [pc, #588]	; (8005524 <UART_SetConfig+0x350>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	2264      	movs	r2, #100	; 0x64
 80052de:	fb02 f303 	mul.w	r3, r2, r3
 80052e2:	1aeb      	subs	r3, r5, r3
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	3332      	adds	r3, #50	; 0x32
 80052e8:	4a8e      	ldr	r2, [pc, #568]	; (8005524 <UART_SetConfig+0x350>)
 80052ea:	fba2 2303 	umull	r2, r3, r2, r3
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052f6:	441c      	add	r4, r3
 80052f8:	f7ff fdb0 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	009a      	lsls	r2, r3, #2
 8005306:	441a      	add	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005312:	f7ff fda3 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 8005316:	4602      	mov	r2, r0
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009a      	lsls	r2, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	4a7d      	ldr	r2, [pc, #500]	; (8005524 <UART_SetConfig+0x350>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2264      	movs	r2, #100	; 0x64
 8005336:	fb02 f303 	mul.w	r3, r2, r3
 800533a:	1aeb      	subs	r3, r5, r3
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	3332      	adds	r3, #50	; 0x32
 8005340:	4a78      	ldr	r2, [pc, #480]	; (8005524 <UART_SetConfig+0x350>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	f003 0207 	and.w	r2, r3, #7
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4422      	add	r2, r4
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	e154      	b.n	8005600 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005356:	f7ff fd77 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 800535a:	4602      	mov	r2, r0
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009a      	lsls	r2, r3, #2
 8005364:	441a      	add	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	4a6c      	ldr	r2, [pc, #432]	; (8005524 <UART_SetConfig+0x350>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	011c      	lsls	r4, r3, #4
 800537a:	f7ff fd65 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 800537e:	4602      	mov	r2, r0
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009a      	lsls	r2, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	fbb2 f5f3 	udiv	r5, r2, r3
 8005394:	f7ff fd58 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 8005398:	4602      	mov	r2, r0
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009a      	lsls	r2, r3, #2
 80053a2:	441a      	add	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ae:	4a5d      	ldr	r2, [pc, #372]	; (8005524 <UART_SetConfig+0x350>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	2264      	movs	r2, #100	; 0x64
 80053b8:	fb02 f303 	mul.w	r3, r2, r3
 80053bc:	1aeb      	subs	r3, r5, r3
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	3332      	adds	r3, #50	; 0x32
 80053c2:	4a58      	ldr	r2, [pc, #352]	; (8005524 <UART_SetConfig+0x350>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053d0:	441c      	add	r4, r3
 80053d2:	f7ff fd39 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 80053d6:	4602      	mov	r2, r0
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	009a      	lsls	r2, r3, #2
 80053e0:	441a      	add	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80053ec:	f7ff fd2c 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 80053f0:	4602      	mov	r2, r0
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	009a      	lsls	r2, r3, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	fbb2 f3f3 	udiv	r3, r2, r3
 8005406:	4a47      	ldr	r2, [pc, #284]	; (8005524 <UART_SetConfig+0x350>)
 8005408:	fba2 2303 	umull	r2, r3, r2, r3
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	2264      	movs	r2, #100	; 0x64
 8005410:	fb02 f303 	mul.w	r3, r2, r3
 8005414:	1aeb      	subs	r3, r5, r3
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	3332      	adds	r3, #50	; 0x32
 800541a:	4a42      	ldr	r2, [pc, #264]	; (8005524 <UART_SetConfig+0x350>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	f003 0207 	and.w	r2, r3, #7
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4422      	add	r2, r4
 800542c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800542e:	e0e7      	b.n	8005600 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a39      	ldr	r2, [pc, #228]	; (800551c <UART_SetConfig+0x348>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <UART_SetConfig+0x270>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a38      	ldr	r2, [pc, #224]	; (8005520 <UART_SetConfig+0x34c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d171      	bne.n	8005528 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005444:	f7ff fd0a 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 8005448:	4602      	mov	r2, r0
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	009a      	lsls	r2, r3, #2
 8005452:	441a      	add	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	fbb2 f3f3 	udiv	r3, r2, r3
 800545e:	4a31      	ldr	r2, [pc, #196]	; (8005524 <UART_SetConfig+0x350>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	011c      	lsls	r4, r3, #4
 8005468:	f7ff fcf8 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 800546c:	4602      	mov	r2, r0
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	009a      	lsls	r2, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005482:	f7ff fceb 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 8005486:	4602      	mov	r2, r0
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009a      	lsls	r2, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	fbb2 f3f3 	udiv	r3, r2, r3
 800549c:	4a21      	ldr	r2, [pc, #132]	; (8005524 <UART_SetConfig+0x350>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2264      	movs	r2, #100	; 0x64
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	1aeb      	subs	r3, r5, r3
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	3332      	adds	r3, #50	; 0x32
 80054b0:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <UART_SetConfig+0x350>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054bc:	441c      	add	r4, r3
 80054be:	f7ff fccd 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 80054c2:	4602      	mov	r2, r0
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	009a      	lsls	r2, r3, #2
 80054cc:	441a      	add	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80054d8:	f7ff fcc0 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 80054dc:	4602      	mov	r2, r0
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009a      	lsls	r2, r3, #2
 80054e6:	441a      	add	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f2:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <UART_SetConfig+0x350>)
 80054f4:	fba2 2303 	umull	r2, r3, r2, r3
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	2264      	movs	r2, #100	; 0x64
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	1aeb      	subs	r3, r5, r3
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	3332      	adds	r3, #50	; 0x32
 8005506:	4a07      	ldr	r2, [pc, #28]	; (8005524 <UART_SetConfig+0x350>)
 8005508:	fba2 2303 	umull	r2, r3, r2, r3
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	f003 020f 	and.w	r2, r3, #15
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4422      	add	r2, r4
 8005518:	609a      	str	r2, [r3, #8]
 800551a:	e071      	b.n	8005600 <UART_SetConfig+0x42c>
 800551c:	40011000 	.word	0x40011000
 8005520:	40011400 	.word	0x40011400
 8005524:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005528:	f7ff fc8e 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 800552c:	4602      	mov	r2, r0
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	009a      	lsls	r2, r3, #2
 8005536:	441a      	add	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005542:	4a31      	ldr	r2, [pc, #196]	; (8005608 <UART_SetConfig+0x434>)
 8005544:	fba2 2303 	umull	r2, r3, r2, r3
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	011c      	lsls	r4, r3, #4
 800554c:	f7ff fc7c 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 8005550:	4602      	mov	r2, r0
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	009a      	lsls	r2, r3, #2
 800555a:	441a      	add	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	fbb2 f5f3 	udiv	r5, r2, r3
 8005566:	f7ff fc6f 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 800556a:	4602      	mov	r2, r0
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009a      	lsls	r2, r3, #2
 8005574:	441a      	add	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	4a21      	ldr	r2, [pc, #132]	; (8005608 <UART_SetConfig+0x434>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	2264      	movs	r2, #100	; 0x64
 800558a:	fb02 f303 	mul.w	r3, r2, r3
 800558e:	1aeb      	subs	r3, r5, r3
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	3332      	adds	r3, #50	; 0x32
 8005594:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <UART_SetConfig+0x434>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055a0:	441c      	add	r4, r3
 80055a2:	f7ff fc51 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 80055a6:	4602      	mov	r2, r0
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	009a      	lsls	r2, r3, #2
 80055b0:	441a      	add	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80055bc:	f7ff fc44 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 80055c0:	4602      	mov	r2, r0
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009a      	lsls	r2, r3, #2
 80055ca:	441a      	add	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <UART_SetConfig+0x434>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	095b      	lsrs	r3, r3, #5
 80055de:	2264      	movs	r2, #100	; 0x64
 80055e0:	fb02 f303 	mul.w	r3, r2, r3
 80055e4:	1aeb      	subs	r3, r5, r3
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	3332      	adds	r3, #50	; 0x32
 80055ea:	4a07      	ldr	r2, [pc, #28]	; (8005608 <UART_SetConfig+0x434>)
 80055ec:	fba2 2303 	umull	r2, r3, r2, r3
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	f003 020f 	and.w	r2, r3, #15
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4422      	add	r2, r4
 80055fc:	609a      	str	r2, [r3, #8]
}
 80055fe:	e7ff      	b.n	8005600 <UART_SetConfig+0x42c>
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bdb0      	pop	{r4, r5, r7, pc}
 8005608:	51eb851f 	.word	0x51eb851f

0800560c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e03c      	b.n	8005698 <HAL_UART_Init+0x8c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d103      	bne.n	8005632 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2224      	movs	r2, #36	; 0x24
 8005636:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005648:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff fdc2 	bl	80051d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800565e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695a      	ldr	r2, [r3, #20]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800566e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800567e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <UART_WaitOnFlagForever>:

static HAL_StatusTypeDef UART_WaitOnFlagForever(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80056ae:	bf00      	nop
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4013      	ands	r3, r2
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	429a      	cmp	r2, r3
 80056be:	bf0c      	ite	eq
 80056c0:	2301      	moveq	r3, #1
 80056c2:	2300      	movne	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d0f0      	beq.n	80056b0 <UART_WaitOnFlagForever+0x10>
  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr

080056da <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b086      	sub	sp, #24
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	4613      	mov	r3, r2
 80056e8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d176      	bne.n	80057e4 <HAL_UART_Transmit+0x10a>
  {
    if((pData == NULL ) || (Size == 0))
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_UART_Transmit+0x28>
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e06f      	b.n	80057e6 <HAL_UART_Transmit+0x10c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_UART_Transmit+0x3a>
 8005710:	2302      	movs	r3, #2
 8005712:	e068      	b.n	80057e6 <HAL_UART_Transmit+0x10c>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2221      	movs	r2, #33	; 0x21
 8005726:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	88fa      	ldrh	r2, [r7, #6]
 800572e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	88fa      	ldrh	r2, [r7, #6]
 8005734:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8005736:	e03c      	b.n	80057b2 <HAL_UART_Transmit+0xd8>
    {
      huart->TxXferCount--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574e:	d11f      	bne.n	8005790 <HAL_UART_Transmit+0xb6>
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 8005750:	2200      	movs	r2, #0
 8005752:	2180      	movs	r1, #128	; 0x80
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ffa3 	bl	80056a0 <UART_WaitOnFlagForever>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_UART_Transmit+0x8a>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e040      	b.n	80057e6 <HAL_UART_Transmit+0x10c>
        }
        tmp = (uint16_t*) pData;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	617b      	str	r3, [r7, #20]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005776:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d103      	bne.n	8005788 <HAL_UART_Transmit+0xae>
        {
          pData +=2U;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	3302      	adds	r3, #2
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	e014      	b.n	80057b2 <HAL_UART_Transmit+0xd8>
        }
        else
        {
          pData +=1U;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	3301      	adds	r3, #1
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	e010      	b.n	80057b2 <HAL_UART_Transmit+0xd8>
        }
      }
      else
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 8005790:	2200      	movs	r2, #0
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff ff83 	bl	80056a0 <UART_WaitOnFlagForever>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_UART_Transmit+0xca>
        {
          return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e020      	b.n	80057e6 <HAL_UART_Transmit+0x10c>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	60ba      	str	r2, [r7, #8]
 80057aa:	781a      	ldrb	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1bd      	bne.n	8005738 <HAL_UART_Transmit+0x5e>
      }
    }

    if(UART_WaitOnFlagForever(huart, UART_FLAG_TC, RESET) != HAL_OK)
 80057bc:	2200      	movs	r2, #0
 80057be:	2140      	movs	r1, #64	; 0x40
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7ff ff6d 	bl	80056a0 <UART_WaitOnFlagForever>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e00a      	b.n	80057e6 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e000      	b.n	80057e6 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
  }
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b086      	sub	sp, #24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	603b      	str	r3, [r7, #0]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b20      	cmp	r3, #32
 8005808:	f040 8087 	bne.w	800591a <HAL_UART_Receive+0x12c>
  {
    if((pData == NULL ) || (Size == 0))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_UART_Receive+0x2a>
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e07f      	b.n	800591c <HAL_UART_Receive+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_UART_Receive+0x3c>
 8005826:	2302      	movs	r3, #2
 8005828:	e078      	b.n	800591c <HAL_UART_Receive+0x12e>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2222      	movs	r2, #34	; 0x22
 800583c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	88fa      	ldrh	r2, [r7, #6]
 800584a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 800584c:	e056      	b.n	80058fc <HAL_UART_Receive+0x10e>
    {
      huart->RxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005864:	d128      	bne.n	80058b8 <HAL_UART_Receive+0xca>
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
 8005866:	2200      	movs	r2, #0
 8005868:	2120      	movs	r1, #32
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7ff ff18 	bl	80056a0 <UART_WaitOnFlagForever>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_UART_Receive+0x8c>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e050      	b.n	800591c <HAL_UART_Receive+0x12e>
        }
        tmp = (uint16_t*) pData;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	617b      	str	r3, [r7, #20]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10c      	bne.n	80058a0 <HAL_UART_Receive+0xb2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	b29b      	uxth	r3, r3
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	b29a      	uxth	r2, r3
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	3302      	adds	r3, #2
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	e02d      	b.n	80058fc <HAL_UART_Receive+0x10e>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	3301      	adds	r3, #1
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	e021      	b.n	80058fc <HAL_UART_Receive+0x10e>
        }

      }
      else
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
 80058b8:	2200      	movs	r2, #0
 80058ba:	2120      	movs	r1, #32
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff feef 	bl	80056a0 <UART_WaitOnFlagForever>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_UART_Receive+0xde>
        {
          return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e027      	b.n	800591c <HAL_UART_Receive+0x12e>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d108      	bne.n	80058e6 <HAL_UART_Receive+0xf8>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6859      	ldr	r1, [r3, #4]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	60ba      	str	r2, [r7, #8]
 80058e0:	b2ca      	uxtb	r2, r1
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	e00a      	b.n	80058fc <HAL_UART_Receive+0x10e>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	1c59      	adds	r1, r3, #1
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1a3      	bne.n	800584e <HAL_UART_Receive+0x60>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <HAL_UART_Receive+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_RNG_Init>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e025      	b.n	8005982 <HAL_RNG_Init+0x5e>
  }
  
  __HAL_LOCK(hrng);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	791b      	ldrb	r3, [r3, #4]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_RNG_Init+0x1e>
 800593e:	2302      	movs	r3, #2
 8005940:	e01f      	b.n	8005982 <HAL_RNG_Init+0x5e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	711a      	strb	r2, [r3, #4]
  
  if(hrng->State == HAL_RNG_STATE_RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	795b      	ldrb	r3, [r3, #5]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d105      	bne.n	800595e <HAL_RNG_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f816 	bl	800598a <HAL_RNG_MspInit>
  }
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	715a      	strb	r2, [r3, #5]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0204 	orr.w	r2, r2, #4
 8005972:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	715a      	strb	r2, [r3, #5]
  
  __HAL_UNLOCK(hrng);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_RNG_MspInit>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <Reset_Handler>:
 800599c:	2100      	movs	r1, #0
 800599e:	e003      	b.n	80059a8 <LoopCopyDataInit>

080059a0 <CopyDataInit>:
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <LoopForever+0x2>)
 80059a2:	585b      	ldr	r3, [r3, r1]
 80059a4:	5043      	str	r3, [r0, r1]
 80059a6:	3104      	adds	r1, #4

080059a8 <LoopCopyDataInit>:
 80059a8:	480a      	ldr	r0, [pc, #40]	; (80059d4 <LoopForever+0x6>)
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <LoopForever+0xa>)
 80059ac:	1842      	adds	r2, r0, r1
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d3f6      	bcc.n	80059a0 <CopyDataInit>
 80059b2:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <LoopForever+0xe>)
 80059b4:	e002      	b.n	80059bc <LoopFillZerobss>

080059b6 <FillZerobss>:
 80059b6:	2300      	movs	r3, #0
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	3204      	adds	r2, #4

080059bc <LoopFillZerobss>:
 80059bc:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <LoopForever+0x12>)
 80059be:	429a      	cmp	r2, r3
 80059c0:	d3f9      	bcc.n	80059b6 <FillZerobss>
 80059c2:	f3af 8000 	nop.w
 80059c6:	f000 f80f 	bl	80059e8 <__libc_init_array>
 80059ca:	f7fa fd13 	bl	80003f4 <main>

080059ce <LoopForever>:
 80059ce:	e7fe      	b.n	80059ce <LoopForever>
 80059d0:	08005bf8 	.word	0x08005bf8
 80059d4:	20000000 	.word	0x20000000
 80059d8:	2000043c 	.word	0x2000043c
 80059dc:	2000043c 	.word	0x2000043c
 80059e0:	20002c9c 	.word	0x20002c9c

080059e4 <BusFault_Handler>:
 80059e4:	e7fe      	b.n	80059e4 <BusFault_Handler>
 80059e6:	0000      	movs	r0, r0

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4e0d      	ldr	r6, [pc, #52]	; (8005a20 <__libc_init_array+0x38>)
 80059ec:	4d0d      	ldr	r5, [pc, #52]	; (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1b76      	subs	r6, r6, r5
 80059f0:	10b6      	asrs	r6, r6, #2
 80059f2:	d006      	beq.n	8005a02 <__libc_init_array+0x1a>
 80059f4:	2400      	movs	r4, #0
 80059f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fa:	3401      	adds	r4, #1
 80059fc:	4798      	blx	r3
 80059fe:	42a6      	cmp	r6, r4
 8005a00:	d1f9      	bne.n	80059f6 <__libc_init_array+0xe>
 8005a02:	4e09      	ldr	r6, [pc, #36]	; (8005a28 <__libc_init_array+0x40>)
 8005a04:	4d09      	ldr	r5, [pc, #36]	; (8005a2c <__libc_init_array+0x44>)
 8005a06:	1b76      	subs	r6, r6, r5
 8005a08:	f000 f882 	bl	8005b10 <_init>
 8005a0c:	10b6      	asrs	r6, r6, #2
 8005a0e:	d006      	beq.n	8005a1e <__libc_init_array+0x36>
 8005a10:	2400      	movs	r4, #0
 8005a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a16:	3401      	adds	r4, #1
 8005a18:	4798      	blx	r3
 8005a1a:	42a6      	cmp	r6, r4
 8005a1c:	d1f9      	bne.n	8005a12 <__libc_init_array+0x2a>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	08005bec 	.word	0x08005bec
 8005a24:	08005bec 	.word	0x08005bec
 8005a28:	08005bf4 	.word	0x08005bf4
 8005a2c:	08005bec 	.word	0x08005bec

08005a30 <register_fini>:
 8005a30:	4b02      	ldr	r3, [pc, #8]	; (8005a3c <register_fini+0xc>)
 8005a32:	b113      	cbz	r3, 8005a3a <register_fini+0xa>
 8005a34:	4802      	ldr	r0, [pc, #8]	; (8005a40 <register_fini+0x10>)
 8005a36:	f000 b805 	b.w	8005a44 <atexit>
 8005a3a:	4770      	bx	lr
 8005a3c:	00000000 	.word	0x00000000
 8005a40:	08005a51 	.word	0x08005a51

08005a44 <atexit>:
 8005a44:	2300      	movs	r3, #0
 8005a46:	4601      	mov	r1, r0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 b81a 	b.w	8005a84 <__register_exitproc>

08005a50 <__libc_fini_array>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <__libc_fini_array+0x24>)
 8005a54:	4d08      	ldr	r5, [pc, #32]	; (8005a78 <__libc_fini_array+0x28>)
 8005a56:	1b5b      	subs	r3, r3, r5
 8005a58:	109c      	asrs	r4, r3, #2
 8005a5a:	d007      	beq.n	8005a6c <__libc_fini_array+0x1c>
 8005a5c:	3b04      	subs	r3, #4
 8005a5e:	441d      	add	r5, r3
 8005a60:	3c01      	subs	r4, #1
 8005a62:	f855 3904 	ldr.w	r3, [r5], #-4
 8005a66:	4798      	blx	r3
 8005a68:	2c00      	cmp	r4, #0
 8005a6a:	d1f9      	bne.n	8005a60 <__libc_fini_array+0x10>
 8005a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a70:	f000 b854 	b.w	8005b1c <_fini>
 8005a74:	08005bf8 	.word	0x08005bf8
 8005a78:	08005bf4 	.word	0x08005bf4

08005a7c <__retarget_lock_acquire_recursive>:
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop

08005a80 <__retarget_lock_release_recursive>:
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop

08005a84 <__register_exitproc>:
 8005a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a88:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8005b08 <__register_exitproc+0x84>
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	f8da 0000 	ldr.w	r0, [sl]
 8005a92:	4698      	mov	r8, r3
 8005a94:	460f      	mov	r7, r1
 8005a96:	4691      	mov	r9, r2
 8005a98:	f7ff fff0 	bl	8005a7c <__retarget_lock_acquire_recursive>
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <__register_exitproc+0x88>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8005aa4:	b324      	cbz	r4, 8005af0 <__register_exitproc+0x6c>
 8005aa6:	6865      	ldr	r5, [r4, #4]
 8005aa8:	2d1f      	cmp	r5, #31
 8005aaa:	dc26      	bgt.n	8005afa <__register_exitproc+0x76>
 8005aac:	b95e      	cbnz	r6, 8005ac6 <__register_exitproc+0x42>
 8005aae:	1c6b      	adds	r3, r5, #1
 8005ab0:	3502      	adds	r5, #2
 8005ab2:	f8da 0000 	ldr.w	r0, [sl]
 8005ab6:	6063      	str	r3, [r4, #4]
 8005ab8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8005abc:	f7ff ffe0 	bl	8005a80 <__retarget_lock_release_recursive>
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8005aca:	2301      	movs	r3, #1
 8005acc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8005ad0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8005ad4:	40ab      	lsls	r3, r5
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	2e02      	cmp	r6, #2
 8005ada:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 8005ade:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8005ae2:	d1e4      	bne.n	8005aae <__register_exitproc+0x2a>
 8005ae4:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8005aee:	e7de      	b.n	8005aae <__register_exitproc+0x2a>
 8005af0:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8005af4:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8005af8:	e7d5      	b.n	8005aa6 <__register_exitproc+0x22>
 8005afa:	f8da 0000 	ldr.w	r0, [sl]
 8005afe:	f7ff ffbf 	bl	8005a80 <__retarget_lock_release_recursive>
 8005b02:	f04f 30ff 	mov.w	r0, #4294967295
 8005b06:	e7dc      	b.n	8005ac2 <__register_exitproc+0x3e>
 8005b08:	20000438 	.word	0x20000438
 8005b0c:	08005be8 	.word	0x08005be8

08005b10 <_init>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	bf00      	nop
 8005b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b16:	bc08      	pop	{r3}
 8005b18:	469e      	mov	lr, r3
 8005b1a:	4770      	bx	lr

08005b1c <_fini>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	bf00      	nop
 8005b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b22:	bc08      	pop	{r3}
 8005b24:	469e      	mov	lr, r3
 8005b26:	4770      	bx	lr
