   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"poly.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.pqcrystals_dilithium2_refpoly_reduce,"ax",%progbits
  16              		.align	1
  17              		.global	pqcrystals_dilithium2_refpoly_reduce
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	pqcrystals_dilithium2_refpoly_reduce:
  25              	.LFB0:
  26              		.file 1 "poly.c"
   1:poly.c        **** #include <stdint.h>
   2:poly.c        **** #include "params.h"
   3:poly.c        **** #include "poly.h"
   4:poly.c        **** #include "ntt.h"
   5:poly.c        **** #include "reduce.h"
   6:poly.c        **** #include "rounding.h"
   7:poly.c        **** #include "symmetric.h"
   8:poly.c        **** 
   9:poly.c        **** #ifdef DBENCH
  10:poly.c        **** #include "test/cpucycles.h"
  11:poly.c        **** extern const uint64_t timing_overhead;
  12:poly.c        **** extern uint64_t *tred, *tadd, *tmul, *tround, *tsample, *tpack;
  13:poly.c        **** #define DBENCH_START() uint64_t time = cpucycles()
  14:poly.c        **** #define DBENCH_STOP(t) t += cpucycles() - time - timing_overhead
  15:poly.c        **** #else
  16:poly.c        **** #define DBENCH_START()
  17:poly.c        **** #define DBENCH_STOP(t)
  18:poly.c        **** #endif
  19:poly.c        **** 
  20:poly.c        **** /*************************************************
  21:poly.c        **** * Name:        poly_reduce
  22:poly.c        **** *
  23:poly.c        **** * Description: Inplace reduction of all coefficients of polynomial to
  24:poly.c        **** *              representative in [-6283009,6283007].
  25:poly.c        **** *
  26:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
  27:poly.c        **** **************************************************/
  28:poly.c        **** void poly_reduce(poly *a) {
  27              		.loc 1 28 27
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 84B0     		sub	sp, sp, #16
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  29:poly.c        ****   unsigned int i;
  30:poly.c        ****   DBENCH_START();
  31:poly.c        **** 
  32:poly.c        ****   for(i = 0; i < N; ++i)
  43              		.loc 1 32 9
  44 0008 0023     		movs	r3, #0
  45 000a FB60     		str	r3, [r7, #12]
  46              		.loc 1 32 3
  47 000c 0EE0     		b	.L2
  48              	.L3:
  33:poly.c        ****     a->coeffs[i] = reduce32(a->coeffs[i]);
  49              		.loc 1 33 20 discriminator 3
  50 000e 7B68     		ldr	r3, [r7, #4]
  51 0010 FA68     		ldr	r2, [r7, #12]
  52 0012 53F82230 		ldr	r3, [r3, r2, lsl #2]
  53 0016 1846     		mov	r0, r3
  54 0018 FFF7FEFF 		bl	pqcrystals_dilithium2_refreduce32
  55 001c 0146     		mov	r1, r0
  56              		.loc 1 33 18 discriminator 3
  57 001e 7B68     		ldr	r3, [r7, #4]
  58 0020 FA68     		ldr	r2, [r7, #12]
  59 0022 43F82210 		str	r1, [r3, r2, lsl #2]
  32:poly.c        ****     a->coeffs[i] = reduce32(a->coeffs[i]);
  60              		.loc 1 32 21 discriminator 3
  61 0026 FB68     		ldr	r3, [r7, #12]
  62 0028 0133     		adds	r3, r3, #1
  63 002a FB60     		str	r3, [r7, #12]
  64              	.L2:
  32:poly.c        ****     a->coeffs[i] = reduce32(a->coeffs[i]);
  65              		.loc 1 32 3 discriminator 1
  66 002c FB68     		ldr	r3, [r7, #12]
  67 002e FF2B     		cmp	r3, #255
  68 0030 EDD9     		bls	.L3
  34:poly.c        **** 
  35:poly.c        ****   DBENCH_STOP(*tred);
  36:poly.c        **** }
  69              		.loc 1 36 1
  70 0032 00BF     		nop
  71 0034 00BF     		nop
  72 0036 1037     		adds	r7, r7, #16
  73              	.LCFI3:
  74              		.cfi_def_cfa_offset 8
  75 0038 BD46     		mov	sp, r7
  76              	.LCFI4:
  77              		.cfi_def_cfa_register 13
  78              		@ sp needed
  79 003a 80BD     		pop	{r7, pc}
  80              		.cfi_endproc
  81              	.LFE0:
  83              		.section	.text.pqcrystals_dilithium2_refpoly_caddq,"ax",%progbits
  84              		.align	1
  85              		.global	pqcrystals_dilithium2_refpoly_caddq
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu softvfp
  91              	pqcrystals_dilithium2_refpoly_caddq:
  92              	.LFB1:
  37:poly.c        **** 
  38:poly.c        **** /*************************************************
  39:poly.c        **** * Name:        poly_caddq
  40:poly.c        **** *
  41:poly.c        **** * Description: For all coefficients of in/out polynomial add Q if
  42:poly.c        **** *              coefficient is negative.
  43:poly.c        **** *
  44:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
  45:poly.c        **** **************************************************/
  46:poly.c        **** void poly_caddq(poly *a) {
  93              		.loc 1 46 26
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 16
  96              		@ frame_needed = 1, uses_anonymous_args = 0
  97 0000 80B5     		push	{r7, lr}
  98              	.LCFI5:
  99              		.cfi_def_cfa_offset 8
 100              		.cfi_offset 7, -8
 101              		.cfi_offset 14, -4
 102 0002 84B0     		sub	sp, sp, #16
 103              	.LCFI6:
 104              		.cfi_def_cfa_offset 24
 105 0004 00AF     		add	r7, sp, #0
 106              	.LCFI7:
 107              		.cfi_def_cfa_register 7
 108 0006 7860     		str	r0, [r7, #4]
  47:poly.c        ****   unsigned int i;
  48:poly.c        ****   DBENCH_START();
  49:poly.c        **** 
  50:poly.c        ****   for(i = 0; i < N; ++i)
 109              		.loc 1 50 9
 110 0008 0023     		movs	r3, #0
 111 000a FB60     		str	r3, [r7, #12]
 112              		.loc 1 50 3
 113 000c 0EE0     		b	.L5
 114              	.L6:
  51:poly.c        ****     a->coeffs[i] = caddq(a->coeffs[i]);
 115              		.loc 1 51 20 discriminator 3
 116 000e 7B68     		ldr	r3, [r7, #4]
 117 0010 FA68     		ldr	r2, [r7, #12]
 118 0012 53F82230 		ldr	r3, [r3, r2, lsl #2]
 119 0016 1846     		mov	r0, r3
 120 0018 FFF7FEFF 		bl	pqcrystals_dilithium2_refcaddq
 121 001c 0146     		mov	r1, r0
 122              		.loc 1 51 18 discriminator 3
 123 001e 7B68     		ldr	r3, [r7, #4]
 124 0020 FA68     		ldr	r2, [r7, #12]
 125 0022 43F82210 		str	r1, [r3, r2, lsl #2]
  50:poly.c        ****     a->coeffs[i] = caddq(a->coeffs[i]);
 126              		.loc 1 50 21 discriminator 3
 127 0026 FB68     		ldr	r3, [r7, #12]
 128 0028 0133     		adds	r3, r3, #1
 129 002a FB60     		str	r3, [r7, #12]
 130              	.L5:
  50:poly.c        ****     a->coeffs[i] = caddq(a->coeffs[i]);
 131              		.loc 1 50 3 discriminator 1
 132 002c FB68     		ldr	r3, [r7, #12]
 133 002e FF2B     		cmp	r3, #255
 134 0030 EDD9     		bls	.L6
  52:poly.c        **** 
  53:poly.c        ****   DBENCH_STOP(*tred);
  54:poly.c        **** }
 135              		.loc 1 54 1
 136 0032 00BF     		nop
 137 0034 00BF     		nop
 138 0036 1037     		adds	r7, r7, #16
 139              	.LCFI8:
 140              		.cfi_def_cfa_offset 8
 141 0038 BD46     		mov	sp, r7
 142              	.LCFI9:
 143              		.cfi_def_cfa_register 13
 144              		@ sp needed
 145 003a 80BD     		pop	{r7, pc}
 146              		.cfi_endproc
 147              	.LFE1:
 149              		.section	.text.pqcrystals_dilithium2_refpoly_add,"ax",%progbits
 150              		.align	1
 151              		.global	pqcrystals_dilithium2_refpoly_add
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu softvfp
 157              	pqcrystals_dilithium2_refpoly_add:
 158              	.LFB2:
  55:poly.c        **** 
  56:poly.c        **** /*************************************************
  57:poly.c        **** * Name:        poly_add
  58:poly.c        **** *
  59:poly.c        **** * Description: Add polynomials. No modular reduction is performed.
  60:poly.c        **** *
  61:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
  62:poly.c        **** *              - const poly *a: pointer to first summand
  63:poly.c        **** *              - const poly *b: pointer to second summand
  64:poly.c        **** **************************************************/
  65:poly.c        **** void poly_add(poly *c, const poly *a, const poly *b)  {
 159              		.loc 1 65 55
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 24
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164 0000 80B4     		push	{r7}
 165              	.LCFI10:
 166              		.cfi_def_cfa_offset 4
 167              		.cfi_offset 7, -4
 168 0002 87B0     		sub	sp, sp, #28
 169              	.LCFI11:
 170              		.cfi_def_cfa_offset 32
 171 0004 00AF     		add	r7, sp, #0
 172              	.LCFI12:
 173              		.cfi_def_cfa_register 7
 174 0006 F860     		str	r0, [r7, #12]
 175 0008 B960     		str	r1, [r7, #8]
 176 000a 7A60     		str	r2, [r7, #4]
  66:poly.c        ****   unsigned int i;
  67:poly.c        ****   DBENCH_START();
  68:poly.c        **** 
  69:poly.c        ****   for(i = 0; i < N; ++i)
 177              		.loc 1 69 9
 178 000c 0023     		movs	r3, #0
 179 000e 7B61     		str	r3, [r7, #20]
 180              		.loc 1 69 3
 181 0010 0FE0     		b	.L8
 182              	.L9:
  70:poly.c        ****     c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 183              		.loc 1 70 29 discriminator 3
 184 0012 BB68     		ldr	r3, [r7, #8]
 185 0014 7A69     		ldr	r2, [r7, #20]
 186 0016 53F82220 		ldr	r2, [r3, r2, lsl #2]
 187              		.loc 1 70 44 discriminator 3
 188 001a 7B68     		ldr	r3, [r7, #4]
 189 001c 7969     		ldr	r1, [r7, #20]
 190 001e 53F82130 		ldr	r3, [r3, r1, lsl #2]
 191              		.loc 1 70 33 discriminator 3
 192 0022 D118     		adds	r1, r2, r3
 193              		.loc 1 70 18 discriminator 3
 194 0024 FB68     		ldr	r3, [r7, #12]
 195 0026 7A69     		ldr	r2, [r7, #20]
 196 0028 43F82210 		str	r1, [r3, r2, lsl #2]
  69:poly.c        ****     c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 197              		.loc 1 69 21 discriminator 3
 198 002c 7B69     		ldr	r3, [r7, #20]
 199 002e 0133     		adds	r3, r3, #1
 200 0030 7B61     		str	r3, [r7, #20]
 201              	.L8:
  69:poly.c        ****     c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 202              		.loc 1 69 3 discriminator 1
 203 0032 7B69     		ldr	r3, [r7, #20]
 204 0034 FF2B     		cmp	r3, #255
 205 0036 ECD9     		bls	.L9
  71:poly.c        **** 
  72:poly.c        ****   DBENCH_STOP(*tadd);
  73:poly.c        **** }
 206              		.loc 1 73 1
 207 0038 00BF     		nop
 208 003a 00BF     		nop
 209 003c 1C37     		adds	r7, r7, #28
 210              	.LCFI13:
 211              		.cfi_def_cfa_offset 4
 212 003e BD46     		mov	sp, r7
 213              	.LCFI14:
 214              		.cfi_def_cfa_register 13
 215              		@ sp needed
 216 0040 80BC     		pop	{r7}
 217              	.LCFI15:
 218              		.cfi_restore 7
 219              		.cfi_def_cfa_offset 0
 220 0042 7047     		bx	lr
 221              		.cfi_endproc
 222              	.LFE2:
 224              		.section	.text.pqcrystals_dilithium2_refpoly_sub,"ax",%progbits
 225              		.align	1
 226              		.global	pqcrystals_dilithium2_refpoly_sub
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu softvfp
 232              	pqcrystals_dilithium2_refpoly_sub:
 233              	.LFB3:
  74:poly.c        **** 
  75:poly.c        **** /*************************************************
  76:poly.c        **** * Name:        poly_sub
  77:poly.c        **** *
  78:poly.c        **** * Description: Subtract polynomials. No modular reduction is
  79:poly.c        **** *              performed.
  80:poly.c        **** *
  81:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
  82:poly.c        **** *              - const poly *a: pointer to first input polynomial
  83:poly.c        **** *              - const poly *b: pointer to second input polynomial to be
  84:poly.c        **** *                               subtraced from first input polynomial
  85:poly.c        **** **************************************************/
  86:poly.c        **** void poly_sub(poly *c, const poly *a, const poly *b) {
 234              		.loc 1 86 54
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 24
 237              		@ frame_needed = 1, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239 0000 80B4     		push	{r7}
 240              	.LCFI16:
 241              		.cfi_def_cfa_offset 4
 242              		.cfi_offset 7, -4
 243 0002 87B0     		sub	sp, sp, #28
 244              	.LCFI17:
 245              		.cfi_def_cfa_offset 32
 246 0004 00AF     		add	r7, sp, #0
 247              	.LCFI18:
 248              		.cfi_def_cfa_register 7
 249 0006 F860     		str	r0, [r7, #12]
 250 0008 B960     		str	r1, [r7, #8]
 251 000a 7A60     		str	r2, [r7, #4]
  87:poly.c        ****   unsigned int i;
  88:poly.c        ****   DBENCH_START();
  89:poly.c        **** 
  90:poly.c        ****   for(i = 0; i < N; ++i)
 252              		.loc 1 90 9
 253 000c 0023     		movs	r3, #0
 254 000e 7B61     		str	r3, [r7, #20]
 255              		.loc 1 90 3
 256 0010 0FE0     		b	.L11
 257              	.L12:
  91:poly.c        ****     c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 258              		.loc 1 91 29 discriminator 3
 259 0012 BB68     		ldr	r3, [r7, #8]
 260 0014 7A69     		ldr	r2, [r7, #20]
 261 0016 53F82220 		ldr	r2, [r3, r2, lsl #2]
 262              		.loc 1 91 44 discriminator 3
 263 001a 7B68     		ldr	r3, [r7, #4]
 264 001c 7969     		ldr	r1, [r7, #20]
 265 001e 53F82130 		ldr	r3, [r3, r1, lsl #2]
 266              		.loc 1 91 33 discriminator 3
 267 0022 D11A     		subs	r1, r2, r3
 268              		.loc 1 91 18 discriminator 3
 269 0024 FB68     		ldr	r3, [r7, #12]
 270 0026 7A69     		ldr	r2, [r7, #20]
 271 0028 43F82210 		str	r1, [r3, r2, lsl #2]
  90:poly.c        ****     c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 272              		.loc 1 90 21 discriminator 3
 273 002c 7B69     		ldr	r3, [r7, #20]
 274 002e 0133     		adds	r3, r3, #1
 275 0030 7B61     		str	r3, [r7, #20]
 276              	.L11:
  90:poly.c        ****     c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 277              		.loc 1 90 3 discriminator 1
 278 0032 7B69     		ldr	r3, [r7, #20]
 279 0034 FF2B     		cmp	r3, #255
 280 0036 ECD9     		bls	.L12
  92:poly.c        **** 
  93:poly.c        ****   DBENCH_STOP(*tadd);
  94:poly.c        **** }
 281              		.loc 1 94 1
 282 0038 00BF     		nop
 283 003a 00BF     		nop
 284 003c 1C37     		adds	r7, r7, #28
 285              	.LCFI19:
 286              		.cfi_def_cfa_offset 4
 287 003e BD46     		mov	sp, r7
 288              	.LCFI20:
 289              		.cfi_def_cfa_register 13
 290              		@ sp needed
 291 0040 80BC     		pop	{r7}
 292              	.LCFI21:
 293              		.cfi_restore 7
 294              		.cfi_def_cfa_offset 0
 295 0042 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE3:
 299              		.section	.text.pqcrystals_dilithium2_refpoly_shiftl,"ax",%progbits
 300              		.align	1
 301              		.global	pqcrystals_dilithium2_refpoly_shiftl
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu softvfp
 307              	pqcrystals_dilithium2_refpoly_shiftl:
 308              	.LFB4:
  95:poly.c        **** 
  96:poly.c        **** /*************************************************
  97:poly.c        **** * Name:        poly_shiftl
  98:poly.c        **** *
  99:poly.c        **** * Description: Multiply polynomial by 2^D without modular reduction. Assumes
 100:poly.c        **** *              input coefficients to be less than 2^{31-D} in absolute value.
 101:poly.c        **** *
 102:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
 103:poly.c        **** **************************************************/
 104:poly.c        **** void poly_shiftl(poly *a) {
 309              		.loc 1 104 27
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 16
 312              		@ frame_needed = 1, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 314 0000 80B4     		push	{r7}
 315              	.LCFI22:
 316              		.cfi_def_cfa_offset 4
 317              		.cfi_offset 7, -4
 318 0002 85B0     		sub	sp, sp, #20
 319              	.LCFI23:
 320              		.cfi_def_cfa_offset 24
 321 0004 00AF     		add	r7, sp, #0
 322              	.LCFI24:
 323              		.cfi_def_cfa_register 7
 324 0006 7860     		str	r0, [r7, #4]
 105:poly.c        ****   unsigned int i;
 106:poly.c        ****   DBENCH_START();
 107:poly.c        **** 
 108:poly.c        ****   for(i = 0; i < N; ++i)
 325              		.loc 1 108 9
 326 0008 0023     		movs	r3, #0
 327 000a FB60     		str	r3, [r7, #12]
 328              		.loc 1 108 3
 329 000c 0BE0     		b	.L14
 330              	.L15:
 109:poly.c        ****     a->coeffs[i] <<= D;
 331              		.loc 1 109 18 discriminator 3
 332 000e 7B68     		ldr	r3, [r7, #4]
 333 0010 FA68     		ldr	r2, [r7, #12]
 334 0012 53F82230 		ldr	r3, [r3, r2, lsl #2]
 335 0016 5903     		lsls	r1, r3, #13
 336 0018 7B68     		ldr	r3, [r7, #4]
 337 001a FA68     		ldr	r2, [r7, #12]
 338 001c 43F82210 		str	r1, [r3, r2, lsl #2]
 108:poly.c        ****     a->coeffs[i] <<= D;
 339              		.loc 1 108 21 discriminator 3
 340 0020 FB68     		ldr	r3, [r7, #12]
 341 0022 0133     		adds	r3, r3, #1
 342 0024 FB60     		str	r3, [r7, #12]
 343              	.L14:
 108:poly.c        ****     a->coeffs[i] <<= D;
 344              		.loc 1 108 3 discriminator 1
 345 0026 FB68     		ldr	r3, [r7, #12]
 346 0028 FF2B     		cmp	r3, #255
 347 002a F0D9     		bls	.L15
 110:poly.c        **** 
 111:poly.c        ****   DBENCH_STOP(*tmul);
 112:poly.c        **** }
 348              		.loc 1 112 1
 349 002c 00BF     		nop
 350 002e 00BF     		nop
 351 0030 1437     		adds	r7, r7, #20
 352              	.LCFI25:
 353              		.cfi_def_cfa_offset 4
 354 0032 BD46     		mov	sp, r7
 355              	.LCFI26:
 356              		.cfi_def_cfa_register 13
 357              		@ sp needed
 358 0034 80BC     		pop	{r7}
 359              	.LCFI27:
 360              		.cfi_restore 7
 361              		.cfi_def_cfa_offset 0
 362 0036 7047     		bx	lr
 363              		.cfi_endproc
 364              	.LFE4:
 366              		.section	.text.pqcrystals_dilithium2_refpoly_ntt,"ax",%progbits
 367              		.align	1
 368              		.global	pqcrystals_dilithium2_refpoly_ntt
 369              		.syntax unified
 370              		.thumb
 371              		.thumb_func
 372              		.fpu softvfp
 374              	pqcrystals_dilithium2_refpoly_ntt:
 375              	.LFB5:
 113:poly.c        **** 
 114:poly.c        **** /*************************************************
 115:poly.c        **** * Name:        poly_ntt
 116:poly.c        **** *
 117:poly.c        **** * Description: Inplace forward NTT. Coefficients can grow by
 118:poly.c        **** *              8*Q in absolute value.
 119:poly.c        **** *
 120:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
 121:poly.c        **** **************************************************/
 122:poly.c        **** void poly_ntt(poly *a) {
 376              		.loc 1 122 24
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 8
 379              		@ frame_needed = 1, uses_anonymous_args = 0
 380 0000 80B5     		push	{r7, lr}
 381              	.LCFI28:
 382              		.cfi_def_cfa_offset 8
 383              		.cfi_offset 7, -8
 384              		.cfi_offset 14, -4
 385 0002 82B0     		sub	sp, sp, #8
 386              	.LCFI29:
 387              		.cfi_def_cfa_offset 16
 388 0004 00AF     		add	r7, sp, #0
 389              	.LCFI30:
 390              		.cfi_def_cfa_register 7
 391 0006 7860     		str	r0, [r7, #4]
 123:poly.c        ****   DBENCH_START();
 124:poly.c        **** 
 125:poly.c        ****   ntt(a->coeffs);
 392              		.loc 1 125 8
 393 0008 7B68     		ldr	r3, [r7, #4]
 394              		.loc 1 125 3
 395 000a 1846     		mov	r0, r3
 396 000c FFF7FEFF 		bl	pqcrystals_dilithium2_ref_ntt
 126:poly.c        **** 
 127:poly.c        ****   DBENCH_STOP(*tmul);
 128:poly.c        **** }
 397              		.loc 1 128 1
 398 0010 00BF     		nop
 399 0012 0837     		adds	r7, r7, #8
 400              	.LCFI31:
 401              		.cfi_def_cfa_offset 8
 402 0014 BD46     		mov	sp, r7
 403              	.LCFI32:
 404              		.cfi_def_cfa_register 13
 405              		@ sp needed
 406 0016 80BD     		pop	{r7, pc}
 407              		.cfi_endproc
 408              	.LFE5:
 410              		.section	.text.pqcrystals_dilithium2_refpoly_invntt_tomont,"ax",%progbits
 411              		.align	1
 412              		.global	pqcrystals_dilithium2_refpoly_invntt_tomont
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 416              		.fpu softvfp
 418              	pqcrystals_dilithium2_refpoly_invntt_tomont:
 419              	.LFB6:
 129:poly.c        **** 
 130:poly.c        **** /*************************************************
 131:poly.c        **** * Name:        poly_invntt_tomont
 132:poly.c        **** *
 133:poly.c        **** * Description: Inplace inverse NTT and multiplication by 2^{32}.
 134:poly.c        **** *              Input coefficients need to be less than Q in absolute
 135:poly.c        **** *              value and output coefficients are again bounded by Q.
 136:poly.c        **** *
 137:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
 138:poly.c        **** **************************************************/
 139:poly.c        **** void poly_invntt_tomont(poly *a) {
 420              		.loc 1 139 34
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 8
 423              		@ frame_needed = 1, uses_anonymous_args = 0
 424 0000 80B5     		push	{r7, lr}
 425              	.LCFI33:
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 7, -8
 428              		.cfi_offset 14, -4
 429 0002 82B0     		sub	sp, sp, #8
 430              	.LCFI34:
 431              		.cfi_def_cfa_offset 16
 432 0004 00AF     		add	r7, sp, #0
 433              	.LCFI35:
 434              		.cfi_def_cfa_register 7
 435 0006 7860     		str	r0, [r7, #4]
 140:poly.c        ****   DBENCH_START();
 141:poly.c        **** 
 142:poly.c        ****   invntt_tomont(a->coeffs);
 436              		.loc 1 142 18
 437 0008 7B68     		ldr	r3, [r7, #4]
 438              		.loc 1 142 3
 439 000a 1846     		mov	r0, r3
 440 000c FFF7FEFF 		bl	pqcrystals_dilithium2_ref_invntt_tomont
 143:poly.c        **** 
 144:poly.c        ****   DBENCH_STOP(*tmul);
 145:poly.c        **** }
 441              		.loc 1 145 1
 442 0010 00BF     		nop
 443 0012 0837     		adds	r7, r7, #8
 444              	.LCFI36:
 445              		.cfi_def_cfa_offset 8
 446 0014 BD46     		mov	sp, r7
 447              	.LCFI37:
 448              		.cfi_def_cfa_register 13
 449              		@ sp needed
 450 0016 80BD     		pop	{r7, pc}
 451              		.cfi_endproc
 452              	.LFE6:
 454              		.section	.text.pqcrystals_dilithium2_refpoly_pointwise_montgomery,"ax",%progbits
 455              		.align	1
 456              		.global	pqcrystals_dilithium2_refpoly_pointwise_montgomery
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 460              		.fpu softvfp
 462              	pqcrystals_dilithium2_refpoly_pointwise_montgomery:
 463              	.LFB7:
 146:poly.c        **** 
 147:poly.c        **** /*************************************************
 148:poly.c        **** * Name:        poly_pointwise_montgomery
 149:poly.c        **** *
 150:poly.c        **** * Description: Pointwise multiplication of polynomials in NTT domain
 151:poly.c        **** *              representation and multiplication of resulting polynomial
 152:poly.c        **** *              by 2^{-32}.
 153:poly.c        **** *
 154:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
 155:poly.c        **** *              - const poly *a: pointer to first input polynomial
 156:poly.c        **** *              - const poly *b: pointer to second input polynomial
 157:poly.c        **** **************************************************/
 158:poly.c        **** void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 464              		.loc 1 158 71
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 24
 467              		@ frame_needed = 1, uses_anonymous_args = 0
 468 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 469              	.LCFI38:
 470              		.cfi_def_cfa_offset 32
 471              		.cfi_offset 4, -32
 472              		.cfi_offset 5, -28
 473              		.cfi_offset 7, -24
 474              		.cfi_offset 8, -20
 475              		.cfi_offset 9, -16
 476              		.cfi_offset 10, -12
 477              		.cfi_offset 11, -8
 478              		.cfi_offset 14, -4
 479 0004 86B0     		sub	sp, sp, #24
 480              	.LCFI39:
 481              		.cfi_def_cfa_offset 56
 482 0006 00AF     		add	r7, sp, #0
 483              	.LCFI40:
 484              		.cfi_def_cfa_register 7
 485 0008 F860     		str	r0, [r7, #12]
 486 000a B960     		str	r1, [r7, #8]
 487 000c 7A60     		str	r2, [r7, #4]
 159:poly.c        ****   unsigned int i;
 160:poly.c        ****   DBENCH_START();
 161:poly.c        **** 
 162:poly.c        ****   for(i = 0; i < N; ++i)
 488              		.loc 1 162 9
 489 000e 0023     		movs	r3, #0
 490 0010 7B61     		str	r3, [r7, #20]
 491              		.loc 1 162 3
 492 0012 22E0     		b	.L19
 493              	.L20:
 163:poly.c        ****     c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 494              		.loc 1 163 56 discriminator 3
 495 0014 BB68     		ldr	r3, [r7, #8]
 496 0016 7A69     		ldr	r2, [r7, #20]
 497 0018 53F82230 		ldr	r3, [r3, r2, lsl #2]
 498              		.loc 1 163 38 discriminator 3
 499 001c DA17     		asrs	r2, r3, #31
 500 001e 9846     		mov	r8, r3
 501 0020 9146     		mov	r9, r2
 502              		.loc 1 163 71 discriminator 3
 503 0022 7B68     		ldr	r3, [r7, #4]
 504 0024 7A69     		ldr	r2, [r7, #20]
 505 0026 53F82230 		ldr	r3, [r3, r2, lsl #2]
 506 002a DA17     		asrs	r2, r3, #31
 507 002c 9A46     		mov	r10, r3
 508 002e 9346     		mov	fp, r2
 509              		.loc 1 163 20 discriminator 3
 510 0030 0AFB09F2 		mul	r2, r10, r9
 511 0034 08FB0BF3 		mul	r3, r8, fp
 512 0038 1344     		add	r3, r3, r2
 513 003a A8FB0A45 		umull	r4, r5, r8, r10
 514 003e 2B44     		add	r3, r3, r5
 515 0040 1D46     		mov	r5, r3
 516 0042 2046     		mov	r0, r4
 517 0044 2946     		mov	r1, r5
 518 0046 FFF7FEFF 		bl	pqcrystals_dilithium2_refmontgomery_reduce
 519 004a 0146     		mov	r1, r0
 520              		.loc 1 163 18 discriminator 3
 521 004c FB68     		ldr	r3, [r7, #12]
 522 004e 7A69     		ldr	r2, [r7, #20]
 523 0050 43F82210 		str	r1, [r3, r2, lsl #2]
 162:poly.c        ****     c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 524              		.loc 1 162 21 discriminator 3
 525 0054 7B69     		ldr	r3, [r7, #20]
 526 0056 0133     		adds	r3, r3, #1
 527 0058 7B61     		str	r3, [r7, #20]
 528              	.L19:
 162:poly.c        ****     c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 529              		.loc 1 162 3 discriminator 1
 530 005a 7B69     		ldr	r3, [r7, #20]
 531 005c FF2B     		cmp	r3, #255
 532 005e D9D9     		bls	.L20
 164:poly.c        **** 
 165:poly.c        ****   DBENCH_STOP(*tmul);
 166:poly.c        **** }
 533              		.loc 1 166 1
 534 0060 00BF     		nop
 535 0062 00BF     		nop
 536 0064 1837     		adds	r7, r7, #24
 537              	.LCFI41:
 538              		.cfi_def_cfa_offset 32
 539 0066 BD46     		mov	sp, r7
 540              	.LCFI42:
 541              		.cfi_def_cfa_register 13
 542              		@ sp needed
 543 0068 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 544              		.cfi_endproc
 545              	.LFE7:
 547              		.section	.text.pqcrystals_dilithium2_refpoly_power2round,"ax",%progbits
 548              		.align	1
 549              		.global	pqcrystals_dilithium2_refpoly_power2round
 550              		.syntax unified
 551              		.thumb
 552              		.thumb_func
 553              		.fpu softvfp
 555              	pqcrystals_dilithium2_refpoly_power2round:
 556              	.LFB8:
 167:poly.c        **** 
 168:poly.c        **** /*************************************************
 169:poly.c        **** * Name:        poly_power2round
 170:poly.c        **** *
 171:poly.c        **** * Description: For all coefficients c of the input polynomial,
 172:poly.c        **** *              compute c0, c1 such that c mod Q = c1*2^D + c0
 173:poly.c        **** *              with -2^{D-1} < c0 <= 2^{D-1}. Assumes coefficients to be
 174:poly.c        **** *              standard representatives.
 175:poly.c        **** *
 176:poly.c        **** * Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
 177:poly.c        **** *              - poly *a0: pointer to output polynomial with coefficients c0
 178:poly.c        **** *              - const poly *a: pointer to input polynomial
 179:poly.c        **** **************************************************/
 180:poly.c        **** void poly_power2round(poly *a1, poly *a0, const poly *a) {
 557              		.loc 1 180 58
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 24
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561 0000 80B5     		push	{r7, lr}
 562              	.LCFI43:
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 86B0     		sub	sp, sp, #24
 567              	.LCFI44:
 568              		.cfi_def_cfa_offset 32
 569 0004 00AF     		add	r7, sp, #0
 570              	.LCFI45:
 571              		.cfi_def_cfa_register 7
 572 0006 F860     		str	r0, [r7, #12]
 573 0008 B960     		str	r1, [r7, #8]
 574 000a 7A60     		str	r2, [r7, #4]
 181:poly.c        ****   unsigned int i;
 182:poly.c        ****   DBENCH_START();
 183:poly.c        **** 
 184:poly.c        ****   for(i = 0; i < N; ++i)
 575              		.loc 1 184 9
 576 000c 0023     		movs	r3, #0
 577 000e 7B61     		str	r3, [r7, #20]
 578              		.loc 1 184 3
 579 0010 12E0     		b	.L22
 580              	.L23:
 185:poly.c        ****     a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 581              		.loc 1 185 21 discriminator 3
 582 0012 7B69     		ldr	r3, [r7, #20]
 583 0014 9B00     		lsls	r3, r3, #2
 584 0016 BA68     		ldr	r2, [r7, #8]
 585 0018 D018     		adds	r0, r2, r3
 586 001a 7B68     		ldr	r3, [r7, #4]
 587 001c 7A69     		ldr	r2, [r7, #20]
 588 001e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 589 0022 1946     		mov	r1, r3
 590 0024 FFF7FEFF 		bl	pqcrystals_dilithium2_refpower2round
 591 0028 0146     		mov	r1, r0
 592              		.loc 1 185 19 discriminator 3
 593 002a FB68     		ldr	r3, [r7, #12]
 594 002c 7A69     		ldr	r2, [r7, #20]
 595 002e 43F82210 		str	r1, [r3, r2, lsl #2]
 184:poly.c        ****     a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 596              		.loc 1 184 21 discriminator 3
 597 0032 7B69     		ldr	r3, [r7, #20]
 598 0034 0133     		adds	r3, r3, #1
 599 0036 7B61     		str	r3, [r7, #20]
 600              	.L22:
 184:poly.c        ****     a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 601              		.loc 1 184 3 discriminator 1
 602 0038 7B69     		ldr	r3, [r7, #20]
 603 003a FF2B     		cmp	r3, #255
 604 003c E9D9     		bls	.L23
 186:poly.c        **** 
 187:poly.c        ****   DBENCH_STOP(*tround);
 188:poly.c        **** }
 605              		.loc 1 188 1
 606 003e 00BF     		nop
 607 0040 00BF     		nop
 608 0042 1837     		adds	r7, r7, #24
 609              	.LCFI46:
 610              		.cfi_def_cfa_offset 8
 611 0044 BD46     		mov	sp, r7
 612              	.LCFI47:
 613              		.cfi_def_cfa_register 13
 614              		@ sp needed
 615 0046 80BD     		pop	{r7, pc}
 616              		.cfi_endproc
 617              	.LFE8:
 619              		.section	.text.pqcrystals_dilithium2_refpoly_decompose,"ax",%progbits
 620              		.align	1
 621              		.global	pqcrystals_dilithium2_refpoly_decompose
 622              		.syntax unified
 623              		.thumb
 624              		.thumb_func
 625              		.fpu softvfp
 627              	pqcrystals_dilithium2_refpoly_decompose:
 628              	.LFB9:
 189:poly.c        **** 
 190:poly.c        **** /*************************************************
 191:poly.c        **** * Name:        poly_decompose
 192:poly.c        **** *
 193:poly.c        **** * Description: For all coefficients c of the input polynomial,
 194:poly.c        **** *              compute high and low bits c0, c1 such c mod Q = c1*ALPHA + c0
 195:poly.c        **** *              with -ALPHA/2 < c0 <= ALPHA/2 except c1 = (Q-1)/ALPHA where we
 196:poly.c        **** *              set c1 = 0 and -ALPHA/2 <= c0 = c mod Q - Q < 0.
 197:poly.c        **** *              Assumes coefficients to be standard representatives.
 198:poly.c        **** *
 199:poly.c        **** * Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
 200:poly.c        **** *              - poly *a0: pointer to output polynomial with coefficients c0
 201:poly.c        **** *              - const poly *a: pointer to input polynomial
 202:poly.c        **** **************************************************/
 203:poly.c        **** void poly_decompose(poly *a1, poly *a0, const poly *a) {
 629              		.loc 1 203 56
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 24
 632              		@ frame_needed = 1, uses_anonymous_args = 0
 633 0000 80B5     		push	{r7, lr}
 634              	.LCFI48:
 635              		.cfi_def_cfa_offset 8
 636              		.cfi_offset 7, -8
 637              		.cfi_offset 14, -4
 638 0002 86B0     		sub	sp, sp, #24
 639              	.LCFI49:
 640              		.cfi_def_cfa_offset 32
 641 0004 00AF     		add	r7, sp, #0
 642              	.LCFI50:
 643              		.cfi_def_cfa_register 7
 644 0006 F860     		str	r0, [r7, #12]
 645 0008 B960     		str	r1, [r7, #8]
 646 000a 7A60     		str	r2, [r7, #4]
 204:poly.c        ****   unsigned int i;
 205:poly.c        ****   DBENCH_START();
 206:poly.c        **** 
 207:poly.c        ****   for(i = 0; i < N; ++i)
 647              		.loc 1 207 9
 648 000c 0023     		movs	r3, #0
 649 000e 7B61     		str	r3, [r7, #20]
 650              		.loc 1 207 3
 651 0010 12E0     		b	.L25
 652              	.L26:
 208:poly.c        ****     a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 653              		.loc 1 208 21 discriminator 3
 654 0012 7B69     		ldr	r3, [r7, #20]
 655 0014 9B00     		lsls	r3, r3, #2
 656 0016 BA68     		ldr	r2, [r7, #8]
 657 0018 D018     		adds	r0, r2, r3
 658 001a 7B68     		ldr	r3, [r7, #4]
 659 001c 7A69     		ldr	r2, [r7, #20]
 660 001e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 661 0022 1946     		mov	r1, r3
 662 0024 FFF7FEFF 		bl	pqcrystals_dilithium2_refdecompose
 663 0028 0146     		mov	r1, r0
 664              		.loc 1 208 19 discriminator 3
 665 002a FB68     		ldr	r3, [r7, #12]
 666 002c 7A69     		ldr	r2, [r7, #20]
 667 002e 43F82210 		str	r1, [r3, r2, lsl #2]
 207:poly.c        ****     a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 668              		.loc 1 207 21 discriminator 3
 669 0032 7B69     		ldr	r3, [r7, #20]
 670 0034 0133     		adds	r3, r3, #1
 671 0036 7B61     		str	r3, [r7, #20]
 672              	.L25:
 207:poly.c        ****     a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 673              		.loc 1 207 3 discriminator 1
 674 0038 7B69     		ldr	r3, [r7, #20]
 675 003a FF2B     		cmp	r3, #255
 676 003c E9D9     		bls	.L26
 209:poly.c        **** 
 210:poly.c        ****   DBENCH_STOP(*tround);
 211:poly.c        **** }
 677              		.loc 1 211 1
 678 003e 00BF     		nop
 679 0040 00BF     		nop
 680 0042 1837     		adds	r7, r7, #24
 681              	.LCFI51:
 682              		.cfi_def_cfa_offset 8
 683 0044 BD46     		mov	sp, r7
 684              	.LCFI52:
 685              		.cfi_def_cfa_register 13
 686              		@ sp needed
 687 0046 80BD     		pop	{r7, pc}
 688              		.cfi_endproc
 689              	.LFE9:
 691              		.section	.text.pqcrystals_dilithium2_refpoly_make_hint,"ax",%progbits
 692              		.align	1
 693              		.global	pqcrystals_dilithium2_refpoly_make_hint
 694              		.syntax unified
 695              		.thumb
 696              		.thumb_func
 697              		.fpu softvfp
 699              	pqcrystals_dilithium2_refpoly_make_hint:
 700              	.LFB10:
 212:poly.c        **** 
 213:poly.c        **** /*************************************************
 214:poly.c        **** * Name:        poly_make_hint
 215:poly.c        **** *
 216:poly.c        **** * Description: Compute hint polynomial. The coefficients of which indicate
 217:poly.c        **** *              whether the low bits of the corresponding coefficient of
 218:poly.c        **** *              the input polynomial overflow into the high bits.
 219:poly.c        **** *
 220:poly.c        **** * Arguments:   - poly *h: pointer to output hint polynomial
 221:poly.c        **** *              - const poly *a0: pointer to low part of input polynomial
 222:poly.c        **** *              - const poly *a1: pointer to high part of input polynomial
 223:poly.c        **** *
 224:poly.c        **** * Returns number of 1 bits.
 225:poly.c        **** **************************************************/
 226:poly.c        **** unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 701              		.loc 1 226 70
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 24
 704              		@ frame_needed = 1, uses_anonymous_args = 0
 705 0000 80B5     		push	{r7, lr}
 706              	.LCFI53:
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 7, -8
 709              		.cfi_offset 14, -4
 710 0002 86B0     		sub	sp, sp, #24
 711              	.LCFI54:
 712              		.cfi_def_cfa_offset 32
 713 0004 00AF     		add	r7, sp, #0
 714              	.LCFI55:
 715              		.cfi_def_cfa_register 7
 716 0006 F860     		str	r0, [r7, #12]
 717 0008 B960     		str	r1, [r7, #8]
 718 000a 7A60     		str	r2, [r7, #4]
 227:poly.c        ****   unsigned int i, s = 0;
 719              		.loc 1 227 19
 720 000c 0023     		movs	r3, #0
 721 000e 3B61     		str	r3, [r7, #16]
 228:poly.c        ****   DBENCH_START();
 229:poly.c        **** 
 230:poly.c        ****   for(i = 0; i < N; ++i) {
 722              		.loc 1 230 9
 723 0010 0023     		movs	r3, #0
 724 0012 7B61     		str	r3, [r7, #20]
 725              		.loc 1 230 3
 726 0014 1BE0     		b	.L28
 727              	.L29:
 231:poly.c        ****     h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 728              		.loc 1 231 20 discriminator 3
 729 0016 BB68     		ldr	r3, [r7, #8]
 730 0018 7A69     		ldr	r2, [r7, #20]
 731 001a 53F82200 		ldr	r0, [r3, r2, lsl #2]
 732 001e 7B68     		ldr	r3, [r7, #4]
 733 0020 7A69     		ldr	r2, [r7, #20]
 734 0022 53F82230 		ldr	r3, [r3, r2, lsl #2]
 735 0026 1946     		mov	r1, r3
 736 0028 FFF7FEFF 		bl	pqcrystals_dilithium2_refmake_hint
 737 002c 0346     		mov	r3, r0
 738 002e 1946     		mov	r1, r3
 739              		.loc 1 231 18 discriminator 3
 740 0030 FB68     		ldr	r3, [r7, #12]
 741 0032 7A69     		ldr	r2, [r7, #20]
 742 0034 43F82210 		str	r1, [r3, r2, lsl #2]
 232:poly.c        ****     s += h->coeffs[i];
 743              		.loc 1 232 19 discriminator 3
 744 0038 FB68     		ldr	r3, [r7, #12]
 745 003a 7A69     		ldr	r2, [r7, #20]
 746 003c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 747 0040 1A46     		mov	r2, r3
 748              		.loc 1 232 7 discriminator 3
 749 0042 3B69     		ldr	r3, [r7, #16]
 750 0044 1344     		add	r3, r3, r2
 751 0046 3B61     		str	r3, [r7, #16]
 230:poly.c        ****     h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 752              		.loc 1 230 21 discriminator 3
 753 0048 7B69     		ldr	r3, [r7, #20]
 754 004a 0133     		adds	r3, r3, #1
 755 004c 7B61     		str	r3, [r7, #20]
 756              	.L28:
 230:poly.c        ****     h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 757              		.loc 1 230 3 discriminator 1
 758 004e 7B69     		ldr	r3, [r7, #20]
 759 0050 FF2B     		cmp	r3, #255
 760 0052 E0D9     		bls	.L29
 233:poly.c        ****   }
 234:poly.c        **** 
 235:poly.c        ****   DBENCH_STOP(*tround);
 236:poly.c        ****   return s;
 761              		.loc 1 236 10
 762 0054 3B69     		ldr	r3, [r7, #16]
 237:poly.c        **** }
 763              		.loc 1 237 1
 764 0056 1846     		mov	r0, r3
 765 0058 1837     		adds	r7, r7, #24
 766              	.LCFI56:
 767              		.cfi_def_cfa_offset 8
 768 005a BD46     		mov	sp, r7
 769              	.LCFI57:
 770              		.cfi_def_cfa_register 13
 771              		@ sp needed
 772 005c 80BD     		pop	{r7, pc}
 773              		.cfi_endproc
 774              	.LFE10:
 776              		.section	.text.pqcrystals_dilithium2_refpoly_use_hint,"ax",%progbits
 777              		.align	1
 778              		.global	pqcrystals_dilithium2_refpoly_use_hint
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 782              		.fpu softvfp
 784              	pqcrystals_dilithium2_refpoly_use_hint:
 785              	.LFB11:
 238:poly.c        **** 
 239:poly.c        **** /*************************************************
 240:poly.c        **** * Name:        poly_use_hint
 241:poly.c        **** *
 242:poly.c        **** * Description: Use hint polynomial to correct the high bits of a polynomial.
 243:poly.c        **** *
 244:poly.c        **** * Arguments:   - poly *b: pointer to output polynomial with corrected high bits
 245:poly.c        **** *              - const poly *a: pointer to input polynomial
 246:poly.c        **** *              - const poly *h: pointer to input hint polynomial
 247:poly.c        **** **************************************************/
 248:poly.c        **** void poly_use_hint(poly *b, const poly *a, const poly *h) {
 786              		.loc 1 248 59
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 24
 789              		@ frame_needed = 1, uses_anonymous_args = 0
 790 0000 80B5     		push	{r7, lr}
 791              	.LCFI58:
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 7, -8
 794              		.cfi_offset 14, -4
 795 0002 86B0     		sub	sp, sp, #24
 796              	.LCFI59:
 797              		.cfi_def_cfa_offset 32
 798 0004 00AF     		add	r7, sp, #0
 799              	.LCFI60:
 800              		.cfi_def_cfa_register 7
 801 0006 F860     		str	r0, [r7, #12]
 802 0008 B960     		str	r1, [r7, #8]
 803 000a 7A60     		str	r2, [r7, #4]
 249:poly.c        ****   unsigned int i;
 250:poly.c        ****   DBENCH_START();
 251:poly.c        **** 
 252:poly.c        ****   for(i = 0; i < N; ++i)
 804              		.loc 1 252 9
 805 000c 0023     		movs	r3, #0
 806 000e 7B61     		str	r3, [r7, #20]
 807              		.loc 1 252 3
 808 0010 12E0     		b	.L32
 809              	.L33:
 253:poly.c        ****     b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 810              		.loc 1 253 20 discriminator 3
 811 0012 BB68     		ldr	r3, [r7, #8]
 812 0014 7A69     		ldr	r2, [r7, #20]
 813 0016 53F82200 		ldr	r0, [r3, r2, lsl #2]
 814              		.loc 1 253 52 discriminator 3
 815 001a 7B68     		ldr	r3, [r7, #4]
 816 001c 7A69     		ldr	r2, [r7, #20]
 817 001e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 818              		.loc 1 253 20 discriminator 3
 819 0022 1946     		mov	r1, r3
 820 0024 FFF7FEFF 		bl	pqcrystals_dilithium2_refuse_hint
 821 0028 0146     		mov	r1, r0
 822              		.loc 1 253 18 discriminator 3
 823 002a FB68     		ldr	r3, [r7, #12]
 824 002c 7A69     		ldr	r2, [r7, #20]
 825 002e 43F82210 		str	r1, [r3, r2, lsl #2]
 252:poly.c        ****     b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 826              		.loc 1 252 21 discriminator 3
 827 0032 7B69     		ldr	r3, [r7, #20]
 828 0034 0133     		adds	r3, r3, #1
 829 0036 7B61     		str	r3, [r7, #20]
 830              	.L32:
 252:poly.c        ****     b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 831              		.loc 1 252 3 discriminator 1
 832 0038 7B69     		ldr	r3, [r7, #20]
 833 003a FF2B     		cmp	r3, #255
 834 003c E9D9     		bls	.L33
 254:poly.c        **** 
 255:poly.c        ****   DBENCH_STOP(*tround);
 256:poly.c        **** }
 835              		.loc 1 256 1
 836 003e 00BF     		nop
 837 0040 00BF     		nop
 838 0042 1837     		adds	r7, r7, #24
 839              	.LCFI61:
 840              		.cfi_def_cfa_offset 8
 841 0044 BD46     		mov	sp, r7
 842              	.LCFI62:
 843              		.cfi_def_cfa_register 13
 844              		@ sp needed
 845 0046 80BD     		pop	{r7, pc}
 846              		.cfi_endproc
 847              	.LFE11:
 849              		.section	.text.pqcrystals_dilithium2_refpoly_chknorm,"ax",%progbits
 850              		.align	1
 851              		.global	pqcrystals_dilithium2_refpoly_chknorm
 852              		.syntax unified
 853              		.thumb
 854              		.thumb_func
 855              		.fpu softvfp
 857              	pqcrystals_dilithium2_refpoly_chknorm:
 858              	.LFB12:
 257:poly.c        **** 
 258:poly.c        **** /*************************************************
 259:poly.c        **** * Name:        poly_chknorm
 260:poly.c        **** *
 261:poly.c        **** * Description: Check infinity norm of polynomial against given bound.
 262:poly.c        **** *              Assumes input coefficients were reduced by reduce32().
 263:poly.c        **** *
 264:poly.c        **** * Arguments:   - const poly *a: pointer to polynomial
 265:poly.c        **** *              - int32_t B: norm bound
 266:poly.c        **** *
 267:poly.c        **** * Returns 0 if norm is strictly smaller than B <= (Q-1)/8 and 1 otherwise.
 268:poly.c        **** **************************************************/
 269:poly.c        **** int poly_chknorm(const poly *a, int32_t B) {
 859              		.loc 1 269 44
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 16
 862              		@ frame_needed = 1, uses_anonymous_args = 0
 863              		@ link register save eliminated.
 864 0000 80B4     		push	{r7}
 865              	.LCFI63:
 866              		.cfi_def_cfa_offset 4
 867              		.cfi_offset 7, -4
 868 0002 85B0     		sub	sp, sp, #20
 869              	.LCFI64:
 870              		.cfi_def_cfa_offset 24
 871 0004 00AF     		add	r7, sp, #0
 872              	.LCFI65:
 873              		.cfi_def_cfa_register 7
 874 0006 7860     		str	r0, [r7, #4]
 875 0008 3960     		str	r1, [r7]
 270:poly.c        ****   unsigned int i;
 271:poly.c        ****   int32_t t;
 272:poly.c        ****   DBENCH_START();
 273:poly.c        **** 
 274:poly.c        ****   if(B > (Q-1)/8)
 876              		.loc 1 274 5
 877 000a 3B68     		ldr	r3, [r7]
 878 000c 164A     		ldr	r2, .L40
 879 000e 9342     		cmp	r3, r2
 880 0010 01DD     		ble	.L35
 275:poly.c        ****     return 1;
 881              		.loc 1 275 12
 882 0012 0123     		movs	r3, #1
 883 0014 22E0     		b	.L36
 884              	.L35:
 276:poly.c        **** 
 277:poly.c        ****   /* It is ok to leak which coefficient violates the bound since
 278:poly.c        ****      the probability for each coefficient is independent of secret
 279:poly.c        ****      data but we must not leak the sign of the centralized representative. */
 280:poly.c        ****   for(i = 0; i < N; ++i) {
 885              		.loc 1 280 9
 886 0016 0023     		movs	r3, #0
 887 0018 FB60     		str	r3, [r7, #12]
 888              		.loc 1 280 3
 889 001a 1BE0     		b	.L37
 890              	.L39:
 281:poly.c        ****     /* Absolute value */
 282:poly.c        ****     t = a->coeffs[i] >> 31;
 891              		.loc 1 282 18
 892 001c 7B68     		ldr	r3, [r7, #4]
 893 001e FA68     		ldr	r2, [r7, #12]
 894 0020 53F82230 		ldr	r3, [r3, r2, lsl #2]
 895              		.loc 1 282 7
 896 0024 DB17     		asrs	r3, r3, #31
 897 0026 BB60     		str	r3, [r7, #8]
 283:poly.c        ****     t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 898              		.loc 1 283 18
 899 0028 7B68     		ldr	r3, [r7, #4]
 900 002a FA68     		ldr	r2, [r7, #12]
 901 002c 53F82220 		ldr	r2, [r3, r2, lsl #2]
 902              		.loc 1 283 40
 903 0030 7B68     		ldr	r3, [r7, #4]
 904 0032 F968     		ldr	r1, [r7, #12]
 905 0034 53F82130 		ldr	r3, [r3, r1, lsl #2]
 906              		.loc 1 283 30
 907 0038 5900     		lsls	r1, r3, #1
 908              		.loc 1 283 27
 909 003a BB68     		ldr	r3, [r7, #8]
 910 003c 0B40     		ands	r3, r3, r1
 911              		.loc 1 283 7
 912 003e D31A     		subs	r3, r2, r3
 913 0040 BB60     		str	r3, [r7, #8]
 284:poly.c        **** 
 285:poly.c        ****     if(t >= B) {
 914              		.loc 1 285 7
 915 0042 BA68     		ldr	r2, [r7, #8]
 916 0044 3B68     		ldr	r3, [r7]
 917 0046 9A42     		cmp	r2, r3
 918 0048 01DB     		blt	.L38
 286:poly.c        ****       DBENCH_STOP(*tsample);
 287:poly.c        ****       return 1;
 919              		.loc 1 287 14
 920 004a 0123     		movs	r3, #1
 921 004c 06E0     		b	.L36
 922              	.L38:
 280:poly.c        ****     /* Absolute value */
 923              		.loc 1 280 21 discriminator 2
 924 004e FB68     		ldr	r3, [r7, #12]
 925 0050 0133     		adds	r3, r3, #1
 926 0052 FB60     		str	r3, [r7, #12]
 927              	.L37:
 280:poly.c        ****     /* Absolute value */
 928              		.loc 1 280 3 discriminator 1
 929 0054 FB68     		ldr	r3, [r7, #12]
 930 0056 FF2B     		cmp	r3, #255
 931 0058 E0D9     		bls	.L39
 288:poly.c        ****     }
 289:poly.c        ****   }
 290:poly.c        **** 
 291:poly.c        ****   DBENCH_STOP(*tsample);
 292:poly.c        ****   return 0;
 932              		.loc 1 292 10
 933 005a 0023     		movs	r3, #0
 934              	.L36:
 293:poly.c        **** }
 935              		.loc 1 293 1
 936 005c 1846     		mov	r0, r3
 937 005e 1437     		adds	r7, r7, #20
 938              	.LCFI66:
 939              		.cfi_def_cfa_offset 4
 940 0060 BD46     		mov	sp, r7
 941              	.LCFI67:
 942              		.cfi_def_cfa_register 13
 943              		@ sp needed
 944 0062 80BC     		pop	{r7}
 945              	.LCFI68:
 946              		.cfi_restore 7
 947              		.cfi_def_cfa_offset 0
 948 0064 7047     		bx	lr
 949              	.L41:
 950 0066 00BF     		.align	2
 951              	.L40:
 952 0068 00FC0F00 		.word	1047552
 953              		.cfi_endproc
 954              	.LFE12:
 956              		.section	.text.rej_uniform,"ax",%progbits
 957              		.align	1
 958              		.syntax unified
 959              		.thumb
 960              		.thumb_func
 961              		.fpu softvfp
 963              	rej_uniform:
 964              	.LFB13:
 294:poly.c        **** 
 295:poly.c        **** /*************************************************
 296:poly.c        **** * Name:        rej_uniform
 297:poly.c        **** *
 298:poly.c        **** * Description: Sample uniformly random coefficients in [0, Q-1] by
 299:poly.c        **** *              performing rejection sampling on array of random bytes.
 300:poly.c        **** *
 301:poly.c        **** * Arguments:   - int32_t *a: pointer to output array (allocated)
 302:poly.c        **** *              - unsigned int len: number of coefficients to be sampled
 303:poly.c        **** *              - const uint8_t *buf: array of random bytes
 304:poly.c        **** *              - unsigned int buflen: length of array of random bytes
 305:poly.c        **** *
 306:poly.c        **** * Returns number of sampled coefficients. Can be smaller than len if not enough
 307:poly.c        **** * random bytes were given.
 308:poly.c        **** **************************************************/
 309:poly.c        **** static unsigned int rej_uniform(int32_t *a,
 310:poly.c        ****                                 unsigned int len,
 311:poly.c        ****                                 const uint8_t *buf,
 312:poly.c        ****                                 unsigned int buflen)
 313:poly.c        **** {
 965              		.loc 1 313 1
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 32
 968              		@ frame_needed = 1, uses_anonymous_args = 0
 969              		@ link register save eliminated.
 970 0000 80B4     		push	{r7}
 971              	.LCFI69:
 972              		.cfi_def_cfa_offset 4
 973              		.cfi_offset 7, -4
 974 0002 89B0     		sub	sp, sp, #36
 975              	.LCFI70:
 976              		.cfi_def_cfa_offset 40
 977 0004 00AF     		add	r7, sp, #0
 978              	.LCFI71:
 979              		.cfi_def_cfa_register 7
 980 0006 F860     		str	r0, [r7, #12]
 981 0008 B960     		str	r1, [r7, #8]
 982 000a 7A60     		str	r2, [r7, #4]
 983 000c 3B60     		str	r3, [r7]
 314:poly.c        ****   unsigned int ctr, pos;
 315:poly.c        ****   uint32_t t;
 316:poly.c        ****   DBENCH_START();
 317:poly.c        **** 
 318:poly.c        ****   ctr = pos = 0;
 984              		.loc 1 318 13
 985 000e 0023     		movs	r3, #0
 986 0010 BB61     		str	r3, [r7, #24]
 987              		.loc 1 318 7
 988 0012 BB69     		ldr	r3, [r7, #24]
 989 0014 FB61     		str	r3, [r7, #28]
 319:poly.c        ****   while(ctr < len && pos + 3 <= buflen) {
 990              		.loc 1 319 8
 991 0016 2AE0     		b	.L43
 992              	.L45:
 320:poly.c        ****     t  = buf[pos++];
 993              		.loc 1 320 17
 994 0018 BB69     		ldr	r3, [r7, #24]
 995 001a 5A1C     		adds	r2, r3, #1
 996 001c BA61     		str	r2, [r7, #24]
 997              		.loc 1 320 13
 998 001e 7A68     		ldr	r2, [r7, #4]
 999 0020 1344     		add	r3, r3, r2
 1000 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1001              		.loc 1 320 8
 1002 0024 7B61     		str	r3, [r7, #20]
 321:poly.c        ****     t |= (uint32_t)buf[pos++] << 8;
 1003              		.loc 1 321 27
 1004 0026 BB69     		ldr	r3, [r7, #24]
 1005 0028 5A1C     		adds	r2, r3, #1
 1006 002a BA61     		str	r2, [r7, #24]
 1007              		.loc 1 321 23
 1008 002c 7A68     		ldr	r2, [r7, #4]
 1009 002e 1344     		add	r3, r3, r2
 1010 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1011              		.loc 1 321 31
 1012 0032 1B02     		lsls	r3, r3, #8
 1013              		.loc 1 321 7
 1014 0034 7A69     		ldr	r2, [r7, #20]
 1015 0036 1343     		orrs	r3, r3, r2
 1016 0038 7B61     		str	r3, [r7, #20]
 322:poly.c        ****     t |= (uint32_t)buf[pos++] << 16;
 1017              		.loc 1 322 27
 1018 003a BB69     		ldr	r3, [r7, #24]
 1019 003c 5A1C     		adds	r2, r3, #1
 1020 003e BA61     		str	r2, [r7, #24]
 1021              		.loc 1 322 23
 1022 0040 7A68     		ldr	r2, [r7, #4]
 1023 0042 1344     		add	r3, r3, r2
 1024 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1025              		.loc 1 322 31
 1026 0046 1B04     		lsls	r3, r3, #16
 1027              		.loc 1 322 7
 1028 0048 7A69     		ldr	r2, [r7, #20]
 1029 004a 1343     		orrs	r3, r3, r2
 1030 004c 7B61     		str	r3, [r7, #20]
 323:poly.c        ****     t &= 0x7FFFFF;
 1031              		.loc 1 323 7
 1032 004e 7B69     		ldr	r3, [r7, #20]
 1033 0050 C3F31603 		ubfx	r3, r3, #0, #23
 1034 0054 7B61     		str	r3, [r7, #20]
 324:poly.c        **** 
 325:poly.c        ****     if(t < Q)
 1035              		.loc 1 325 7
 1036 0056 7B69     		ldr	r3, [r7, #20]
 1037 0058 0C4A     		ldr	r2, .L47
 1038 005a 9342     		cmp	r3, r2
 1039 005c 07D8     		bhi	.L43
 326:poly.c        ****       a[ctr++] = t;
 1040              		.loc 1 326 12
 1041 005e FB69     		ldr	r3, [r7, #28]
 1042 0060 5A1C     		adds	r2, r3, #1
 1043 0062 FA61     		str	r2, [r7, #28]
 1044              		.loc 1 326 8
 1045 0064 9B00     		lsls	r3, r3, #2
 1046 0066 FA68     		ldr	r2, [r7, #12]
 1047 0068 1344     		add	r3, r3, r2
 1048              		.loc 1 326 16
 1049 006a 7A69     		ldr	r2, [r7, #20]
 1050 006c 1A60     		str	r2, [r3]
 1051              	.L43:
 319:poly.c        ****     t  = buf[pos++];
 1052              		.loc 1 319 8
 1053 006e FA69     		ldr	r2, [r7, #28]
 1054 0070 BB68     		ldr	r3, [r7, #8]
 1055 0072 9A42     		cmp	r2, r3
 1056 0074 04D2     		bcs	.L44
 319:poly.c        ****     t  = buf[pos++];
 1057              		.loc 1 319 26 discriminator 1
 1058 0076 BB69     		ldr	r3, [r7, #24]
 1059 0078 0333     		adds	r3, r3, #3
 319:poly.c        ****     t  = buf[pos++];
 1060              		.loc 1 319 19 discriminator 1
 1061 007a 3A68     		ldr	r2, [r7]
 1062 007c 9A42     		cmp	r2, r3
 1063 007e CBD2     		bcs	.L45
 1064              	.L44:
 327:poly.c        ****   }
 328:poly.c        **** 
 329:poly.c        ****   DBENCH_STOP(*tsample);
 330:poly.c        ****   return ctr;
 1065              		.loc 1 330 10
 1066 0080 FB69     		ldr	r3, [r7, #28]
 331:poly.c        **** }
 1067              		.loc 1 331 1
 1068 0082 1846     		mov	r0, r3
 1069 0084 2437     		adds	r7, r7, #36
 1070              	.LCFI72:
 1071              		.cfi_def_cfa_offset 4
 1072 0086 BD46     		mov	sp, r7
 1073              	.LCFI73:
 1074              		.cfi_def_cfa_register 13
 1075              		@ sp needed
 1076 0088 80BC     		pop	{r7}
 1077              	.LCFI74:
 1078              		.cfi_restore 7
 1079              		.cfi_def_cfa_offset 0
 1080 008a 7047     		bx	lr
 1081              	.L48:
 1082              		.align	2
 1083              	.L47:
 1084 008c 00E07F00 		.word	8380416
 1085              		.cfi_endproc
 1086              	.LFE13:
 1088              		.section	.text.pqcrystals_dilithium2_refpoly_uniform,"ax",%progbits
 1089              		.align	1
 1090              		.global	pqcrystals_dilithium2_refpoly_uniform
 1091              		.syntax unified
 1092              		.thumb
 1093              		.thumb_func
 1094              		.fpu softvfp
 1096              	pqcrystals_dilithium2_refpoly_uniform:
 1097              	.LFB14:
 332:poly.c        **** 
 333:poly.c        **** /*************************************************
 334:poly.c        **** * Name:        poly_uniform
 335:poly.c        **** *
 336:poly.c        **** * Description: Sample polynomial with uniformly random coefficients
 337:poly.c        **** *              in [0,Q-1] by performing rejection sampling on the
 338:poly.c        **** *              output stream of SHAKE256(seed|nonce) or AES256CTR(seed,nonce).
 339:poly.c        **** *
 340:poly.c        **** * Arguments:   - poly *a: pointer to output polynomial
 341:poly.c        **** *              - const uint8_t seed[]: byte array with seed of length SEEDBYTES
 342:poly.c        **** *              - uint16_t nonce: 2-byte nonce
 343:poly.c        **** **************************************************/
 344:poly.c        **** #define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
 345:poly.c        **** void poly_uniform(poly *a,
 346:poly.c        ****                   const uint8_t seed[SEEDBYTES],
 347:poly.c        ****                   uint16_t nonce)
 348:poly.c        **** {
 1098              		.loc 1 348 1
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 1088
 1101              		@ frame_needed = 1, uses_anonymous_args = 0
 1102 0000 80B5     		push	{r7, lr}
 1103              	.LCFI75:
 1104              		.cfi_def_cfa_offset 8
 1105              		.cfi_offset 7, -8
 1106              		.cfi_offset 14, -4
 1107 0002 ADF5886D 		sub	sp, sp, #1088
 1108              	.LCFI76:
 1109              		.cfi_def_cfa_offset 1096
 1110 0006 00AF     		add	r7, sp, #0
 1111              	.LCFI77:
 1112              		.cfi_def_cfa_register 7
 1113 0008 07F58863 		add	r3, r7, #1088
 1114 000c A3F23443 		subw	r3, r3, #1076
 1115 0010 1860     		str	r0, [r3]
 1116 0012 07F58863 		add	r3, r7, #1088
 1117 0016 A3F58763 		sub	r3, r3, #1080
 1118 001a 1960     		str	r1, [r3]
 1119 001c 07F58863 		add	r3, r7, #1088
 1120 0020 A3F23A43 		subw	r3, r3, #1082
 1121 0024 1A80     		strh	r2, [r3]	@ movhi
 349:poly.c        ****   unsigned int i, ctr, off;
 350:poly.c        ****   unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 1122              		.loc 1 350 16
 1123 0026 4FF45273 		mov	r3, #840
 1124 002a C7F83434 		str	r3, [r7, #1076]
 351:poly.c        ****   uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2];
 352:poly.c        ****   stream128_state state;
 353:poly.c        **** 
 354:poly.c        ****   stream128_init(&state, seed, nonce);
 1125              		.loc 1 354 3
 1126 002e 07F58863 		add	r3, r7, #1088
 1127 0032 A3F23A43 		subw	r3, r3, #1082
 1128 0036 1A88     		ldrh	r2, [r3]
 1129 0038 07F58863 		add	r3, r7, #1088
 1130 003c A3F58763 		sub	r3, r3, #1080
 1131 0040 07F11000 		add	r0, r7, #16
 1132 0044 1968     		ldr	r1, [r3]
 1133 0046 FFF7FEFF 		bl	pqcrystals_dilithium2_refdilithium_shake128_stream_init
 355:poly.c        ****   stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 1134              		.loc 1 355 3
 1135 004a 07F11002 		add	r2, r7, #16
 1136 004e 07F1E403 		add	r3, r7, #228
 1137 0052 0521     		movs	r1, #5
 1138 0054 1846     		mov	r0, r3
 1139 0056 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks
 356:poly.c        **** 
 357:poly.c        ****   ctr = rej_uniform(a->coeffs, N, buf, buflen);
 1140              		.loc 1 357 22
 1141 005a 07F58863 		add	r3, r7, #1088
 1142 005e A3F23443 		subw	r3, r3, #1076
 1143 0062 1868     		ldr	r0, [r3]
 1144              		.loc 1 357 9
 1145 0064 07F1E402 		add	r2, r7, #228
 1146 0068 D7F83434 		ldr	r3, [r7, #1076]
 1147 006c 4FF48071 		mov	r1, #256
 1148 0070 FFF7FEFF 		bl	rej_uniform
 1149 0074 C7F83804 		str	r0, [r7, #1080]
 358:poly.c        **** 
 359:poly.c        ****   while(ctr < N) {
 1150              		.loc 1 359 8
 1151 0078 59E0     		b	.L50
 1152              	.L53:
 360:poly.c        ****     off = buflen % 3;
 1153              		.loc 1 360 9
 1154 007a D7F83424 		ldr	r2, [r7, #1076]
 1155 007e 314B     		ldr	r3, .L54
 1156 0080 A3FB0213 		umull	r1, r3, r3, r2
 1157 0084 5908     		lsrs	r1, r3, #1
 1158 0086 0B46     		mov	r3, r1
 1159 0088 5B00     		lsls	r3, r3, #1
 1160 008a 0B44     		add	r3, r3, r1
 1161 008c D31A     		subs	r3, r2, r3
 1162 008e C7F83034 		str	r3, [r7, #1072]
 361:poly.c        ****     for(i = 0; i < off; ++i)
 1163              		.loc 1 361 11
 1164 0092 0023     		movs	r3, #0
 1165 0094 C7F83C34 		str	r3, [r7, #1084]
 1166              		.loc 1 361 5
 1167 0098 1AE0     		b	.L51
 1168              	.L52:
 362:poly.c        ****       buf[i] = buf[buflen - off + i];
 1169              		.loc 1 362 27 discriminator 3
 1170 009a D7F83424 		ldr	r2, [r7, #1076]
 1171 009e D7F83034 		ldr	r3, [r7, #1072]
 1172 00a2 D21A     		subs	r2, r2, r3
 1173              		.loc 1 362 33 discriminator 3
 1174 00a4 D7F83C34 		ldr	r3, [r7, #1084]
 1175 00a8 1344     		add	r3, r3, r2
 1176              		.loc 1 362 19 discriminator 3
 1177 00aa 07F58862 		add	r2, r7, #1088
 1178 00ae A2F55772 		sub	r2, r2, #860
 1179 00b2 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1180              		.loc 1 362 14 discriminator 3
 1181 00b4 07F58863 		add	r3, r7, #1088
 1182 00b8 A3F55772 		sub	r2, r3, #860
 1183 00bc D7F83C34 		ldr	r3, [r7, #1084]
 1184 00c0 1344     		add	r3, r3, r2
 1185 00c2 0A46     		mov	r2, r1
 1186 00c4 1A70     		strb	r2, [r3]
 361:poly.c        ****     for(i = 0; i < off; ++i)
 1187              		.loc 1 361 25 discriminator 3
 1188 00c6 D7F83C34 		ldr	r3, [r7, #1084]
 1189 00ca 0133     		adds	r3, r3, #1
 1190 00cc C7F83C34 		str	r3, [r7, #1084]
 1191              	.L51:
 361:poly.c        ****     for(i = 0; i < off; ++i)
 1192              		.loc 1 361 5 discriminator 1
 1193 00d0 D7F83C24 		ldr	r2, [r7, #1084]
 1194 00d4 D7F83034 		ldr	r3, [r7, #1072]
 1195 00d8 9A42     		cmp	r2, r3
 1196 00da DED3     		bcc	.L52
 363:poly.c        **** 
 364:poly.c        ****     stream128_squeezeblocks(buf + off, 1, &state);
 1197              		.loc 1 364 5
 1198 00dc 07F1E402 		add	r2, r7, #228
 1199 00e0 D7F83034 		ldr	r3, [r7, #1072]
 1200 00e4 1344     		add	r3, r3, r2
 1201 00e6 07F11002 		add	r2, r7, #16
 1202 00ea 0121     		movs	r1, #1
 1203 00ec 1846     		mov	r0, r3
 1204 00ee FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks
 365:poly.c        ****     buflen = STREAM128_BLOCKBYTES + off;
 1205              		.loc 1 365 12
 1206 00f2 D7F83034 		ldr	r3, [r7, #1072]
 1207 00f6 A833     		adds	r3, r3, #168
 1208 00f8 C7F83434 		str	r3, [r7, #1076]
 366:poly.c        ****     ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 1209              		.loc 1 366 24
 1210 00fc 07F58863 		add	r3, r7, #1088
 1211 0100 A3F23443 		subw	r3, r3, #1076
 1212 0104 1A68     		ldr	r2, [r3]
 1213              		.loc 1 366 34
 1214 0106 D7F83834 		ldr	r3, [r7, #1080]
 1215 010a 9B00     		lsls	r3, r3, #2
 1216              		.loc 1 366 12
 1217 010c D018     		adds	r0, r2, r3
 1218 010e D7F83834 		ldr	r3, [r7, #1080]
 1219 0112 C3F58071 		rsb	r1, r3, #256
 1220 0116 07F1E402 		add	r2, r7, #228
 1221 011a D7F83434 		ldr	r3, [r7, #1076]
 1222 011e FFF7FEFF 		bl	rej_uniform
 1223 0122 0246     		mov	r2, r0
 1224              		.loc 1 366 9
 1225 0124 D7F83834 		ldr	r3, [r7, #1080]
 1226 0128 1344     		add	r3, r3, r2
 1227 012a C7F83834 		str	r3, [r7, #1080]
 1228              	.L50:
 359:poly.c        ****     off = buflen % 3;
 1229              		.loc 1 359 8
 1230 012e D7F83834 		ldr	r3, [r7, #1080]
 1231 0132 FF2B     		cmp	r3, #255
 1232 0134 A1D9     		bls	.L53
 367:poly.c        ****   }
 368:poly.c        **** }
 1233              		.loc 1 368 1
 1234 0136 00BF     		nop
 1235 0138 00BF     		nop
 1236 013a 07F58867 		add	r7, r7, #1088
 1237              	.LCFI78:
 1238              		.cfi_def_cfa_offset 8
 1239 013e BD46     		mov	sp, r7
 1240              	.LCFI79:
 1241              		.cfi_def_cfa_register 13
 1242              		@ sp needed
 1243 0140 80BD     		pop	{r7, pc}
 1244              	.L55:
 1245 0142 00BF     		.align	2
 1246              	.L54:
 1247 0144 ABAAAAAA 		.word	-1431655765
 1248              		.cfi_endproc
 1249              	.LFE14:
 1251              		.section	.text.rej_eta,"ax",%progbits
 1252              		.align	1
 1253              		.syntax unified
 1254              		.thumb
 1255              		.thumb_func
 1256              		.fpu softvfp
 1258              	rej_eta:
 1259              	.LFB15:
 369:poly.c        **** 
 370:poly.c        **** /*************************************************
 371:poly.c        **** * Name:        rej_eta
 372:poly.c        **** *
 373:poly.c        **** * Description: Sample uniformly random coefficients in [-ETA, ETA] by
 374:poly.c        **** *              performing rejection sampling on array of random bytes.
 375:poly.c        **** *
 376:poly.c        **** * Arguments:   - int32_t *a: pointer to output array (allocated)
 377:poly.c        **** *              - unsigned int len: number of coefficients to be sampled
 378:poly.c        **** *              - const uint8_t *buf: array of random bytes
 379:poly.c        **** *              - unsigned int buflen: length of array of random bytes
 380:poly.c        **** *
 381:poly.c        **** * Returns number of sampled coefficients. Can be smaller than len if not enough
 382:poly.c        **** * random bytes were given.
 383:poly.c        **** **************************************************/
 384:poly.c        **** static unsigned int rej_eta(int32_t *a,
 385:poly.c        ****                             unsigned int len,
 386:poly.c        ****                             const uint8_t *buf,
 387:poly.c        ****                             unsigned int buflen)
 388:poly.c        **** {
 1260              		.loc 1 388 1
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 32
 1263              		@ frame_needed = 1, uses_anonymous_args = 0
 1264              		@ link register save eliminated.
 1265 0000 80B4     		push	{r7}
 1266              	.LCFI80:
 1267              		.cfi_def_cfa_offset 4
 1268              		.cfi_offset 7, -4
 1269 0002 89B0     		sub	sp, sp, #36
 1270              	.LCFI81:
 1271              		.cfi_def_cfa_offset 40
 1272 0004 00AF     		add	r7, sp, #0
 1273              	.LCFI82:
 1274              		.cfi_def_cfa_register 7
 1275 0006 F860     		str	r0, [r7, #12]
 1276 0008 B960     		str	r1, [r7, #8]
 1277 000a 7A60     		str	r2, [r7, #4]
 1278 000c 3B60     		str	r3, [r7]
 389:poly.c        ****   unsigned int ctr, pos;
 390:poly.c        ****   uint32_t t0, t1;
 391:poly.c        ****   DBENCH_START();
 392:poly.c        **** 
 393:poly.c        ****   ctr = pos = 0;
 1279              		.loc 1 393 13
 1280 000e 0023     		movs	r3, #0
 1281 0010 BB61     		str	r3, [r7, #24]
 1282              		.loc 1 393 7
 1283 0012 BB69     		ldr	r3, [r7, #24]
 1284 0014 FB61     		str	r3, [r7, #28]
 394:poly.c        ****   while(ctr < len && pos < buflen) {
 1285              		.loc 1 394 8
 1286 0016 45E0     		b	.L57
 1287              	.L60:
 395:poly.c        ****     t0 = buf[pos] & 0x0F;
 1288              		.loc 1 395 13
 1289 0018 7A68     		ldr	r2, [r7, #4]
 1290 001a BB69     		ldr	r3, [r7, #24]
 1291 001c 1344     		add	r3, r3, r2
 1292 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1293              		.loc 1 395 8
 1294 0020 03F00F03 		and	r3, r3, #15
 1295 0024 7B61     		str	r3, [r7, #20]
 396:poly.c        ****     t1 = buf[pos++] >> 4;
 1296              		.loc 1 396 17
 1297 0026 BB69     		ldr	r3, [r7, #24]
 1298 0028 5A1C     		adds	r2, r3, #1
 1299 002a BA61     		str	r2, [r7, #24]
 1300              		.loc 1 396 13
 1301 002c 7A68     		ldr	r2, [r7, #4]
 1302 002e 1344     		add	r3, r3, r2
 1303 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1304              		.loc 1 396 21
 1305 0032 1B09     		lsrs	r3, r3, #4
 1306 0034 DBB2     		uxtb	r3, r3
 1307              		.loc 1 396 8
 1308 0036 3B61     		str	r3, [r7, #16]
 397:poly.c        **** 
 398:poly.c        **** #if ETA == 2
 399:poly.c        ****     if(t0 < 15) {
 1309              		.loc 1 399 7
 1310 0038 7B69     		ldr	r3, [r7, #20]
 1311 003a 0E2B     		cmp	r3, #14
 1312 003c 15D8     		bhi	.L58
 400:poly.c        ****       t0 = t0 - (205*t0 >> 10)*5;
 1313              		.loc 1 400 21
 1314 003e 7B69     		ldr	r3, [r7, #20]
 1315 0040 CD22     		movs	r2, #205
 1316 0042 02FB03F3 		mul	r3, r2, r3
 1317              		.loc 1 400 25
 1318 0046 9A0A     		lsrs	r2, r3, #10
 1319              		.loc 1 400 31
 1320 0048 1346     		mov	r3, r2
 1321 004a 9B00     		lsls	r3, r3, #2
 1322 004c 1344     		add	r3, r3, r2
 1323              		.loc 1 400 10
 1324 004e 7A69     		ldr	r2, [r7, #20]
 1325 0050 D31A     		subs	r3, r2, r3
 1326 0052 7B61     		str	r3, [r7, #20]
 401:poly.c        ****       a[ctr++] = 2 - t0;
 1327              		.loc 1 401 20
 1328 0054 7B69     		ldr	r3, [r7, #20]
 1329 0056 C3F10201 		rsb	r1, r3, #2
 1330              		.loc 1 401 12
 1331 005a FB69     		ldr	r3, [r7, #28]
 1332 005c 5A1C     		adds	r2, r3, #1
 1333 005e FA61     		str	r2, [r7, #28]
 1334              		.loc 1 401 8
 1335 0060 9B00     		lsls	r3, r3, #2
 1336 0062 FA68     		ldr	r2, [r7, #12]
 1337 0064 1344     		add	r3, r3, r2
 1338              		.loc 1 401 20
 1339 0066 0A46     		mov	r2, r1
 1340              		.loc 1 401 16
 1341 0068 1A60     		str	r2, [r3]
 1342              	.L58:
 402:poly.c        ****     }
 403:poly.c        ****     if(t1 < 15 && ctr < len) {
 1343              		.loc 1 403 7
 1344 006a 3B69     		ldr	r3, [r7, #16]
 1345 006c 0E2B     		cmp	r3, #14
 1346 006e 19D8     		bhi	.L57
 1347              		.loc 1 403 16 discriminator 1
 1348 0070 FA69     		ldr	r2, [r7, #28]
 1349 0072 BB68     		ldr	r3, [r7, #8]
 1350 0074 9A42     		cmp	r2, r3
 1351 0076 15D2     		bcs	.L57
 404:poly.c        ****       t1 = t1 - (205*t1 >> 10)*5;
 1352              		.loc 1 404 21
 1353 0078 3B69     		ldr	r3, [r7, #16]
 1354 007a CD22     		movs	r2, #205
 1355 007c 02FB03F3 		mul	r3, r2, r3
 1356              		.loc 1 404 25
 1357 0080 9A0A     		lsrs	r2, r3, #10
 1358              		.loc 1 404 31
 1359 0082 1346     		mov	r3, r2
 1360 0084 9B00     		lsls	r3, r3, #2
 1361 0086 1344     		add	r3, r3, r2
 1362              		.loc 1 404 10
 1363 0088 3A69     		ldr	r2, [r7, #16]
 1364 008a D31A     		subs	r3, r2, r3
 1365 008c 3B61     		str	r3, [r7, #16]
 405:poly.c        ****       a[ctr++] = 2 - t1;
 1366              		.loc 1 405 20
 1367 008e 3B69     		ldr	r3, [r7, #16]
 1368 0090 C3F10201 		rsb	r1, r3, #2
 1369              		.loc 1 405 12
 1370 0094 FB69     		ldr	r3, [r7, #28]
 1371 0096 5A1C     		adds	r2, r3, #1
 1372 0098 FA61     		str	r2, [r7, #28]
 1373              		.loc 1 405 8
 1374 009a 9B00     		lsls	r3, r3, #2
 1375 009c FA68     		ldr	r2, [r7, #12]
 1376 009e 1344     		add	r3, r3, r2
 1377              		.loc 1 405 20
 1378 00a0 0A46     		mov	r2, r1
 1379              		.loc 1 405 16
 1380 00a2 1A60     		str	r2, [r3]
 1381              	.L57:
 394:poly.c        ****     t0 = buf[pos] & 0x0F;
 1382              		.loc 1 394 8
 1383 00a4 FA69     		ldr	r2, [r7, #28]
 1384 00a6 BB68     		ldr	r3, [r7, #8]
 1385 00a8 9A42     		cmp	r2, r3
 1386 00aa 03D2     		bcs	.L59
 394:poly.c        ****     t0 = buf[pos] & 0x0F;
 1387              		.loc 1 394 19 discriminator 1
 1388 00ac BA69     		ldr	r2, [r7, #24]
 1389 00ae 3B68     		ldr	r3, [r7]
 1390 00b0 9A42     		cmp	r2, r3
 1391 00b2 B1D3     		bcc	.L60
 1392              	.L59:
 406:poly.c        ****     }
 407:poly.c        **** #elif ETA == 4
 408:poly.c        ****     if(t0 < 9)
 409:poly.c        ****       a[ctr++] = 4 - t0;
 410:poly.c        ****     if(t1 < 9 && ctr < len)
 411:poly.c        ****       a[ctr++] = 4 - t1;
 412:poly.c        **** #endif
 413:poly.c        ****   }
 414:poly.c        **** 
 415:poly.c        ****   DBENCH_STOP(*tsample);
 416:poly.c        ****   return ctr;
 1393              		.loc 1 416 10
 1394 00b4 FB69     		ldr	r3, [r7, #28]
 417:poly.c        **** }
 1395              		.loc 1 417 1
 1396 00b6 1846     		mov	r0, r3
 1397 00b8 2437     		adds	r7, r7, #36
 1398              	.LCFI83:
 1399              		.cfi_def_cfa_offset 4
 1400 00ba BD46     		mov	sp, r7
 1401              	.LCFI84:
 1402              		.cfi_def_cfa_register 13
 1403              		@ sp needed
 1404 00bc 80BC     		pop	{r7}
 1405              	.LCFI85:
 1406              		.cfi_restore 7
 1407              		.cfi_def_cfa_offset 0
 1408 00be 7047     		bx	lr
 1409              		.cfi_endproc
 1410              	.LFE15:
 1412              		.section	.text.pqcrystals_dilithium2_refpoly_uniform_eta,"ax",%progbits
 1413              		.align	1
 1414              		.global	pqcrystals_dilithium2_refpoly_uniform_eta
 1415              		.syntax unified
 1416              		.thumb
 1417              		.thumb_func
 1418              		.fpu softvfp
 1420              	pqcrystals_dilithium2_refpoly_uniform_eta:
 1421              	.LFB16:
 418:poly.c        **** 
 419:poly.c        **** /*************************************************
 420:poly.c        **** * Name:        poly_uniform_eta
 421:poly.c        **** *
 422:poly.c        **** * Description: Sample polynomial with uniformly random coefficients
 423:poly.c        **** *              in [-ETA,ETA] by performing rejection sampling on the
 424:poly.c        **** *              output stream from SHAKE256(seed|nonce) or AES256CTR(seed,nonce).
 425:poly.c        **** *
 426:poly.c        **** * Arguments:   - poly *a: pointer to output polynomial
 427:poly.c        **** *              - const uint8_t seed[]: byte array with seed of length CRHBYTES
 428:poly.c        **** *              - uint16_t nonce: 2-byte nonce
 429:poly.c        **** **************************************************/
 430:poly.c        **** #if ETA == 2
 431:poly.c        **** #define POLY_UNIFORM_ETA_NBLOCKS ((136 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
 432:poly.c        **** #elif ETA == 4
 433:poly.c        **** #define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
 434:poly.c        **** #endif
 435:poly.c        **** void poly_uniform_eta(poly *a,
 436:poly.c        ****                       const uint8_t seed[CRHBYTES],
 437:poly.c        ****                       uint16_t nonce)
 438:poly.c        **** {
 1422              		.loc 1 438 1
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 368
 1425              		@ frame_needed = 1, uses_anonymous_args = 0
 1426 0000 80B5     		push	{r7, lr}
 1427              	.LCFI86:
 1428              		.cfi_def_cfa_offset 8
 1429              		.cfi_offset 7, -8
 1430              		.cfi_offset 14, -4
 1431 0002 DCB0     		sub	sp, sp, #368
 1432              	.LCFI87:
 1433              		.cfi_def_cfa_offset 376
 1434 0004 00AF     		add	r7, sp, #0
 1435              	.LCFI88:
 1436              		.cfi_def_cfa_register 7
 1437 0006 07F5B873 		add	r3, r7, #368
 1438 000a A3F5B273 		sub	r3, r3, #356
 1439 000e 1860     		str	r0, [r3]
 1440 0010 07F5B873 		add	r3, r7, #368
 1441 0014 A3F5B473 		sub	r3, r3, #360
 1442 0018 1960     		str	r1, [r3]
 1443 001a 07F5B873 		add	r3, r7, #368
 1444 001e A3F5B573 		sub	r3, r3, #362
 1445 0022 1A80     		strh	r2, [r3]	@ movhi
 439:poly.c        ****   unsigned int ctr;
 440:poly.c        ****   unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS*STREAM256_BLOCKBYTES;
 1446              		.loc 1 440 16
 1447 0024 8823     		movs	r3, #136
 1448 0026 C7F86831 		str	r3, [r7, #360]
 441:poly.c        ****   uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM256_BLOCKBYTES];
 442:poly.c        ****   stream256_state state;
 443:poly.c        **** 
 444:poly.c        ****   stream256_init(&state, seed, nonce);
 1449              		.loc 1 444 3
 1450 002a 07F5B873 		add	r3, r7, #368
 1451 002e A3F5B573 		sub	r3, r3, #362
 1452 0032 1A88     		ldrh	r2, [r3]
 1453 0034 07F5B873 		add	r3, r7, #368
 1454 0038 A3F5B473 		sub	r3, r3, #360
 1455 003c 07F11000 		add	r0, r7, #16
 1456 0040 1968     		ldr	r1, [r3]
 1457 0042 FFF7FEFF 		bl	pqcrystals_dilithium2_refdilithium_shake256_stream_init
 445:poly.c        ****   stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 1458              		.loc 1 445 3
 1459 0046 07F11002 		add	r2, r7, #16
 1460 004a 07F1E003 		add	r3, r7, #224
 1461 004e 0121     		movs	r1, #1
 1462 0050 1846     		mov	r0, r3
 1463 0052 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks
 446:poly.c        **** 
 447:poly.c        ****   ctr = rej_eta(a->coeffs, N, buf, buflen);
 1464              		.loc 1 447 18
 1465 0056 07F5B873 		add	r3, r7, #368
 1466 005a A3F5B273 		sub	r3, r3, #356
 1467 005e 1868     		ldr	r0, [r3]
 1468              		.loc 1 447 9
 1469 0060 07F1E002 		add	r2, r7, #224
 1470 0064 D7F86831 		ldr	r3, [r7, #360]
 1471 0068 4FF48071 		mov	r1, #256
 1472 006c FFF7FEFF 		bl	rej_eta
 1473 0070 C7F86C01 		str	r0, [r7, #364]
 448:poly.c        **** 
 449:poly.c        ****   while(ctr < N) {
 1474              		.loc 1 449 8
 1475 0074 1FE0     		b	.L63
 1476              	.L64:
 450:poly.c        ****     stream256_squeezeblocks(buf, 1, &state);
 1477              		.loc 1 450 5
 1478 0076 07F11002 		add	r2, r7, #16
 1479 007a 07F1E003 		add	r3, r7, #224
 1480 007e 0121     		movs	r1, #1
 1481 0080 1846     		mov	r0, r3
 1482 0082 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks
 451:poly.c        ****     ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 1483              		.loc 1 451 20
 1484 0086 07F5B873 		add	r3, r7, #368
 1485 008a A3F5B273 		sub	r3, r3, #356
 1486 008e 1A68     		ldr	r2, [r3]
 1487              		.loc 1 451 30
 1488 0090 D7F86C31 		ldr	r3, [r7, #364]
 1489 0094 9B00     		lsls	r3, r3, #2
 1490              		.loc 1 451 12
 1491 0096 D018     		adds	r0, r2, r3
 1492 0098 D7F86C31 		ldr	r3, [r7, #364]
 1493 009c C3F58071 		rsb	r1, r3, #256
 1494 00a0 07F1E002 		add	r2, r7, #224
 1495 00a4 8823     		movs	r3, #136
 1496 00a6 FFF7FEFF 		bl	rej_eta
 1497 00aa 0246     		mov	r2, r0
 1498              		.loc 1 451 9
 1499 00ac D7F86C31 		ldr	r3, [r7, #364]
 1500 00b0 1344     		add	r3, r3, r2
 1501 00b2 C7F86C31 		str	r3, [r7, #364]
 1502              	.L63:
 449:poly.c        ****     stream256_squeezeblocks(buf, 1, &state);
 1503              		.loc 1 449 8
 1504 00b6 D7F86C31 		ldr	r3, [r7, #364]
 1505 00ba FF2B     		cmp	r3, #255
 1506 00bc DBD9     		bls	.L64
 452:poly.c        ****   }
 453:poly.c        **** }
 1507              		.loc 1 453 1
 1508 00be 00BF     		nop
 1509 00c0 00BF     		nop
 1510 00c2 07F5B877 		add	r7, r7, #368
 1511              	.LCFI89:
 1512              		.cfi_def_cfa_offset 8
 1513 00c6 BD46     		mov	sp, r7
 1514              	.LCFI90:
 1515              		.cfi_def_cfa_register 13
 1516              		@ sp needed
 1517 00c8 80BD     		pop	{r7, pc}
 1518              		.cfi_endproc
 1519              	.LFE16:
 1521              		.section	.text.pqcrystals_dilithium2_refpoly_uniform_gamma1,"ax",%progbits
 1522              		.align	1
 1523              		.global	pqcrystals_dilithium2_refpoly_uniform_gamma1
 1524              		.syntax unified
 1525              		.thumb
 1526              		.thumb_func
 1527              		.fpu softvfp
 1529              	pqcrystals_dilithium2_refpoly_uniform_gamma1:
 1530              	.LFB17:
 454:poly.c        **** 
 455:poly.c        **** /*************************************************
 456:poly.c        **** * Name:        poly_uniform_gamma1m1
 457:poly.c        **** *
 458:poly.c        **** * Description: Sample polynomial with uniformly random coefficients
 459:poly.c        **** *              in [-(GAMMA1 - 1), GAMMA1] by unpacking output stream
 460:poly.c        **** *              of SHAKE256(seed|nonce) or AES256CTR(seed,nonce).
 461:poly.c        **** *
 462:poly.c        **** * Arguments:   - poly *a: pointer to output polynomial
 463:poly.c        **** *              - const uint8_t seed[]: byte array with seed of length CRHBYTES
 464:poly.c        **** *              - uint16_t nonce: 16-bit nonce
 465:poly.c        **** **************************************************/
 466:poly.c        **** #define POLY_UNIFORM_GAMMA1_NBLOCKS ((POLYZ_PACKEDBYTES + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCK
 467:poly.c        **** void poly_uniform_gamma1(poly *a,
 468:poly.c        ****                          const uint8_t seed[CRHBYTES],
 469:poly.c        ****                          uint16_t nonce)
 470:poly.c        **** {
 1531              		.loc 1 470 1
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 904
 1534              		@ frame_needed = 1, uses_anonymous_args = 0
 1535 0000 80B5     		push	{r7, lr}
 1536              	.LCFI91:
 1537              		.cfi_def_cfa_offset 8
 1538              		.cfi_offset 7, -8
 1539              		.cfi_offset 14, -4
 1540 0002 ADF5627D 		sub	sp, sp, #904
 1541              	.LCFI92:
 1542              		.cfi_def_cfa_offset 912
 1543 0006 00AF     		add	r7, sp, #0
 1544              	.LCFI93:
 1545              		.cfi_def_cfa_register 7
 1546 0008 07F56273 		add	r3, r7, #904
 1547 000c A3F55F73 		sub	r3, r3, #892
 1548 0010 1860     		str	r0, [r3]
 1549 0012 07F56273 		add	r3, r7, #904
 1550 0016 A3F56073 		sub	r3, r3, #896
 1551 001a 1960     		str	r1, [r3]
 1552 001c 07F56273 		add	r3, r7, #904
 1553 0020 A3F28233 		subw	r3, r3, #898
 1554 0024 1A80     		strh	r2, [r3]	@ movhi
 471:poly.c        ****   uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES];
 472:poly.c        ****   stream256_state state;
 473:poly.c        **** 
 474:poly.c        ****   stream256_init(&state, seed, nonce);
 1555              		.loc 1 474 3
 1556 0026 07F56273 		add	r3, r7, #904
 1557 002a A3F28233 		subw	r3, r3, #898
 1558 002e 1A88     		ldrh	r2, [r3]
 1559 0030 07F56273 		add	r3, r7, #904
 1560 0034 A3F56073 		sub	r3, r3, #896
 1561 0038 07F11000 		add	r0, r7, #16
 1562 003c 1968     		ldr	r1, [r3]
 1563 003e FFF7FEFF 		bl	pqcrystals_dilithium2_refdilithium_shake256_stream_init
 475:poly.c        ****   stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 1564              		.loc 1 475 3
 1565 0042 07F11002 		add	r2, r7, #16
 1566 0046 07F1E003 		add	r3, r7, #224
 1567 004a 0521     		movs	r1, #5
 1568 004c 1846     		mov	r0, r3
 1569 004e FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks
 476:poly.c        ****   polyz_unpack(a, buf);
 1570              		.loc 1 476 3
 1571 0052 07F1E002 		add	r2, r7, #224
 1572 0056 07F56273 		add	r3, r7, #904
 1573 005a A3F55F73 		sub	r3, r3, #892
 1574 005e 1146     		mov	r1, r2
 1575 0060 1868     		ldr	r0, [r3]
 1576 0062 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyz_unpack
 477:poly.c        **** }
 1577              		.loc 1 477 1
 1578 0066 00BF     		nop
 1579 0068 07F56277 		add	r7, r7, #904
 1580              	.LCFI94:
 1581              		.cfi_def_cfa_offset 8
 1582 006c BD46     		mov	sp, r7
 1583              	.LCFI95:
 1584              		.cfi_def_cfa_register 13
 1585              		@ sp needed
 1586 006e 80BD     		pop	{r7, pc}
 1587              		.cfi_endproc
 1588              	.LFE17:
 1590              		.section	.text.pqcrystals_dilithium2_refpoly_challenge,"ax",%progbits
 1591              		.align	1
 1592              		.global	pqcrystals_dilithium2_refpoly_challenge
 1593              		.syntax unified
 1594              		.thumb
 1595              		.thumb_func
 1596              		.fpu softvfp
 1598              	pqcrystals_dilithium2_refpoly_challenge:
 1599              	.LFB18:
 478:poly.c        **** 
 479:poly.c        **** /*************************************************
 480:poly.c        **** * Name:        challenge
 481:poly.c        **** *
 482:poly.c        **** * Description: Implementation of H. Samples polynomial with TAU nonzero
 483:poly.c        **** *              coefficients in {-1,1} using the output stream of
 484:poly.c        **** *              SHAKE256(seed).
 485:poly.c        **** *
 486:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
 487:poly.c        **** *              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
 488:poly.c        **** **************************************************/
 489:poly.c        **** void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 1600              		.loc 1 489 61
 1601              		.cfi_startproc
 1602              		@ args = 0, pretend = 0, frame = 376
 1603              		@ frame_needed = 1, uses_anonymous_args = 0
 1604 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 1605              	.LCFI96:
 1606              		.cfi_def_cfa_offset 32
 1607              		.cfi_offset 4, -32
 1608              		.cfi_offset 5, -28
 1609              		.cfi_offset 7, -24
 1610              		.cfi_offset 8, -20
 1611              		.cfi_offset 9, -16
 1612              		.cfi_offset 10, -12
 1613              		.cfi_offset 11, -8
 1614              		.cfi_offset 14, -4
 1615 0004 DEB0     		sub	sp, sp, #376
 1616              	.LCFI97:
 1617              		.cfi_def_cfa_offset 408
 1618 0006 00AF     		add	r7, sp, #0
 1619              	.LCFI98:
 1620              		.cfi_def_cfa_register 7
 1621 0008 07F5BC73 		add	r3, r7, #376
 1622 000c A3F5BA73 		sub	r3, r3, #372
 1623 0010 1860     		str	r0, [r3]
 1624 0012 07F5BC73 		add	r3, r7, #376
 1625 0016 A3F5BC73 		sub	r3, r3, #376
 1626 001a 1960     		str	r1, [r3]
 490:poly.c        ****   unsigned int i, b, pos;
 491:poly.c        ****   uint64_t signs;
 492:poly.c        ****   uint8_t buf[SHAKE256_RATE];
 493:poly.c        ****   keccak_state state;
 494:poly.c        **** 
 495:poly.c        ****   shake256_init(&state);
 1627              		.loc 1 495 3
 1628 001c 07F10803 		add	r3, r7, #8
 1629 0020 1846     		mov	r0, r3
 1630 0022 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_init
 496:poly.c        ****   shake256_absorb(&state, seed, SEEDBYTES);
 1631              		.loc 1 496 3
 1632 0026 07F5BC73 		add	r3, r7, #376
 1633 002a A3F5BC73 		sub	r3, r3, #376
 1634 002e 07F10800 		add	r0, r7, #8
 1635 0032 2022     		movs	r2, #32
 1636 0034 1968     		ldr	r1, [r3]
 1637 0036 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_absorb
 497:poly.c        ****   shake256_finalize(&state);
 1638              		.loc 1 497 3
 1639 003a 07F10803 		add	r3, r7, #8
 1640 003e 1846     		mov	r0, r3
 1641 0040 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_finalize
 498:poly.c        ****   shake256_squeezeblocks(buf, 1, &state);
 1642              		.loc 1 498 3
 1643 0044 07F10802 		add	r2, r7, #8
 1644 0048 07F1DC03 		add	r3, r7, #220
 1645 004c 0121     		movs	r1, #1
 1646 004e 1846     		mov	r0, r3
 1647 0050 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks
 499:poly.c        **** 
 500:poly.c        ****   signs = 0;
 1648              		.loc 1 500 9
 1649 0054 4FF00002 		mov	r2, #0
 1650 0058 4FF00003 		mov	r3, #0
 1651 005c C7E95A23 		strd	r2, [r7, #360]
 501:poly.c        ****   for(i = 0; i < 8; ++i)
 1652              		.loc 1 501 9
 1653 0060 0023     		movs	r3, #0
 1654 0062 C7F87431 		str	r3, [r7, #372]
 1655              		.loc 1 501 3
 1656 0066 27E0     		b	.L67
 1657              	.L68:
 502:poly.c        ****     signs |= (uint64_t)buf[i] << 8*i;
 1658              		.loc 1 502 27 discriminator 3
 1659 0068 07F1DC02 		add	r2, r7, #220
 1660 006c D7F87431 		ldr	r3, [r7, #372]
 1661 0070 1344     		add	r3, r3, r2
 1662 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1663              		.loc 1 502 14 discriminator 3
 1664 0074 DBB2     		uxtb	r3, r3
 1665 0076 0022     		movs	r2, #0
 1666 0078 9846     		mov	r8, r3
 1667 007a 9146     		mov	r9, r2
 1668              		.loc 1 502 35 discriminator 3
 1669 007c D7F87431 		ldr	r3, [r7, #372]
 1670 0080 DB00     		lsls	r3, r3, #3
 1671              		.loc 1 502 31 discriminator 3
 1672 0082 A3F12001 		sub	r1, r3, #32
 1673 0086 C3F12002 		rsb	r2, r3, #32
 1674 008a 09FA03F5 		lsl	r5, r9, r3
 1675 008e 08FA01F1 		lsl	r1, r8, r1
 1676 0092 0D43     		orrs	r5, r5, r1
 1677 0094 28FA02F2 		lsr	r2, r8, r2
 1678 0098 1543     		orrs	r5, r5, r2
 1679 009a 08FA03F4 		lsl	r4, r8, r3
 1680              		.loc 1 502 11 discriminator 3
 1681 009e D7E95A23 		ldrd	r2, [r7, #360]
 1682 00a2 42EA040A 		orr	r10, r2, r4
 1683 00a6 43EA050B 		orr	fp, r3, r5
 1684 00aa C7E95AAB 		strd	r10, [r7, #360]
 501:poly.c        ****   for(i = 0; i < 8; ++i)
 1685              		.loc 1 501 21 discriminator 3
 1686 00ae D7F87431 		ldr	r3, [r7, #372]
 1687 00b2 0133     		adds	r3, r3, #1
 1688 00b4 C7F87431 		str	r3, [r7, #372]
 1689              	.L67:
 501:poly.c        ****   for(i = 0; i < 8; ++i)
 1690              		.loc 1 501 3 discriminator 1
 1691 00b8 D7F87431 		ldr	r3, [r7, #372]
 1692 00bc 072B     		cmp	r3, #7
 1693 00be D3D9     		bls	.L68
 503:poly.c        ****   pos = 8;
 1694              		.loc 1 503 7
 1695 00c0 0823     		movs	r3, #8
 1696 00c2 C7F87031 		str	r3, [r7, #368]
 504:poly.c        **** 
 505:poly.c        ****   for(i = 0; i < N; ++i)
 1697              		.loc 1 505 9
 1698 00c6 0023     		movs	r3, #0
 1699 00c8 C7F87431 		str	r3, [r7, #372]
 1700              		.loc 1 505 3
 1701 00cc 0EE0     		b	.L69
 1702              	.L70:
 506:poly.c        ****     c->coeffs[i] = 0;
 1703              		.loc 1 506 18 discriminator 3
 1704 00ce 07F5BC73 		add	r3, r7, #376
 1705 00d2 A3F5BA73 		sub	r3, r3, #372
 1706 00d6 1B68     		ldr	r3, [r3]
 1707 00d8 D7F87421 		ldr	r2, [r7, #372]
 1708 00dc 0021     		movs	r1, #0
 1709 00de 43F82210 		str	r1, [r3, r2, lsl #2]
 505:poly.c        ****     c->coeffs[i] = 0;
 1710              		.loc 1 505 21 discriminator 3
 1711 00e2 D7F87431 		ldr	r3, [r7, #372]
 1712 00e6 0133     		adds	r3, r3, #1
 1713 00e8 C7F87431 		str	r3, [r7, #372]
 1714              	.L69:
 505:poly.c        ****     c->coeffs[i] = 0;
 1715              		.loc 1 505 3 discriminator 1
 1716 00ec D7F87431 		ldr	r3, [r7, #372]
 1717 00f0 FF2B     		cmp	r3, #255
 1718 00f2 ECD9     		bls	.L70
 507:poly.c        ****   for(i = N-TAU; i < N; ++i) {
 1719              		.loc 1 507 9
 1720 00f4 D923     		movs	r3, #217
 1721 00f6 C7F87431 		str	r3, [r7, #372]
 1722              		.loc 1 507 3
 1723 00fa 54E0     		b	.L71
 1724              	.L73:
 508:poly.c        ****     do {
 509:poly.c        ****       if(pos >= SHAKE256_RATE) {
 1725              		.loc 1 509 9
 1726 00fc D7F87031 		ldr	r3, [r7, #368]
 1727 0100 872B     		cmp	r3, #135
 1728 0102 0AD9     		bls	.L72
 510:poly.c        ****         shake256_squeezeblocks(buf, 1, &state);
 1729              		.loc 1 510 9
 1730 0104 07F10802 		add	r2, r7, #8
 1731 0108 07F1DC03 		add	r3, r7, #220
 1732 010c 0121     		movs	r1, #1
 1733 010e 1846     		mov	r0, r3
 1734 0110 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks
 511:poly.c        ****         pos = 0;
 1735              		.loc 1 511 13
 1736 0114 0023     		movs	r3, #0
 1737 0116 C7F87031 		str	r3, [r7, #368]
 1738              	.L72:
 512:poly.c        ****       }
 513:poly.c        **** 
 514:poly.c        ****       b = buf[pos++];
 1739              		.loc 1 514 18
 1740 011a D7F87031 		ldr	r3, [r7, #368]
 1741 011e 5A1C     		adds	r2, r3, #1
 1742 0120 C7F87021 		str	r2, [r7, #368]
 1743              		.loc 1 514 14
 1744 0124 03F5BC73 		add	r3, r3, #376
 1745 0128 3B44     		add	r3, r3, r7
 1746 012a 13F89C3C 		ldrb	r3, [r3, #-156]	@ zero_extendqisi2
 1747              		.loc 1 514 9
 1748 012e C7F86431 		str	r3, [r7, #356]
 515:poly.c        ****     } while(b > i);
 1749              		.loc 1 515 5
 1750 0132 D7F86421 		ldr	r2, [r7, #356]
 1751 0136 D7F87431 		ldr	r3, [r7, #372]
 1752 013a 9A42     		cmp	r2, r3
 1753 013c DED8     		bhi	.L73
 516:poly.c        **** 
 517:poly.c        ****     c->coeffs[i] = c->coeffs[b];
 1754              		.loc 1 517 29 discriminator 2
 1755 013e 07F5BC73 		add	r3, r7, #376
 1756 0142 A3F5BA73 		sub	r3, r3, #372
 1757 0146 1B68     		ldr	r3, [r3]
 1758 0148 D7F86421 		ldr	r2, [r7, #356]
 1759 014c 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1760              		.loc 1 517 18 discriminator 2
 1761 0150 07F5BC73 		add	r3, r7, #376
 1762 0154 A3F5BA73 		sub	r3, r3, #372
 1763 0158 1B68     		ldr	r3, [r3]
 1764 015a D7F87421 		ldr	r2, [r7, #372]
 1765 015e 43F82210 		str	r1, [r3, r2, lsl #2]
 518:poly.c        ****     c->coeffs[b] = 1 - 2*(signs & 1);
 1766              		.loc 1 518 22 discriminator 2
 1767 0162 D7F86831 		ldr	r3, [r7, #360]
 1768 0166 03F00103 		and	r3, r3, #1
 1769 016a 5B00     		lsls	r3, r3, #1
 1770 016c C3F10103 		rsb	r3, r3, #1
 1771 0170 1946     		mov	r1, r3
 1772              		.loc 1 518 18 discriminator 2
 1773 0172 07F5BC73 		add	r3, r7, #376
 1774 0176 A3F5BA73 		sub	r3, r3, #372
 1775 017a 1B68     		ldr	r3, [r3]
 1776 017c D7F86421 		ldr	r2, [r7, #356]
 1777 0180 43F82210 		str	r1, [r3, r2, lsl #2]
 519:poly.c        ****     signs >>= 1;
 1778              		.loc 1 519 11 discriminator 2
 1779 0184 D7E95A01 		ldrd	r0, [r7, #360]
 1780 0188 4FF00002 		mov	r2, #0
 1781 018c 4FF00003 		mov	r3, #0
 1782 0190 4208     		lsrs	r2, r0, #1
 1783 0192 42EAC172 		orr	r2, r2, r1, lsl #31
 1784 0196 4B08     		lsrs	r3, r1, #1
 1785 0198 C7E95A23 		strd	r2, [r7, #360]
 507:poly.c        ****     do {
 1786              		.loc 1 507 25 discriminator 2
 1787 019c D7F87431 		ldr	r3, [r7, #372]
 1788 01a0 0133     		adds	r3, r3, #1
 1789 01a2 C7F87431 		str	r3, [r7, #372]
 1790              	.L71:
 507:poly.c        ****     do {
 1791              		.loc 1 507 3 discriminator 1
 1792 01a6 D7F87431 		ldr	r3, [r7, #372]
 1793 01aa FF2B     		cmp	r3, #255
 1794 01ac A6D9     		bls	.L73
 520:poly.c        ****   }
 521:poly.c        **** }
 1795              		.loc 1 521 1
 1796 01ae 00BF     		nop
 1797 01b0 00BF     		nop
 1798 01b2 07F5BC77 		add	r7, r7, #376
 1799              	.LCFI99:
 1800              		.cfi_def_cfa_offset 32
 1801 01b6 BD46     		mov	sp, r7
 1802              	.LCFI100:
 1803              		.cfi_def_cfa_register 13
 1804              		@ sp needed
 1805 01b8 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 1806              		.cfi_endproc
 1807              	.LFE18:
 1809              		.section	.text.pqcrystals_dilithium2_refpolyeta_pack,"ax",%progbits
 1810              		.align	1
 1811              		.global	pqcrystals_dilithium2_refpolyeta_pack
 1812              		.syntax unified
 1813              		.thumb
 1814              		.thumb_func
 1815              		.fpu softvfp
 1817              	pqcrystals_dilithium2_refpolyeta_pack:
 1818              	.LFB19:
 522:poly.c        **** 
 523:poly.c        **** /*************************************************
 524:poly.c        **** * Name:        polyeta_pack
 525:poly.c        **** *
 526:poly.c        **** * Description: Bit-pack polynomial with coefficients in [-ETA,ETA].
 527:poly.c        **** *
 528:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 529:poly.c        **** *                            POLYETA_PACKEDBYTES bytes
 530:poly.c        **** *              - const poly *a: pointer to input polynomial
 531:poly.c        **** **************************************************/
 532:poly.c        **** void polyeta_pack(uint8_t *r, const poly *a) {
 1819              		.loc 1 532 46
 1820              		.cfi_startproc
 1821              		@ args = 0, pretend = 0, frame = 24
 1822              		@ frame_needed = 1, uses_anonymous_args = 0
 1823              		@ link register save eliminated.
 1824 0000 80B4     		push	{r7}
 1825              	.LCFI101:
 1826              		.cfi_def_cfa_offset 4
 1827              		.cfi_offset 7, -4
 1828 0002 87B0     		sub	sp, sp, #28
 1829              	.LCFI102:
 1830              		.cfi_def_cfa_offset 32
 1831 0004 00AF     		add	r7, sp, #0
 1832              	.LCFI103:
 1833              		.cfi_def_cfa_register 7
 1834 0006 7860     		str	r0, [r7, #4]
 1835 0008 3960     		str	r1, [r7]
 533:poly.c        ****   unsigned int i;
 534:poly.c        ****   uint8_t t[8];
 535:poly.c        ****   DBENCH_START();
 536:poly.c        **** 
 537:poly.c        **** #if ETA == 2
 538:poly.c        ****   for(i = 0; i < N/8; ++i) {
 1836              		.loc 1 538 9
 1837 000a 0023     		movs	r3, #0
 1838 000c 7B61     		str	r3, [r7, #20]
 1839              		.loc 1 538 3
 1840 000e A0E0     		b	.L75
 1841              	.L76:
 539:poly.c        ****     t[0] = ETA - a->coeffs[8*i+0];
 1842              		.loc 1 539 31 discriminator 3
 1843 0010 7B69     		ldr	r3, [r7, #20]
 1844 0012 DA00     		lsls	r2, r3, #3
 1845              		.loc 1 539 27 discriminator 3
 1846 0014 3B68     		ldr	r3, [r7]
 1847 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1848              		.loc 1 539 16 discriminator 3
 1849 001a DBB2     		uxtb	r3, r3
 1850 001c C3F10203 		rsb	r3, r3, #2
 1851 0020 DBB2     		uxtb	r3, r3
 1852              		.loc 1 539 10 discriminator 3
 1853 0022 3B73     		strb	r3, [r7, #12]
 540:poly.c        ****     t[1] = ETA - a->coeffs[8*i+1];
 1854              		.loc 1 540 29 discriminator 3
 1855 0024 7B69     		ldr	r3, [r7, #20]
 1856 0026 DB00     		lsls	r3, r3, #3
 1857              		.loc 1 540 31 discriminator 3
 1858 0028 5A1C     		adds	r2, r3, #1
 1859              		.loc 1 540 27 discriminator 3
 1860 002a 3B68     		ldr	r3, [r7]
 1861 002c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1862              		.loc 1 540 16 discriminator 3
 1863 0030 DBB2     		uxtb	r3, r3
 1864 0032 C3F10203 		rsb	r3, r3, #2
 1865 0036 DBB2     		uxtb	r3, r3
 1866              		.loc 1 540 10 discriminator 3
 1867 0038 7B73     		strb	r3, [r7, #13]
 541:poly.c        ****     t[2] = ETA - a->coeffs[8*i+2];
 1868              		.loc 1 541 29 discriminator 3
 1869 003a 7B69     		ldr	r3, [r7, #20]
 1870 003c DB00     		lsls	r3, r3, #3
 1871              		.loc 1 541 31 discriminator 3
 1872 003e 9A1C     		adds	r2, r3, #2
 1873              		.loc 1 541 27 discriminator 3
 1874 0040 3B68     		ldr	r3, [r7]
 1875 0042 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1876              		.loc 1 541 16 discriminator 3
 1877 0046 DBB2     		uxtb	r3, r3
 1878 0048 C3F10203 		rsb	r3, r3, #2
 1879 004c DBB2     		uxtb	r3, r3
 1880              		.loc 1 541 10 discriminator 3
 1881 004e BB73     		strb	r3, [r7, #14]
 542:poly.c        ****     t[3] = ETA - a->coeffs[8*i+3];
 1882              		.loc 1 542 29 discriminator 3
 1883 0050 7B69     		ldr	r3, [r7, #20]
 1884 0052 DB00     		lsls	r3, r3, #3
 1885              		.loc 1 542 31 discriminator 3
 1886 0054 DA1C     		adds	r2, r3, #3
 1887              		.loc 1 542 27 discriminator 3
 1888 0056 3B68     		ldr	r3, [r7]
 1889 0058 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1890              		.loc 1 542 16 discriminator 3
 1891 005c DBB2     		uxtb	r3, r3
 1892 005e C3F10203 		rsb	r3, r3, #2
 1893 0062 DBB2     		uxtb	r3, r3
 1894              		.loc 1 542 10 discriminator 3
 1895 0064 FB73     		strb	r3, [r7, #15]
 543:poly.c        ****     t[4] = ETA - a->coeffs[8*i+4];
 1896              		.loc 1 543 29 discriminator 3
 1897 0066 7B69     		ldr	r3, [r7, #20]
 1898 0068 DB00     		lsls	r3, r3, #3
 1899              		.loc 1 543 31 discriminator 3
 1900 006a 1A1D     		adds	r2, r3, #4
 1901              		.loc 1 543 27 discriminator 3
 1902 006c 3B68     		ldr	r3, [r7]
 1903 006e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1904              		.loc 1 543 16 discriminator 3
 1905 0072 DBB2     		uxtb	r3, r3
 1906 0074 C3F10203 		rsb	r3, r3, #2
 1907 0078 DBB2     		uxtb	r3, r3
 1908              		.loc 1 543 10 discriminator 3
 1909 007a 3B74     		strb	r3, [r7, #16]
 544:poly.c        ****     t[5] = ETA - a->coeffs[8*i+5];
 1910              		.loc 1 544 29 discriminator 3
 1911 007c 7B69     		ldr	r3, [r7, #20]
 1912 007e DB00     		lsls	r3, r3, #3
 1913              		.loc 1 544 31 discriminator 3
 1914 0080 5A1D     		adds	r2, r3, #5
 1915              		.loc 1 544 27 discriminator 3
 1916 0082 3B68     		ldr	r3, [r7]
 1917 0084 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1918              		.loc 1 544 16 discriminator 3
 1919 0088 DBB2     		uxtb	r3, r3
 1920 008a C3F10203 		rsb	r3, r3, #2
 1921 008e DBB2     		uxtb	r3, r3
 1922              		.loc 1 544 10 discriminator 3
 1923 0090 7B74     		strb	r3, [r7, #17]
 545:poly.c        ****     t[6] = ETA - a->coeffs[8*i+6];
 1924              		.loc 1 545 29 discriminator 3
 1925 0092 7B69     		ldr	r3, [r7, #20]
 1926 0094 DB00     		lsls	r3, r3, #3
 1927              		.loc 1 545 31 discriminator 3
 1928 0096 9A1D     		adds	r2, r3, #6
 1929              		.loc 1 545 27 discriminator 3
 1930 0098 3B68     		ldr	r3, [r7]
 1931 009a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1932              		.loc 1 545 16 discriminator 3
 1933 009e DBB2     		uxtb	r3, r3
 1934 00a0 C3F10203 		rsb	r3, r3, #2
 1935 00a4 DBB2     		uxtb	r3, r3
 1936              		.loc 1 545 10 discriminator 3
 1937 00a6 BB74     		strb	r3, [r7, #18]
 546:poly.c        ****     t[7] = ETA - a->coeffs[8*i+7];
 1938              		.loc 1 546 29 discriminator 3
 1939 00a8 7B69     		ldr	r3, [r7, #20]
 1940 00aa DB00     		lsls	r3, r3, #3
 1941              		.loc 1 546 31 discriminator 3
 1942 00ac DA1D     		adds	r2, r3, #7
 1943              		.loc 1 546 27 discriminator 3
 1944 00ae 3B68     		ldr	r3, [r7]
 1945 00b0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1946              		.loc 1 546 16 discriminator 3
 1947 00b4 DBB2     		uxtb	r3, r3
 1948 00b6 C3F10203 		rsb	r3, r3, #2
 1949 00ba DBB2     		uxtb	r3, r3
 1950              		.loc 1 546 10 discriminator 3
 1951 00bc FB74     		strb	r3, [r7, #19]
 547:poly.c        **** 
 548:poly.c        ****     r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 1952              		.loc 1 548 19 discriminator 3
 1953 00be 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 1954 00c0 5AB2     		sxtb	r2, r3
 1955              		.loc 1 548 33 discriminator 3
 1956 00c2 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1957              		.loc 1 548 37 discriminator 3
 1958 00c4 DB00     		lsls	r3, r3, #3
 1959              		.loc 1 548 29 discriminator 3
 1960 00c6 5BB2     		sxtb	r3, r3
 1961 00c8 1343     		orrs	r3, r3, r2
 1962 00ca 5AB2     		sxtb	r2, r3
 1963              		.loc 1 548 47 discriminator 3
 1964 00cc BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1965              		.loc 1 548 51 discriminator 3
 1966 00ce 9B01     		lsls	r3, r3, #6
 1967              		.loc 1 548 43 discriminator 3
 1968 00d0 5BB2     		sxtb	r3, r3
 1969 00d2 1343     		orrs	r3, r3, r2
 1970 00d4 59B2     		sxtb	r1, r3
 1971              		.loc 1 548 8 discriminator 3
 1972 00d6 7A69     		ldr	r2, [r7, #20]
 1973 00d8 1346     		mov	r3, r2
 1974 00da 5B00     		lsls	r3, r3, #1
 1975 00dc 1344     		add	r3, r3, r2
 1976              		.loc 1 548 6 discriminator 3
 1977 00de 7A68     		ldr	r2, [r7, #4]
 1978 00e0 1344     		add	r3, r3, r2
 1979              		.loc 1 548 43 discriminator 3
 1980 00e2 CAB2     		uxtb	r2, r1
 1981              		.loc 1 548 15 discriminator 3
 1982 00e4 1A70     		strb	r2, [r3]
 549:poly.c        ****     r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 1983              		.loc 1 549 19 discriminator 3
 1984 00e6 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1985              		.loc 1 549 29 discriminator 3
 1986 00e8 9B08     		lsrs	r3, r3, #2
 1987 00ea DBB2     		uxtb	r3, r3
 1988 00ec 5AB2     		sxtb	r2, r3
 1989              		.loc 1 549 33 discriminator 3
 1990 00ee FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1991              		.loc 1 549 37 discriminator 3
 1992 00f0 5B00     		lsls	r3, r3, #1
 1993              		.loc 1 549 29 discriminator 3
 1994 00f2 5BB2     		sxtb	r3, r3
 1995 00f4 1343     		orrs	r3, r3, r2
 1996 00f6 5AB2     		sxtb	r2, r3
 1997              		.loc 1 549 47 discriminator 3
 1998 00f8 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 1999              		.loc 1 549 51 discriminator 3
 2000 00fa 1B01     		lsls	r3, r3, #4
 2001              		.loc 1 549 43 discriminator 3
 2002 00fc 5BB2     		sxtb	r3, r3
 2003 00fe 1343     		orrs	r3, r3, r2
 2004 0100 5AB2     		sxtb	r2, r3
 2005              		.loc 1 549 61 discriminator 3
 2006 0102 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 2007              		.loc 1 549 65 discriminator 3
 2008 0104 DB01     		lsls	r3, r3, #7
 2009              		.loc 1 549 57 discriminator 3
 2010 0106 5BB2     		sxtb	r3, r3
 2011 0108 1343     		orrs	r3, r3, r2
 2012 010a 59B2     		sxtb	r1, r3
 2013              		.loc 1 549 8 discriminator 3
 2014 010c 7A69     		ldr	r2, [r7, #20]
 2015 010e 1346     		mov	r3, r2
 2016 0110 5B00     		lsls	r3, r3, #1
 2017 0112 1344     		add	r3, r3, r2
 2018              		.loc 1 549 6 discriminator 3
 2019 0114 0133     		adds	r3, r3, #1
 2020 0116 7A68     		ldr	r2, [r7, #4]
 2021 0118 1344     		add	r3, r3, r2
 2022              		.loc 1 549 57 discriminator 3
 2023 011a CAB2     		uxtb	r2, r1
 2024              		.loc 1 549 15 discriminator 3
 2025 011c 1A70     		strb	r2, [r3]
 550:poly.c        ****     r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 2026              		.loc 1 550 19 discriminator 3
 2027 011e 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 2028              		.loc 1 550 29 discriminator 3
 2029 0120 5B08     		lsrs	r3, r3, #1
 2030 0122 DBB2     		uxtb	r3, r3
 2031 0124 5AB2     		sxtb	r2, r3
 2032              		.loc 1 550 33 discriminator 3
 2033 0126 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 2034              		.loc 1 550 37 discriminator 3
 2035 0128 9B00     		lsls	r3, r3, #2
 2036              		.loc 1 550 29 discriminator 3
 2037 012a 5BB2     		sxtb	r3, r3
 2038 012c 1343     		orrs	r3, r3, r2
 2039 012e 5AB2     		sxtb	r2, r3
 2040              		.loc 1 550 47 discriminator 3
 2041 0130 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2042              		.loc 1 550 51 discriminator 3
 2043 0132 5B01     		lsls	r3, r3, #5
 2044              		.loc 1 550 43 discriminator 3
 2045 0134 5BB2     		sxtb	r3, r3
 2046 0136 1343     		orrs	r3, r3, r2
 2047 0138 59B2     		sxtb	r1, r3
 2048              		.loc 1 550 8 discriminator 3
 2049 013a 7A69     		ldr	r2, [r7, #20]
 2050 013c 1346     		mov	r3, r2
 2051 013e 5B00     		lsls	r3, r3, #1
 2052 0140 1344     		add	r3, r3, r2
 2053              		.loc 1 550 6 discriminator 3
 2054 0142 0233     		adds	r3, r3, #2
 2055 0144 7A68     		ldr	r2, [r7, #4]
 2056 0146 1344     		add	r3, r3, r2
 2057              		.loc 1 550 43 discriminator 3
 2058 0148 CAB2     		uxtb	r2, r1
 2059              		.loc 1 550 15 discriminator 3
 2060 014a 1A70     		strb	r2, [r3]
 538:poly.c        ****     t[0] = ETA - a->coeffs[8*i+0];
 2061              		.loc 1 538 23 discriminator 3
 2062 014c 7B69     		ldr	r3, [r7, #20]
 2063 014e 0133     		adds	r3, r3, #1
 2064 0150 7B61     		str	r3, [r7, #20]
 2065              	.L75:
 538:poly.c        ****     t[0] = ETA - a->coeffs[8*i+0];
 2066              		.loc 1 538 3 discriminator 1
 2067 0152 7B69     		ldr	r3, [r7, #20]
 2068 0154 1F2B     		cmp	r3, #31
 2069 0156 7FF65BAF 		bls	.L76
 551:poly.c        ****   }
 552:poly.c        **** #elif ETA == 4
 553:poly.c        ****   for(i = 0; i < N/2; ++i) {
 554:poly.c        ****     t[0] = ETA - a->coeffs[2*i+0];
 555:poly.c        ****     t[1] = ETA - a->coeffs[2*i+1];
 556:poly.c        ****     r[i] = t[0] | (t[1] << 4);
 557:poly.c        ****   }
 558:poly.c        **** #endif
 559:poly.c        **** 
 560:poly.c        ****   DBENCH_STOP(*tpack);
 561:poly.c        **** }
 2070              		.loc 1 561 1
 2071 015a 00BF     		nop
 2072 015c 00BF     		nop
 2073 015e 1C37     		adds	r7, r7, #28
 2074              	.LCFI104:
 2075              		.cfi_def_cfa_offset 4
 2076 0160 BD46     		mov	sp, r7
 2077              	.LCFI105:
 2078              		.cfi_def_cfa_register 13
 2079              		@ sp needed
 2080 0162 80BC     		pop	{r7}
 2081              	.LCFI106:
 2082              		.cfi_restore 7
 2083              		.cfi_def_cfa_offset 0
 2084 0164 7047     		bx	lr
 2085              		.cfi_endproc
 2086              	.LFE19:
 2088              		.section	.text.pqcrystals_dilithium2_refpolyeta_unpack,"ax",%progbits
 2089              		.align	1
 2090              		.global	pqcrystals_dilithium2_refpolyeta_unpack
 2091              		.syntax unified
 2092              		.thumb
 2093              		.thumb_func
 2094              		.fpu softvfp
 2096              	pqcrystals_dilithium2_refpolyeta_unpack:
 2097              	.LFB20:
 562:poly.c        **** 
 563:poly.c        **** /*************************************************
 564:poly.c        **** * Name:        polyeta_unpack
 565:poly.c        **** *
 566:poly.c        **** * Description: Unpack polynomial with coefficients in [-ETA,ETA].
 567:poly.c        **** *
 568:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 569:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 570:poly.c        **** **************************************************/
 571:poly.c        **** void polyeta_unpack(poly *r, const uint8_t *a) {
 2098              		.loc 1 571 48
 2099              		.cfi_startproc
 2100              		@ args = 0, pretend = 0, frame = 16
 2101              		@ frame_needed = 1, uses_anonymous_args = 0
 2102              		@ link register save eliminated.
 2103 0000 80B4     		push	{r7}
 2104              	.LCFI107:
 2105              		.cfi_def_cfa_offset 4
 2106              		.cfi_offset 7, -4
 2107 0002 85B0     		sub	sp, sp, #20
 2108              	.LCFI108:
 2109              		.cfi_def_cfa_offset 24
 2110 0004 00AF     		add	r7, sp, #0
 2111              	.LCFI109:
 2112              		.cfi_def_cfa_register 7
 2113 0006 7860     		str	r0, [r7, #4]
 2114 0008 3960     		str	r1, [r7]
 572:poly.c        ****   unsigned int i;
 573:poly.c        ****   DBENCH_START();
 574:poly.c        **** 
 575:poly.c        **** #if ETA == 2
 576:poly.c        ****   for(i = 0; i < N/8; ++i) {
 2115              		.loc 1 576 9
 2116 000a 0023     		movs	r3, #0
 2117 000c FB60     		str	r3, [r7, #12]
 2118              		.loc 1 576 3
 2119 000e 16E1     		b	.L78
 2120              	.L79:
 577:poly.c        ****     r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 2121              		.loc 1 577 29 discriminator 3
 2122 0010 FA68     		ldr	r2, [r7, #12]
 2123 0012 1346     		mov	r3, r2
 2124 0014 5B00     		lsls	r3, r3, #1
 2125 0016 1344     		add	r3, r3, r2
 2126              		.loc 1 577 27 discriminator 3
 2127 0018 3A68     		ldr	r2, [r7]
 2128 001a 1344     		add	r3, r3, r2
 2129 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2130              		.loc 1 577 41 discriminator 3
 2131 001e 1946     		mov	r1, r3
 2132              		.loc 1 577 18 discriminator 3
 2133 0020 FB68     		ldr	r3, [r7, #12]
 2134 0022 DA00     		lsls	r2, r3, #3
 2135              		.loc 1 577 41 discriminator 3
 2136 0024 01F00701 		and	r1, r1, #7
 2137              		.loc 1 577 22 discriminator 3
 2138 0028 7B68     		ldr	r3, [r7, #4]
 2139 002a 43F82210 		str	r1, [r3, r2, lsl #2]
 578:poly.c        ****     r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
 2140              		.loc 1 578 29 discriminator 3
 2141 002e FA68     		ldr	r2, [r7, #12]
 2142 0030 1346     		mov	r3, r2
 2143 0032 5B00     		lsls	r3, r3, #1
 2144 0034 1344     		add	r3, r3, r2
 2145              		.loc 1 578 27 discriminator 3
 2146 0036 3A68     		ldr	r2, [r7]
 2147 0038 1344     		add	r3, r3, r2
 2148 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2149              		.loc 1 578 41 discriminator 3
 2150 003c DB08     		lsrs	r3, r3, #3
 2151 003e DBB2     		uxtb	r3, r3
 2152 0040 1946     		mov	r1, r3
 2153              		.loc 1 578 16 discriminator 3
 2154 0042 FB68     		ldr	r3, [r7, #12]
 2155 0044 DB00     		lsls	r3, r3, #3
 2156              		.loc 1 578 18 discriminator 3
 2157 0046 5A1C     		adds	r2, r3, #1
 2158              		.loc 1 578 41 discriminator 3
 2159 0048 01F00701 		and	r1, r1, #7
 2160              		.loc 1 578 22 discriminator 3
 2161 004c 7B68     		ldr	r3, [r7, #4]
 2162 004e 43F82210 		str	r1, [r3, r2, lsl #2]
 579:poly.c        ****     r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
 2163              		.loc 1 579 29 discriminator 3
 2164 0052 FA68     		ldr	r2, [r7, #12]
 2165 0054 1346     		mov	r3, r2
 2166 0056 5B00     		lsls	r3, r3, #1
 2167 0058 1344     		add	r3, r3, r2
 2168              		.loc 1 579 27 discriminator 3
 2169 005a 3A68     		ldr	r2, [r7]
 2170 005c 1344     		add	r3, r3, r2
 2171 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2172              		.loc 1 579 35 discriminator 3
 2173 0060 9B09     		lsrs	r3, r3, #6
 2174 0062 DBB2     		uxtb	r3, r3
 2175 0064 1946     		mov	r1, r3
 2176              		.loc 1 579 47 discriminator 3
 2177 0066 FA68     		ldr	r2, [r7, #12]
 2178 0068 1346     		mov	r3, r2
 2179 006a 5B00     		lsls	r3, r3, #1
 2180 006c 1344     		add	r3, r3, r2
 2181              		.loc 1 579 45 discriminator 3
 2182 006e 0133     		adds	r3, r3, #1
 2183 0070 3A68     		ldr	r2, [r7]
 2184 0072 1344     		add	r3, r3, r2
 2185 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2186              		.loc 1 579 53 discriminator 3
 2187 0076 9B00     		lsls	r3, r3, #2
 2188              		.loc 1 579 41 discriminator 3
 2189 0078 0B43     		orrs	r3, r3, r1
 2190              		.loc 1 579 16 discriminator 3
 2191 007a FA68     		ldr	r2, [r7, #12]
 2192 007c D200     		lsls	r2, r2, #3
 2193              		.loc 1 579 18 discriminator 3
 2194 007e 0232     		adds	r2, r2, #2
 2195              		.loc 1 579 60 discriminator 3
 2196 0080 03F00701 		and	r1, r3, #7
 2197              		.loc 1 579 22 discriminator 3
 2198 0084 7B68     		ldr	r3, [r7, #4]
 2199 0086 43F82210 		str	r1, [r3, r2, lsl #2]
 580:poly.c        ****     r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
 2200              		.loc 1 580 29 discriminator 3
 2201 008a FA68     		ldr	r2, [r7, #12]
 2202 008c 1346     		mov	r3, r2
 2203 008e 5B00     		lsls	r3, r3, #1
 2204 0090 1344     		add	r3, r3, r2
 2205              		.loc 1 580 27 discriminator 3
 2206 0092 0133     		adds	r3, r3, #1
 2207 0094 3A68     		ldr	r2, [r7]
 2208 0096 1344     		add	r3, r3, r2
 2209 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2210              		.loc 1 580 41 discriminator 3
 2211 009a 5B08     		lsrs	r3, r3, #1
 2212 009c DBB2     		uxtb	r3, r3
 2213 009e 1946     		mov	r1, r3
 2214              		.loc 1 580 16 discriminator 3
 2215 00a0 FB68     		ldr	r3, [r7, #12]
 2216 00a2 DB00     		lsls	r3, r3, #3
 2217              		.loc 1 580 18 discriminator 3
 2218 00a4 DA1C     		adds	r2, r3, #3
 2219              		.loc 1 580 41 discriminator 3
 2220 00a6 01F00701 		and	r1, r1, #7
 2221              		.loc 1 580 22 discriminator 3
 2222 00aa 7B68     		ldr	r3, [r7, #4]
 2223 00ac 43F82210 		str	r1, [r3, r2, lsl #2]
 581:poly.c        ****     r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
 2224              		.loc 1 581 29 discriminator 3
 2225 00b0 FA68     		ldr	r2, [r7, #12]
 2226 00b2 1346     		mov	r3, r2
 2227 00b4 5B00     		lsls	r3, r3, #1
 2228 00b6 1344     		add	r3, r3, r2
 2229              		.loc 1 581 27 discriminator 3
 2230 00b8 0133     		adds	r3, r3, #1
 2231 00ba 3A68     		ldr	r2, [r7]
 2232 00bc 1344     		add	r3, r3, r2
 2233 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2234              		.loc 1 581 41 discriminator 3
 2235 00c0 1B09     		lsrs	r3, r3, #4
 2236 00c2 DBB2     		uxtb	r3, r3
 2237 00c4 1946     		mov	r1, r3
 2238              		.loc 1 581 16 discriminator 3
 2239 00c6 FB68     		ldr	r3, [r7, #12]
 2240 00c8 DB00     		lsls	r3, r3, #3
 2241              		.loc 1 581 18 discriminator 3
 2242 00ca 1A1D     		adds	r2, r3, #4
 2243              		.loc 1 581 41 discriminator 3
 2244 00cc 01F00701 		and	r1, r1, #7
 2245              		.loc 1 581 22 discriminator 3
 2246 00d0 7B68     		ldr	r3, [r7, #4]
 2247 00d2 43F82210 		str	r1, [r3, r2, lsl #2]
 582:poly.c        ****     r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
 2248              		.loc 1 582 29 discriminator 3
 2249 00d6 FA68     		ldr	r2, [r7, #12]
 2250 00d8 1346     		mov	r3, r2
 2251 00da 5B00     		lsls	r3, r3, #1
 2252 00dc 1344     		add	r3, r3, r2
 2253              		.loc 1 582 27 discriminator 3
 2254 00de 0133     		adds	r3, r3, #1
 2255 00e0 3A68     		ldr	r2, [r7]
 2256 00e2 1344     		add	r3, r3, r2
 2257 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2258              		.loc 1 582 35 discriminator 3
 2259 00e6 DB09     		lsrs	r3, r3, #7
 2260 00e8 DBB2     		uxtb	r3, r3
 2261 00ea 1946     		mov	r1, r3
 2262              		.loc 1 582 47 discriminator 3
 2263 00ec FA68     		ldr	r2, [r7, #12]
 2264 00ee 1346     		mov	r3, r2
 2265 00f0 5B00     		lsls	r3, r3, #1
 2266 00f2 1344     		add	r3, r3, r2
 2267              		.loc 1 582 45 discriminator 3
 2268 00f4 0233     		adds	r3, r3, #2
 2269 00f6 3A68     		ldr	r2, [r7]
 2270 00f8 1344     		add	r3, r3, r2
 2271 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2272              		.loc 1 582 53 discriminator 3
 2273 00fc 5B00     		lsls	r3, r3, #1
 2274              		.loc 1 582 41 discriminator 3
 2275 00fe 0B43     		orrs	r3, r3, r1
 2276              		.loc 1 582 16 discriminator 3
 2277 0100 FA68     		ldr	r2, [r7, #12]
 2278 0102 D200     		lsls	r2, r2, #3
 2279              		.loc 1 582 18 discriminator 3
 2280 0104 0532     		adds	r2, r2, #5
 2281              		.loc 1 582 60 discriminator 3
 2282 0106 03F00701 		and	r1, r3, #7
 2283              		.loc 1 582 22 discriminator 3
 2284 010a 7B68     		ldr	r3, [r7, #4]
 2285 010c 43F82210 		str	r1, [r3, r2, lsl #2]
 583:poly.c        ****     r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
 2286              		.loc 1 583 29 discriminator 3
 2287 0110 FA68     		ldr	r2, [r7, #12]
 2288 0112 1346     		mov	r3, r2
 2289 0114 5B00     		lsls	r3, r3, #1
 2290 0116 1344     		add	r3, r3, r2
 2291              		.loc 1 583 27 discriminator 3
 2292 0118 0233     		adds	r3, r3, #2
 2293 011a 3A68     		ldr	r2, [r7]
 2294 011c 1344     		add	r3, r3, r2
 2295 011e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2296              		.loc 1 583 41 discriminator 3
 2297 0120 9B08     		lsrs	r3, r3, #2
 2298 0122 DBB2     		uxtb	r3, r3
 2299 0124 1946     		mov	r1, r3
 2300              		.loc 1 583 16 discriminator 3
 2301 0126 FB68     		ldr	r3, [r7, #12]
 2302 0128 DB00     		lsls	r3, r3, #3
 2303              		.loc 1 583 18 discriminator 3
 2304 012a 9A1D     		adds	r2, r3, #6
 2305              		.loc 1 583 41 discriminator 3
 2306 012c 01F00701 		and	r1, r1, #7
 2307              		.loc 1 583 22 discriminator 3
 2308 0130 7B68     		ldr	r3, [r7, #4]
 2309 0132 43F82210 		str	r1, [r3, r2, lsl #2]
 584:poly.c        ****     r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 2310              		.loc 1 584 29 discriminator 3
 2311 0136 FA68     		ldr	r2, [r7, #12]
 2312 0138 1346     		mov	r3, r2
 2313 013a 5B00     		lsls	r3, r3, #1
 2314 013c 1344     		add	r3, r3, r2
 2315              		.loc 1 584 27 discriminator 3
 2316 013e 0233     		adds	r3, r3, #2
 2317 0140 3A68     		ldr	r2, [r7]
 2318 0142 1344     		add	r3, r3, r2
 2319 0144 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2320              		.loc 1 584 41 discriminator 3
 2321 0146 5B09     		lsrs	r3, r3, #5
 2322 0148 DBB2     		uxtb	r3, r3
 2323 014a 1946     		mov	r1, r3
 2324              		.loc 1 584 16 discriminator 3
 2325 014c FB68     		ldr	r3, [r7, #12]
 2326 014e DB00     		lsls	r3, r3, #3
 2327              		.loc 1 584 18 discriminator 3
 2328 0150 DA1D     		adds	r2, r3, #7
 2329              		.loc 1 584 41 discriminator 3
 2330 0152 01F00701 		and	r1, r1, #7
 2331              		.loc 1 584 22 discriminator 3
 2332 0156 7B68     		ldr	r3, [r7, #4]
 2333 0158 43F82210 		str	r1, [r3, r2, lsl #2]
 585:poly.c        **** 
 586:poly.c        ****     r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 2334              		.loc 1 586 43 discriminator 3
 2335 015c FB68     		ldr	r3, [r7, #12]
 2336 015e DA00     		lsls	r2, r3, #3
 2337              		.loc 1 586 39 discriminator 3
 2338 0160 7B68     		ldr	r3, [r7, #4]
 2339 0162 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2340              		.loc 1 586 18 discriminator 3
 2341 0166 FA68     		ldr	r2, [r7, #12]
 2342 0168 D200     		lsls	r2, r2, #3
 2343              		.loc 1 586 28 discriminator 3
 2344 016a C3F10201 		rsb	r1, r3, #2
 2345              		.loc 1 586 22 discriminator 3
 2346 016e 7B68     		ldr	r3, [r7, #4]
 2347 0170 43F82210 		str	r1, [r3, r2, lsl #2]
 587:poly.c        ****     r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 2348              		.loc 1 587 41 discriminator 3
 2349 0174 FB68     		ldr	r3, [r7, #12]
 2350 0176 DB00     		lsls	r3, r3, #3
 2351              		.loc 1 587 43 discriminator 3
 2352 0178 5A1C     		adds	r2, r3, #1
 2353              		.loc 1 587 39 discriminator 3
 2354 017a 7B68     		ldr	r3, [r7, #4]
 2355 017c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2356              		.loc 1 587 16 discriminator 3
 2357 0180 FA68     		ldr	r2, [r7, #12]
 2358 0182 D200     		lsls	r2, r2, #3
 2359              		.loc 1 587 18 discriminator 3
 2360 0184 0132     		adds	r2, r2, #1
 2361              		.loc 1 587 28 discriminator 3
 2362 0186 C3F10201 		rsb	r1, r3, #2
 2363              		.loc 1 587 22 discriminator 3
 2364 018a 7B68     		ldr	r3, [r7, #4]
 2365 018c 43F82210 		str	r1, [r3, r2, lsl #2]
 588:poly.c        ****     r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
 2366              		.loc 1 588 41 discriminator 3
 2367 0190 FB68     		ldr	r3, [r7, #12]
 2368 0192 DB00     		lsls	r3, r3, #3
 2369              		.loc 1 588 43 discriminator 3
 2370 0194 9A1C     		adds	r2, r3, #2
 2371              		.loc 1 588 39 discriminator 3
 2372 0196 7B68     		ldr	r3, [r7, #4]
 2373 0198 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2374              		.loc 1 588 16 discriminator 3
 2375 019c FA68     		ldr	r2, [r7, #12]
 2376 019e D200     		lsls	r2, r2, #3
 2377              		.loc 1 588 18 discriminator 3
 2378 01a0 0232     		adds	r2, r2, #2
 2379              		.loc 1 588 28 discriminator 3
 2380 01a2 C3F10201 		rsb	r1, r3, #2
 2381              		.loc 1 588 22 discriminator 3
 2382 01a6 7B68     		ldr	r3, [r7, #4]
 2383 01a8 43F82210 		str	r1, [r3, r2, lsl #2]
 589:poly.c        ****     r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 2384              		.loc 1 589 41 discriminator 3
 2385 01ac FB68     		ldr	r3, [r7, #12]
 2386 01ae DB00     		lsls	r3, r3, #3
 2387              		.loc 1 589 43 discriminator 3
 2388 01b0 DA1C     		adds	r2, r3, #3
 2389              		.loc 1 589 39 discriminator 3
 2390 01b2 7B68     		ldr	r3, [r7, #4]
 2391 01b4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2392              		.loc 1 589 16 discriminator 3
 2393 01b8 FA68     		ldr	r2, [r7, #12]
 2394 01ba D200     		lsls	r2, r2, #3
 2395              		.loc 1 589 18 discriminator 3
 2396 01bc 0332     		adds	r2, r2, #3
 2397              		.loc 1 589 28 discriminator 3
 2398 01be C3F10201 		rsb	r1, r3, #2
 2399              		.loc 1 589 22 discriminator 3
 2400 01c2 7B68     		ldr	r3, [r7, #4]
 2401 01c4 43F82210 		str	r1, [r3, r2, lsl #2]
 590:poly.c        ****     r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 2402              		.loc 1 590 41 discriminator 3
 2403 01c8 FB68     		ldr	r3, [r7, #12]
 2404 01ca DB00     		lsls	r3, r3, #3
 2405              		.loc 1 590 43 discriminator 3
 2406 01cc 1A1D     		adds	r2, r3, #4
 2407              		.loc 1 590 39 discriminator 3
 2408 01ce 7B68     		ldr	r3, [r7, #4]
 2409 01d0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2410              		.loc 1 590 16 discriminator 3
 2411 01d4 FA68     		ldr	r2, [r7, #12]
 2412 01d6 D200     		lsls	r2, r2, #3
 2413              		.loc 1 590 18 discriminator 3
 2414 01d8 0432     		adds	r2, r2, #4
 2415              		.loc 1 590 28 discriminator 3
 2416 01da C3F10201 		rsb	r1, r3, #2
 2417              		.loc 1 590 22 discriminator 3
 2418 01de 7B68     		ldr	r3, [r7, #4]
 2419 01e0 43F82210 		str	r1, [r3, r2, lsl #2]
 591:poly.c        ****     r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 2420              		.loc 1 591 41 discriminator 3
 2421 01e4 FB68     		ldr	r3, [r7, #12]
 2422 01e6 DB00     		lsls	r3, r3, #3
 2423              		.loc 1 591 43 discriminator 3
 2424 01e8 5A1D     		adds	r2, r3, #5
 2425              		.loc 1 591 39 discriminator 3
 2426 01ea 7B68     		ldr	r3, [r7, #4]
 2427 01ec 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2428              		.loc 1 591 16 discriminator 3
 2429 01f0 FA68     		ldr	r2, [r7, #12]
 2430 01f2 D200     		lsls	r2, r2, #3
 2431              		.loc 1 591 18 discriminator 3
 2432 01f4 0532     		adds	r2, r2, #5
 2433              		.loc 1 591 28 discriminator 3
 2434 01f6 C3F10201 		rsb	r1, r3, #2
 2435              		.loc 1 591 22 discriminator 3
 2436 01fa 7B68     		ldr	r3, [r7, #4]
 2437 01fc 43F82210 		str	r1, [r3, r2, lsl #2]
 592:poly.c        ****     r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 2438              		.loc 1 592 41 discriminator 3
 2439 0200 FB68     		ldr	r3, [r7, #12]
 2440 0202 DB00     		lsls	r3, r3, #3
 2441              		.loc 1 592 43 discriminator 3
 2442 0204 9A1D     		adds	r2, r3, #6
 2443              		.loc 1 592 39 discriminator 3
 2444 0206 7B68     		ldr	r3, [r7, #4]
 2445 0208 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2446              		.loc 1 592 16 discriminator 3
 2447 020c FA68     		ldr	r2, [r7, #12]
 2448 020e D200     		lsls	r2, r2, #3
 2449              		.loc 1 592 18 discriminator 3
 2450 0210 0632     		adds	r2, r2, #6
 2451              		.loc 1 592 28 discriminator 3
 2452 0212 C3F10201 		rsb	r1, r3, #2
 2453              		.loc 1 592 22 discriminator 3
 2454 0216 7B68     		ldr	r3, [r7, #4]
 2455 0218 43F82210 		str	r1, [r3, r2, lsl #2]
 593:poly.c        ****     r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 2456              		.loc 1 593 41 discriminator 3
 2457 021c FB68     		ldr	r3, [r7, #12]
 2458 021e DB00     		lsls	r3, r3, #3
 2459              		.loc 1 593 43 discriminator 3
 2460 0220 DA1D     		adds	r2, r3, #7
 2461              		.loc 1 593 39 discriminator 3
 2462 0222 7B68     		ldr	r3, [r7, #4]
 2463 0224 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2464              		.loc 1 593 16 discriminator 3
 2465 0228 FA68     		ldr	r2, [r7, #12]
 2466 022a D200     		lsls	r2, r2, #3
 2467              		.loc 1 593 18 discriminator 3
 2468 022c 0732     		adds	r2, r2, #7
 2469              		.loc 1 593 28 discriminator 3
 2470 022e C3F10201 		rsb	r1, r3, #2
 2471              		.loc 1 593 22 discriminator 3
 2472 0232 7B68     		ldr	r3, [r7, #4]
 2473 0234 43F82210 		str	r1, [r3, r2, lsl #2]
 576:poly.c        ****     r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 2474              		.loc 1 576 23 discriminator 3
 2475 0238 FB68     		ldr	r3, [r7, #12]
 2476 023a 0133     		adds	r3, r3, #1
 2477 023c FB60     		str	r3, [r7, #12]
 2478              	.L78:
 576:poly.c        ****     r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 2479              		.loc 1 576 3 discriminator 1
 2480 023e FB68     		ldr	r3, [r7, #12]
 2481 0240 1F2B     		cmp	r3, #31
 2482 0242 7FF6E5AE 		bls	.L79
 594:poly.c        ****   }
 595:poly.c        **** #elif ETA == 4
 596:poly.c        ****   for(i = 0; i < N/2; ++i) {
 597:poly.c        ****     r->coeffs[2*i+0] = a[i] & 0x0F;
 598:poly.c        ****     r->coeffs[2*i+1] = a[i] >> 4;
 599:poly.c        ****     r->coeffs[2*i+0] = ETA - r->coeffs[2*i+0];
 600:poly.c        ****     r->coeffs[2*i+1] = ETA - r->coeffs[2*i+1];
 601:poly.c        ****   }
 602:poly.c        **** #endif
 603:poly.c        **** 
 604:poly.c        ****   DBENCH_STOP(*tpack);
 605:poly.c        **** }
 2483              		.loc 1 605 1
 2484 0246 00BF     		nop
 2485 0248 00BF     		nop
 2486 024a 1437     		adds	r7, r7, #20
 2487              	.LCFI110:
 2488              		.cfi_def_cfa_offset 4
 2489 024c BD46     		mov	sp, r7
 2490              	.LCFI111:
 2491              		.cfi_def_cfa_register 13
 2492              		@ sp needed
 2493 024e 80BC     		pop	{r7}
 2494              	.LCFI112:
 2495              		.cfi_restore 7
 2496              		.cfi_def_cfa_offset 0
 2497 0250 7047     		bx	lr
 2498              		.cfi_endproc
 2499              	.LFE20:
 2501              		.section	.text.pqcrystals_dilithium2_refpolyt1_pack,"ax",%progbits
 2502              		.align	1
 2503              		.global	pqcrystals_dilithium2_refpolyt1_pack
 2504              		.syntax unified
 2505              		.thumb
 2506              		.thumb_func
 2507              		.fpu softvfp
 2509              	pqcrystals_dilithium2_refpolyt1_pack:
 2510              	.LFB21:
 606:poly.c        **** 
 607:poly.c        **** /*************************************************
 608:poly.c        **** * Name:        polyt1_pack
 609:poly.c        **** *
 610:poly.c        **** * Description: Bit-pack polynomial t1 with coefficients fitting in 10 bits.
 611:poly.c        **** *              Input coefficients are assumed to be standard representatives.
 612:poly.c        **** *
 613:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 614:poly.c        **** *                            POLYT1_PACKEDBYTES bytes
 615:poly.c        **** *              - const poly *a: pointer to input polynomial
 616:poly.c        **** **************************************************/
 617:poly.c        **** void polyt1_pack(uint8_t *r, const poly *a) {
 2511              		.loc 1 617 45
 2512              		.cfi_startproc
 2513              		@ args = 0, pretend = 0, frame = 16
 2514              		@ frame_needed = 1, uses_anonymous_args = 0
 2515              		@ link register save eliminated.
 2516 0000 80B4     		push	{r7}
 2517              	.LCFI113:
 2518              		.cfi_def_cfa_offset 4
 2519              		.cfi_offset 7, -4
 2520 0002 85B0     		sub	sp, sp, #20
 2521              	.LCFI114:
 2522              		.cfi_def_cfa_offset 24
 2523 0004 00AF     		add	r7, sp, #0
 2524              	.LCFI115:
 2525              		.cfi_def_cfa_register 7
 2526 0006 7860     		str	r0, [r7, #4]
 2527 0008 3960     		str	r1, [r7]
 618:poly.c        ****   unsigned int i;
 619:poly.c        ****   DBENCH_START();
 620:poly.c        **** 
 621:poly.c        ****   for(i = 0; i < N/4; ++i) {
 2528              		.loc 1 621 9
 2529 000a 0023     		movs	r3, #0
 2530 000c FB60     		str	r3, [r7, #12]
 2531              		.loc 1 621 3
 2532 000e 6FE0     		b	.L81
 2533              	.L82:
 622:poly.c        ****     r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 2534              		.loc 1 622 30 discriminator 3
 2535 0010 FB68     		ldr	r3, [r7, #12]
 2536 0012 9A00     		lsls	r2, r3, #2
 2537              		.loc 1 622 34 discriminator 3
 2538 0014 3B68     		ldr	r3, [r7]
 2539 0016 53F82210 		ldr	r1, [r3, r2, lsl #2]
 2540              		.loc 1 622 8 discriminator 3
 2541 001a FA68     		ldr	r2, [r7, #12]
 2542 001c 1346     		mov	r3, r2
 2543 001e 9B00     		lsls	r3, r3, #2
 2544 0020 1344     		add	r3, r3, r2
 2545              		.loc 1 622 6 discriminator 3
 2546 0022 7A68     		ldr	r2, [r7, #4]
 2547 0024 1344     		add	r3, r3, r2
 2548              		.loc 1 622 14 discriminator 3
 2549 0026 CAB2     		uxtb	r2, r1
 2550 0028 1A70     		strb	r2, [r3]
 623:poly.c        ****     r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 2551              		.loc 1 623 30 discriminator 3
 2552 002a FB68     		ldr	r3, [r7, #12]
 2553 002c 9A00     		lsls	r2, r3, #2
 2554              		.loc 1 623 26 discriminator 3
 2555 002e 3B68     		ldr	r3, [r7]
 2556 0030 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2557              		.loc 1 623 34 discriminator 3
 2558 0034 1B12     		asrs	r3, r3, #8
 2559              		.loc 1 623 40 discriminator 3
 2560 0036 5AB2     		sxtb	r2, r3
 2561              		.loc 1 623 54 discriminator 3
 2562 0038 FB68     		ldr	r3, [r7, #12]
 2563 003a 9B00     		lsls	r3, r3, #2
 2564              		.loc 1 623 56 discriminator 3
 2565 003c 591C     		adds	r1, r3, #1
 2566              		.loc 1 623 52 discriminator 3
 2567 003e 3B68     		ldr	r3, [r7]
 2568 0040 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2569              		.loc 1 623 60 discriminator 3
 2570 0044 9B00     		lsls	r3, r3, #2
 2571              		.loc 1 623 40 discriminator 3
 2572 0046 5BB2     		sxtb	r3, r3
 2573 0048 1343     		orrs	r3, r3, r2
 2574 004a 59B2     		sxtb	r1, r3
 2575              		.loc 1 623 8 discriminator 3
 2576 004c FA68     		ldr	r2, [r7, #12]
 2577 004e 1346     		mov	r3, r2
 2578 0050 9B00     		lsls	r3, r3, #2
 2579 0052 1344     		add	r3, r3, r2
 2580              		.loc 1 623 6 discriminator 3
 2581 0054 0133     		adds	r3, r3, #1
 2582 0056 7A68     		ldr	r2, [r7, #4]
 2583 0058 1344     		add	r3, r3, r2
 2584              		.loc 1 623 40 discriminator 3
 2585 005a CAB2     		uxtb	r2, r1
 2586              		.loc 1 623 14 discriminator 3
 2587 005c 1A70     		strb	r2, [r3]
 624:poly.c        ****     r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 2588              		.loc 1 624 28 discriminator 3
 2589 005e FB68     		ldr	r3, [r7, #12]
 2590 0060 9B00     		lsls	r3, r3, #2
 2591              		.loc 1 624 30 discriminator 3
 2592 0062 5A1C     		adds	r2, r3, #1
 2593              		.loc 1 624 26 discriminator 3
 2594 0064 3B68     		ldr	r3, [r7]
 2595 0066 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2596              		.loc 1 624 34 discriminator 3
 2597 006a 9B11     		asrs	r3, r3, #6
 2598              		.loc 1 624 40 discriminator 3
 2599 006c 5AB2     		sxtb	r2, r3
 2600              		.loc 1 624 54 discriminator 3
 2601 006e FB68     		ldr	r3, [r7, #12]
 2602 0070 9B00     		lsls	r3, r3, #2
 2603              		.loc 1 624 56 discriminator 3
 2604 0072 991C     		adds	r1, r3, #2
 2605              		.loc 1 624 52 discriminator 3
 2606 0074 3B68     		ldr	r3, [r7]
 2607 0076 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2608              		.loc 1 624 60 discriminator 3
 2609 007a 1B01     		lsls	r3, r3, #4
 2610              		.loc 1 624 40 discriminator 3
 2611 007c 5BB2     		sxtb	r3, r3
 2612 007e 1343     		orrs	r3, r3, r2
 2613 0080 59B2     		sxtb	r1, r3
 2614              		.loc 1 624 8 discriminator 3
 2615 0082 FA68     		ldr	r2, [r7, #12]
 2616 0084 1346     		mov	r3, r2
 2617 0086 9B00     		lsls	r3, r3, #2
 2618 0088 1344     		add	r3, r3, r2
 2619              		.loc 1 624 6 discriminator 3
 2620 008a 0233     		adds	r3, r3, #2
 2621 008c 7A68     		ldr	r2, [r7, #4]
 2622 008e 1344     		add	r3, r3, r2
 2623              		.loc 1 624 40 discriminator 3
 2624 0090 CAB2     		uxtb	r2, r1
 2625              		.loc 1 624 14 discriminator 3
 2626 0092 1A70     		strb	r2, [r3]
 625:poly.c        ****     r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 2627              		.loc 1 625 28 discriminator 3
 2628 0094 FB68     		ldr	r3, [r7, #12]
 2629 0096 9B00     		lsls	r3, r3, #2
 2630              		.loc 1 625 30 discriminator 3
 2631 0098 9A1C     		adds	r2, r3, #2
 2632              		.loc 1 625 26 discriminator 3
 2633 009a 3B68     		ldr	r3, [r7]
 2634 009c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2635              		.loc 1 625 34 discriminator 3
 2636 00a0 1B11     		asrs	r3, r3, #4
 2637              		.loc 1 625 40 discriminator 3
 2638 00a2 5AB2     		sxtb	r2, r3
 2639              		.loc 1 625 54 discriminator 3
 2640 00a4 FB68     		ldr	r3, [r7, #12]
 2641 00a6 9B00     		lsls	r3, r3, #2
 2642              		.loc 1 625 56 discriminator 3
 2643 00a8 D91C     		adds	r1, r3, #3
 2644              		.loc 1 625 52 discriminator 3
 2645 00aa 3B68     		ldr	r3, [r7]
 2646 00ac 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2647              		.loc 1 625 60 discriminator 3
 2648 00b0 9B01     		lsls	r3, r3, #6
 2649              		.loc 1 625 40 discriminator 3
 2650 00b2 5BB2     		sxtb	r3, r3
 2651 00b4 1343     		orrs	r3, r3, r2
 2652 00b6 59B2     		sxtb	r1, r3
 2653              		.loc 1 625 8 discriminator 3
 2654 00b8 FA68     		ldr	r2, [r7, #12]
 2655 00ba 1346     		mov	r3, r2
 2656 00bc 9B00     		lsls	r3, r3, #2
 2657 00be 1344     		add	r3, r3, r2
 2658              		.loc 1 625 6 discriminator 3
 2659 00c0 0333     		adds	r3, r3, #3
 2660 00c2 7A68     		ldr	r2, [r7, #4]
 2661 00c4 1344     		add	r3, r3, r2
 2662              		.loc 1 625 40 discriminator 3
 2663 00c6 CAB2     		uxtb	r2, r1
 2664              		.loc 1 625 14 discriminator 3
 2665 00c8 1A70     		strb	r2, [r3]
 626:poly.c        ****     r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 2666              		.loc 1 626 28 discriminator 3
 2667 00ca FB68     		ldr	r3, [r7, #12]
 2668 00cc 9B00     		lsls	r3, r3, #2
 2669              		.loc 1 626 30 discriminator 3
 2670 00ce DA1C     		adds	r2, r3, #3
 2671              		.loc 1 626 26 discriminator 3
 2672 00d0 3B68     		ldr	r3, [r7]
 2673 00d2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2674              		.loc 1 626 34 discriminator 3
 2675 00d6 9910     		asrs	r1, r3, #2
 2676              		.loc 1 626 8 discriminator 3
 2677 00d8 FA68     		ldr	r2, [r7, #12]
 2678 00da 1346     		mov	r3, r2
 2679 00dc 9B00     		lsls	r3, r3, #2
 2680 00de 1344     		add	r3, r3, r2
 2681              		.loc 1 626 6 discriminator 3
 2682 00e0 0433     		adds	r3, r3, #4
 2683 00e2 7A68     		ldr	r2, [r7, #4]
 2684 00e4 1344     		add	r3, r3, r2
 2685              		.loc 1 626 14 discriminator 3
 2686 00e6 CAB2     		uxtb	r2, r1
 2687 00e8 1A70     		strb	r2, [r3]
 621:poly.c        ****     r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 2688              		.loc 1 621 23 discriminator 3
 2689 00ea FB68     		ldr	r3, [r7, #12]
 2690 00ec 0133     		adds	r3, r3, #1
 2691 00ee FB60     		str	r3, [r7, #12]
 2692              	.L81:
 621:poly.c        ****     r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 2693              		.loc 1 621 3 discriminator 1
 2694 00f0 FB68     		ldr	r3, [r7, #12]
 2695 00f2 3F2B     		cmp	r3, #63
 2696 00f4 8CD9     		bls	.L82
 627:poly.c        ****   }
 628:poly.c        **** 
 629:poly.c        ****   DBENCH_STOP(*tpack);
 630:poly.c        **** }
 2697              		.loc 1 630 1
 2698 00f6 00BF     		nop
 2699 00f8 00BF     		nop
 2700 00fa 1437     		adds	r7, r7, #20
 2701              	.LCFI116:
 2702              		.cfi_def_cfa_offset 4
 2703 00fc BD46     		mov	sp, r7
 2704              	.LCFI117:
 2705              		.cfi_def_cfa_register 13
 2706              		@ sp needed
 2707 00fe 80BC     		pop	{r7}
 2708              	.LCFI118:
 2709              		.cfi_restore 7
 2710              		.cfi_def_cfa_offset 0
 2711 0100 7047     		bx	lr
 2712              		.cfi_endproc
 2713              	.LFE21:
 2715              		.section	.text.pqcrystals_dilithium2_refpolyt1_unpack,"ax",%progbits
 2716              		.align	1
 2717              		.global	pqcrystals_dilithium2_refpolyt1_unpack
 2718              		.syntax unified
 2719              		.thumb
 2720              		.thumb_func
 2721              		.fpu softvfp
 2723              	pqcrystals_dilithium2_refpolyt1_unpack:
 2724              	.LFB22:
 631:poly.c        **** 
 632:poly.c        **** /*************************************************
 633:poly.c        **** * Name:        polyt1_unpack
 634:poly.c        **** *
 635:poly.c        **** * Description: Unpack polynomial t1 with 10-bit coefficients.
 636:poly.c        **** *              Output coefficients are standard representatives.
 637:poly.c        **** *
 638:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 639:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 640:poly.c        **** **************************************************/
 641:poly.c        **** void polyt1_unpack(poly *r, const uint8_t *a) {
 2725              		.loc 1 641 47
 2726              		.cfi_startproc
 2727              		@ args = 0, pretend = 0, frame = 16
 2728              		@ frame_needed = 1, uses_anonymous_args = 0
 2729              		@ link register save eliminated.
 2730 0000 80B4     		push	{r7}
 2731              	.LCFI119:
 2732              		.cfi_def_cfa_offset 4
 2733              		.cfi_offset 7, -4
 2734 0002 85B0     		sub	sp, sp, #20
 2735              	.LCFI120:
 2736              		.cfi_def_cfa_offset 24
 2737 0004 00AF     		add	r7, sp, #0
 2738              	.LCFI121:
 2739              		.cfi_def_cfa_register 7
 2740 0006 7860     		str	r0, [r7, #4]
 2741 0008 3960     		str	r1, [r7]
 642:poly.c        ****   unsigned int i;
 643:poly.c        ****   DBENCH_START();
 644:poly.c        **** 
 645:poly.c        ****   for(i = 0; i < N/4; ++i) {
 2742              		.loc 1 645 9
 2743 000a 0023     		movs	r3, #0
 2744 000c FB60     		str	r3, [r7, #12]
 2745              		.loc 1 645 3
 2746 000e 76E0     		b	.L84
 2747              	.L85:
 646:poly.c        ****     r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 2748              		.loc 1 646 29 discriminator 3
 2749 0010 FA68     		ldr	r2, [r7, #12]
 2750 0012 1346     		mov	r3, r2
 2751 0014 9B00     		lsls	r3, r3, #2
 2752 0016 1344     		add	r3, r3, r2
 2753              		.loc 1 646 27 discriminator 3
 2754 0018 3A68     		ldr	r2, [r7]
 2755 001a 1344     		add	r3, r3, r2
 2756 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2757              		.loc 1 646 35 discriminator 3
 2758 001e 1946     		mov	r1, r3
 2759              		.loc 1 646 57 discriminator 3
 2760 0020 FA68     		ldr	r2, [r7, #12]
 2761 0022 1346     		mov	r3, r2
 2762 0024 9B00     		lsls	r3, r3, #2
 2763 0026 1344     		add	r3, r3, r2
 2764              		.loc 1 646 55 discriminator 3
 2765 0028 0133     		adds	r3, r3, #1
 2766 002a 3A68     		ldr	r2, [r7]
 2767 002c 1344     		add	r3, r3, r2
 2768 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2769              		.loc 1 646 63 discriminator 3
 2770 0030 1B02     		lsls	r3, r3, #8
 2771              		.loc 1 646 41 discriminator 3
 2772 0032 0B43     		orrs	r3, r3, r1
 2773              		.loc 1 646 70 discriminator 3
 2774 0034 1946     		mov	r1, r3
 2775              		.loc 1 646 18 discriminator 3
 2776 0036 FB68     		ldr	r3, [r7, #12]
 2777 0038 9A00     		lsls	r2, r3, #2
 2778              		.loc 1 646 70 discriminator 3
 2779 003a C1F30901 		ubfx	r1, r1, #0, #10
 2780              		.loc 1 646 22 discriminator 3
 2781 003e 7B68     		ldr	r3, [r7, #4]
 2782 0040 43F82210 		str	r1, [r3, r2, lsl #2]
 647:poly.c        ****     r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
 2783              		.loc 1 647 29 discriminator 3
 2784 0044 FA68     		ldr	r2, [r7, #12]
 2785 0046 1346     		mov	r3, r2
 2786 0048 9B00     		lsls	r3, r3, #2
 2787 004a 1344     		add	r3, r3, r2
 2788              		.loc 1 647 27 discriminator 3
 2789 004c 0133     		adds	r3, r3, #1
 2790 004e 3A68     		ldr	r2, [r7]
 2791 0050 1344     		add	r3, r3, r2
 2792 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2793              		.loc 1 647 35 discriminator 3
 2794 0054 9B08     		lsrs	r3, r3, #2
 2795 0056 DBB2     		uxtb	r3, r3
 2796 0058 1946     		mov	r1, r3
 2797              		.loc 1 647 57 discriminator 3
 2798 005a FA68     		ldr	r2, [r7, #12]
 2799 005c 1346     		mov	r3, r2
 2800 005e 9B00     		lsls	r3, r3, #2
 2801 0060 1344     		add	r3, r3, r2
 2802              		.loc 1 647 55 discriminator 3
 2803 0062 0233     		adds	r3, r3, #2
 2804 0064 3A68     		ldr	r2, [r7]
 2805 0066 1344     		add	r3, r3, r2
 2806 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2807              		.loc 1 647 63 discriminator 3
 2808 006a 9B01     		lsls	r3, r3, #6
 2809              		.loc 1 647 41 discriminator 3
 2810 006c 0B43     		orrs	r3, r3, r1
 2811              		.loc 1 647 70 discriminator 3
 2812 006e 1946     		mov	r1, r3
 2813              		.loc 1 647 16 discriminator 3
 2814 0070 FB68     		ldr	r3, [r7, #12]
 2815 0072 9B00     		lsls	r3, r3, #2
 2816              		.loc 1 647 18 discriminator 3
 2817 0074 5A1C     		adds	r2, r3, #1
 2818              		.loc 1 647 70 discriminator 3
 2819 0076 C1F30901 		ubfx	r1, r1, #0, #10
 2820              		.loc 1 647 22 discriminator 3
 2821 007a 7B68     		ldr	r3, [r7, #4]
 2822 007c 43F82210 		str	r1, [r3, r2, lsl #2]
 648:poly.c        ****     r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
 2823              		.loc 1 648 29 discriminator 3
 2824 0080 FA68     		ldr	r2, [r7, #12]
 2825 0082 1346     		mov	r3, r2
 2826 0084 9B00     		lsls	r3, r3, #2
 2827 0086 1344     		add	r3, r3, r2
 2828              		.loc 1 648 27 discriminator 3
 2829 0088 0233     		adds	r3, r3, #2
 2830 008a 3A68     		ldr	r2, [r7]
 2831 008c 1344     		add	r3, r3, r2
 2832 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2833              		.loc 1 648 35 discriminator 3
 2834 0090 1B09     		lsrs	r3, r3, #4
 2835 0092 DBB2     		uxtb	r3, r3
 2836 0094 1946     		mov	r1, r3
 2837              		.loc 1 648 57 discriminator 3
 2838 0096 FA68     		ldr	r2, [r7, #12]
 2839 0098 1346     		mov	r3, r2
 2840 009a 9B00     		lsls	r3, r3, #2
 2841 009c 1344     		add	r3, r3, r2
 2842              		.loc 1 648 55 discriminator 3
 2843 009e 0333     		adds	r3, r3, #3
 2844 00a0 3A68     		ldr	r2, [r7]
 2845 00a2 1344     		add	r3, r3, r2
 2846 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2847              		.loc 1 648 63 discriminator 3
 2848 00a6 1B01     		lsls	r3, r3, #4
 2849              		.loc 1 648 41 discriminator 3
 2850 00a8 0B43     		orrs	r3, r3, r1
 2851              		.loc 1 648 70 discriminator 3
 2852 00aa 1946     		mov	r1, r3
 2853              		.loc 1 648 16 discriminator 3
 2854 00ac FB68     		ldr	r3, [r7, #12]
 2855 00ae 9B00     		lsls	r3, r3, #2
 2856              		.loc 1 648 18 discriminator 3
 2857 00b0 9A1C     		adds	r2, r3, #2
 2858              		.loc 1 648 70 discriminator 3
 2859 00b2 C1F30901 		ubfx	r1, r1, #0, #10
 2860              		.loc 1 648 22 discriminator 3
 2861 00b6 7B68     		ldr	r3, [r7, #4]
 2862 00b8 43F82210 		str	r1, [r3, r2, lsl #2]
 649:poly.c        ****     r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 2863              		.loc 1 649 29 discriminator 3
 2864 00bc FA68     		ldr	r2, [r7, #12]
 2865 00be 1346     		mov	r3, r2
 2866 00c0 9B00     		lsls	r3, r3, #2
 2867 00c2 1344     		add	r3, r3, r2
 2868              		.loc 1 649 27 discriminator 3
 2869 00c4 0333     		adds	r3, r3, #3
 2870 00c6 3A68     		ldr	r2, [r7]
 2871 00c8 1344     		add	r3, r3, r2
 2872 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2873              		.loc 1 649 35 discriminator 3
 2874 00cc 9B09     		lsrs	r3, r3, #6
 2875 00ce DBB2     		uxtb	r3, r3
 2876 00d0 1946     		mov	r1, r3
 2877              		.loc 1 649 57 discriminator 3
 2878 00d2 FA68     		ldr	r2, [r7, #12]
 2879 00d4 1346     		mov	r3, r2
 2880 00d6 9B00     		lsls	r3, r3, #2
 2881 00d8 1344     		add	r3, r3, r2
 2882              		.loc 1 649 55 discriminator 3
 2883 00da 0433     		adds	r3, r3, #4
 2884 00dc 3A68     		ldr	r2, [r7]
 2885 00de 1344     		add	r3, r3, r2
 2886 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2887              		.loc 1 649 63 discriminator 3
 2888 00e2 9B00     		lsls	r3, r3, #2
 2889              		.loc 1 649 41 discriminator 3
 2890 00e4 0B43     		orrs	r3, r3, r1
 2891              		.loc 1 649 70 discriminator 3
 2892 00e6 1946     		mov	r1, r3
 2893              		.loc 1 649 16 discriminator 3
 2894 00e8 FB68     		ldr	r3, [r7, #12]
 2895 00ea 9B00     		lsls	r3, r3, #2
 2896              		.loc 1 649 18 discriminator 3
 2897 00ec DA1C     		adds	r2, r3, #3
 2898              		.loc 1 649 70 discriminator 3
 2899 00ee C1F30901 		ubfx	r1, r1, #0, #10
 2900              		.loc 1 649 22 discriminator 3
 2901 00f2 7B68     		ldr	r3, [r7, #4]
 2902 00f4 43F82210 		str	r1, [r3, r2, lsl #2]
 645:poly.c        ****     r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 2903              		.loc 1 645 23 discriminator 3
 2904 00f8 FB68     		ldr	r3, [r7, #12]
 2905 00fa 0133     		adds	r3, r3, #1
 2906 00fc FB60     		str	r3, [r7, #12]
 2907              	.L84:
 645:poly.c        ****     r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 2908              		.loc 1 645 3 discriminator 1
 2909 00fe FB68     		ldr	r3, [r7, #12]
 2910 0100 3F2B     		cmp	r3, #63
 2911 0102 85D9     		bls	.L85
 650:poly.c        ****   }
 651:poly.c        **** 
 652:poly.c        ****   DBENCH_STOP(*tpack);
 653:poly.c        **** }
 2912              		.loc 1 653 1
 2913 0104 00BF     		nop
 2914 0106 00BF     		nop
 2915 0108 1437     		adds	r7, r7, #20
 2916              	.LCFI122:
 2917              		.cfi_def_cfa_offset 4
 2918 010a BD46     		mov	sp, r7
 2919              	.LCFI123:
 2920              		.cfi_def_cfa_register 13
 2921              		@ sp needed
 2922 010c 80BC     		pop	{r7}
 2923              	.LCFI124:
 2924              		.cfi_restore 7
 2925              		.cfi_def_cfa_offset 0
 2926 010e 7047     		bx	lr
 2927              		.cfi_endproc
 2928              	.LFE22:
 2930              		.section	.text.pqcrystals_dilithium2_refpolyt0_pack,"ax",%progbits
 2931              		.align	1
 2932              		.global	pqcrystals_dilithium2_refpolyt0_pack
 2933              		.syntax unified
 2934              		.thumb
 2935              		.thumb_func
 2936              		.fpu softvfp
 2938              	pqcrystals_dilithium2_refpolyt0_pack:
 2939              	.LFB23:
 654:poly.c        **** 
 655:poly.c        **** /*************************************************
 656:poly.c        **** * Name:        polyt0_pack
 657:poly.c        **** *
 658:poly.c        **** * Description: Bit-pack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
 659:poly.c        **** *
 660:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 661:poly.c        **** *                            POLYT0_PACKEDBYTES bytes
 662:poly.c        **** *              - const poly *a: pointer to input polynomial
 663:poly.c        **** **************************************************/
 664:poly.c        **** void polyt0_pack(uint8_t *r, const poly *a) {
 2940              		.loc 1 664 45
 2941              		.cfi_startproc
 2942              		@ args = 0, pretend = 0, frame = 48
 2943              		@ frame_needed = 1, uses_anonymous_args = 0
 2944              		@ link register save eliminated.
 2945 0000 80B4     		push	{r7}
 2946              	.LCFI125:
 2947              		.cfi_def_cfa_offset 4
 2948              		.cfi_offset 7, -4
 2949 0002 8DB0     		sub	sp, sp, #52
 2950              	.LCFI126:
 2951              		.cfi_def_cfa_offset 56
 2952 0004 00AF     		add	r7, sp, #0
 2953              	.LCFI127:
 2954              		.cfi_def_cfa_register 7
 2955 0006 7860     		str	r0, [r7, #4]
 2956 0008 3960     		str	r1, [r7]
 665:poly.c        ****   unsigned int i;
 666:poly.c        ****   uint32_t t[8];
 667:poly.c        ****   DBENCH_START();
 668:poly.c        **** 
 669:poly.c        ****   for(i = 0; i < N/8; ++i) {
 2957              		.loc 1 669 9
 2958 000a 0023     		movs	r3, #0
 2959 000c FB62     		str	r3, [r7, #44]
 2960              		.loc 1 669 3
 2961 000e ADE1     		b	.L87
 2962              	.L88:
 670:poly.c        ****     t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 2963              		.loc 1 670 40 discriminator 3
 2964 0010 FB6A     		ldr	r3, [r7, #44]
 2965 0012 DA00     		lsls	r2, r3, #3
 2966              		.loc 1 670 36 discriminator 3
 2967 0014 3B68     		ldr	r3, [r7]
 2968 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2969              		.loc 1 670 25 discriminator 3
 2970 001a C3F58053 		rsb	r3, r3, #4096
 2971              		.loc 1 670 10 discriminator 3
 2972 001e FB60     		str	r3, [r7, #12]
 671:poly.c        ****     t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 2973              		.loc 1 671 38 discriminator 3
 2974 0020 FB6A     		ldr	r3, [r7, #44]
 2975 0022 DB00     		lsls	r3, r3, #3
 2976              		.loc 1 671 40 discriminator 3
 2977 0024 5A1C     		adds	r2, r3, #1
 2978              		.loc 1 671 36 discriminator 3
 2979 0026 3B68     		ldr	r3, [r7]
 2980 0028 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2981              		.loc 1 671 25 discriminator 3
 2982 002c C3F58053 		rsb	r3, r3, #4096
 2983              		.loc 1 671 10 discriminator 3
 2984 0030 3B61     		str	r3, [r7, #16]
 672:poly.c        ****     t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 2985              		.loc 1 672 38 discriminator 3
 2986 0032 FB6A     		ldr	r3, [r7, #44]
 2987 0034 DB00     		lsls	r3, r3, #3
 2988              		.loc 1 672 40 discriminator 3
 2989 0036 9A1C     		adds	r2, r3, #2
 2990              		.loc 1 672 36 discriminator 3
 2991 0038 3B68     		ldr	r3, [r7]
 2992 003a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2993              		.loc 1 672 25 discriminator 3
 2994 003e C3F58053 		rsb	r3, r3, #4096
 2995              		.loc 1 672 10 discriminator 3
 2996 0042 7B61     		str	r3, [r7, #20]
 673:poly.c        ****     t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 2997              		.loc 1 673 38 discriminator 3
 2998 0044 FB6A     		ldr	r3, [r7, #44]
 2999 0046 DB00     		lsls	r3, r3, #3
 3000              		.loc 1 673 40 discriminator 3
 3001 0048 DA1C     		adds	r2, r3, #3
 3002              		.loc 1 673 36 discriminator 3
 3003 004a 3B68     		ldr	r3, [r7]
 3004 004c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3005              		.loc 1 673 25 discriminator 3
 3006 0050 C3F58053 		rsb	r3, r3, #4096
 3007              		.loc 1 673 10 discriminator 3
 3008 0054 BB61     		str	r3, [r7, #24]
 674:poly.c        ****     t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 3009              		.loc 1 674 38 discriminator 3
 3010 0056 FB6A     		ldr	r3, [r7, #44]
 3011 0058 DB00     		lsls	r3, r3, #3
 3012              		.loc 1 674 40 discriminator 3
 3013 005a 1A1D     		adds	r2, r3, #4
 3014              		.loc 1 674 36 discriminator 3
 3015 005c 3B68     		ldr	r3, [r7]
 3016 005e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3017              		.loc 1 674 25 discriminator 3
 3018 0062 C3F58053 		rsb	r3, r3, #4096
 3019              		.loc 1 674 10 discriminator 3
 3020 0066 FB61     		str	r3, [r7, #28]
 675:poly.c        ****     t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 3021              		.loc 1 675 38 discriminator 3
 3022 0068 FB6A     		ldr	r3, [r7, #44]
 3023 006a DB00     		lsls	r3, r3, #3
 3024              		.loc 1 675 40 discriminator 3
 3025 006c 5A1D     		adds	r2, r3, #5
 3026              		.loc 1 675 36 discriminator 3
 3027 006e 3B68     		ldr	r3, [r7]
 3028 0070 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3029              		.loc 1 675 25 discriminator 3
 3030 0074 C3F58053 		rsb	r3, r3, #4096
 3031              		.loc 1 675 10 discriminator 3
 3032 0078 3B62     		str	r3, [r7, #32]
 676:poly.c        ****     t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 3033              		.loc 1 676 38 discriminator 3
 3034 007a FB6A     		ldr	r3, [r7, #44]
 3035 007c DB00     		lsls	r3, r3, #3
 3036              		.loc 1 676 40 discriminator 3
 3037 007e 9A1D     		adds	r2, r3, #6
 3038              		.loc 1 676 36 discriminator 3
 3039 0080 3B68     		ldr	r3, [r7]
 3040 0082 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3041              		.loc 1 676 25 discriminator 3
 3042 0086 C3F58053 		rsb	r3, r3, #4096
 3043              		.loc 1 676 10 discriminator 3
 3044 008a 7B62     		str	r3, [r7, #36]
 677:poly.c        ****     t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 3045              		.loc 1 677 38 discriminator 3
 3046 008c FB6A     		ldr	r3, [r7, #44]
 3047 008e DB00     		lsls	r3, r3, #3
 3048              		.loc 1 677 40 discriminator 3
 3049 0090 DA1D     		adds	r2, r3, #7
 3050              		.loc 1 677 36 discriminator 3
 3051 0092 3B68     		ldr	r3, [r7]
 3052 0094 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3053              		.loc 1 677 25 discriminator 3
 3054 0098 C3F58053 		rsb	r3, r3, #4096
 3055              		.loc 1 677 10 discriminator 3
 3056 009c BB62     		str	r3, [r7, #40]
 678:poly.c        **** 
 679:poly.c        ****     r[13*i+ 0]  =  t[0];
 3057              		.loc 1 679 21 discriminator 3
 3058 009e F968     		ldr	r1, [r7, #12]
 3059              		.loc 1 679 9 discriminator 3
 3060 00a0 FA6A     		ldr	r2, [r7, #44]
 3061 00a2 1346     		mov	r3, r2
 3062 00a4 5B00     		lsls	r3, r3, #1
 3063 00a6 1344     		add	r3, r3, r2
 3064 00a8 9B00     		lsls	r3, r3, #2
 3065 00aa 1344     		add	r3, r3, r2
 3066              		.loc 1 679 6 discriminator 3
 3067 00ac 7A68     		ldr	r2, [r7, #4]
 3068 00ae 1344     		add	r3, r3, r2
 3069              		.loc 1 679 17 discriminator 3
 3070 00b0 CAB2     		uxtb	r2, r1
 3071 00b2 1A70     		strb	r2, [r3]
 680:poly.c        ****     r[13*i+ 1]  =  t[0] >>  8;
 3072              		.loc 1 680 21 discriminator 3
 3073 00b4 FB68     		ldr	r3, [r7, #12]
 3074              		.loc 1 680 25 discriminator 3
 3075 00b6 190A     		lsrs	r1, r3, #8
 3076              		.loc 1 680 9 discriminator 3
 3077 00b8 FA6A     		ldr	r2, [r7, #44]
 3078 00ba 1346     		mov	r3, r2
 3079 00bc 5B00     		lsls	r3, r3, #1
 3080 00be 1344     		add	r3, r3, r2
 3081 00c0 9B00     		lsls	r3, r3, #2
 3082 00c2 1344     		add	r3, r3, r2
 3083              		.loc 1 680 6 discriminator 3
 3084 00c4 0133     		adds	r3, r3, #1
 3085 00c6 7A68     		ldr	r2, [r7, #4]
 3086 00c8 1344     		add	r3, r3, r2
 3087              		.loc 1 680 17 discriminator 3
 3088 00ca CAB2     		uxtb	r2, r1
 3089 00cc 1A70     		strb	r2, [r3]
 681:poly.c        ****     r[13*i+ 1] |=  t[1] <<  5;
 3090              		.loc 1 681 16 discriminator 3
 3091 00ce FA6A     		ldr	r2, [r7, #44]
 3092 00d0 1346     		mov	r3, r2
 3093 00d2 5B00     		lsls	r3, r3, #1
 3094 00d4 1344     		add	r3, r3, r2
 3095 00d6 9B00     		lsls	r3, r3, #2
 3096 00d8 1344     		add	r3, r3, r2
 3097 00da 0133     		adds	r3, r3, #1
 3098 00dc 7A68     		ldr	r2, [r7, #4]
 3099 00de 1344     		add	r3, r3, r2
 3100 00e0 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3101              		.loc 1 681 21 discriminator 3
 3102 00e2 3B69     		ldr	r3, [r7, #16]
 3103              		.loc 1 681 25 discriminator 3
 3104 00e4 DBB2     		uxtb	r3, r3
 3105 00e6 5B01     		lsls	r3, r3, #5
 3106 00e8 D9B2     		uxtb	r1, r3
 3107              		.loc 1 681 16 discriminator 3
 3108 00ea FA6A     		ldr	r2, [r7, #44]
 3109 00ec 1346     		mov	r3, r2
 3110 00ee 5B00     		lsls	r3, r3, #1
 3111 00f0 1344     		add	r3, r3, r2
 3112 00f2 9B00     		lsls	r3, r3, #2
 3113 00f4 1344     		add	r3, r3, r2
 3114 00f6 0133     		adds	r3, r3, #1
 3115 00f8 7A68     		ldr	r2, [r7, #4]
 3116 00fa 1344     		add	r3, r3, r2
 3117 00fc 40EA0102 		orr	r2, r0, r1
 3118 0100 D2B2     		uxtb	r2, r2
 3119 0102 1A70     		strb	r2, [r3]
 682:poly.c        ****     r[13*i+ 2]  =  t[1] >>  3;
 3120              		.loc 1 682 21 discriminator 3
 3121 0104 3B69     		ldr	r3, [r7, #16]
 3122              		.loc 1 682 25 discriminator 3
 3123 0106 D908     		lsrs	r1, r3, #3
 3124              		.loc 1 682 9 discriminator 3
 3125 0108 FA6A     		ldr	r2, [r7, #44]
 3126 010a 1346     		mov	r3, r2
 3127 010c 5B00     		lsls	r3, r3, #1
 3128 010e 1344     		add	r3, r3, r2
 3129 0110 9B00     		lsls	r3, r3, #2
 3130 0112 1344     		add	r3, r3, r2
 3131              		.loc 1 682 6 discriminator 3
 3132 0114 0233     		adds	r3, r3, #2
 3133 0116 7A68     		ldr	r2, [r7, #4]
 3134 0118 1344     		add	r3, r3, r2
 3135              		.loc 1 682 17 discriminator 3
 3136 011a CAB2     		uxtb	r2, r1
 3137 011c 1A70     		strb	r2, [r3]
 683:poly.c        ****     r[13*i+ 3]  =  t[1] >> 11;
 3138              		.loc 1 683 21 discriminator 3
 3139 011e 3B69     		ldr	r3, [r7, #16]
 3140              		.loc 1 683 25 discriminator 3
 3141 0120 D90A     		lsrs	r1, r3, #11
 3142              		.loc 1 683 9 discriminator 3
 3143 0122 FA6A     		ldr	r2, [r7, #44]
 3144 0124 1346     		mov	r3, r2
 3145 0126 5B00     		lsls	r3, r3, #1
 3146 0128 1344     		add	r3, r3, r2
 3147 012a 9B00     		lsls	r3, r3, #2
 3148 012c 1344     		add	r3, r3, r2
 3149              		.loc 1 683 6 discriminator 3
 3150 012e 0333     		adds	r3, r3, #3
 3151 0130 7A68     		ldr	r2, [r7, #4]
 3152 0132 1344     		add	r3, r3, r2
 3153              		.loc 1 683 17 discriminator 3
 3154 0134 CAB2     		uxtb	r2, r1
 3155 0136 1A70     		strb	r2, [r3]
 684:poly.c        ****     r[13*i+ 3] |=  t[2] <<  2;
 3156              		.loc 1 684 16 discriminator 3
 3157 0138 FA6A     		ldr	r2, [r7, #44]
 3158 013a 1346     		mov	r3, r2
 3159 013c 5B00     		lsls	r3, r3, #1
 3160 013e 1344     		add	r3, r3, r2
 3161 0140 9B00     		lsls	r3, r3, #2
 3162 0142 1344     		add	r3, r3, r2
 3163 0144 0333     		adds	r3, r3, #3
 3164 0146 7A68     		ldr	r2, [r7, #4]
 3165 0148 1344     		add	r3, r3, r2
 3166 014a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3167              		.loc 1 684 21 discriminator 3
 3168 014c 7B69     		ldr	r3, [r7, #20]
 3169              		.loc 1 684 25 discriminator 3
 3170 014e DBB2     		uxtb	r3, r3
 3171 0150 9B00     		lsls	r3, r3, #2
 3172 0152 D9B2     		uxtb	r1, r3
 3173              		.loc 1 684 16 discriminator 3
 3174 0154 FA6A     		ldr	r2, [r7, #44]
 3175 0156 1346     		mov	r3, r2
 3176 0158 5B00     		lsls	r3, r3, #1
 3177 015a 1344     		add	r3, r3, r2
 3178 015c 9B00     		lsls	r3, r3, #2
 3179 015e 1344     		add	r3, r3, r2
 3180 0160 0333     		adds	r3, r3, #3
 3181 0162 7A68     		ldr	r2, [r7, #4]
 3182 0164 1344     		add	r3, r3, r2
 3183 0166 40EA0102 		orr	r2, r0, r1
 3184 016a D2B2     		uxtb	r2, r2
 3185 016c 1A70     		strb	r2, [r3]
 685:poly.c        ****     r[13*i+ 4]  =  t[2] >>  6;
 3186              		.loc 1 685 21 discriminator 3
 3187 016e 7B69     		ldr	r3, [r7, #20]
 3188              		.loc 1 685 25 discriminator 3
 3189 0170 9909     		lsrs	r1, r3, #6
 3190              		.loc 1 685 9 discriminator 3
 3191 0172 FA6A     		ldr	r2, [r7, #44]
 3192 0174 1346     		mov	r3, r2
 3193 0176 5B00     		lsls	r3, r3, #1
 3194 0178 1344     		add	r3, r3, r2
 3195 017a 9B00     		lsls	r3, r3, #2
 3196 017c 1344     		add	r3, r3, r2
 3197              		.loc 1 685 6 discriminator 3
 3198 017e 0433     		adds	r3, r3, #4
 3199 0180 7A68     		ldr	r2, [r7, #4]
 3200 0182 1344     		add	r3, r3, r2
 3201              		.loc 1 685 17 discriminator 3
 3202 0184 CAB2     		uxtb	r2, r1
 3203 0186 1A70     		strb	r2, [r3]
 686:poly.c        ****     r[13*i+ 4] |=  t[3] <<  7;
 3204              		.loc 1 686 16 discriminator 3
 3205 0188 FA6A     		ldr	r2, [r7, #44]
 3206 018a 1346     		mov	r3, r2
 3207 018c 5B00     		lsls	r3, r3, #1
 3208 018e 1344     		add	r3, r3, r2
 3209 0190 9B00     		lsls	r3, r3, #2
 3210 0192 1344     		add	r3, r3, r2
 3211 0194 0433     		adds	r3, r3, #4
 3212 0196 7A68     		ldr	r2, [r7, #4]
 3213 0198 1344     		add	r3, r3, r2
 3214 019a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3215              		.loc 1 686 21 discriminator 3
 3216 019c BB69     		ldr	r3, [r7, #24]
 3217              		.loc 1 686 25 discriminator 3
 3218 019e DBB2     		uxtb	r3, r3
 3219 01a0 DB01     		lsls	r3, r3, #7
 3220 01a2 D9B2     		uxtb	r1, r3
 3221              		.loc 1 686 16 discriminator 3
 3222 01a4 FA6A     		ldr	r2, [r7, #44]
 3223 01a6 1346     		mov	r3, r2
 3224 01a8 5B00     		lsls	r3, r3, #1
 3225 01aa 1344     		add	r3, r3, r2
 3226 01ac 9B00     		lsls	r3, r3, #2
 3227 01ae 1344     		add	r3, r3, r2
 3228 01b0 0433     		adds	r3, r3, #4
 3229 01b2 7A68     		ldr	r2, [r7, #4]
 3230 01b4 1344     		add	r3, r3, r2
 3231 01b6 40EA0102 		orr	r2, r0, r1
 3232 01ba D2B2     		uxtb	r2, r2
 3233 01bc 1A70     		strb	r2, [r3]
 687:poly.c        ****     r[13*i+ 5]  =  t[3] >>  1;
 3234              		.loc 1 687 21 discriminator 3
 3235 01be BB69     		ldr	r3, [r7, #24]
 3236              		.loc 1 687 25 discriminator 3
 3237 01c0 5908     		lsrs	r1, r3, #1
 3238              		.loc 1 687 9 discriminator 3
 3239 01c2 FA6A     		ldr	r2, [r7, #44]
 3240 01c4 1346     		mov	r3, r2
 3241 01c6 5B00     		lsls	r3, r3, #1
 3242 01c8 1344     		add	r3, r3, r2
 3243 01ca 9B00     		lsls	r3, r3, #2
 3244 01cc 1344     		add	r3, r3, r2
 3245              		.loc 1 687 6 discriminator 3
 3246 01ce 0533     		adds	r3, r3, #5
 3247 01d0 7A68     		ldr	r2, [r7, #4]
 3248 01d2 1344     		add	r3, r3, r2
 3249              		.loc 1 687 17 discriminator 3
 3250 01d4 CAB2     		uxtb	r2, r1
 3251 01d6 1A70     		strb	r2, [r3]
 688:poly.c        ****     r[13*i+ 6]  =  t[3] >>  9;
 3252              		.loc 1 688 21 discriminator 3
 3253 01d8 BB69     		ldr	r3, [r7, #24]
 3254              		.loc 1 688 25 discriminator 3
 3255 01da 590A     		lsrs	r1, r3, #9
 3256              		.loc 1 688 9 discriminator 3
 3257 01dc FA6A     		ldr	r2, [r7, #44]
 3258 01de 1346     		mov	r3, r2
 3259 01e0 5B00     		lsls	r3, r3, #1
 3260 01e2 1344     		add	r3, r3, r2
 3261 01e4 9B00     		lsls	r3, r3, #2
 3262 01e6 1344     		add	r3, r3, r2
 3263              		.loc 1 688 6 discriminator 3
 3264 01e8 0633     		adds	r3, r3, #6
 3265 01ea 7A68     		ldr	r2, [r7, #4]
 3266 01ec 1344     		add	r3, r3, r2
 3267              		.loc 1 688 17 discriminator 3
 3268 01ee CAB2     		uxtb	r2, r1
 3269 01f0 1A70     		strb	r2, [r3]
 689:poly.c        ****     r[13*i+ 6] |=  t[4] <<  4;
 3270              		.loc 1 689 16 discriminator 3
 3271 01f2 FA6A     		ldr	r2, [r7, #44]
 3272 01f4 1346     		mov	r3, r2
 3273 01f6 5B00     		lsls	r3, r3, #1
 3274 01f8 1344     		add	r3, r3, r2
 3275 01fa 9B00     		lsls	r3, r3, #2
 3276 01fc 1344     		add	r3, r3, r2
 3277 01fe 0633     		adds	r3, r3, #6
 3278 0200 7A68     		ldr	r2, [r7, #4]
 3279 0202 1344     		add	r3, r3, r2
 3280 0204 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3281              		.loc 1 689 21 discriminator 3
 3282 0206 FB69     		ldr	r3, [r7, #28]
 3283              		.loc 1 689 25 discriminator 3
 3284 0208 DBB2     		uxtb	r3, r3
 3285 020a 1B01     		lsls	r3, r3, #4
 3286 020c D9B2     		uxtb	r1, r3
 3287              		.loc 1 689 16 discriminator 3
 3288 020e FA6A     		ldr	r2, [r7, #44]
 3289 0210 1346     		mov	r3, r2
 3290 0212 5B00     		lsls	r3, r3, #1
 3291 0214 1344     		add	r3, r3, r2
 3292 0216 9B00     		lsls	r3, r3, #2
 3293 0218 1344     		add	r3, r3, r2
 3294 021a 0633     		adds	r3, r3, #6
 3295 021c 7A68     		ldr	r2, [r7, #4]
 3296 021e 1344     		add	r3, r3, r2
 3297 0220 40EA0102 		orr	r2, r0, r1
 3298 0224 D2B2     		uxtb	r2, r2
 3299 0226 1A70     		strb	r2, [r3]
 690:poly.c        ****     r[13*i+ 7]  =  t[4] >>  4;
 3300              		.loc 1 690 21 discriminator 3
 3301 0228 FB69     		ldr	r3, [r7, #28]
 3302              		.loc 1 690 25 discriminator 3
 3303 022a 1909     		lsrs	r1, r3, #4
 3304              		.loc 1 690 9 discriminator 3
 3305 022c FA6A     		ldr	r2, [r7, #44]
 3306 022e 1346     		mov	r3, r2
 3307 0230 5B00     		lsls	r3, r3, #1
 3308 0232 1344     		add	r3, r3, r2
 3309 0234 9B00     		lsls	r3, r3, #2
 3310 0236 1344     		add	r3, r3, r2
 3311              		.loc 1 690 6 discriminator 3
 3312 0238 0733     		adds	r3, r3, #7
 3313 023a 7A68     		ldr	r2, [r7, #4]
 3314 023c 1344     		add	r3, r3, r2
 3315              		.loc 1 690 17 discriminator 3
 3316 023e CAB2     		uxtb	r2, r1
 3317 0240 1A70     		strb	r2, [r3]
 691:poly.c        ****     r[13*i+ 8]  =  t[4] >> 12;
 3318              		.loc 1 691 21 discriminator 3
 3319 0242 FB69     		ldr	r3, [r7, #28]
 3320              		.loc 1 691 25 discriminator 3
 3321 0244 190B     		lsrs	r1, r3, #12
 3322              		.loc 1 691 9 discriminator 3
 3323 0246 FA6A     		ldr	r2, [r7, #44]
 3324 0248 1346     		mov	r3, r2
 3325 024a 5B00     		lsls	r3, r3, #1
 3326 024c 1344     		add	r3, r3, r2
 3327 024e 9B00     		lsls	r3, r3, #2
 3328 0250 1344     		add	r3, r3, r2
 3329              		.loc 1 691 6 discriminator 3
 3330 0252 0833     		adds	r3, r3, #8
 3331 0254 7A68     		ldr	r2, [r7, #4]
 3332 0256 1344     		add	r3, r3, r2
 3333              		.loc 1 691 17 discriminator 3
 3334 0258 CAB2     		uxtb	r2, r1
 3335 025a 1A70     		strb	r2, [r3]
 692:poly.c        ****     r[13*i+ 8] |=  t[5] <<  1;
 3336              		.loc 1 692 16 discriminator 3
 3337 025c FA6A     		ldr	r2, [r7, #44]
 3338 025e 1346     		mov	r3, r2
 3339 0260 5B00     		lsls	r3, r3, #1
 3340 0262 1344     		add	r3, r3, r2
 3341 0264 9B00     		lsls	r3, r3, #2
 3342 0266 1344     		add	r3, r3, r2
 3343 0268 0833     		adds	r3, r3, #8
 3344 026a 7A68     		ldr	r2, [r7, #4]
 3345 026c 1344     		add	r3, r3, r2
 3346 026e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3347              		.loc 1 692 21 discriminator 3
 3348 0270 3B6A     		ldr	r3, [r7, #32]
 3349              		.loc 1 692 25 discriminator 3
 3350 0272 DBB2     		uxtb	r3, r3
 3351 0274 5B00     		lsls	r3, r3, #1
 3352 0276 D9B2     		uxtb	r1, r3
 3353              		.loc 1 692 16 discriminator 3
 3354 0278 FA6A     		ldr	r2, [r7, #44]
 3355 027a 1346     		mov	r3, r2
 3356 027c 5B00     		lsls	r3, r3, #1
 3357 027e 1344     		add	r3, r3, r2
 3358 0280 9B00     		lsls	r3, r3, #2
 3359 0282 1344     		add	r3, r3, r2
 3360 0284 0833     		adds	r3, r3, #8
 3361 0286 7A68     		ldr	r2, [r7, #4]
 3362 0288 1344     		add	r3, r3, r2
 3363 028a 40EA0102 		orr	r2, r0, r1
 3364 028e D2B2     		uxtb	r2, r2
 3365 0290 1A70     		strb	r2, [r3]
 693:poly.c        ****     r[13*i+ 9]  =  t[5] >>  7;
 3366              		.loc 1 693 21 discriminator 3
 3367 0292 3B6A     		ldr	r3, [r7, #32]
 3368              		.loc 1 693 25 discriminator 3
 3369 0294 D909     		lsrs	r1, r3, #7
 3370              		.loc 1 693 9 discriminator 3
 3371 0296 FA6A     		ldr	r2, [r7, #44]
 3372 0298 1346     		mov	r3, r2
 3373 029a 5B00     		lsls	r3, r3, #1
 3374 029c 1344     		add	r3, r3, r2
 3375 029e 9B00     		lsls	r3, r3, #2
 3376 02a0 1344     		add	r3, r3, r2
 3377              		.loc 1 693 6 discriminator 3
 3378 02a2 0933     		adds	r3, r3, #9
 3379 02a4 7A68     		ldr	r2, [r7, #4]
 3380 02a6 1344     		add	r3, r3, r2
 3381              		.loc 1 693 17 discriminator 3
 3382 02a8 CAB2     		uxtb	r2, r1
 3383 02aa 1A70     		strb	r2, [r3]
 694:poly.c        ****     r[13*i+ 9] |=  t[6] <<  6;
 3384              		.loc 1 694 16 discriminator 3
 3385 02ac FA6A     		ldr	r2, [r7, #44]
 3386 02ae 1346     		mov	r3, r2
 3387 02b0 5B00     		lsls	r3, r3, #1
 3388 02b2 1344     		add	r3, r3, r2
 3389 02b4 9B00     		lsls	r3, r3, #2
 3390 02b6 1344     		add	r3, r3, r2
 3391 02b8 0933     		adds	r3, r3, #9
 3392 02ba 7A68     		ldr	r2, [r7, #4]
 3393 02bc 1344     		add	r3, r3, r2
 3394 02be 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3395              		.loc 1 694 21 discriminator 3
 3396 02c0 7B6A     		ldr	r3, [r7, #36]
 3397              		.loc 1 694 25 discriminator 3
 3398 02c2 DBB2     		uxtb	r3, r3
 3399 02c4 9B01     		lsls	r3, r3, #6
 3400 02c6 D9B2     		uxtb	r1, r3
 3401              		.loc 1 694 16 discriminator 3
 3402 02c8 FA6A     		ldr	r2, [r7, #44]
 3403 02ca 1346     		mov	r3, r2
 3404 02cc 5B00     		lsls	r3, r3, #1
 3405 02ce 1344     		add	r3, r3, r2
 3406 02d0 9B00     		lsls	r3, r3, #2
 3407 02d2 1344     		add	r3, r3, r2
 3408 02d4 0933     		adds	r3, r3, #9
 3409 02d6 7A68     		ldr	r2, [r7, #4]
 3410 02d8 1344     		add	r3, r3, r2
 3411 02da 40EA0102 		orr	r2, r0, r1
 3412 02de D2B2     		uxtb	r2, r2
 3413 02e0 1A70     		strb	r2, [r3]
 695:poly.c        ****     r[13*i+10]  =  t[6] >>  2;
 3414              		.loc 1 695 21 discriminator 3
 3415 02e2 7B6A     		ldr	r3, [r7, #36]
 3416              		.loc 1 695 25 discriminator 3
 3417 02e4 9908     		lsrs	r1, r3, #2
 3418              		.loc 1 695 9 discriminator 3
 3419 02e6 FA6A     		ldr	r2, [r7, #44]
 3420 02e8 1346     		mov	r3, r2
 3421 02ea 5B00     		lsls	r3, r3, #1
 3422 02ec 1344     		add	r3, r3, r2
 3423 02ee 9B00     		lsls	r3, r3, #2
 3424 02f0 1344     		add	r3, r3, r2
 3425              		.loc 1 695 6 discriminator 3
 3426 02f2 0A33     		adds	r3, r3, #10
 3427 02f4 7A68     		ldr	r2, [r7, #4]
 3428 02f6 1344     		add	r3, r3, r2
 3429              		.loc 1 695 17 discriminator 3
 3430 02f8 CAB2     		uxtb	r2, r1
 3431 02fa 1A70     		strb	r2, [r3]
 696:poly.c        ****     r[13*i+11]  =  t[6] >> 10;
 3432              		.loc 1 696 21 discriminator 3
 3433 02fc 7B6A     		ldr	r3, [r7, #36]
 3434              		.loc 1 696 25 discriminator 3
 3435 02fe 990A     		lsrs	r1, r3, #10
 3436              		.loc 1 696 9 discriminator 3
 3437 0300 FA6A     		ldr	r2, [r7, #44]
 3438 0302 1346     		mov	r3, r2
 3439 0304 5B00     		lsls	r3, r3, #1
 3440 0306 1344     		add	r3, r3, r2
 3441 0308 9B00     		lsls	r3, r3, #2
 3442 030a 1344     		add	r3, r3, r2
 3443              		.loc 1 696 6 discriminator 3
 3444 030c 0B33     		adds	r3, r3, #11
 3445 030e 7A68     		ldr	r2, [r7, #4]
 3446 0310 1344     		add	r3, r3, r2
 3447              		.loc 1 696 17 discriminator 3
 3448 0312 CAB2     		uxtb	r2, r1
 3449 0314 1A70     		strb	r2, [r3]
 697:poly.c        ****     r[13*i+11] |=  t[7] <<  3;
 3450              		.loc 1 697 16 discriminator 3
 3451 0316 FA6A     		ldr	r2, [r7, #44]
 3452 0318 1346     		mov	r3, r2
 3453 031a 5B00     		lsls	r3, r3, #1
 3454 031c 1344     		add	r3, r3, r2
 3455 031e 9B00     		lsls	r3, r3, #2
 3456 0320 1344     		add	r3, r3, r2
 3457 0322 0B33     		adds	r3, r3, #11
 3458 0324 7A68     		ldr	r2, [r7, #4]
 3459 0326 1344     		add	r3, r3, r2
 3460 0328 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3461              		.loc 1 697 21 discriminator 3
 3462 032a BB6A     		ldr	r3, [r7, #40]
 3463              		.loc 1 697 25 discriminator 3
 3464 032c DBB2     		uxtb	r3, r3
 3465 032e DB00     		lsls	r3, r3, #3
 3466 0330 D9B2     		uxtb	r1, r3
 3467              		.loc 1 697 16 discriminator 3
 3468 0332 FA6A     		ldr	r2, [r7, #44]
 3469 0334 1346     		mov	r3, r2
 3470 0336 5B00     		lsls	r3, r3, #1
 3471 0338 1344     		add	r3, r3, r2
 3472 033a 9B00     		lsls	r3, r3, #2
 3473 033c 1344     		add	r3, r3, r2
 3474 033e 0B33     		adds	r3, r3, #11
 3475 0340 7A68     		ldr	r2, [r7, #4]
 3476 0342 1344     		add	r3, r3, r2
 3477 0344 40EA0102 		orr	r2, r0, r1
 3478 0348 D2B2     		uxtb	r2, r2
 3479 034a 1A70     		strb	r2, [r3]
 698:poly.c        ****     r[13*i+12]  =  t[7] >>  5;
 3480              		.loc 1 698 21 discriminator 3
 3481 034c BB6A     		ldr	r3, [r7, #40]
 3482              		.loc 1 698 25 discriminator 3
 3483 034e 5909     		lsrs	r1, r3, #5
 3484              		.loc 1 698 9 discriminator 3
 3485 0350 FA6A     		ldr	r2, [r7, #44]
 3486 0352 1346     		mov	r3, r2
 3487 0354 5B00     		lsls	r3, r3, #1
 3488 0356 1344     		add	r3, r3, r2
 3489 0358 9B00     		lsls	r3, r3, #2
 3490 035a 1344     		add	r3, r3, r2
 3491              		.loc 1 698 6 discriminator 3
 3492 035c 0C33     		adds	r3, r3, #12
 3493 035e 7A68     		ldr	r2, [r7, #4]
 3494 0360 1344     		add	r3, r3, r2
 3495              		.loc 1 698 17 discriminator 3
 3496 0362 CAB2     		uxtb	r2, r1
 3497 0364 1A70     		strb	r2, [r3]
 669:poly.c        ****     t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 3498              		.loc 1 669 23 discriminator 3
 3499 0366 FB6A     		ldr	r3, [r7, #44]
 3500 0368 0133     		adds	r3, r3, #1
 3501 036a FB62     		str	r3, [r7, #44]
 3502              	.L87:
 669:poly.c        ****     t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 3503              		.loc 1 669 3 discriminator 1
 3504 036c FB6A     		ldr	r3, [r7, #44]
 3505 036e 1F2B     		cmp	r3, #31
 3506 0370 7FF64EAE 		bls	.L88
 699:poly.c        ****   }
 700:poly.c        **** 
 701:poly.c        ****   DBENCH_STOP(*tpack);
 702:poly.c        **** }
 3507              		.loc 1 702 1
 3508 0374 00BF     		nop
 3509 0376 00BF     		nop
 3510 0378 3437     		adds	r7, r7, #52
 3511              	.LCFI128:
 3512              		.cfi_def_cfa_offset 4
 3513 037a BD46     		mov	sp, r7
 3514              	.LCFI129:
 3515              		.cfi_def_cfa_register 13
 3516              		@ sp needed
 3517 037c 80BC     		pop	{r7}
 3518              	.LCFI130:
 3519              		.cfi_restore 7
 3520              		.cfi_def_cfa_offset 0
 3521 037e 7047     		bx	lr
 3522              		.cfi_endproc
 3523              	.LFE23:
 3525              		.section	.text.pqcrystals_dilithium2_refpolyt0_unpack,"ax",%progbits
 3526              		.align	1
 3527              		.global	pqcrystals_dilithium2_refpolyt0_unpack
 3528              		.syntax unified
 3529              		.thumb
 3530              		.thumb_func
 3531              		.fpu softvfp
 3533              	pqcrystals_dilithium2_refpolyt0_unpack:
 3534              	.LFB24:
 703:poly.c        **** 
 704:poly.c        **** /*************************************************
 705:poly.c        **** * Name:        polyt0_unpack
 706:poly.c        **** *
 707:poly.c        **** * Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
 708:poly.c        **** *
 709:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 710:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 711:poly.c        **** **************************************************/
 712:poly.c        **** void polyt0_unpack(poly *r, const uint8_t *a) {
 3535              		.loc 1 712 47
 3536              		.cfi_startproc
 3537              		@ args = 0, pretend = 0, frame = 16
 3538              		@ frame_needed = 1, uses_anonymous_args = 0
 3539              		@ link register save eliminated.
 3540 0000 80B4     		push	{r7}
 3541              	.LCFI131:
 3542              		.cfi_def_cfa_offset 4
 3543              		.cfi_offset 7, -4
 3544 0002 85B0     		sub	sp, sp, #20
 3545              	.LCFI132:
 3546              		.cfi_def_cfa_offset 24
 3547 0004 00AF     		add	r7, sp, #0
 3548              	.LCFI133:
 3549              		.cfi_def_cfa_register 7
 3550 0006 7860     		str	r0, [r7, #4]
 3551 0008 3960     		str	r1, [r7]
 713:poly.c        ****   unsigned int i;
 714:poly.c        ****   DBENCH_START();
 715:poly.c        **** 
 716:poly.c        ****   for(i = 0; i < N/8; ++i) {
 3552              		.loc 1 716 9
 3553 000a 0023     		movs	r3, #0
 3554 000c FB60     		str	r3, [r7, #12]
 3555              		.loc 1 716 3
 3556 000e 94E2     		b	.L90
 3557              	.L91:
 717:poly.c        ****     r->coeffs[8*i+0]  = a[13*i+0];
 3558              		.loc 1 717 29 discriminator 3
 3559 0010 FA68     		ldr	r2, [r7, #12]
 3560 0012 1346     		mov	r3, r2
 3561 0014 5B00     		lsls	r3, r3, #1
 3562 0016 1344     		add	r3, r3, r2
 3563 0018 9B00     		lsls	r3, r3, #2
 3564 001a 1344     		add	r3, r3, r2
 3565              		.loc 1 717 26 discriminator 3
 3566 001c 3A68     		ldr	r2, [r7]
 3567 001e 1344     		add	r3, r3, r2
 3568 0020 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3569              		.loc 1 717 18 discriminator 3
 3570 0022 FB68     		ldr	r3, [r7, #12]
 3571 0024 DA00     		lsls	r2, r3, #3
 3572              		.loc 1 717 23 discriminator 3
 3573 0026 7B68     		ldr	r3, [r7, #4]
 3574 0028 43F82210 		str	r1, [r3, r2, lsl #2]
 718:poly.c        ****     r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 3575              		.loc 1 718 22 discriminator 3
 3576 002c FB68     		ldr	r3, [r7, #12]
 3577 002e DA00     		lsls	r2, r3, #3
 3578 0030 7B68     		ldr	r3, [r7, #4]
 3579 0032 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3580 0036 1946     		mov	r1, r3
 3581              		.loc 1 718 39 discriminator 3
 3582 0038 FA68     		ldr	r2, [r7, #12]
 3583 003a 1346     		mov	r3, r2
 3584 003c 5B00     		lsls	r3, r3, #1
 3585 003e 1344     		add	r3, r3, r2
 3586 0040 9B00     		lsls	r3, r3, #2
 3587 0042 1344     		add	r3, r3, r2
 3588              		.loc 1 718 36 discriminator 3
 3589 0044 0133     		adds	r3, r3, #1
 3590 0046 3A68     		ldr	r2, [r7]
 3591 0048 1344     		add	r3, r3, r2
 3592 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3593              		.loc 1 718 45 discriminator 3
 3594 004c 1B02     		lsls	r3, r3, #8
 3595              		.loc 1 718 22 discriminator 3
 3596 004e 1943     		orrs	r1, r1, r3
 3597 0050 FB68     		ldr	r3, [r7, #12]
 3598 0052 DA00     		lsls	r2, r3, #3
 3599 0054 7B68     		ldr	r3, [r7, #4]
 3600 0056 43F82210 		str	r1, [r3, r2, lsl #2]
 719:poly.c        ****     r->coeffs[8*i+0] &= 0x1FFF;
 3601              		.loc 1 719 22 discriminator 3
 3602 005a FB68     		ldr	r3, [r7, #12]
 3603 005c DA00     		lsls	r2, r3, #3
 3604 005e 7B68     		ldr	r3, [r7, #4]
 3605 0060 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3606 0064 FA68     		ldr	r2, [r7, #12]
 3607 0066 D200     		lsls	r2, r2, #3
 3608 0068 C3F30C01 		ubfx	r1, r3, #0, #13
 3609 006c 7B68     		ldr	r3, [r7, #4]
 3610 006e 43F82210 		str	r1, [r3, r2, lsl #2]
 720:poly.c        **** 
 721:poly.c        ****     r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 3611              		.loc 1 721 29 discriminator 3
 3612 0072 FA68     		ldr	r2, [r7, #12]
 3613 0074 1346     		mov	r3, r2
 3614 0076 5B00     		lsls	r3, r3, #1
 3615 0078 1344     		add	r3, r3, r2
 3616 007a 9B00     		lsls	r3, r3, #2
 3617 007c 1344     		add	r3, r3, r2
 3618              		.loc 1 721 26 discriminator 3
 3619 007e 0133     		adds	r3, r3, #1
 3620 0080 3A68     		ldr	r2, [r7]
 3621 0082 1344     		add	r3, r3, r2
 3622 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3623              		.loc 1 721 35 discriminator 3
 3624 0086 5B09     		lsrs	r3, r3, #5
 3625 0088 D9B2     		uxtb	r1, r3
 3626              		.loc 1 721 16 discriminator 3
 3627 008a FB68     		ldr	r3, [r7, #12]
 3628 008c DB00     		lsls	r3, r3, #3
 3629              		.loc 1 721 18 discriminator 3
 3630 008e 5A1C     		adds	r2, r3, #1
 3631              		.loc 1 721 23 discriminator 3
 3632 0090 7B68     		ldr	r3, [r7, #4]
 3633 0092 43F82210 		str	r1, [r3, r2, lsl #2]
 722:poly.c        ****     r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 3634              		.loc 1 722 22 discriminator 3
 3635 0096 FB68     		ldr	r3, [r7, #12]
 3636 0098 DB00     		lsls	r3, r3, #3
 3637 009a 5A1C     		adds	r2, r3, #1
 3638 009c 7B68     		ldr	r3, [r7, #4]
 3639 009e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3640 00a2 1946     		mov	r1, r3
 3641              		.loc 1 722 39 discriminator 3
 3642 00a4 FA68     		ldr	r2, [r7, #12]
 3643 00a6 1346     		mov	r3, r2
 3644 00a8 5B00     		lsls	r3, r3, #1
 3645 00aa 1344     		add	r3, r3, r2
 3646 00ac 9B00     		lsls	r3, r3, #2
 3647 00ae 1344     		add	r3, r3, r2
 3648              		.loc 1 722 36 discriminator 3
 3649 00b0 0233     		adds	r3, r3, #2
 3650 00b2 3A68     		ldr	r2, [r7]
 3651 00b4 1344     		add	r3, r3, r2
 3652 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3653              		.loc 1 722 45 discriminator 3
 3654 00b8 DB00     		lsls	r3, r3, #3
 3655              		.loc 1 722 22 discriminator 3
 3656 00ba 1943     		orrs	r1, r1, r3
 3657 00bc FB68     		ldr	r3, [r7, #12]
 3658 00be DB00     		lsls	r3, r3, #3
 3659 00c0 5A1C     		adds	r2, r3, #1
 3660 00c2 7B68     		ldr	r3, [r7, #4]
 3661 00c4 43F82210 		str	r1, [r3, r2, lsl #2]
 723:poly.c        ****     r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 3662              		.loc 1 723 22 discriminator 3
 3663 00c8 FB68     		ldr	r3, [r7, #12]
 3664 00ca DB00     		lsls	r3, r3, #3
 3665 00cc 5A1C     		adds	r2, r3, #1
 3666 00ce 7B68     		ldr	r3, [r7, #4]
 3667 00d0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3668 00d4 1946     		mov	r1, r3
 3669              		.loc 1 723 39 discriminator 3
 3670 00d6 FA68     		ldr	r2, [r7, #12]
 3671 00d8 1346     		mov	r3, r2
 3672 00da 5B00     		lsls	r3, r3, #1
 3673 00dc 1344     		add	r3, r3, r2
 3674 00de 9B00     		lsls	r3, r3, #2
 3675 00e0 1344     		add	r3, r3, r2
 3676              		.loc 1 723 36 discriminator 3
 3677 00e2 0333     		adds	r3, r3, #3
 3678 00e4 3A68     		ldr	r2, [r7]
 3679 00e6 1344     		add	r3, r3, r2
 3680 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3681              		.loc 1 723 45 discriminator 3
 3682 00ea DB02     		lsls	r3, r3, #11
 3683              		.loc 1 723 22 discriminator 3
 3684 00ec 1943     		orrs	r1, r1, r3
 3685 00ee FB68     		ldr	r3, [r7, #12]
 3686 00f0 DB00     		lsls	r3, r3, #3
 3687 00f2 5A1C     		adds	r2, r3, #1
 3688 00f4 7B68     		ldr	r3, [r7, #4]
 3689 00f6 43F82210 		str	r1, [r3, r2, lsl #2]
 724:poly.c        ****     r->coeffs[8*i+1] &= 0x1FFF;
 3690              		.loc 1 724 22 discriminator 3
 3691 00fa FB68     		ldr	r3, [r7, #12]
 3692 00fc DB00     		lsls	r3, r3, #3
 3693 00fe 5A1C     		adds	r2, r3, #1
 3694 0100 7B68     		ldr	r3, [r7, #4]
 3695 0102 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3696 0106 FA68     		ldr	r2, [r7, #12]
 3697 0108 D200     		lsls	r2, r2, #3
 3698 010a 0132     		adds	r2, r2, #1
 3699 010c C3F30C01 		ubfx	r1, r3, #0, #13
 3700 0110 7B68     		ldr	r3, [r7, #4]
 3701 0112 43F82210 		str	r1, [r3, r2, lsl #2]
 725:poly.c        **** 
 726:poly.c        ****     r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 3702              		.loc 1 726 29 discriminator 3
 3703 0116 FA68     		ldr	r2, [r7, #12]
 3704 0118 1346     		mov	r3, r2
 3705 011a 5B00     		lsls	r3, r3, #1
 3706 011c 1344     		add	r3, r3, r2
 3707 011e 9B00     		lsls	r3, r3, #2
 3708 0120 1344     		add	r3, r3, r2
 3709              		.loc 1 726 26 discriminator 3
 3710 0122 0333     		adds	r3, r3, #3
 3711 0124 3A68     		ldr	r2, [r7]
 3712 0126 1344     		add	r3, r3, r2
 3713 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3714              		.loc 1 726 35 discriminator 3
 3715 012a 9B08     		lsrs	r3, r3, #2
 3716 012c D9B2     		uxtb	r1, r3
 3717              		.loc 1 726 16 discriminator 3
 3718 012e FB68     		ldr	r3, [r7, #12]
 3719 0130 DB00     		lsls	r3, r3, #3
 3720              		.loc 1 726 18 discriminator 3
 3721 0132 9A1C     		adds	r2, r3, #2
 3722              		.loc 1 726 23 discriminator 3
 3723 0134 7B68     		ldr	r3, [r7, #4]
 3724 0136 43F82210 		str	r1, [r3, r2, lsl #2]
 727:poly.c        ****     r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 3725              		.loc 1 727 22 discriminator 3
 3726 013a FB68     		ldr	r3, [r7, #12]
 3727 013c DB00     		lsls	r3, r3, #3
 3728 013e 9A1C     		adds	r2, r3, #2
 3729 0140 7B68     		ldr	r3, [r7, #4]
 3730 0142 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3731 0146 1946     		mov	r1, r3
 3732              		.loc 1 727 39 discriminator 3
 3733 0148 FA68     		ldr	r2, [r7, #12]
 3734 014a 1346     		mov	r3, r2
 3735 014c 5B00     		lsls	r3, r3, #1
 3736 014e 1344     		add	r3, r3, r2
 3737 0150 9B00     		lsls	r3, r3, #2
 3738 0152 1344     		add	r3, r3, r2
 3739              		.loc 1 727 36 discriminator 3
 3740 0154 0433     		adds	r3, r3, #4
 3741 0156 3A68     		ldr	r2, [r7]
 3742 0158 1344     		add	r3, r3, r2
 3743 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3744              		.loc 1 727 45 discriminator 3
 3745 015c 9B01     		lsls	r3, r3, #6
 3746              		.loc 1 727 22 discriminator 3
 3747 015e 1943     		orrs	r1, r1, r3
 3748 0160 FB68     		ldr	r3, [r7, #12]
 3749 0162 DB00     		lsls	r3, r3, #3
 3750 0164 9A1C     		adds	r2, r3, #2
 3751 0166 7B68     		ldr	r3, [r7, #4]
 3752 0168 43F82210 		str	r1, [r3, r2, lsl #2]
 728:poly.c        ****     r->coeffs[8*i+2] &= 0x1FFF;
 3753              		.loc 1 728 22 discriminator 3
 3754 016c FB68     		ldr	r3, [r7, #12]
 3755 016e DB00     		lsls	r3, r3, #3
 3756 0170 9A1C     		adds	r2, r3, #2
 3757 0172 7B68     		ldr	r3, [r7, #4]
 3758 0174 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3759 0178 FA68     		ldr	r2, [r7, #12]
 3760 017a D200     		lsls	r2, r2, #3
 3761 017c 0232     		adds	r2, r2, #2
 3762 017e C3F30C01 		ubfx	r1, r3, #0, #13
 3763 0182 7B68     		ldr	r3, [r7, #4]
 3764 0184 43F82210 		str	r1, [r3, r2, lsl #2]
 729:poly.c        **** 
 730:poly.c        ****     r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 3765              		.loc 1 730 29 discriminator 3
 3766 0188 FA68     		ldr	r2, [r7, #12]
 3767 018a 1346     		mov	r3, r2
 3768 018c 5B00     		lsls	r3, r3, #1
 3769 018e 1344     		add	r3, r3, r2
 3770 0190 9B00     		lsls	r3, r3, #2
 3771 0192 1344     		add	r3, r3, r2
 3772              		.loc 1 730 26 discriminator 3
 3773 0194 0433     		adds	r3, r3, #4
 3774 0196 3A68     		ldr	r2, [r7]
 3775 0198 1344     		add	r3, r3, r2
 3776 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3777              		.loc 1 730 35 discriminator 3
 3778 019c DB09     		lsrs	r3, r3, #7
 3779 019e D9B2     		uxtb	r1, r3
 3780              		.loc 1 730 16 discriminator 3
 3781 01a0 FB68     		ldr	r3, [r7, #12]
 3782 01a2 DB00     		lsls	r3, r3, #3
 3783              		.loc 1 730 18 discriminator 3
 3784 01a4 DA1C     		adds	r2, r3, #3
 3785              		.loc 1 730 23 discriminator 3
 3786 01a6 7B68     		ldr	r3, [r7, #4]
 3787 01a8 43F82210 		str	r1, [r3, r2, lsl #2]
 731:poly.c        ****     r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 3788              		.loc 1 731 22 discriminator 3
 3789 01ac FB68     		ldr	r3, [r7, #12]
 3790 01ae DB00     		lsls	r3, r3, #3
 3791 01b0 DA1C     		adds	r2, r3, #3
 3792 01b2 7B68     		ldr	r3, [r7, #4]
 3793 01b4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3794 01b8 1946     		mov	r1, r3
 3795              		.loc 1 731 39 discriminator 3
 3796 01ba FA68     		ldr	r2, [r7, #12]
 3797 01bc 1346     		mov	r3, r2
 3798 01be 5B00     		lsls	r3, r3, #1
 3799 01c0 1344     		add	r3, r3, r2
 3800 01c2 9B00     		lsls	r3, r3, #2
 3801 01c4 1344     		add	r3, r3, r2
 3802              		.loc 1 731 36 discriminator 3
 3803 01c6 0533     		adds	r3, r3, #5
 3804 01c8 3A68     		ldr	r2, [r7]
 3805 01ca 1344     		add	r3, r3, r2
 3806 01cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3807              		.loc 1 731 45 discriminator 3
 3808 01ce 5B00     		lsls	r3, r3, #1
 3809              		.loc 1 731 22 discriminator 3
 3810 01d0 1943     		orrs	r1, r1, r3
 3811 01d2 FB68     		ldr	r3, [r7, #12]
 3812 01d4 DB00     		lsls	r3, r3, #3
 3813 01d6 DA1C     		adds	r2, r3, #3
 3814 01d8 7B68     		ldr	r3, [r7, #4]
 3815 01da 43F82210 		str	r1, [r3, r2, lsl #2]
 732:poly.c        ****     r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 3816              		.loc 1 732 22 discriminator 3
 3817 01de FB68     		ldr	r3, [r7, #12]
 3818 01e0 DB00     		lsls	r3, r3, #3
 3819 01e2 DA1C     		adds	r2, r3, #3
 3820 01e4 7B68     		ldr	r3, [r7, #4]
 3821 01e6 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3822 01ea 1946     		mov	r1, r3
 3823              		.loc 1 732 39 discriminator 3
 3824 01ec FA68     		ldr	r2, [r7, #12]
 3825 01ee 1346     		mov	r3, r2
 3826 01f0 5B00     		lsls	r3, r3, #1
 3827 01f2 1344     		add	r3, r3, r2
 3828 01f4 9B00     		lsls	r3, r3, #2
 3829 01f6 1344     		add	r3, r3, r2
 3830              		.loc 1 732 36 discriminator 3
 3831 01f8 0633     		adds	r3, r3, #6
 3832 01fa 3A68     		ldr	r2, [r7]
 3833 01fc 1344     		add	r3, r3, r2
 3834 01fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3835              		.loc 1 732 45 discriminator 3
 3836 0200 5B02     		lsls	r3, r3, #9
 3837              		.loc 1 732 22 discriminator 3
 3838 0202 1943     		orrs	r1, r1, r3
 3839 0204 FB68     		ldr	r3, [r7, #12]
 3840 0206 DB00     		lsls	r3, r3, #3
 3841 0208 DA1C     		adds	r2, r3, #3
 3842 020a 7B68     		ldr	r3, [r7, #4]
 3843 020c 43F82210 		str	r1, [r3, r2, lsl #2]
 733:poly.c        ****     r->coeffs[8*i+3] &= 0x1FFF;
 3844              		.loc 1 733 22 discriminator 3
 3845 0210 FB68     		ldr	r3, [r7, #12]
 3846 0212 DB00     		lsls	r3, r3, #3
 3847 0214 DA1C     		adds	r2, r3, #3
 3848 0216 7B68     		ldr	r3, [r7, #4]
 3849 0218 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3850 021c FA68     		ldr	r2, [r7, #12]
 3851 021e D200     		lsls	r2, r2, #3
 3852 0220 0332     		adds	r2, r2, #3
 3853 0222 C3F30C01 		ubfx	r1, r3, #0, #13
 3854 0226 7B68     		ldr	r3, [r7, #4]
 3855 0228 43F82210 		str	r1, [r3, r2, lsl #2]
 734:poly.c        **** 
 735:poly.c        ****     r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 3856              		.loc 1 735 29 discriminator 3
 3857 022c FA68     		ldr	r2, [r7, #12]
 3858 022e 1346     		mov	r3, r2
 3859 0230 5B00     		lsls	r3, r3, #1
 3860 0232 1344     		add	r3, r3, r2
 3861 0234 9B00     		lsls	r3, r3, #2
 3862 0236 1344     		add	r3, r3, r2
 3863              		.loc 1 735 26 discriminator 3
 3864 0238 0633     		adds	r3, r3, #6
 3865 023a 3A68     		ldr	r2, [r7]
 3866 023c 1344     		add	r3, r3, r2
 3867 023e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3868              		.loc 1 735 35 discriminator 3
 3869 0240 1B09     		lsrs	r3, r3, #4
 3870 0242 D9B2     		uxtb	r1, r3
 3871              		.loc 1 735 16 discriminator 3
 3872 0244 FB68     		ldr	r3, [r7, #12]
 3873 0246 DB00     		lsls	r3, r3, #3
 3874              		.loc 1 735 18 discriminator 3
 3875 0248 1A1D     		adds	r2, r3, #4
 3876              		.loc 1 735 23 discriminator 3
 3877 024a 7B68     		ldr	r3, [r7, #4]
 3878 024c 43F82210 		str	r1, [r3, r2, lsl #2]
 736:poly.c        ****     r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 3879              		.loc 1 736 22 discriminator 3
 3880 0250 FB68     		ldr	r3, [r7, #12]
 3881 0252 DB00     		lsls	r3, r3, #3
 3882 0254 1A1D     		adds	r2, r3, #4
 3883 0256 7B68     		ldr	r3, [r7, #4]
 3884 0258 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3885 025c 1946     		mov	r1, r3
 3886              		.loc 1 736 39 discriminator 3
 3887 025e FA68     		ldr	r2, [r7, #12]
 3888 0260 1346     		mov	r3, r2
 3889 0262 5B00     		lsls	r3, r3, #1
 3890 0264 1344     		add	r3, r3, r2
 3891 0266 9B00     		lsls	r3, r3, #2
 3892 0268 1344     		add	r3, r3, r2
 3893              		.loc 1 736 36 discriminator 3
 3894 026a 0733     		adds	r3, r3, #7
 3895 026c 3A68     		ldr	r2, [r7]
 3896 026e 1344     		add	r3, r3, r2
 3897 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3898              		.loc 1 736 45 discriminator 3
 3899 0272 1B01     		lsls	r3, r3, #4
 3900              		.loc 1 736 22 discriminator 3
 3901 0274 1943     		orrs	r1, r1, r3
 3902 0276 FB68     		ldr	r3, [r7, #12]
 3903 0278 DB00     		lsls	r3, r3, #3
 3904 027a 1A1D     		adds	r2, r3, #4
 3905 027c 7B68     		ldr	r3, [r7, #4]
 3906 027e 43F82210 		str	r1, [r3, r2, lsl #2]
 737:poly.c        ****     r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 3907              		.loc 1 737 22 discriminator 3
 3908 0282 FB68     		ldr	r3, [r7, #12]
 3909 0284 DB00     		lsls	r3, r3, #3
 3910 0286 1A1D     		adds	r2, r3, #4
 3911 0288 7B68     		ldr	r3, [r7, #4]
 3912 028a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3913 028e 1946     		mov	r1, r3
 3914              		.loc 1 737 39 discriminator 3
 3915 0290 FA68     		ldr	r2, [r7, #12]
 3916 0292 1346     		mov	r3, r2
 3917 0294 5B00     		lsls	r3, r3, #1
 3918 0296 1344     		add	r3, r3, r2
 3919 0298 9B00     		lsls	r3, r3, #2
 3920 029a 1344     		add	r3, r3, r2
 3921              		.loc 1 737 36 discriminator 3
 3922 029c 0833     		adds	r3, r3, #8
 3923 029e 3A68     		ldr	r2, [r7]
 3924 02a0 1344     		add	r3, r3, r2
 3925 02a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3926              		.loc 1 737 45 discriminator 3
 3927 02a4 1B03     		lsls	r3, r3, #12
 3928              		.loc 1 737 22 discriminator 3
 3929 02a6 1943     		orrs	r1, r1, r3
 3930 02a8 FB68     		ldr	r3, [r7, #12]
 3931 02aa DB00     		lsls	r3, r3, #3
 3932 02ac 1A1D     		adds	r2, r3, #4
 3933 02ae 7B68     		ldr	r3, [r7, #4]
 3934 02b0 43F82210 		str	r1, [r3, r2, lsl #2]
 738:poly.c        ****     r->coeffs[8*i+4] &= 0x1FFF;
 3935              		.loc 1 738 22 discriminator 3
 3936 02b4 FB68     		ldr	r3, [r7, #12]
 3937 02b6 DB00     		lsls	r3, r3, #3
 3938 02b8 1A1D     		adds	r2, r3, #4
 3939 02ba 7B68     		ldr	r3, [r7, #4]
 3940 02bc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3941 02c0 FA68     		ldr	r2, [r7, #12]
 3942 02c2 D200     		lsls	r2, r2, #3
 3943 02c4 0432     		adds	r2, r2, #4
 3944 02c6 C3F30C01 		ubfx	r1, r3, #0, #13
 3945 02ca 7B68     		ldr	r3, [r7, #4]
 3946 02cc 43F82210 		str	r1, [r3, r2, lsl #2]
 739:poly.c        **** 
 740:poly.c        ****     r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 3947              		.loc 1 740 29 discriminator 3
 3948 02d0 FA68     		ldr	r2, [r7, #12]
 3949 02d2 1346     		mov	r3, r2
 3950 02d4 5B00     		lsls	r3, r3, #1
 3951 02d6 1344     		add	r3, r3, r2
 3952 02d8 9B00     		lsls	r3, r3, #2
 3953 02da 1344     		add	r3, r3, r2
 3954              		.loc 1 740 26 discriminator 3
 3955 02dc 0833     		adds	r3, r3, #8
 3956 02de 3A68     		ldr	r2, [r7]
 3957 02e0 1344     		add	r3, r3, r2
 3958 02e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3959              		.loc 1 740 35 discriminator 3
 3960 02e4 5B08     		lsrs	r3, r3, #1
 3961 02e6 D9B2     		uxtb	r1, r3
 3962              		.loc 1 740 16 discriminator 3
 3963 02e8 FB68     		ldr	r3, [r7, #12]
 3964 02ea DB00     		lsls	r3, r3, #3
 3965              		.loc 1 740 18 discriminator 3
 3966 02ec 5A1D     		adds	r2, r3, #5
 3967              		.loc 1 740 23 discriminator 3
 3968 02ee 7B68     		ldr	r3, [r7, #4]
 3969 02f0 43F82210 		str	r1, [r3, r2, lsl #2]
 741:poly.c        ****     r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 3970              		.loc 1 741 22 discriminator 3
 3971 02f4 FB68     		ldr	r3, [r7, #12]
 3972 02f6 DB00     		lsls	r3, r3, #3
 3973 02f8 5A1D     		adds	r2, r3, #5
 3974 02fa 7B68     		ldr	r3, [r7, #4]
 3975 02fc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3976 0300 1946     		mov	r1, r3
 3977              		.loc 1 741 39 discriminator 3
 3978 0302 FA68     		ldr	r2, [r7, #12]
 3979 0304 1346     		mov	r3, r2
 3980 0306 5B00     		lsls	r3, r3, #1
 3981 0308 1344     		add	r3, r3, r2
 3982 030a 9B00     		lsls	r3, r3, #2
 3983 030c 1344     		add	r3, r3, r2
 3984              		.loc 1 741 36 discriminator 3
 3985 030e 0933     		adds	r3, r3, #9
 3986 0310 3A68     		ldr	r2, [r7]
 3987 0312 1344     		add	r3, r3, r2
 3988 0314 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3989              		.loc 1 741 45 discriminator 3
 3990 0316 DB01     		lsls	r3, r3, #7
 3991              		.loc 1 741 22 discriminator 3
 3992 0318 1943     		orrs	r1, r1, r3
 3993 031a FB68     		ldr	r3, [r7, #12]
 3994 031c DB00     		lsls	r3, r3, #3
 3995 031e 5A1D     		adds	r2, r3, #5
 3996 0320 7B68     		ldr	r3, [r7, #4]
 3997 0322 43F82210 		str	r1, [r3, r2, lsl #2]
 742:poly.c        ****     r->coeffs[8*i+5] &= 0x1FFF;
 3998              		.loc 1 742 22 discriminator 3
 3999 0326 FB68     		ldr	r3, [r7, #12]
 4000 0328 DB00     		lsls	r3, r3, #3
 4001 032a 5A1D     		adds	r2, r3, #5
 4002 032c 7B68     		ldr	r3, [r7, #4]
 4003 032e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4004 0332 FA68     		ldr	r2, [r7, #12]
 4005 0334 D200     		lsls	r2, r2, #3
 4006 0336 0532     		adds	r2, r2, #5
 4007 0338 C3F30C01 		ubfx	r1, r3, #0, #13
 4008 033c 7B68     		ldr	r3, [r7, #4]
 4009 033e 43F82210 		str	r1, [r3, r2, lsl #2]
 743:poly.c        **** 
 744:poly.c        ****     r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 4010              		.loc 1 744 29 discriminator 3
 4011 0342 FA68     		ldr	r2, [r7, #12]
 4012 0344 1346     		mov	r3, r2
 4013 0346 5B00     		lsls	r3, r3, #1
 4014 0348 1344     		add	r3, r3, r2
 4015 034a 9B00     		lsls	r3, r3, #2
 4016 034c 1344     		add	r3, r3, r2
 4017              		.loc 1 744 26 discriminator 3
 4018 034e 0933     		adds	r3, r3, #9
 4019 0350 3A68     		ldr	r2, [r7]
 4020 0352 1344     		add	r3, r3, r2
 4021 0354 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4022              		.loc 1 744 35 discriminator 3
 4023 0356 9B09     		lsrs	r3, r3, #6
 4024 0358 D9B2     		uxtb	r1, r3
 4025              		.loc 1 744 16 discriminator 3
 4026 035a FB68     		ldr	r3, [r7, #12]
 4027 035c DB00     		lsls	r3, r3, #3
 4028              		.loc 1 744 18 discriminator 3
 4029 035e 9A1D     		adds	r2, r3, #6
 4030              		.loc 1 744 23 discriminator 3
 4031 0360 7B68     		ldr	r3, [r7, #4]
 4032 0362 43F82210 		str	r1, [r3, r2, lsl #2]
 745:poly.c        ****     r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 4033              		.loc 1 745 22 discriminator 3
 4034 0366 FB68     		ldr	r3, [r7, #12]
 4035 0368 DB00     		lsls	r3, r3, #3
 4036 036a 9A1D     		adds	r2, r3, #6
 4037 036c 7B68     		ldr	r3, [r7, #4]
 4038 036e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4039 0372 1946     		mov	r1, r3
 4040              		.loc 1 745 39 discriminator 3
 4041 0374 FA68     		ldr	r2, [r7, #12]
 4042 0376 1346     		mov	r3, r2
 4043 0378 5B00     		lsls	r3, r3, #1
 4044 037a 1344     		add	r3, r3, r2
 4045 037c 9B00     		lsls	r3, r3, #2
 4046 037e 1344     		add	r3, r3, r2
 4047              		.loc 1 745 36 discriminator 3
 4048 0380 0A33     		adds	r3, r3, #10
 4049 0382 3A68     		ldr	r2, [r7]
 4050 0384 1344     		add	r3, r3, r2
 4051 0386 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4052              		.loc 1 745 46 discriminator 3
 4053 0388 9B00     		lsls	r3, r3, #2
 4054              		.loc 1 745 22 discriminator 3
 4055 038a 1943     		orrs	r1, r1, r3
 4056 038c FB68     		ldr	r3, [r7, #12]
 4057 038e DB00     		lsls	r3, r3, #3
 4058 0390 9A1D     		adds	r2, r3, #6
 4059 0392 7B68     		ldr	r3, [r7, #4]
 4060 0394 43F82210 		str	r1, [r3, r2, lsl #2]
 746:poly.c        ****     r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 4061              		.loc 1 746 22 discriminator 3
 4062 0398 FB68     		ldr	r3, [r7, #12]
 4063 039a DB00     		lsls	r3, r3, #3
 4064 039c 9A1D     		adds	r2, r3, #6
 4065 039e 7B68     		ldr	r3, [r7, #4]
 4066 03a0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4067 03a4 1946     		mov	r1, r3
 4068              		.loc 1 746 39 discriminator 3
 4069 03a6 FA68     		ldr	r2, [r7, #12]
 4070 03a8 1346     		mov	r3, r2
 4071 03aa 5B00     		lsls	r3, r3, #1
 4072 03ac 1344     		add	r3, r3, r2
 4073 03ae 9B00     		lsls	r3, r3, #2
 4074 03b0 1344     		add	r3, r3, r2
 4075              		.loc 1 746 36 discriminator 3
 4076 03b2 0B33     		adds	r3, r3, #11
 4077 03b4 3A68     		ldr	r2, [r7]
 4078 03b6 1344     		add	r3, r3, r2
 4079 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4080              		.loc 1 746 46 discriminator 3
 4081 03ba 9B02     		lsls	r3, r3, #10
 4082              		.loc 1 746 22 discriminator 3
 4083 03bc 1943     		orrs	r1, r1, r3
 4084 03be FB68     		ldr	r3, [r7, #12]
 4085 03c0 DB00     		lsls	r3, r3, #3
 4086 03c2 9A1D     		adds	r2, r3, #6
 4087 03c4 7B68     		ldr	r3, [r7, #4]
 4088 03c6 43F82210 		str	r1, [r3, r2, lsl #2]
 747:poly.c        ****     r->coeffs[8*i+6] &= 0x1FFF;
 4089              		.loc 1 747 22 discriminator 3
 4090 03ca FB68     		ldr	r3, [r7, #12]
 4091 03cc DB00     		lsls	r3, r3, #3
 4092 03ce 9A1D     		adds	r2, r3, #6
 4093 03d0 7B68     		ldr	r3, [r7, #4]
 4094 03d2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4095 03d6 FA68     		ldr	r2, [r7, #12]
 4096 03d8 D200     		lsls	r2, r2, #3
 4097 03da 0632     		adds	r2, r2, #6
 4098 03dc C3F30C01 		ubfx	r1, r3, #0, #13
 4099 03e0 7B68     		ldr	r3, [r7, #4]
 4100 03e2 43F82210 		str	r1, [r3, r2, lsl #2]
 748:poly.c        **** 
 749:poly.c        ****     r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 4101              		.loc 1 749 29 discriminator 3
 4102 03e6 FA68     		ldr	r2, [r7, #12]
 4103 03e8 1346     		mov	r3, r2
 4104 03ea 5B00     		lsls	r3, r3, #1
 4105 03ec 1344     		add	r3, r3, r2
 4106 03ee 9B00     		lsls	r3, r3, #2
 4107 03f0 1344     		add	r3, r3, r2
 4108              		.loc 1 749 26 discriminator 3
 4109 03f2 0B33     		adds	r3, r3, #11
 4110 03f4 3A68     		ldr	r2, [r7]
 4111 03f6 1344     		add	r3, r3, r2
 4112 03f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4113              		.loc 1 749 36 discriminator 3
 4114 03fa DB08     		lsrs	r3, r3, #3
 4115 03fc D9B2     		uxtb	r1, r3
 4116              		.loc 1 749 16 discriminator 3
 4117 03fe FB68     		ldr	r3, [r7, #12]
 4118 0400 DB00     		lsls	r3, r3, #3
 4119              		.loc 1 749 18 discriminator 3
 4120 0402 DA1D     		adds	r2, r3, #7
 4121              		.loc 1 749 23 discriminator 3
 4122 0404 7B68     		ldr	r3, [r7, #4]
 4123 0406 43F82210 		str	r1, [r3, r2, lsl #2]
 750:poly.c        ****     r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 4124              		.loc 1 750 22 discriminator 3
 4125 040a FB68     		ldr	r3, [r7, #12]
 4126 040c DB00     		lsls	r3, r3, #3
 4127 040e DA1D     		adds	r2, r3, #7
 4128 0410 7B68     		ldr	r3, [r7, #4]
 4129 0412 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4130 0416 1946     		mov	r1, r3
 4131              		.loc 1 750 39 discriminator 3
 4132 0418 FA68     		ldr	r2, [r7, #12]
 4133 041a 1346     		mov	r3, r2
 4134 041c 5B00     		lsls	r3, r3, #1
 4135 041e 1344     		add	r3, r3, r2
 4136 0420 9B00     		lsls	r3, r3, #2
 4137 0422 1344     		add	r3, r3, r2
 4138              		.loc 1 750 36 discriminator 3
 4139 0424 0C33     		adds	r3, r3, #12
 4140 0426 3A68     		ldr	r2, [r7]
 4141 0428 1344     		add	r3, r3, r2
 4142 042a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4143              		.loc 1 750 46 discriminator 3
 4144 042c 5B01     		lsls	r3, r3, #5
 4145              		.loc 1 750 22 discriminator 3
 4146 042e 1943     		orrs	r1, r1, r3
 4147 0430 FB68     		ldr	r3, [r7, #12]
 4148 0432 DB00     		lsls	r3, r3, #3
 4149 0434 DA1D     		adds	r2, r3, #7
 4150 0436 7B68     		ldr	r3, [r7, #4]
 4151 0438 43F82210 		str	r1, [r3, r2, lsl #2]
 751:poly.c        ****     r->coeffs[8*i+7] &= 0x1FFF;
 4152              		.loc 1 751 22 discriminator 3
 4153 043c FB68     		ldr	r3, [r7, #12]
 4154 043e DB00     		lsls	r3, r3, #3
 4155 0440 DA1D     		adds	r2, r3, #7
 4156 0442 7B68     		ldr	r3, [r7, #4]
 4157 0444 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4158 0448 FA68     		ldr	r2, [r7, #12]
 4159 044a D200     		lsls	r2, r2, #3
 4160 044c 0732     		adds	r2, r2, #7
 4161 044e C3F30C01 		ubfx	r1, r3, #0, #13
 4162 0452 7B68     		ldr	r3, [r7, #4]
 4163 0454 43F82210 		str	r1, [r3, r2, lsl #2]
 752:poly.c        **** 
 753:poly.c        ****     r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 4164              		.loc 1 753 52 discriminator 3
 4165 0458 FB68     		ldr	r3, [r7, #12]
 4166 045a DA00     		lsls	r2, r3, #3
 4167              		.loc 1 753 48 discriminator 3
 4168 045c 7B68     		ldr	r3, [r7, #4]
 4169 045e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4170              		.loc 1 753 18 discriminator 3
 4171 0462 FA68     		ldr	r2, [r7, #12]
 4172 0464 D200     		lsls	r2, r2, #3
 4173              		.loc 1 753 37 discriminator 3
 4174 0466 C3F58051 		rsb	r1, r3, #4096
 4175              		.loc 1 753 22 discriminator 3
 4176 046a 7B68     		ldr	r3, [r7, #4]
 4177 046c 43F82210 		str	r1, [r3, r2, lsl #2]
 754:poly.c        ****     r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 4178              		.loc 1 754 50 discriminator 3
 4179 0470 FB68     		ldr	r3, [r7, #12]
 4180 0472 DB00     		lsls	r3, r3, #3
 4181              		.loc 1 754 52 discriminator 3
 4182 0474 5A1C     		adds	r2, r3, #1
 4183              		.loc 1 754 48 discriminator 3
 4184 0476 7B68     		ldr	r3, [r7, #4]
 4185 0478 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4186              		.loc 1 754 16 discriminator 3
 4187 047c FA68     		ldr	r2, [r7, #12]
 4188 047e D200     		lsls	r2, r2, #3
 4189              		.loc 1 754 18 discriminator 3
 4190 0480 0132     		adds	r2, r2, #1
 4191              		.loc 1 754 37 discriminator 3
 4192 0482 C3F58051 		rsb	r1, r3, #4096
 4193              		.loc 1 754 22 discriminator 3
 4194 0486 7B68     		ldr	r3, [r7, #4]
 4195 0488 43F82210 		str	r1, [r3, r2, lsl #2]
 755:poly.c        ****     r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 4196              		.loc 1 755 50 discriminator 3
 4197 048c FB68     		ldr	r3, [r7, #12]
 4198 048e DB00     		lsls	r3, r3, #3
 4199              		.loc 1 755 52 discriminator 3
 4200 0490 9A1C     		adds	r2, r3, #2
 4201              		.loc 1 755 48 discriminator 3
 4202 0492 7B68     		ldr	r3, [r7, #4]
 4203 0494 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4204              		.loc 1 755 16 discriminator 3
 4205 0498 FA68     		ldr	r2, [r7, #12]
 4206 049a D200     		lsls	r2, r2, #3
 4207              		.loc 1 755 18 discriminator 3
 4208 049c 0232     		adds	r2, r2, #2
 4209              		.loc 1 755 37 discriminator 3
 4210 049e C3F58051 		rsb	r1, r3, #4096
 4211              		.loc 1 755 22 discriminator 3
 4212 04a2 7B68     		ldr	r3, [r7, #4]
 4213 04a4 43F82210 		str	r1, [r3, r2, lsl #2]
 756:poly.c        ****     r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 4214              		.loc 1 756 50 discriminator 3
 4215 04a8 FB68     		ldr	r3, [r7, #12]
 4216 04aa DB00     		lsls	r3, r3, #3
 4217              		.loc 1 756 52 discriminator 3
 4218 04ac DA1C     		adds	r2, r3, #3
 4219              		.loc 1 756 48 discriminator 3
 4220 04ae 7B68     		ldr	r3, [r7, #4]
 4221 04b0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4222              		.loc 1 756 16 discriminator 3
 4223 04b4 FA68     		ldr	r2, [r7, #12]
 4224 04b6 D200     		lsls	r2, r2, #3
 4225              		.loc 1 756 18 discriminator 3
 4226 04b8 0332     		adds	r2, r2, #3
 4227              		.loc 1 756 37 discriminator 3
 4228 04ba C3F58051 		rsb	r1, r3, #4096
 4229              		.loc 1 756 22 discriminator 3
 4230 04be 7B68     		ldr	r3, [r7, #4]
 4231 04c0 43F82210 		str	r1, [r3, r2, lsl #2]
 757:poly.c        ****     r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 4232              		.loc 1 757 50 discriminator 3
 4233 04c4 FB68     		ldr	r3, [r7, #12]
 4234 04c6 DB00     		lsls	r3, r3, #3
 4235              		.loc 1 757 52 discriminator 3
 4236 04c8 1A1D     		adds	r2, r3, #4
 4237              		.loc 1 757 48 discriminator 3
 4238 04ca 7B68     		ldr	r3, [r7, #4]
 4239 04cc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4240              		.loc 1 757 16 discriminator 3
 4241 04d0 FA68     		ldr	r2, [r7, #12]
 4242 04d2 D200     		lsls	r2, r2, #3
 4243              		.loc 1 757 18 discriminator 3
 4244 04d4 0432     		adds	r2, r2, #4
 4245              		.loc 1 757 37 discriminator 3
 4246 04d6 C3F58051 		rsb	r1, r3, #4096
 4247              		.loc 1 757 22 discriminator 3
 4248 04da 7B68     		ldr	r3, [r7, #4]
 4249 04dc 43F82210 		str	r1, [r3, r2, lsl #2]
 758:poly.c        ****     r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 4250              		.loc 1 758 50 discriminator 3
 4251 04e0 FB68     		ldr	r3, [r7, #12]
 4252 04e2 DB00     		lsls	r3, r3, #3
 4253              		.loc 1 758 52 discriminator 3
 4254 04e4 5A1D     		adds	r2, r3, #5
 4255              		.loc 1 758 48 discriminator 3
 4256 04e6 7B68     		ldr	r3, [r7, #4]
 4257 04e8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4258              		.loc 1 758 16 discriminator 3
 4259 04ec FA68     		ldr	r2, [r7, #12]
 4260 04ee D200     		lsls	r2, r2, #3
 4261              		.loc 1 758 18 discriminator 3
 4262 04f0 0532     		adds	r2, r2, #5
 4263              		.loc 1 758 37 discriminator 3
 4264 04f2 C3F58051 		rsb	r1, r3, #4096
 4265              		.loc 1 758 22 discriminator 3
 4266 04f6 7B68     		ldr	r3, [r7, #4]
 4267 04f8 43F82210 		str	r1, [r3, r2, lsl #2]
 759:poly.c        ****     r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 4268              		.loc 1 759 50 discriminator 3
 4269 04fc FB68     		ldr	r3, [r7, #12]
 4270 04fe DB00     		lsls	r3, r3, #3
 4271              		.loc 1 759 52 discriminator 3
 4272 0500 9A1D     		adds	r2, r3, #6
 4273              		.loc 1 759 48 discriminator 3
 4274 0502 7B68     		ldr	r3, [r7, #4]
 4275 0504 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4276              		.loc 1 759 16 discriminator 3
 4277 0508 FA68     		ldr	r2, [r7, #12]
 4278 050a D200     		lsls	r2, r2, #3
 4279              		.loc 1 759 18 discriminator 3
 4280 050c 0632     		adds	r2, r2, #6
 4281              		.loc 1 759 37 discriminator 3
 4282 050e C3F58051 		rsb	r1, r3, #4096
 4283              		.loc 1 759 22 discriminator 3
 4284 0512 7B68     		ldr	r3, [r7, #4]
 4285 0514 43F82210 		str	r1, [r3, r2, lsl #2]
 760:poly.c        ****     r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 4286              		.loc 1 760 50 discriminator 3
 4287 0518 FB68     		ldr	r3, [r7, #12]
 4288 051a DB00     		lsls	r3, r3, #3
 4289              		.loc 1 760 52 discriminator 3
 4290 051c DA1D     		adds	r2, r3, #7
 4291              		.loc 1 760 48 discriminator 3
 4292 051e 7B68     		ldr	r3, [r7, #4]
 4293 0520 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4294              		.loc 1 760 16 discriminator 3
 4295 0524 FA68     		ldr	r2, [r7, #12]
 4296 0526 D200     		lsls	r2, r2, #3
 4297              		.loc 1 760 18 discriminator 3
 4298 0528 0732     		adds	r2, r2, #7
 4299              		.loc 1 760 37 discriminator 3
 4300 052a C3F58051 		rsb	r1, r3, #4096
 4301              		.loc 1 760 22 discriminator 3
 4302 052e 7B68     		ldr	r3, [r7, #4]
 4303 0530 43F82210 		str	r1, [r3, r2, lsl #2]
 716:poly.c        ****     r->coeffs[8*i+0]  = a[13*i+0];
 4304              		.loc 1 716 23 discriminator 3
 4305 0534 FB68     		ldr	r3, [r7, #12]
 4306 0536 0133     		adds	r3, r3, #1
 4307 0538 FB60     		str	r3, [r7, #12]
 4308              	.L90:
 716:poly.c        ****     r->coeffs[8*i+0]  = a[13*i+0];
 4309              		.loc 1 716 3 discriminator 1
 4310 053a FB68     		ldr	r3, [r7, #12]
 4311 053c 1F2B     		cmp	r3, #31
 4312 053e 7FF667AD 		bls	.L91
 761:poly.c        ****   }
 762:poly.c        **** 
 763:poly.c        ****   DBENCH_STOP(*tpack);
 764:poly.c        **** }
 4313              		.loc 1 764 1
 4314 0542 00BF     		nop
 4315 0544 00BF     		nop
 4316 0546 1437     		adds	r7, r7, #20
 4317              	.LCFI134:
 4318              		.cfi_def_cfa_offset 4
 4319 0548 BD46     		mov	sp, r7
 4320              	.LCFI135:
 4321              		.cfi_def_cfa_register 13
 4322              		@ sp needed
 4323 054a 80BC     		pop	{r7}
 4324              	.LCFI136:
 4325              		.cfi_restore 7
 4326              		.cfi_def_cfa_offset 0
 4327 054c 7047     		bx	lr
 4328              		.cfi_endproc
 4329              	.LFE24:
 4331              		.section	.text.pqcrystals_dilithium2_refpolyz_pack,"ax",%progbits
 4332              		.align	1
 4333              		.global	pqcrystals_dilithium2_refpolyz_pack
 4334              		.syntax unified
 4335              		.thumb
 4336              		.thumb_func
 4337              		.fpu softvfp
 4339              	pqcrystals_dilithium2_refpolyz_pack:
 4340              	.LFB25:
 765:poly.c        **** 
 766:poly.c        **** /*************************************************
 767:poly.c        **** * Name:        polyz_pack
 768:poly.c        **** *
 769:poly.c        **** * Description: Bit-pack polynomial with coefficients
 770:poly.c        **** *              in [-(GAMMA1 - 1), GAMMA1].
 771:poly.c        **** *
 772:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 773:poly.c        **** *                            POLYZ_PACKEDBYTES bytes
 774:poly.c        **** *              - const poly *a: pointer to input polynomial
 775:poly.c        **** **************************************************/
 776:poly.c        **** void polyz_pack(uint8_t *r, const poly *a) {
 4341              		.loc 1 776 44
 4342              		.cfi_startproc
 4343              		@ args = 0, pretend = 0, frame = 32
 4344              		@ frame_needed = 1, uses_anonymous_args = 0
 4345              		@ link register save eliminated.
 4346 0000 80B4     		push	{r7}
 4347              	.LCFI137:
 4348              		.cfi_def_cfa_offset 4
 4349              		.cfi_offset 7, -4
 4350 0002 89B0     		sub	sp, sp, #36
 4351              	.LCFI138:
 4352              		.cfi_def_cfa_offset 40
 4353 0004 00AF     		add	r7, sp, #0
 4354              	.LCFI139:
 4355              		.cfi_def_cfa_register 7
 4356 0006 7860     		str	r0, [r7, #4]
 4357 0008 3960     		str	r1, [r7]
 777:poly.c        ****   unsigned int i;
 778:poly.c        ****   uint32_t t[4];
 779:poly.c        ****   DBENCH_START();
 780:poly.c        **** 
 781:poly.c        **** #if GAMMA1 == (1 << 17)
 782:poly.c        ****   for(i = 0; i < N/4; ++i) {
 4358              		.loc 1 782 9
 4359 000a 0023     		movs	r3, #0
 4360 000c FB61     		str	r3, [r7, #28]
 4361              		.loc 1 782 3
 4362 000e CBE0     		b	.L93
 4363              	.L94:
 783:poly.c        ****     t[0] = GAMMA1 - a->coeffs[4*i+0];
 4364              		.loc 1 783 34 discriminator 3
 4365 0010 FB69     		ldr	r3, [r7, #28]
 4366 0012 9A00     		lsls	r2, r3, #2
 4367              		.loc 1 783 30 discriminator 3
 4368 0014 3B68     		ldr	r3, [r7]
 4369 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4370              		.loc 1 783 19 discriminator 3
 4371 001a C3F50033 		rsb	r3, r3, #131072
 4372              		.loc 1 783 10 discriminator 3
 4373 001e FB60     		str	r3, [r7, #12]
 784:poly.c        ****     t[1] = GAMMA1 - a->coeffs[4*i+1];
 4374              		.loc 1 784 32 discriminator 3
 4375 0020 FB69     		ldr	r3, [r7, #28]
 4376 0022 9B00     		lsls	r3, r3, #2
 4377              		.loc 1 784 34 discriminator 3
 4378 0024 5A1C     		adds	r2, r3, #1
 4379              		.loc 1 784 30 discriminator 3
 4380 0026 3B68     		ldr	r3, [r7]
 4381 0028 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4382              		.loc 1 784 19 discriminator 3
 4383 002c C3F50033 		rsb	r3, r3, #131072
 4384              		.loc 1 784 10 discriminator 3
 4385 0030 3B61     		str	r3, [r7, #16]
 785:poly.c        ****     t[2] = GAMMA1 - a->coeffs[4*i+2];
 4386              		.loc 1 785 32 discriminator 3
 4387 0032 FB69     		ldr	r3, [r7, #28]
 4388 0034 9B00     		lsls	r3, r3, #2
 4389              		.loc 1 785 34 discriminator 3
 4390 0036 9A1C     		adds	r2, r3, #2
 4391              		.loc 1 785 30 discriminator 3
 4392 0038 3B68     		ldr	r3, [r7]
 4393 003a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4394              		.loc 1 785 19 discriminator 3
 4395 003e C3F50033 		rsb	r3, r3, #131072
 4396              		.loc 1 785 10 discriminator 3
 4397 0042 7B61     		str	r3, [r7, #20]
 786:poly.c        ****     t[3] = GAMMA1 - a->coeffs[4*i+3];
 4398              		.loc 1 786 32 discriminator 3
 4399 0044 FB69     		ldr	r3, [r7, #28]
 4400 0046 9B00     		lsls	r3, r3, #2
 4401              		.loc 1 786 34 discriminator 3
 4402 0048 DA1C     		adds	r2, r3, #3
 4403              		.loc 1 786 30 discriminator 3
 4404 004a 3B68     		ldr	r3, [r7]
 4405 004c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4406              		.loc 1 786 19 discriminator 3
 4407 0050 C3F50033 		rsb	r3, r3, #131072
 4408              		.loc 1 786 10 discriminator 3
 4409 0054 BB61     		str	r3, [r7, #24]
 787:poly.c        **** 
 788:poly.c        ****     r[9*i+0]  = t[0];
 4410              		.loc 1 788 18 discriminator 3
 4411 0056 F968     		ldr	r1, [r7, #12]
 4412              		.loc 1 788 8 discriminator 3
 4413 0058 FA69     		ldr	r2, [r7, #28]
 4414 005a 1346     		mov	r3, r2
 4415 005c DB00     		lsls	r3, r3, #3
 4416 005e 1344     		add	r3, r3, r2
 4417              		.loc 1 788 6 discriminator 3
 4418 0060 7A68     		ldr	r2, [r7, #4]
 4419 0062 1344     		add	r3, r3, r2
 4420              		.loc 1 788 15 discriminator 3
 4421 0064 CAB2     		uxtb	r2, r1
 4422 0066 1A70     		strb	r2, [r3]
 789:poly.c        ****     r[9*i+1]  = t[0] >> 8;
 4423              		.loc 1 789 18 discriminator 3
 4424 0068 FB68     		ldr	r3, [r7, #12]
 4425              		.loc 1 789 22 discriminator 3
 4426 006a 190A     		lsrs	r1, r3, #8
 4427              		.loc 1 789 8 discriminator 3
 4428 006c FA69     		ldr	r2, [r7, #28]
 4429 006e 1346     		mov	r3, r2
 4430 0070 DB00     		lsls	r3, r3, #3
 4431 0072 1344     		add	r3, r3, r2
 4432              		.loc 1 789 6 discriminator 3
 4433 0074 0133     		adds	r3, r3, #1
 4434 0076 7A68     		ldr	r2, [r7, #4]
 4435 0078 1344     		add	r3, r3, r2
 4436              		.loc 1 789 15 discriminator 3
 4437 007a CAB2     		uxtb	r2, r1
 4438 007c 1A70     		strb	r2, [r3]
 790:poly.c        ****     r[9*i+2]  = t[0] >> 16;
 4439              		.loc 1 790 18 discriminator 3
 4440 007e FB68     		ldr	r3, [r7, #12]
 4441              		.loc 1 790 22 discriminator 3
 4442 0080 190C     		lsrs	r1, r3, #16
 4443              		.loc 1 790 8 discriminator 3
 4444 0082 FA69     		ldr	r2, [r7, #28]
 4445 0084 1346     		mov	r3, r2
 4446 0086 DB00     		lsls	r3, r3, #3
 4447 0088 1344     		add	r3, r3, r2
 4448              		.loc 1 790 6 discriminator 3
 4449 008a 0233     		adds	r3, r3, #2
 4450 008c 7A68     		ldr	r2, [r7, #4]
 4451 008e 1344     		add	r3, r3, r2
 4452              		.loc 1 790 15 discriminator 3
 4453 0090 CAB2     		uxtb	r2, r1
 4454 0092 1A70     		strb	r2, [r3]
 791:poly.c        ****     r[9*i+2] |= t[1] << 2;
 4455              		.loc 1 791 14 discriminator 3
 4456 0094 FA69     		ldr	r2, [r7, #28]
 4457 0096 1346     		mov	r3, r2
 4458 0098 DB00     		lsls	r3, r3, #3
 4459 009a 1344     		add	r3, r3, r2
 4460 009c 0233     		adds	r3, r3, #2
 4461 009e 7A68     		ldr	r2, [r7, #4]
 4462 00a0 1344     		add	r3, r3, r2
 4463 00a2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 4464              		.loc 1 791 18 discriminator 3
 4465 00a4 3B69     		ldr	r3, [r7, #16]
 4466              		.loc 1 791 22 discriminator 3
 4467 00a6 DBB2     		uxtb	r3, r3
 4468 00a8 9B00     		lsls	r3, r3, #2
 4469 00aa D9B2     		uxtb	r1, r3
 4470              		.loc 1 791 14 discriminator 3
 4471 00ac FA69     		ldr	r2, [r7, #28]
 4472 00ae 1346     		mov	r3, r2
 4473 00b0 DB00     		lsls	r3, r3, #3
 4474 00b2 1344     		add	r3, r3, r2
 4475 00b4 0233     		adds	r3, r3, #2
 4476 00b6 7A68     		ldr	r2, [r7, #4]
 4477 00b8 1344     		add	r3, r3, r2
 4478 00ba 40EA0102 		orr	r2, r0, r1
 4479 00be D2B2     		uxtb	r2, r2
 4480 00c0 1A70     		strb	r2, [r3]
 792:poly.c        ****     r[9*i+3]  = t[1] >> 6;
 4481              		.loc 1 792 18 discriminator 3
 4482 00c2 3B69     		ldr	r3, [r7, #16]
 4483              		.loc 1 792 22 discriminator 3
 4484 00c4 9909     		lsrs	r1, r3, #6
 4485              		.loc 1 792 8 discriminator 3
 4486 00c6 FA69     		ldr	r2, [r7, #28]
 4487 00c8 1346     		mov	r3, r2
 4488 00ca DB00     		lsls	r3, r3, #3
 4489 00cc 1344     		add	r3, r3, r2
 4490              		.loc 1 792 6 discriminator 3
 4491 00ce 0333     		adds	r3, r3, #3
 4492 00d0 7A68     		ldr	r2, [r7, #4]
 4493 00d2 1344     		add	r3, r3, r2
 4494              		.loc 1 792 15 discriminator 3
 4495 00d4 CAB2     		uxtb	r2, r1
 4496 00d6 1A70     		strb	r2, [r3]
 793:poly.c        ****     r[9*i+4]  = t[1] >> 14;
 4497              		.loc 1 793 18 discriminator 3
 4498 00d8 3B69     		ldr	r3, [r7, #16]
 4499              		.loc 1 793 22 discriminator 3
 4500 00da 990B     		lsrs	r1, r3, #14
 4501              		.loc 1 793 8 discriminator 3
 4502 00dc FA69     		ldr	r2, [r7, #28]
 4503 00de 1346     		mov	r3, r2
 4504 00e0 DB00     		lsls	r3, r3, #3
 4505 00e2 1344     		add	r3, r3, r2
 4506              		.loc 1 793 6 discriminator 3
 4507 00e4 0433     		adds	r3, r3, #4
 4508 00e6 7A68     		ldr	r2, [r7, #4]
 4509 00e8 1344     		add	r3, r3, r2
 4510              		.loc 1 793 15 discriminator 3
 4511 00ea CAB2     		uxtb	r2, r1
 4512 00ec 1A70     		strb	r2, [r3]
 794:poly.c        ****     r[9*i+4] |= t[2] << 4;
 4513              		.loc 1 794 14 discriminator 3
 4514 00ee FA69     		ldr	r2, [r7, #28]
 4515 00f0 1346     		mov	r3, r2
 4516 00f2 DB00     		lsls	r3, r3, #3
 4517 00f4 1344     		add	r3, r3, r2
 4518 00f6 0433     		adds	r3, r3, #4
 4519 00f8 7A68     		ldr	r2, [r7, #4]
 4520 00fa 1344     		add	r3, r3, r2
 4521 00fc 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 4522              		.loc 1 794 18 discriminator 3
 4523 00fe 7B69     		ldr	r3, [r7, #20]
 4524              		.loc 1 794 22 discriminator 3
 4525 0100 DBB2     		uxtb	r3, r3
 4526 0102 1B01     		lsls	r3, r3, #4
 4527 0104 D9B2     		uxtb	r1, r3
 4528              		.loc 1 794 14 discriminator 3
 4529 0106 FA69     		ldr	r2, [r7, #28]
 4530 0108 1346     		mov	r3, r2
 4531 010a DB00     		lsls	r3, r3, #3
 4532 010c 1344     		add	r3, r3, r2
 4533 010e 0433     		adds	r3, r3, #4
 4534 0110 7A68     		ldr	r2, [r7, #4]
 4535 0112 1344     		add	r3, r3, r2
 4536 0114 40EA0102 		orr	r2, r0, r1
 4537 0118 D2B2     		uxtb	r2, r2
 4538 011a 1A70     		strb	r2, [r3]
 795:poly.c        ****     r[9*i+5]  = t[2] >> 4;
 4539              		.loc 1 795 18 discriminator 3
 4540 011c 7B69     		ldr	r3, [r7, #20]
 4541              		.loc 1 795 22 discriminator 3
 4542 011e 1909     		lsrs	r1, r3, #4
 4543              		.loc 1 795 8 discriminator 3
 4544 0120 FA69     		ldr	r2, [r7, #28]
 4545 0122 1346     		mov	r3, r2
 4546 0124 DB00     		lsls	r3, r3, #3
 4547 0126 1344     		add	r3, r3, r2
 4548              		.loc 1 795 6 discriminator 3
 4549 0128 0533     		adds	r3, r3, #5
 4550 012a 7A68     		ldr	r2, [r7, #4]
 4551 012c 1344     		add	r3, r3, r2
 4552              		.loc 1 795 15 discriminator 3
 4553 012e CAB2     		uxtb	r2, r1
 4554 0130 1A70     		strb	r2, [r3]
 796:poly.c        ****     r[9*i+6]  = t[2] >> 12;
 4555              		.loc 1 796 18 discriminator 3
 4556 0132 7B69     		ldr	r3, [r7, #20]
 4557              		.loc 1 796 22 discriminator 3
 4558 0134 190B     		lsrs	r1, r3, #12
 4559              		.loc 1 796 8 discriminator 3
 4560 0136 FA69     		ldr	r2, [r7, #28]
 4561 0138 1346     		mov	r3, r2
 4562 013a DB00     		lsls	r3, r3, #3
 4563 013c 1344     		add	r3, r3, r2
 4564              		.loc 1 796 6 discriminator 3
 4565 013e 0633     		adds	r3, r3, #6
 4566 0140 7A68     		ldr	r2, [r7, #4]
 4567 0142 1344     		add	r3, r3, r2
 4568              		.loc 1 796 15 discriminator 3
 4569 0144 CAB2     		uxtb	r2, r1
 4570 0146 1A70     		strb	r2, [r3]
 797:poly.c        ****     r[9*i+6] |= t[3] << 6;
 4571              		.loc 1 797 14 discriminator 3
 4572 0148 FA69     		ldr	r2, [r7, #28]
 4573 014a 1346     		mov	r3, r2
 4574 014c DB00     		lsls	r3, r3, #3
 4575 014e 1344     		add	r3, r3, r2
 4576 0150 0633     		adds	r3, r3, #6
 4577 0152 7A68     		ldr	r2, [r7, #4]
 4578 0154 1344     		add	r3, r3, r2
 4579 0156 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 4580              		.loc 1 797 18 discriminator 3
 4581 0158 BB69     		ldr	r3, [r7, #24]
 4582              		.loc 1 797 22 discriminator 3
 4583 015a DBB2     		uxtb	r3, r3
 4584 015c 9B01     		lsls	r3, r3, #6
 4585 015e D9B2     		uxtb	r1, r3
 4586              		.loc 1 797 14 discriminator 3
 4587 0160 FA69     		ldr	r2, [r7, #28]
 4588 0162 1346     		mov	r3, r2
 4589 0164 DB00     		lsls	r3, r3, #3
 4590 0166 1344     		add	r3, r3, r2
 4591 0168 0633     		adds	r3, r3, #6
 4592 016a 7A68     		ldr	r2, [r7, #4]
 4593 016c 1344     		add	r3, r3, r2
 4594 016e 40EA0102 		orr	r2, r0, r1
 4595 0172 D2B2     		uxtb	r2, r2
 4596 0174 1A70     		strb	r2, [r3]
 798:poly.c        ****     r[9*i+7]  = t[3] >> 2;
 4597              		.loc 1 798 18 discriminator 3
 4598 0176 BB69     		ldr	r3, [r7, #24]
 4599              		.loc 1 798 22 discriminator 3
 4600 0178 9908     		lsrs	r1, r3, #2
 4601              		.loc 1 798 8 discriminator 3
 4602 017a FA69     		ldr	r2, [r7, #28]
 4603 017c 1346     		mov	r3, r2
 4604 017e DB00     		lsls	r3, r3, #3
 4605 0180 1344     		add	r3, r3, r2
 4606              		.loc 1 798 6 discriminator 3
 4607 0182 0733     		adds	r3, r3, #7
 4608 0184 7A68     		ldr	r2, [r7, #4]
 4609 0186 1344     		add	r3, r3, r2
 4610              		.loc 1 798 15 discriminator 3
 4611 0188 CAB2     		uxtb	r2, r1
 4612 018a 1A70     		strb	r2, [r3]
 799:poly.c        ****     r[9*i+8]  = t[3] >> 10;
 4613              		.loc 1 799 18 discriminator 3
 4614 018c BB69     		ldr	r3, [r7, #24]
 4615              		.loc 1 799 22 discriminator 3
 4616 018e 990A     		lsrs	r1, r3, #10
 4617              		.loc 1 799 8 discriminator 3
 4618 0190 FA69     		ldr	r2, [r7, #28]
 4619 0192 1346     		mov	r3, r2
 4620 0194 DB00     		lsls	r3, r3, #3
 4621 0196 1344     		add	r3, r3, r2
 4622              		.loc 1 799 6 discriminator 3
 4623 0198 0833     		adds	r3, r3, #8
 4624 019a 7A68     		ldr	r2, [r7, #4]
 4625 019c 1344     		add	r3, r3, r2
 4626              		.loc 1 799 15 discriminator 3
 4627 019e CAB2     		uxtb	r2, r1
 4628 01a0 1A70     		strb	r2, [r3]
 782:poly.c        ****     t[0] = GAMMA1 - a->coeffs[4*i+0];
 4629              		.loc 1 782 23 discriminator 3
 4630 01a2 FB69     		ldr	r3, [r7, #28]
 4631 01a4 0133     		adds	r3, r3, #1
 4632 01a6 FB61     		str	r3, [r7, #28]
 4633              	.L93:
 782:poly.c        ****     t[0] = GAMMA1 - a->coeffs[4*i+0];
 4634              		.loc 1 782 3 discriminator 1
 4635 01a8 FB69     		ldr	r3, [r7, #28]
 4636 01aa 3F2B     		cmp	r3, #63
 4637 01ac 7FF630AF 		bls	.L94
 800:poly.c        ****   }
 801:poly.c        **** #elif GAMMA1 == (1 << 19)
 802:poly.c        ****   for(i = 0; i < N/2; ++i) {
 803:poly.c        ****     t[0] = GAMMA1 - a->coeffs[2*i+0];
 804:poly.c        ****     t[1] = GAMMA1 - a->coeffs[2*i+1];
 805:poly.c        **** 
 806:poly.c        ****     r[5*i+0]  = t[0];
 807:poly.c        ****     r[5*i+1]  = t[0] >> 8;
 808:poly.c        ****     r[5*i+2]  = t[0] >> 16;
 809:poly.c        ****     r[5*i+2] |= t[1] << 4;
 810:poly.c        ****     r[5*i+3]  = t[1] >> 4;
 811:poly.c        ****     r[5*i+4]  = t[1] >> 12;
 812:poly.c        ****   }
 813:poly.c        **** #endif
 814:poly.c        **** 
 815:poly.c        ****   DBENCH_STOP(*tpack);
 816:poly.c        **** }
 4638              		.loc 1 816 1
 4639 01b0 00BF     		nop
 4640 01b2 00BF     		nop
 4641 01b4 2437     		adds	r7, r7, #36
 4642              	.LCFI140:
 4643              		.cfi_def_cfa_offset 4
 4644 01b6 BD46     		mov	sp, r7
 4645              	.LCFI141:
 4646              		.cfi_def_cfa_register 13
 4647              		@ sp needed
 4648 01b8 80BC     		pop	{r7}
 4649              	.LCFI142:
 4650              		.cfi_restore 7
 4651              		.cfi_def_cfa_offset 0
 4652 01ba 7047     		bx	lr
 4653              		.cfi_endproc
 4654              	.LFE25:
 4656              		.section	.text.pqcrystals_dilithium2_refpolyz_unpack,"ax",%progbits
 4657              		.align	1
 4658              		.global	pqcrystals_dilithium2_refpolyz_unpack
 4659              		.syntax unified
 4660              		.thumb
 4661              		.thumb_func
 4662              		.fpu softvfp
 4664              	pqcrystals_dilithium2_refpolyz_unpack:
 4665              	.LFB26:
 817:poly.c        **** 
 818:poly.c        **** /*************************************************
 819:poly.c        **** * Name:        polyz_unpack
 820:poly.c        **** *
 821:poly.c        **** * Description: Unpack polynomial z with coefficients
 822:poly.c        **** *              in [-(GAMMA1 - 1), GAMMA1].
 823:poly.c        **** *
 824:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 825:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 826:poly.c        **** **************************************************/
 827:poly.c        **** void polyz_unpack(poly *r, const uint8_t *a) {
 4666              		.loc 1 827 46
 4667              		.cfi_startproc
 4668              		@ args = 0, pretend = 0, frame = 16
 4669              		@ frame_needed = 1, uses_anonymous_args = 0
 4670              		@ link register save eliminated.
 4671 0000 80B4     		push	{r7}
 4672              	.LCFI143:
 4673              		.cfi_def_cfa_offset 4
 4674              		.cfi_offset 7, -4
 4675 0002 85B0     		sub	sp, sp, #20
 4676              	.LCFI144:
 4677              		.cfi_def_cfa_offset 24
 4678 0004 00AF     		add	r7, sp, #0
 4679              	.LCFI145:
 4680              		.cfi_def_cfa_register 7
 4681 0006 7860     		str	r0, [r7, #4]
 4682 0008 3960     		str	r1, [r7]
 828:poly.c        ****   unsigned int i;
 829:poly.c        ****   DBENCH_START();
 830:poly.c        **** 
 831:poly.c        **** #if GAMMA1 == (1 << 17)
 832:poly.c        ****   for(i = 0; i < N/4; ++i) {
 4683              		.loc 1 832 9
 4684 000a 0023     		movs	r3, #0
 4685 000c FB60     		str	r3, [r7, #12]
 4686              		.loc 1 832 3
 4687 000e 5EE1     		b	.L96
 4688              	.L97:
 833:poly.c        ****     r->coeffs[4*i+0]  = a[9*i+0];
 4689              		.loc 1 833 28 discriminator 3
 4690 0010 FA68     		ldr	r2, [r7, #12]
 4691 0012 1346     		mov	r3, r2
 4692 0014 DB00     		lsls	r3, r3, #3
 4693 0016 1344     		add	r3, r3, r2
 4694              		.loc 1 833 26 discriminator 3
 4695 0018 3A68     		ldr	r2, [r7]
 4696 001a 1344     		add	r3, r3, r2
 4697 001c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4698              		.loc 1 833 18 discriminator 3
 4699 001e FB68     		ldr	r3, [r7, #12]
 4700 0020 9A00     		lsls	r2, r3, #2
 4701              		.loc 1 833 23 discriminator 3
 4702 0022 7B68     		ldr	r3, [r7, #4]
 4703 0024 43F82210 		str	r1, [r3, r2, lsl #2]
 834:poly.c        ****     r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 4704              		.loc 1 834 22 discriminator 3
 4705 0028 FB68     		ldr	r3, [r7, #12]
 4706 002a 9A00     		lsls	r2, r3, #2
 4707 002c 7B68     		ldr	r3, [r7, #4]
 4708 002e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4709 0032 1946     		mov	r1, r3
 4710              		.loc 1 834 38 discriminator 3
 4711 0034 FA68     		ldr	r2, [r7, #12]
 4712 0036 1346     		mov	r3, r2
 4713 0038 DB00     		lsls	r3, r3, #3
 4714 003a 1344     		add	r3, r3, r2
 4715              		.loc 1 834 36 discriminator 3
 4716 003c 0133     		adds	r3, r3, #1
 4717 003e 3A68     		ldr	r2, [r7]
 4718 0040 1344     		add	r3, r3, r2
 4719 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4720              		.loc 1 834 44 discriminator 3
 4721 0044 1B02     		lsls	r3, r3, #8
 4722              		.loc 1 834 22 discriminator 3
 4723 0046 1943     		orrs	r1, r1, r3
 4724 0048 FB68     		ldr	r3, [r7, #12]
 4725 004a 9A00     		lsls	r2, r3, #2
 4726 004c 7B68     		ldr	r3, [r7, #4]
 4727 004e 43F82210 		str	r1, [r3, r2, lsl #2]
 835:poly.c        ****     r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 4728              		.loc 1 835 22 discriminator 3
 4729 0052 FB68     		ldr	r3, [r7, #12]
 4730 0054 9A00     		lsls	r2, r3, #2
 4731 0056 7B68     		ldr	r3, [r7, #4]
 4732 0058 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4733 005c 1946     		mov	r1, r3
 4734              		.loc 1 835 38 discriminator 3
 4735 005e FA68     		ldr	r2, [r7, #12]
 4736 0060 1346     		mov	r3, r2
 4737 0062 DB00     		lsls	r3, r3, #3
 4738 0064 1344     		add	r3, r3, r2
 4739              		.loc 1 835 36 discriminator 3
 4740 0066 0233     		adds	r3, r3, #2
 4741 0068 3A68     		ldr	r2, [r7]
 4742 006a 1344     		add	r3, r3, r2
 4743 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4744              		.loc 1 835 44 discriminator 3
 4745 006e 1B04     		lsls	r3, r3, #16
 4746              		.loc 1 835 22 discriminator 3
 4747 0070 1943     		orrs	r1, r1, r3
 4748 0072 FB68     		ldr	r3, [r7, #12]
 4749 0074 9A00     		lsls	r2, r3, #2
 4750 0076 7B68     		ldr	r3, [r7, #4]
 4751 0078 43F82210 		str	r1, [r3, r2, lsl #2]
 836:poly.c        ****     r->coeffs[4*i+0] &= 0x3FFFF;
 4752              		.loc 1 836 22 discriminator 3
 4753 007c FB68     		ldr	r3, [r7, #12]
 4754 007e 9A00     		lsls	r2, r3, #2
 4755 0080 7B68     		ldr	r3, [r7, #4]
 4756 0082 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4757 0086 FA68     		ldr	r2, [r7, #12]
 4758 0088 9200     		lsls	r2, r2, #2
 4759 008a C3F31101 		ubfx	r1, r3, #0, #18
 4760 008e 7B68     		ldr	r3, [r7, #4]
 4761 0090 43F82210 		str	r1, [r3, r2, lsl #2]
 837:poly.c        **** 
 838:poly.c        ****     r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 4762              		.loc 1 838 28 discriminator 3
 4763 0094 FA68     		ldr	r2, [r7, #12]
 4764 0096 1346     		mov	r3, r2
 4765 0098 DB00     		lsls	r3, r3, #3
 4766 009a 1344     		add	r3, r3, r2
 4767              		.loc 1 838 26 discriminator 3
 4768 009c 0233     		adds	r3, r3, #2
 4769 009e 3A68     		ldr	r2, [r7]
 4770 00a0 1344     		add	r3, r3, r2
 4771 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4772              		.loc 1 838 34 discriminator 3
 4773 00a4 9B08     		lsrs	r3, r3, #2
 4774 00a6 D9B2     		uxtb	r1, r3
 4775              		.loc 1 838 16 discriminator 3
 4776 00a8 FB68     		ldr	r3, [r7, #12]
 4777 00aa 9B00     		lsls	r3, r3, #2
 4778              		.loc 1 838 18 discriminator 3
 4779 00ac 5A1C     		adds	r2, r3, #1
 4780              		.loc 1 838 23 discriminator 3
 4781 00ae 7B68     		ldr	r3, [r7, #4]
 4782 00b0 43F82210 		str	r1, [r3, r2, lsl #2]
 839:poly.c        ****     r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 4783              		.loc 1 839 22 discriminator 3
 4784 00b4 FB68     		ldr	r3, [r7, #12]
 4785 00b6 9B00     		lsls	r3, r3, #2
 4786 00b8 5A1C     		adds	r2, r3, #1
 4787 00ba 7B68     		ldr	r3, [r7, #4]
 4788 00bc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4789 00c0 1946     		mov	r1, r3
 4790              		.loc 1 839 38 discriminator 3
 4791 00c2 FA68     		ldr	r2, [r7, #12]
 4792 00c4 1346     		mov	r3, r2
 4793 00c6 DB00     		lsls	r3, r3, #3
 4794 00c8 1344     		add	r3, r3, r2
 4795              		.loc 1 839 36 discriminator 3
 4796 00ca 0333     		adds	r3, r3, #3
 4797 00cc 3A68     		ldr	r2, [r7]
 4798 00ce 1344     		add	r3, r3, r2
 4799 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4800              		.loc 1 839 44 discriminator 3
 4801 00d2 9B01     		lsls	r3, r3, #6
 4802              		.loc 1 839 22 discriminator 3
 4803 00d4 1943     		orrs	r1, r1, r3
 4804 00d6 FB68     		ldr	r3, [r7, #12]
 4805 00d8 9B00     		lsls	r3, r3, #2
 4806 00da 5A1C     		adds	r2, r3, #1
 4807 00dc 7B68     		ldr	r3, [r7, #4]
 4808 00de 43F82210 		str	r1, [r3, r2, lsl #2]
 840:poly.c        ****     r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 4809              		.loc 1 840 22 discriminator 3
 4810 00e2 FB68     		ldr	r3, [r7, #12]
 4811 00e4 9B00     		lsls	r3, r3, #2
 4812 00e6 5A1C     		adds	r2, r3, #1
 4813 00e8 7B68     		ldr	r3, [r7, #4]
 4814 00ea 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4815 00ee 1946     		mov	r1, r3
 4816              		.loc 1 840 38 discriminator 3
 4817 00f0 FA68     		ldr	r2, [r7, #12]
 4818 00f2 1346     		mov	r3, r2
 4819 00f4 DB00     		lsls	r3, r3, #3
 4820 00f6 1344     		add	r3, r3, r2
 4821              		.loc 1 840 36 discriminator 3
 4822 00f8 0433     		adds	r3, r3, #4
 4823 00fa 3A68     		ldr	r2, [r7]
 4824 00fc 1344     		add	r3, r3, r2
 4825 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4826              		.loc 1 840 44 discriminator 3
 4827 0100 9B03     		lsls	r3, r3, #14
 4828              		.loc 1 840 22 discriminator 3
 4829 0102 1943     		orrs	r1, r1, r3
 4830 0104 FB68     		ldr	r3, [r7, #12]
 4831 0106 9B00     		lsls	r3, r3, #2
 4832 0108 5A1C     		adds	r2, r3, #1
 4833 010a 7B68     		ldr	r3, [r7, #4]
 4834 010c 43F82210 		str	r1, [r3, r2, lsl #2]
 841:poly.c        ****     r->coeffs[4*i+1] &= 0x3FFFF;
 4835              		.loc 1 841 22 discriminator 3
 4836 0110 FB68     		ldr	r3, [r7, #12]
 4837 0112 9B00     		lsls	r3, r3, #2
 4838 0114 5A1C     		adds	r2, r3, #1
 4839 0116 7B68     		ldr	r3, [r7, #4]
 4840 0118 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4841 011c FA68     		ldr	r2, [r7, #12]
 4842 011e 9200     		lsls	r2, r2, #2
 4843 0120 0132     		adds	r2, r2, #1
 4844 0122 C3F31101 		ubfx	r1, r3, #0, #18
 4845 0126 7B68     		ldr	r3, [r7, #4]
 4846 0128 43F82210 		str	r1, [r3, r2, lsl #2]
 842:poly.c        **** 
 843:poly.c        ****     r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 4847              		.loc 1 843 28 discriminator 3
 4848 012c FA68     		ldr	r2, [r7, #12]
 4849 012e 1346     		mov	r3, r2
 4850 0130 DB00     		lsls	r3, r3, #3
 4851 0132 1344     		add	r3, r3, r2
 4852              		.loc 1 843 26 discriminator 3
 4853 0134 0433     		adds	r3, r3, #4
 4854 0136 3A68     		ldr	r2, [r7]
 4855 0138 1344     		add	r3, r3, r2
 4856 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4857              		.loc 1 843 34 discriminator 3
 4858 013c 1B09     		lsrs	r3, r3, #4
 4859 013e D9B2     		uxtb	r1, r3
 4860              		.loc 1 843 16 discriminator 3
 4861 0140 FB68     		ldr	r3, [r7, #12]
 4862 0142 9B00     		lsls	r3, r3, #2
 4863              		.loc 1 843 18 discriminator 3
 4864 0144 9A1C     		adds	r2, r3, #2
 4865              		.loc 1 843 23 discriminator 3
 4866 0146 7B68     		ldr	r3, [r7, #4]
 4867 0148 43F82210 		str	r1, [r3, r2, lsl #2]
 844:poly.c        ****     r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 4868              		.loc 1 844 22 discriminator 3
 4869 014c FB68     		ldr	r3, [r7, #12]
 4870 014e 9B00     		lsls	r3, r3, #2
 4871 0150 9A1C     		adds	r2, r3, #2
 4872 0152 7B68     		ldr	r3, [r7, #4]
 4873 0154 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4874 0158 1946     		mov	r1, r3
 4875              		.loc 1 844 38 discriminator 3
 4876 015a FA68     		ldr	r2, [r7, #12]
 4877 015c 1346     		mov	r3, r2
 4878 015e DB00     		lsls	r3, r3, #3
 4879 0160 1344     		add	r3, r3, r2
 4880              		.loc 1 844 36 discriminator 3
 4881 0162 0533     		adds	r3, r3, #5
 4882 0164 3A68     		ldr	r2, [r7]
 4883 0166 1344     		add	r3, r3, r2
 4884 0168 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4885              		.loc 1 844 44 discriminator 3
 4886 016a 1B01     		lsls	r3, r3, #4
 4887              		.loc 1 844 22 discriminator 3
 4888 016c 1943     		orrs	r1, r1, r3
 4889 016e FB68     		ldr	r3, [r7, #12]
 4890 0170 9B00     		lsls	r3, r3, #2
 4891 0172 9A1C     		adds	r2, r3, #2
 4892 0174 7B68     		ldr	r3, [r7, #4]
 4893 0176 43F82210 		str	r1, [r3, r2, lsl #2]
 845:poly.c        ****     r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 4894              		.loc 1 845 22 discriminator 3
 4895 017a FB68     		ldr	r3, [r7, #12]
 4896 017c 9B00     		lsls	r3, r3, #2
 4897 017e 9A1C     		adds	r2, r3, #2
 4898 0180 7B68     		ldr	r3, [r7, #4]
 4899 0182 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4900 0186 1946     		mov	r1, r3
 4901              		.loc 1 845 38 discriminator 3
 4902 0188 FA68     		ldr	r2, [r7, #12]
 4903 018a 1346     		mov	r3, r2
 4904 018c DB00     		lsls	r3, r3, #3
 4905 018e 1344     		add	r3, r3, r2
 4906              		.loc 1 845 36 discriminator 3
 4907 0190 0633     		adds	r3, r3, #6
 4908 0192 3A68     		ldr	r2, [r7]
 4909 0194 1344     		add	r3, r3, r2
 4910 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4911              		.loc 1 845 44 discriminator 3
 4912 0198 1B03     		lsls	r3, r3, #12
 4913              		.loc 1 845 22 discriminator 3
 4914 019a 1943     		orrs	r1, r1, r3
 4915 019c FB68     		ldr	r3, [r7, #12]
 4916 019e 9B00     		lsls	r3, r3, #2
 4917 01a0 9A1C     		adds	r2, r3, #2
 4918 01a2 7B68     		ldr	r3, [r7, #4]
 4919 01a4 43F82210 		str	r1, [r3, r2, lsl #2]
 846:poly.c        ****     r->coeffs[4*i+2] &= 0x3FFFF;
 4920              		.loc 1 846 22 discriminator 3
 4921 01a8 FB68     		ldr	r3, [r7, #12]
 4922 01aa 9B00     		lsls	r3, r3, #2
 4923 01ac 9A1C     		adds	r2, r3, #2
 4924 01ae 7B68     		ldr	r3, [r7, #4]
 4925 01b0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4926 01b4 FA68     		ldr	r2, [r7, #12]
 4927 01b6 9200     		lsls	r2, r2, #2
 4928 01b8 0232     		adds	r2, r2, #2
 4929 01ba C3F31101 		ubfx	r1, r3, #0, #18
 4930 01be 7B68     		ldr	r3, [r7, #4]
 4931 01c0 43F82210 		str	r1, [r3, r2, lsl #2]
 847:poly.c        **** 
 848:poly.c        ****     r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 4932              		.loc 1 848 28 discriminator 3
 4933 01c4 FA68     		ldr	r2, [r7, #12]
 4934 01c6 1346     		mov	r3, r2
 4935 01c8 DB00     		lsls	r3, r3, #3
 4936 01ca 1344     		add	r3, r3, r2
 4937              		.loc 1 848 26 discriminator 3
 4938 01cc 0633     		adds	r3, r3, #6
 4939 01ce 3A68     		ldr	r2, [r7]
 4940 01d0 1344     		add	r3, r3, r2
 4941 01d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4942              		.loc 1 848 34 discriminator 3
 4943 01d4 9B09     		lsrs	r3, r3, #6
 4944 01d6 D9B2     		uxtb	r1, r3
 4945              		.loc 1 848 16 discriminator 3
 4946 01d8 FB68     		ldr	r3, [r7, #12]
 4947 01da 9B00     		lsls	r3, r3, #2
 4948              		.loc 1 848 18 discriminator 3
 4949 01dc DA1C     		adds	r2, r3, #3
 4950              		.loc 1 848 23 discriminator 3
 4951 01de 7B68     		ldr	r3, [r7, #4]
 4952 01e0 43F82210 		str	r1, [r3, r2, lsl #2]
 849:poly.c        ****     r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 4953              		.loc 1 849 22 discriminator 3
 4954 01e4 FB68     		ldr	r3, [r7, #12]
 4955 01e6 9B00     		lsls	r3, r3, #2
 4956 01e8 DA1C     		adds	r2, r3, #3
 4957 01ea 7B68     		ldr	r3, [r7, #4]
 4958 01ec 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4959 01f0 1946     		mov	r1, r3
 4960              		.loc 1 849 38 discriminator 3
 4961 01f2 FA68     		ldr	r2, [r7, #12]
 4962 01f4 1346     		mov	r3, r2
 4963 01f6 DB00     		lsls	r3, r3, #3
 4964 01f8 1344     		add	r3, r3, r2
 4965              		.loc 1 849 36 discriminator 3
 4966 01fa 0733     		adds	r3, r3, #7
 4967 01fc 3A68     		ldr	r2, [r7]
 4968 01fe 1344     		add	r3, r3, r2
 4969 0200 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4970              		.loc 1 849 44 discriminator 3
 4971 0202 9B00     		lsls	r3, r3, #2
 4972              		.loc 1 849 22 discriminator 3
 4973 0204 1943     		orrs	r1, r1, r3
 4974 0206 FB68     		ldr	r3, [r7, #12]
 4975 0208 9B00     		lsls	r3, r3, #2
 4976 020a DA1C     		adds	r2, r3, #3
 4977 020c 7B68     		ldr	r3, [r7, #4]
 4978 020e 43F82210 		str	r1, [r3, r2, lsl #2]
 850:poly.c        ****     r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 4979              		.loc 1 850 22 discriminator 3
 4980 0212 FB68     		ldr	r3, [r7, #12]
 4981 0214 9B00     		lsls	r3, r3, #2
 4982 0216 DA1C     		adds	r2, r3, #3
 4983 0218 7B68     		ldr	r3, [r7, #4]
 4984 021a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4985 021e 1946     		mov	r1, r3
 4986              		.loc 1 850 38 discriminator 3
 4987 0220 FA68     		ldr	r2, [r7, #12]
 4988 0222 1346     		mov	r3, r2
 4989 0224 DB00     		lsls	r3, r3, #3
 4990 0226 1344     		add	r3, r3, r2
 4991              		.loc 1 850 36 discriminator 3
 4992 0228 0833     		adds	r3, r3, #8
 4993 022a 3A68     		ldr	r2, [r7]
 4994 022c 1344     		add	r3, r3, r2
 4995 022e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4996              		.loc 1 850 44 discriminator 3
 4997 0230 9B02     		lsls	r3, r3, #10
 4998              		.loc 1 850 22 discriminator 3
 4999 0232 1943     		orrs	r1, r1, r3
 5000 0234 FB68     		ldr	r3, [r7, #12]
 5001 0236 9B00     		lsls	r3, r3, #2
 5002 0238 DA1C     		adds	r2, r3, #3
 5003 023a 7B68     		ldr	r3, [r7, #4]
 5004 023c 43F82210 		str	r1, [r3, r2, lsl #2]
 851:poly.c        ****     r->coeffs[4*i+3] &= 0x3FFFF;
 5005              		.loc 1 851 22 discriminator 3
 5006 0240 FB68     		ldr	r3, [r7, #12]
 5007 0242 9B00     		lsls	r3, r3, #2
 5008 0244 DA1C     		adds	r2, r3, #3
 5009 0246 7B68     		ldr	r3, [r7, #4]
 5010 0248 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5011 024c FA68     		ldr	r2, [r7, #12]
 5012 024e 9200     		lsls	r2, r2, #2
 5013 0250 0332     		adds	r2, r2, #3
 5014 0252 C3F31101 		ubfx	r1, r3, #0, #18
 5015 0256 7B68     		ldr	r3, [r7, #4]
 5016 0258 43F82210 		str	r1, [r3, r2, lsl #2]
 852:poly.c        **** 
 853:poly.c        ****     r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 5017              		.loc 1 853 46 discriminator 3
 5018 025c FB68     		ldr	r3, [r7, #12]
 5019 025e 9A00     		lsls	r2, r3, #2
 5020              		.loc 1 853 42 discriminator 3
 5021 0260 7B68     		ldr	r3, [r7, #4]
 5022 0262 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5023              		.loc 1 853 18 discriminator 3
 5024 0266 FA68     		ldr	r2, [r7, #12]
 5025 0268 9200     		lsls	r2, r2, #2
 5026              		.loc 1 853 31 discriminator 3
 5027 026a C3F50031 		rsb	r1, r3, #131072
 5028              		.loc 1 853 22 discriminator 3
 5029 026e 7B68     		ldr	r3, [r7, #4]
 5030 0270 43F82210 		str	r1, [r3, r2, lsl #2]
 854:poly.c        ****     r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 5031              		.loc 1 854 44 discriminator 3
 5032 0274 FB68     		ldr	r3, [r7, #12]
 5033 0276 9B00     		lsls	r3, r3, #2
 5034              		.loc 1 854 46 discriminator 3
 5035 0278 5A1C     		adds	r2, r3, #1
 5036              		.loc 1 854 42 discriminator 3
 5037 027a 7B68     		ldr	r3, [r7, #4]
 5038 027c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5039              		.loc 1 854 16 discriminator 3
 5040 0280 FA68     		ldr	r2, [r7, #12]
 5041 0282 9200     		lsls	r2, r2, #2
 5042              		.loc 1 854 18 discriminator 3
 5043 0284 0132     		adds	r2, r2, #1
 5044              		.loc 1 854 31 discriminator 3
 5045 0286 C3F50031 		rsb	r1, r3, #131072
 5046              		.loc 1 854 22 discriminator 3
 5047 028a 7B68     		ldr	r3, [r7, #4]
 5048 028c 43F82210 		str	r1, [r3, r2, lsl #2]
 855:poly.c        ****     r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 5049              		.loc 1 855 44 discriminator 3
 5050 0290 FB68     		ldr	r3, [r7, #12]
 5051 0292 9B00     		lsls	r3, r3, #2
 5052              		.loc 1 855 46 discriminator 3
 5053 0294 9A1C     		adds	r2, r3, #2
 5054              		.loc 1 855 42 discriminator 3
 5055 0296 7B68     		ldr	r3, [r7, #4]
 5056 0298 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5057              		.loc 1 855 16 discriminator 3
 5058 029c FA68     		ldr	r2, [r7, #12]
 5059 029e 9200     		lsls	r2, r2, #2
 5060              		.loc 1 855 18 discriminator 3
 5061 02a0 0232     		adds	r2, r2, #2
 5062              		.loc 1 855 31 discriminator 3
 5063 02a2 C3F50031 		rsb	r1, r3, #131072
 5064              		.loc 1 855 22 discriminator 3
 5065 02a6 7B68     		ldr	r3, [r7, #4]
 5066 02a8 43F82210 		str	r1, [r3, r2, lsl #2]
 856:poly.c        ****     r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 5067              		.loc 1 856 44 discriminator 3
 5068 02ac FB68     		ldr	r3, [r7, #12]
 5069 02ae 9B00     		lsls	r3, r3, #2
 5070              		.loc 1 856 46 discriminator 3
 5071 02b0 DA1C     		adds	r2, r3, #3
 5072              		.loc 1 856 42 discriminator 3
 5073 02b2 7B68     		ldr	r3, [r7, #4]
 5074 02b4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5075              		.loc 1 856 16 discriminator 3
 5076 02b8 FA68     		ldr	r2, [r7, #12]
 5077 02ba 9200     		lsls	r2, r2, #2
 5078              		.loc 1 856 18 discriminator 3
 5079 02bc 0332     		adds	r2, r2, #3
 5080              		.loc 1 856 31 discriminator 3
 5081 02be C3F50031 		rsb	r1, r3, #131072
 5082              		.loc 1 856 22 discriminator 3
 5083 02c2 7B68     		ldr	r3, [r7, #4]
 5084 02c4 43F82210 		str	r1, [r3, r2, lsl #2]
 832:poly.c        ****     r->coeffs[4*i+0]  = a[9*i+0];
 5085              		.loc 1 832 23 discriminator 3
 5086 02c8 FB68     		ldr	r3, [r7, #12]
 5087 02ca 0133     		adds	r3, r3, #1
 5088 02cc FB60     		str	r3, [r7, #12]
 5089              	.L96:
 832:poly.c        ****     r->coeffs[4*i+0]  = a[9*i+0];
 5090              		.loc 1 832 3 discriminator 1
 5091 02ce FB68     		ldr	r3, [r7, #12]
 5092 02d0 3F2B     		cmp	r3, #63
 5093 02d2 7FF69DAE 		bls	.L97
 857:poly.c        ****   }
 858:poly.c        **** #elif GAMMA1 == (1 << 19)
 859:poly.c        ****   for(i = 0; i < N/2; ++i) {
 860:poly.c        ****     r->coeffs[2*i+0]  = a[5*i+0];
 861:poly.c        ****     r->coeffs[2*i+0] |= (uint32_t)a[5*i+1] << 8;
 862:poly.c        ****     r->coeffs[2*i+0] |= (uint32_t)a[5*i+2] << 16;
 863:poly.c        ****     r->coeffs[2*i+0] &= 0xFFFFF;
 864:poly.c        **** 
 865:poly.c        ****     r->coeffs[2*i+1]  = a[5*i+2] >> 4;
 866:poly.c        ****     r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
 867:poly.c        ****     r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;
 868:poly.c        ****     r->coeffs[2*i+0] &= 0xFFFFF;
 869:poly.c        **** 
 870:poly.c        ****     r->coeffs[2*i+0] = GAMMA1 - r->coeffs[2*i+0];
 871:poly.c        ****     r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
 872:poly.c        ****   }
 873:poly.c        **** #endif
 874:poly.c        **** 
 875:poly.c        ****   DBENCH_STOP(*tpack);
 876:poly.c        **** }
 5094              		.loc 1 876 1
 5095 02d6 00BF     		nop
 5096 02d8 00BF     		nop
 5097 02da 1437     		adds	r7, r7, #20
 5098              	.LCFI146:
 5099              		.cfi_def_cfa_offset 4
 5100 02dc BD46     		mov	sp, r7
 5101              	.LCFI147:
 5102              		.cfi_def_cfa_register 13
 5103              		@ sp needed
 5104 02de 80BC     		pop	{r7}
 5105              	.LCFI148:
 5106              		.cfi_restore 7
 5107              		.cfi_def_cfa_offset 0
 5108 02e0 7047     		bx	lr
 5109              		.cfi_endproc
 5110              	.LFE26:
 5112              		.section	.text.pqcrystals_dilithium2_refpolyw1_pack,"ax",%progbits
 5113              		.align	1
 5114              		.global	pqcrystals_dilithium2_refpolyw1_pack
 5115              		.syntax unified
 5116              		.thumb
 5117              		.thumb_func
 5118              		.fpu softvfp
 5120              	pqcrystals_dilithium2_refpolyw1_pack:
 5121              	.LFB27:
 877:poly.c        **** 
 878:poly.c        **** /*************************************************
 879:poly.c        **** * Name:        polyw1_pack
 880:poly.c        **** *
 881:poly.c        **** * Description: Bit-pack polynomial w1 with coefficients in [0,15] or [0,43].
 882:poly.c        **** *              Input coefficients are assumed to be standard representatives.
 883:poly.c        **** *
 884:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 885:poly.c        **** *                            POLYW1_PACKEDBYTES bytes
 886:poly.c        **** *              - const poly *a: pointer to input polynomial
 887:poly.c        **** **************************************************/
 888:poly.c        **** void polyw1_pack(uint8_t *r, const poly *a) {
 5122              		.loc 1 888 45
 5123              		.cfi_startproc
 5124              		@ args = 0, pretend = 0, frame = 16
 5125              		@ frame_needed = 1, uses_anonymous_args = 0
 5126              		@ link register save eliminated.
 5127 0000 80B4     		push	{r7}
 5128              	.LCFI149:
 5129              		.cfi_def_cfa_offset 4
 5130              		.cfi_offset 7, -4
 5131 0002 85B0     		sub	sp, sp, #20
 5132              	.LCFI150:
 5133              		.cfi_def_cfa_offset 24
 5134 0004 00AF     		add	r7, sp, #0
 5135              	.LCFI151:
 5136              		.cfi_def_cfa_register 7
 5137 0006 7860     		str	r0, [r7, #4]
 5138 0008 3960     		str	r1, [r7]
 889:poly.c        ****   unsigned int i;
 890:poly.c        ****   DBENCH_START();
 891:poly.c        **** 
 892:poly.c        **** #if GAMMA2 == (Q-1)/88
 893:poly.c        ****   for(i = 0; i < N/4; ++i) {
 5139              		.loc 1 893 9
 5140 000a 0023     		movs	r3, #0
 5141 000c FB60     		str	r3, [r7, #12]
 5142              		.loc 1 893 3
 5143 000e 81E0     		b	.L99
 5144              	.L100:
 894:poly.c        ****     r[3*i+0]  = a->coeffs[4*i+0];
 5145              		.loc 1 894 30 discriminator 3
 5146 0010 FB68     		ldr	r3, [r7, #12]
 5147 0012 9A00     		lsls	r2, r3, #2
 5148              		.loc 1 894 26 discriminator 3
 5149 0014 3B68     		ldr	r3, [r7]
 5150 0016 53F82210 		ldr	r1, [r3, r2, lsl #2]
 5151              		.loc 1 894 8 discriminator 3
 5152 001a FA68     		ldr	r2, [r7, #12]
 5153 001c 1346     		mov	r3, r2
 5154 001e 5B00     		lsls	r3, r3, #1
 5155 0020 1344     		add	r3, r3, r2
 5156              		.loc 1 894 6 discriminator 3
 5157 0022 7A68     		ldr	r2, [r7, #4]
 5158 0024 1344     		add	r3, r3, r2
 5159              		.loc 1 894 15 discriminator 3
 5160 0026 CAB2     		uxtb	r2, r1
 5161 0028 1A70     		strb	r2, [r3]
 895:poly.c        ****     r[3*i+0] |= a->coeffs[4*i+1] << 6;
 5162              		.loc 1 895 14 discriminator 3
 5163 002a FA68     		ldr	r2, [r7, #12]
 5164 002c 1346     		mov	r3, r2
 5165 002e 5B00     		lsls	r3, r3, #1
 5166 0030 1344     		add	r3, r3, r2
 5167 0032 7A68     		ldr	r2, [r7, #4]
 5168 0034 1344     		add	r3, r3, r2
 5169 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5170 0038 5AB2     		sxtb	r2, r3
 5171              		.loc 1 895 28 discriminator 3
 5172 003a FB68     		ldr	r3, [r7, #12]
 5173 003c 9B00     		lsls	r3, r3, #2
 5174              		.loc 1 895 30 discriminator 3
 5175 003e 591C     		adds	r1, r3, #1
 5176              		.loc 1 895 26 discriminator 3
 5177 0040 3B68     		ldr	r3, [r7]
 5178 0042 53F82130 		ldr	r3, [r3, r1, lsl #2]
 5179              		.loc 1 895 34 discriminator 3
 5180 0046 9B01     		lsls	r3, r3, #6
 5181              		.loc 1 895 14 discriminator 3
 5182 0048 5BB2     		sxtb	r3, r3
 5183 004a 1343     		orrs	r3, r3, r2
 5184 004c 59B2     		sxtb	r1, r3
 5185 004e FA68     		ldr	r2, [r7, #12]
 5186 0050 1346     		mov	r3, r2
 5187 0052 5B00     		lsls	r3, r3, #1
 5188 0054 1344     		add	r3, r3, r2
 5189 0056 7A68     		ldr	r2, [r7, #4]
 5190 0058 1344     		add	r3, r3, r2
 5191 005a CAB2     		uxtb	r2, r1
 5192 005c 1A70     		strb	r2, [r3]
 896:poly.c        ****     r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 5193              		.loc 1 896 28 discriminator 3
 5194 005e FB68     		ldr	r3, [r7, #12]
 5195 0060 9B00     		lsls	r3, r3, #2
 5196              		.loc 1 896 30 discriminator 3
 5197 0062 5A1C     		adds	r2, r3, #1
 5198              		.loc 1 896 26 discriminator 3
 5199 0064 3B68     		ldr	r3, [r7]
 5200 0066 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5201              		.loc 1 896 34 discriminator 3
 5202 006a 9910     		asrs	r1, r3, #2
 5203              		.loc 1 896 8 discriminator 3
 5204 006c FA68     		ldr	r2, [r7, #12]
 5205 006e 1346     		mov	r3, r2
 5206 0070 5B00     		lsls	r3, r3, #1
 5207 0072 1344     		add	r3, r3, r2
 5208              		.loc 1 896 6 discriminator 3
 5209 0074 0133     		adds	r3, r3, #1
 5210 0076 7A68     		ldr	r2, [r7, #4]
 5211 0078 1344     		add	r3, r3, r2
 5212              		.loc 1 896 15 discriminator 3
 5213 007a CAB2     		uxtb	r2, r1
 5214 007c 1A70     		strb	r2, [r3]
 897:poly.c        ****     r[3*i+1] |= a->coeffs[4*i+2] << 4;
 5215              		.loc 1 897 14 discriminator 3
 5216 007e FA68     		ldr	r2, [r7, #12]
 5217 0080 1346     		mov	r3, r2
 5218 0082 5B00     		lsls	r3, r3, #1
 5219 0084 1344     		add	r3, r3, r2
 5220 0086 0133     		adds	r3, r3, #1
 5221 0088 7A68     		ldr	r2, [r7, #4]
 5222 008a 1344     		add	r3, r3, r2
 5223 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5224 008e 5AB2     		sxtb	r2, r3
 5225              		.loc 1 897 28 discriminator 3
 5226 0090 FB68     		ldr	r3, [r7, #12]
 5227 0092 9B00     		lsls	r3, r3, #2
 5228              		.loc 1 897 30 discriminator 3
 5229 0094 991C     		adds	r1, r3, #2
 5230              		.loc 1 897 26 discriminator 3
 5231 0096 3B68     		ldr	r3, [r7]
 5232 0098 53F82130 		ldr	r3, [r3, r1, lsl #2]
 5233              		.loc 1 897 34 discriminator 3
 5234 009c 1B01     		lsls	r3, r3, #4
 5235              		.loc 1 897 14 discriminator 3
 5236 009e 5BB2     		sxtb	r3, r3
 5237 00a0 1343     		orrs	r3, r3, r2
 5238 00a2 59B2     		sxtb	r1, r3
 5239 00a4 FA68     		ldr	r2, [r7, #12]
 5240 00a6 1346     		mov	r3, r2
 5241 00a8 5B00     		lsls	r3, r3, #1
 5242 00aa 1344     		add	r3, r3, r2
 5243 00ac 0133     		adds	r3, r3, #1
 5244 00ae 7A68     		ldr	r2, [r7, #4]
 5245 00b0 1344     		add	r3, r3, r2
 5246 00b2 CAB2     		uxtb	r2, r1
 5247 00b4 1A70     		strb	r2, [r3]
 898:poly.c        ****     r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 5248              		.loc 1 898 28 discriminator 3
 5249 00b6 FB68     		ldr	r3, [r7, #12]
 5250 00b8 9B00     		lsls	r3, r3, #2
 5251              		.loc 1 898 30 discriminator 3
 5252 00ba 9A1C     		adds	r2, r3, #2
 5253              		.loc 1 898 26 discriminator 3
 5254 00bc 3B68     		ldr	r3, [r7]
 5255 00be 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5256              		.loc 1 898 34 discriminator 3
 5257 00c2 1911     		asrs	r1, r3, #4
 5258              		.loc 1 898 8 discriminator 3
 5259 00c4 FA68     		ldr	r2, [r7, #12]
 5260 00c6 1346     		mov	r3, r2
 5261 00c8 5B00     		lsls	r3, r3, #1
 5262 00ca 1344     		add	r3, r3, r2
 5263              		.loc 1 898 6 discriminator 3
 5264 00cc 0233     		adds	r3, r3, #2
 5265 00ce 7A68     		ldr	r2, [r7, #4]
 5266 00d0 1344     		add	r3, r3, r2
 5267              		.loc 1 898 15 discriminator 3
 5268 00d2 CAB2     		uxtb	r2, r1
 5269 00d4 1A70     		strb	r2, [r3]
 899:poly.c        ****     r[3*i+2] |= a->coeffs[4*i+3] << 2;
 5270              		.loc 1 899 14 discriminator 3
 5271 00d6 FA68     		ldr	r2, [r7, #12]
 5272 00d8 1346     		mov	r3, r2
 5273 00da 5B00     		lsls	r3, r3, #1
 5274 00dc 1344     		add	r3, r3, r2
 5275 00de 0233     		adds	r3, r3, #2
 5276 00e0 7A68     		ldr	r2, [r7, #4]
 5277 00e2 1344     		add	r3, r3, r2
 5278 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5279 00e6 5AB2     		sxtb	r2, r3
 5280              		.loc 1 899 28 discriminator 3
 5281 00e8 FB68     		ldr	r3, [r7, #12]
 5282 00ea 9B00     		lsls	r3, r3, #2
 5283              		.loc 1 899 30 discriminator 3
 5284 00ec D91C     		adds	r1, r3, #3
 5285              		.loc 1 899 26 discriminator 3
 5286 00ee 3B68     		ldr	r3, [r7]
 5287 00f0 53F82130 		ldr	r3, [r3, r1, lsl #2]
 5288              		.loc 1 899 34 discriminator 3
 5289 00f4 9B00     		lsls	r3, r3, #2
 5290              		.loc 1 899 14 discriminator 3
 5291 00f6 5BB2     		sxtb	r3, r3
 5292 00f8 1343     		orrs	r3, r3, r2
 5293 00fa 59B2     		sxtb	r1, r3
 5294 00fc FA68     		ldr	r2, [r7, #12]
 5295 00fe 1346     		mov	r3, r2
 5296 0100 5B00     		lsls	r3, r3, #1
 5297 0102 1344     		add	r3, r3, r2
 5298 0104 0233     		adds	r3, r3, #2
 5299 0106 7A68     		ldr	r2, [r7, #4]
 5300 0108 1344     		add	r3, r3, r2
 5301 010a CAB2     		uxtb	r2, r1
 5302 010c 1A70     		strb	r2, [r3]
 893:poly.c        ****     r[3*i+0]  = a->coeffs[4*i+0];
 5303              		.loc 1 893 23 discriminator 3
 5304 010e FB68     		ldr	r3, [r7, #12]
 5305 0110 0133     		adds	r3, r3, #1
 5306 0112 FB60     		str	r3, [r7, #12]
 5307              	.L99:
 893:poly.c        ****     r[3*i+0]  = a->coeffs[4*i+0];
 5308              		.loc 1 893 3 discriminator 1
 5309 0114 FB68     		ldr	r3, [r7, #12]
 5310 0116 3F2B     		cmp	r3, #63
 5311 0118 7FF67AAF 		bls	.L100
 900:poly.c        ****   }
 901:poly.c        **** #elif GAMMA2 == (Q-1)/32
 902:poly.c        ****   for(i = 0; i < N/2; ++i)
 903:poly.c        ****     r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
 904:poly.c        **** #endif
 905:poly.c        **** 
 906:poly.c        ****   DBENCH_STOP(*tpack);
 907:poly.c        **** }
 5312              		.loc 1 907 1
 5313 011c 00BF     		nop
 5314 011e 00BF     		nop
 5315 0120 1437     		adds	r7, r7, #20
 5316              	.LCFI152:
 5317              		.cfi_def_cfa_offset 4
 5318 0122 BD46     		mov	sp, r7
 5319              	.LCFI153:
 5320              		.cfi_def_cfa_register 13
 5321              		@ sp needed
 5322 0124 80BC     		pop	{r7}
 5323              	.LCFI154:
 5324              		.cfi_restore 7
 5325              		.cfi_def_cfa_offset 0
 5326 0126 7047     		bx	lr
 5327              		.cfi_endproc
 5328              	.LFE27:
 5330              		.text
 5331              	.Letext0:
 5332              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 5333              		.file 3 "poly.h"
 5334              		.file 4 "fips202.h"
 5335              		.file 5 "symmetric.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 poly.c
     /tmp/ccj37arC.s:16     .text.pqcrystals_dilithium2_refpoly_reduce:0000000000000000 $t
     /tmp/ccj37arC.s:24     .text.pqcrystals_dilithium2_refpoly_reduce:0000000000000000 pqcrystals_dilithium2_refpoly_reduce
     /tmp/ccj37arC.s:84     .text.pqcrystals_dilithium2_refpoly_caddq:0000000000000000 $t
     /tmp/ccj37arC.s:91     .text.pqcrystals_dilithium2_refpoly_caddq:0000000000000000 pqcrystals_dilithium2_refpoly_caddq
     /tmp/ccj37arC.s:150    .text.pqcrystals_dilithium2_refpoly_add:0000000000000000 $t
     /tmp/ccj37arC.s:157    .text.pqcrystals_dilithium2_refpoly_add:0000000000000000 pqcrystals_dilithium2_refpoly_add
     /tmp/ccj37arC.s:225    .text.pqcrystals_dilithium2_refpoly_sub:0000000000000000 $t
     /tmp/ccj37arC.s:232    .text.pqcrystals_dilithium2_refpoly_sub:0000000000000000 pqcrystals_dilithium2_refpoly_sub
     /tmp/ccj37arC.s:300    .text.pqcrystals_dilithium2_refpoly_shiftl:0000000000000000 $t
     /tmp/ccj37arC.s:307    .text.pqcrystals_dilithium2_refpoly_shiftl:0000000000000000 pqcrystals_dilithium2_refpoly_shiftl
     /tmp/ccj37arC.s:367    .text.pqcrystals_dilithium2_refpoly_ntt:0000000000000000 $t
     /tmp/ccj37arC.s:374    .text.pqcrystals_dilithium2_refpoly_ntt:0000000000000000 pqcrystals_dilithium2_refpoly_ntt
     /tmp/ccj37arC.s:411    .text.pqcrystals_dilithium2_refpoly_invntt_tomont:0000000000000000 $t
     /tmp/ccj37arC.s:418    .text.pqcrystals_dilithium2_refpoly_invntt_tomont:0000000000000000 pqcrystals_dilithium2_refpoly_invntt_tomont
     /tmp/ccj37arC.s:455    .text.pqcrystals_dilithium2_refpoly_pointwise_montgomery:0000000000000000 $t
     /tmp/ccj37arC.s:462    .text.pqcrystals_dilithium2_refpoly_pointwise_montgomery:0000000000000000 pqcrystals_dilithium2_refpoly_pointwise_montgomery
     /tmp/ccj37arC.s:548    .text.pqcrystals_dilithium2_refpoly_power2round:0000000000000000 $t
     /tmp/ccj37arC.s:555    .text.pqcrystals_dilithium2_refpoly_power2round:0000000000000000 pqcrystals_dilithium2_refpoly_power2round
     /tmp/ccj37arC.s:620    .text.pqcrystals_dilithium2_refpoly_decompose:0000000000000000 $t
     /tmp/ccj37arC.s:627    .text.pqcrystals_dilithium2_refpoly_decompose:0000000000000000 pqcrystals_dilithium2_refpoly_decompose
     /tmp/ccj37arC.s:692    .text.pqcrystals_dilithium2_refpoly_make_hint:0000000000000000 $t
     /tmp/ccj37arC.s:699    .text.pqcrystals_dilithium2_refpoly_make_hint:0000000000000000 pqcrystals_dilithium2_refpoly_make_hint
     /tmp/ccj37arC.s:777    .text.pqcrystals_dilithium2_refpoly_use_hint:0000000000000000 $t
     /tmp/ccj37arC.s:784    .text.pqcrystals_dilithium2_refpoly_use_hint:0000000000000000 pqcrystals_dilithium2_refpoly_use_hint
     /tmp/ccj37arC.s:850    .text.pqcrystals_dilithium2_refpoly_chknorm:0000000000000000 $t
     /tmp/ccj37arC.s:857    .text.pqcrystals_dilithium2_refpoly_chknorm:0000000000000000 pqcrystals_dilithium2_refpoly_chknorm
     /tmp/ccj37arC.s:952    .text.pqcrystals_dilithium2_refpoly_chknorm:0000000000000068 $d
     /tmp/ccj37arC.s:957    .text.rej_uniform:0000000000000000 $t
     /tmp/ccj37arC.s:963    .text.rej_uniform:0000000000000000 rej_uniform
     /tmp/ccj37arC.s:1084   .text.rej_uniform:000000000000008c $d
     /tmp/ccj37arC.s:1089   .text.pqcrystals_dilithium2_refpoly_uniform:0000000000000000 $t
     /tmp/ccj37arC.s:1096   .text.pqcrystals_dilithium2_refpoly_uniform:0000000000000000 pqcrystals_dilithium2_refpoly_uniform
     /tmp/ccj37arC.s:1247   .text.pqcrystals_dilithium2_refpoly_uniform:0000000000000144 $d
     /tmp/ccj37arC.s:1252   .text.rej_eta:0000000000000000 $t
     /tmp/ccj37arC.s:1258   .text.rej_eta:0000000000000000 rej_eta
     /tmp/ccj37arC.s:1413   .text.pqcrystals_dilithium2_refpoly_uniform_eta:0000000000000000 $t
     /tmp/ccj37arC.s:1420   .text.pqcrystals_dilithium2_refpoly_uniform_eta:0000000000000000 pqcrystals_dilithium2_refpoly_uniform_eta
     /tmp/ccj37arC.s:1522   .text.pqcrystals_dilithium2_refpoly_uniform_gamma1:0000000000000000 $t
     /tmp/ccj37arC.s:1529   .text.pqcrystals_dilithium2_refpoly_uniform_gamma1:0000000000000000 pqcrystals_dilithium2_refpoly_uniform_gamma1
     /tmp/ccj37arC.s:4664   .text.pqcrystals_dilithium2_refpolyz_unpack:0000000000000000 pqcrystals_dilithium2_refpolyz_unpack
     /tmp/ccj37arC.s:1591   .text.pqcrystals_dilithium2_refpoly_challenge:0000000000000000 $t
     /tmp/ccj37arC.s:1598   .text.pqcrystals_dilithium2_refpoly_challenge:0000000000000000 pqcrystals_dilithium2_refpoly_challenge
     /tmp/ccj37arC.s:1810   .text.pqcrystals_dilithium2_refpolyeta_pack:0000000000000000 $t
     /tmp/ccj37arC.s:1817   .text.pqcrystals_dilithium2_refpolyeta_pack:0000000000000000 pqcrystals_dilithium2_refpolyeta_pack
     /tmp/ccj37arC.s:2089   .text.pqcrystals_dilithium2_refpolyeta_unpack:0000000000000000 $t
     /tmp/ccj37arC.s:2096   .text.pqcrystals_dilithium2_refpolyeta_unpack:0000000000000000 pqcrystals_dilithium2_refpolyeta_unpack
     /tmp/ccj37arC.s:2502   .text.pqcrystals_dilithium2_refpolyt1_pack:0000000000000000 $t
     /tmp/ccj37arC.s:2509   .text.pqcrystals_dilithium2_refpolyt1_pack:0000000000000000 pqcrystals_dilithium2_refpolyt1_pack
     /tmp/ccj37arC.s:2716   .text.pqcrystals_dilithium2_refpolyt1_unpack:0000000000000000 $t
     /tmp/ccj37arC.s:2723   .text.pqcrystals_dilithium2_refpolyt1_unpack:0000000000000000 pqcrystals_dilithium2_refpolyt1_unpack
     /tmp/ccj37arC.s:2931   .text.pqcrystals_dilithium2_refpolyt0_pack:0000000000000000 $t
     /tmp/ccj37arC.s:2938   .text.pqcrystals_dilithium2_refpolyt0_pack:0000000000000000 pqcrystals_dilithium2_refpolyt0_pack
     /tmp/ccj37arC.s:3526   .text.pqcrystals_dilithium2_refpolyt0_unpack:0000000000000000 $t
     /tmp/ccj37arC.s:3533   .text.pqcrystals_dilithium2_refpolyt0_unpack:0000000000000000 pqcrystals_dilithium2_refpolyt0_unpack
     /tmp/ccj37arC.s:4332   .text.pqcrystals_dilithium2_refpolyz_pack:0000000000000000 $t
     /tmp/ccj37arC.s:4339   .text.pqcrystals_dilithium2_refpolyz_pack:0000000000000000 pqcrystals_dilithium2_refpolyz_pack
     /tmp/ccj37arC.s:4657   .text.pqcrystals_dilithium2_refpolyz_unpack:0000000000000000 $t
     /tmp/ccj37arC.s:5113   .text.pqcrystals_dilithium2_refpolyw1_pack:0000000000000000 $t
     /tmp/ccj37arC.s:5120   .text.pqcrystals_dilithium2_refpolyw1_pack:0000000000000000 pqcrystals_dilithium2_refpolyw1_pack

UNDEFINED SYMBOLS
pqcrystals_dilithium2_refreduce32
pqcrystals_dilithium2_refcaddq
pqcrystals_dilithium2_ref_ntt
pqcrystals_dilithium2_ref_invntt_tomont
pqcrystals_dilithium2_refmontgomery_reduce
pqcrystals_dilithium2_refpower2round
pqcrystals_dilithium2_refdecompose
pqcrystals_dilithium2_refmake_hint
pqcrystals_dilithium2_refuse_hint
pqcrystals_dilithium2_refdilithium_shake128_stream_init
pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks
pqcrystals_dilithium2_refdilithium_shake256_stream_init
pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks
pqcrystals_dilithium_fips202_ref_shake256_init
pqcrystals_dilithium_fips202_ref_shake256_absorb
pqcrystals_dilithium_fips202_ref_shake256_finalize
