   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"sign.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	global_y
  16              		.bss
  17              		.align	2
  20              	global_y:
  21 0000 00000000 		.space	4096
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.section	.text.pqcrystals_dilithium2_refkeypair,"ax",%progbits
  23              		.align	1
  24              		.global	pqcrystals_dilithium2_refkeypair
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu softvfp
  31              	pqcrystals_dilithium2_refkeypair:
  32              	.LFB0:
  33              		.file 1 "sign.c"
   1:sign.c        **** #include <stdint.h>
   2:sign.c        **** #include <string.h>
   3:sign.c        **** #include "params.h"
   4:sign.c        **** #include "sign.h"
   5:sign.c        **** #include "packing.h"
   6:sign.c        **** #include "polyvec.h"
   7:sign.c        **** #include "poly.h"
   8:sign.c        **** #include "randombytes.h"
   9:sign.c        **** #include "symmetric.h"
  10:sign.c        **** #include "fips202.h"
  11:sign.c        **** 
  12:sign.c        **** /*************************************************
  13:sign.c        **** * Name:        crypto_sign_keypair
  14:sign.c        **** *
  15:sign.c        **** * Description: Generates public and private key.
  16:sign.c        **** *
  17:sign.c        **** * Arguments:   - uint8_t *pk: pointer to output public key (allocated
  18:sign.c        **** *                             array of CRYPTO_PUBLICKEYBYTES bytes)
  19:sign.c        **** *              - uint8_t *sk: pointer to output private key (allocated
  20:sign.c        **** *                             array of CRYPTO_SECRETKEYBYTES bytes)
  21:sign.c        **** *
  22:sign.c        **** * Returns 0 (success)
  23:sign.c        **** **************************************************/
  24:sign.c        **** polyvecl global_y;
  25:sign.c        **** int crypto_sign_keypair(uint8_t *pk, uint8_t *sk, uint8_t* SEED) {
  34              		.loc 1 25 66
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 37056
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 ADF5104D 		sub	sp, sp, #36864
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 36872
  46 0006 B4B0     		sub	sp, sp, #208
  47              	.LCFI2:
  48              		.cfi_def_cfa_offset 37080
  49 0008 04AF     		add	r7, sp, #16
  50              	.LCFI3:
  51              		.cfi_def_cfa 7, 37064
  52 000a 07F1C003 		add	r3, r7, #192
  53 000e 43F8B40C 		str	r0, [r3, #-180]
  54 0012 07F1C003 		add	r3, r7, #192
  55 0016 43F8B81C 		str	r1, [r3, #-184]
  56 001a 07F1C003 		add	r3, r7, #192
  57 001e 43F8BC2C 		str	r2, [r3, #-188]
  26:sign.c        ****   uint8_t seedbuf[2*SEEDBYTES + CRHBYTES];
  27:sign.c        ****   uint8_t tr[SEEDBYTES];
  28:sign.c        ****   const uint8_t *rho, *rhoprime, *key;
  29:sign.c        ****   polyvecl mat[K];
  30:sign.c        ****   polyvecl s1, s1hat;
  31:sign.c        ****   polyveck s2, t1, t0;
  32:sign.c        **** 
  33:sign.c        ****   /* Get randomness for rho, rhoprime and key */
  34:sign.c        ****   //randombytes(seedbuf, SEEDBYTES);
  35:sign.c        ****   memcpy(seedbuf,SEED, SEEDBYTES);
  58              		.loc 1 35 3
  59 0022 07F1C003 		add	r3, r7, #192
  60 0026 1946     		mov	r1, r3
  61 0028 07F51043 		add	r3, r7, #36864
  62 002c 03F13403 		add	r3, r3, #52
  63 0030 2022     		movs	r2, #32
  64 0032 51F8BC1C 		ldr	r1, [r1, #-188]
  65 0036 1846     		mov	r0, r3
  66 0038 FFF7FEFF 		bl	memcpy
  36:sign.c        ****   shake256(seedbuf, 2*SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
  67              		.loc 1 36 3
  68 003c 07F51042 		add	r2, r7, #36864
  69 0040 02F13402 		add	r2, r2, #52
  70 0044 07F51040 		add	r0, r7, #36864
  71 0048 00F13400 		add	r0, r0, #52
  72 004c 2023     		movs	r3, #32
  73 004e 8021     		movs	r1, #128
  74 0050 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256
  37:sign.c        ****   rho = seedbuf;
  75              		.loc 1 37 7
  76 0054 07F51043 		add	r3, r7, #36864
  77 0058 03F13403 		add	r3, r3, #52
  78 005c 07F51042 		add	r2, r7, #36864
  79 0060 02F1BC02 		add	r2, r2, #188
  80 0064 1360     		str	r3, [r2]
  38:sign.c        ****   rhoprime = rho + SEEDBYTES;
  81              		.loc 1 38 12
  82 0066 07F51043 		add	r3, r7, #36864
  83 006a 03F1BC03 		add	r3, r3, #188
  84 006e 1B68     		ldr	r3, [r3]
  85 0070 2033     		adds	r3, r3, #32
  86 0072 07F51042 		add	r2, r7, #36864
  87 0076 02F1B802 		add	r2, r2, #184
  88 007a 1360     		str	r3, [r2]
  39:sign.c        ****   key = rhoprime + CRHBYTES;
  89              		.loc 1 39 7
  90 007c 07F51043 		add	r3, r7, #36864
  91 0080 03F1B803 		add	r3, r3, #184
  92 0084 1B68     		ldr	r3, [r3]
  93 0086 4033     		adds	r3, r3, #64
  94 0088 07F51042 		add	r2, r7, #36864
  95 008c 02F1B402 		add	r2, r2, #180
  96 0090 1360     		str	r3, [r2]
  40:sign.c        **** 
  41:sign.c        ****   /* Expand matrix */
  42:sign.c        ****   polyvec_matrix_expand(mat, rho);
  97              		.loc 1 42 3
  98 0092 07F5A043 		add	r3, r7, #20480
  99 0096 03F14003 		add	r3, r3, #64
 100 009a 2C3B     		subs	r3, r3, #44
 101 009c 07F51042 		add	r2, r7, #36864
 102 00a0 02F1BC02 		add	r2, r2, #188
 103 00a4 1168     		ldr	r1, [r2]
 104 00a6 1846     		mov	r0, r3
 105 00a8 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvec_matrix_expand
  43:sign.c        **** 
  44:sign.c        ****   /* Sample short vectors s1 and s2 */
  45:sign.c        ****   polyvecl_uniform_eta(&s1, rhoprime, 0);
 106              		.loc 1 45 3
 107 00ac 07F58043 		add	r3, r7, #16384
 108 00b0 03F14003 		add	r3, r3, #64
 109 00b4 2C3B     		subs	r3, r3, #44
 110 00b6 0022     		movs	r2, #0
 111 00b8 07F51041 		add	r1, r7, #36864
 112 00bc 01F1B801 		add	r1, r1, #184
 113 00c0 0968     		ldr	r1, [r1]
 114 00c2 1846     		mov	r0, r3
 115 00c4 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_uniform_eta
  46:sign.c        ****   polyveck_uniform_eta(&s2, rhoprime, L);
 116              		.loc 1 46 3
 117 00c8 07F50153 		add	r3, r7, #8256
 118 00cc 2C3B     		subs	r3, r3, #44
 119 00ce 0422     		movs	r2, #4
 120 00d0 07F51041 		add	r1, r7, #36864
 121 00d4 01F1B801 		add	r1, r1, #184
 122 00d8 0968     		ldr	r1, [r1]
 123 00da 1846     		mov	r0, r3
 124 00dc FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_uniform_eta
  47:sign.c        **** 
  48:sign.c        ****   /* Matrix-vector multiplication */
  49:sign.c        ****   s1hat = s1;
 125              		.loc 1 49 9
 126 00e0 07F54353 		add	r3, r7, #12480
 127 00e4 07F58142 		add	r2, r7, #16512
 128 00e8 02F14002 		add	r2, r2, #64
 129 00ec AC3B     		subs	r3, r3, #172
 130 00ee A2F1AC01 		sub	r1, r2, #172
 131 00f2 4FF48052 		mov	r2, #4096
 132 00f6 1846     		mov	r0, r3
 133 00f8 FFF7FEFF 		bl	memcpy
  50:sign.c        ****   polyvecl_ntt(&s1hat);
 134              		.loc 1 50 3
 135 00fc 07F54153 		add	r3, r7, #12352
 136 0100 2C3B     		subs	r3, r3, #44
 137 0102 1846     		mov	r0, r3
 138 0104 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_ntt
  51:sign.c        ****   polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
 139              		.loc 1 51 3
 140 0108 07F54152 		add	r2, r7, #12352
 141 010c 2C3A     		subs	r2, r2, #44
 142 010e 07F5A041 		add	r1, r7, #20480
 143 0112 01F14001 		add	r1, r1, #64
 144 0116 2C39     		subs	r1, r1, #44
 145 0118 07F58653 		add	r3, r7, #4288
 146 011c AC3B     		subs	r3, r3, #172
 147 011e 1846     		mov	r0, r3
 148 0120 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvec_matrix_pointwise_montgomery
  52:sign.c        ****   polyveck_reduce(&t1);
 149              		.loc 1 52 3
 150 0124 07F58653 		add	r3, r7, #4288
 151 0128 AC3B     		subs	r3, r3, #172
 152 012a 1846     		mov	r0, r3
 153 012c FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_reduce
  53:sign.c        ****   polyveck_invntt_tomont(&t1);
 154              		.loc 1 53 3
 155 0130 07F58653 		add	r3, r7, #4288
 156 0134 AC3B     		subs	r3, r3, #172
 157 0136 1846     		mov	r0, r3
 158 0138 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_invntt_tomont
  54:sign.c        **** 
  55:sign.c        ****   /* Add error vector s2 */
  56:sign.c        ****   polyveck_add(&t1, &t1, &s2);
 159              		.loc 1 56 3
 160 013c 07F50152 		add	r2, r7, #8256
 161 0140 2C3A     		subs	r2, r2, #44
 162 0142 07F58651 		add	r1, r7, #4288
 163 0146 AC39     		subs	r1, r1, #172
 164 0148 07F58653 		add	r3, r7, #4288
 165 014c AC3B     		subs	r3, r3, #172
 166 014e 1846     		mov	r0, r3
 167 0150 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_add
  57:sign.c        **** 
  58:sign.c        ****   /* Extract t1 and write public key */
  59:sign.c        ****   polyveck_caddq(&t1);
 168              		.loc 1 59 3
 169 0154 07F58653 		add	r3, r7, #4288
 170 0158 AC3B     		subs	r3, r3, #172
 171 015a 1846     		mov	r0, r3
 172 015c FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_caddq
  60:sign.c        ****   polyveck_power2round(&t1, &t0, &t1);
 173              		.loc 1 60 3
 174 0160 07F58652 		add	r2, r7, #4288
 175 0164 AC3A     		subs	r2, r2, #172
 176 0166 07F1C001 		add	r1, r7, #192
 177 016a AC39     		subs	r1, r1, #172
 178 016c 07F58653 		add	r3, r7, #4288
 179 0170 AC3B     		subs	r3, r3, #172
 180 0172 1846     		mov	r0, r3
 181 0174 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_power2round
  61:sign.c        ****   pack_pk(pk, rho, &t1);
 182              		.loc 1 61 3
 183 0178 07F58653 		add	r3, r7, #4288
 184 017c AC3B     		subs	r3, r3, #172
 185 017e 07F1C002 		add	r2, r7, #192
 186 0182 1046     		mov	r0, r2
 187 0184 1A46     		mov	r2, r3
 188 0186 07F51043 		add	r3, r7, #36864
 189 018a 03F1BC03 		add	r3, r3, #188
 190 018e 1968     		ldr	r1, [r3]
 191 0190 50F8B40C 		ldr	r0, [r0, #-180]
 192 0194 FFF7FEFF 		bl	pqcrystals_dilithium2_refpack_pk
  62:sign.c        **** 
  63:sign.c        ****   /* Compute H(rho, t1) and write secret key */
  64:sign.c        ****   shake256(tr, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 193              		.loc 1 64 3
 194 0198 07F1C003 		add	r3, r7, #192
 195 019c 1A46     		mov	r2, r3
 196 019e 07F51040 		add	r0, r7, #36864
 197 01a2 00F11400 		add	r0, r0, #20
 198 01a6 4FF4A463 		mov	r3, #1312
 199 01aa 52F8B42C 		ldr	r2, [r2, #-180]
 200 01ae 2021     		movs	r1, #32
 201 01b0 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256
  65:sign.c        ****   pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
 202              		.loc 1 65 3
 203 01b4 07F51042 		add	r2, r7, #36864
 204 01b8 02F11402 		add	r2, r2, #20
 205 01bc 07F1C003 		add	r3, r7, #192
 206 01c0 1846     		mov	r0, r3
 207 01c2 07F50153 		add	r3, r7, #8256
 208 01c6 2C3B     		subs	r3, r3, #44
 209 01c8 0293     		str	r3, [sp, #8]
 210 01ca 07F58043 		add	r3, r7, #16384
 211 01ce 03F14003 		add	r3, r3, #64
 212 01d2 2C3B     		subs	r3, r3, #44
 213 01d4 0193     		str	r3, [sp, #4]
 214 01d6 07F1C003 		add	r3, r7, #192
 215 01da AC3B     		subs	r3, r3, #172
 216 01dc 0093     		str	r3, [sp]
 217 01de 07F51043 		add	r3, r7, #36864
 218 01e2 03F1B403 		add	r3, r3, #180
 219 01e6 1B68     		ldr	r3, [r3]
 220 01e8 07F51041 		add	r1, r7, #36864
 221 01ec 01F1BC01 		add	r1, r1, #188
 222 01f0 0968     		ldr	r1, [r1]
 223 01f2 50F8B80C 		ldr	r0, [r0, #-184]
 224 01f6 FFF7FEFF 		bl	pqcrystals_dilithium2_refpack_sk
  66:sign.c        **** 
  67:sign.c        ****   return 0;
 225              		.loc 1 67 10
 226 01fa 0023     		movs	r3, #0
  68:sign.c        **** }
 227              		.loc 1 68 1
 228 01fc 1846     		mov	r0, r3
 229 01fe 07F51047 		add	r7, r7, #36864
 230 0202 C037     		adds	r7, r7, #192
 231              	.LCFI4:
 232              		.cfi_def_cfa_offset 8
 233 0204 BD46     		mov	sp, r7
 234              	.LCFI5:
 235              		.cfi_def_cfa_register 13
 236              		@ sp needed
 237 0206 80BD     		pop	{r7, pc}
 238              		.cfi_endproc
 239              	.LFE0:
 241              		.section	.text.pqcrystals_dilithium2_refsignature,"ax",%progbits
 242              		.align	1
 243              		.global	pqcrystals_dilithium2_refsignature
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu softvfp
 249              	pqcrystals_dilithium2_refsignature:
 250              	.LFB1:
  69:sign.c        **** 
  70:sign.c        **** /*************************************************
  71:sign.c        **** * Name:        crypto_sign_signature
  72:sign.c        **** *
  73:sign.c        **** * Description: Computes signature.
  74:sign.c        **** *
  75:sign.c        **** * Arguments:   - uint8_t *sig:   pointer to output signature (of length CRYPTO_BYTES)
  76:sign.c        **** *              - size_t *siglen: pointer to output length of signature
  77:sign.c        **** *              - uint8_t *m:     pointer to message to be signed
  78:sign.c        **** *              - size_t mlen:    length of message
  79:sign.c        **** *              - uint8_t *sk:    pointer to bit-packed secret key
  80:sign.c        **** *
  81:sign.c        **** * Returns 0 (success)
  82:sign.c        **** **************************************************/
  83:sign.c        **** int crypto_sign_signature(uint8_t *sig,
  84:sign.c        ****                           size_t *siglen,
  85:sign.c        ****                           const uint8_t *m,
  86:sign.c        ****                           size_t mlen,
  87:sign.c        ****                           const uint8_t *sk)
  88:sign.c        **** {
 251              		.loc 1 88 1
 252              		.cfi_startproc
 253              		@ args = 4, pretend = 0, frame = 50656
 254              		@ frame_needed = 1, uses_anonymous_args = 0
 255 0000 90B5     		push	{r4, r7, lr}
 256              	.LCFI6:
 257              		.cfi_def_cfa_offset 12
 258              		.cfi_offset 4, -12
 259              		.cfi_offset 7, -8
 260              		.cfi_offset 14, -4
 261 0002 ADF5454D 		sub	sp, sp, #50432
 262              	.LCFI7:
 263              		.cfi_def_cfa_offset 50444
 264 0006 BDB0     		sub	sp, sp, #244
 265              	.LCFI8:
 266              		.cfi_def_cfa_offset 50688
 267 0008 04AF     		add	r7, sp, #16
 268              	.LCFI9:
 269              		.cfi_def_cfa 7, 50672
 270 000a 07F5BC64 		add	r4, r7, #1504
 271 000e A4F2D454 		subw	r4, r4, #1492
 272 0012 2060     		str	r0, [r4]
 273 0014 07F5BC60 		add	r0, r7, #1504
 274 0018 A0F5BB60 		sub	r0, r0, #1496
 275 001c 0160     		str	r1, [r0]
 276 001e 07F5BC61 		add	r1, r7, #1504
 277 0022 A1F2DC51 		subw	r1, r1, #1500
 278 0026 0A60     		str	r2, [r1]
 279 0028 07F5BC62 		add	r2, r7, #1504
 280 002c A2F5BC62 		sub	r2, r2, #1504
 281 0030 1360     		str	r3, [r2]
  89:sign.c        ****   unsigned int n;
  90:sign.c        ****   uint8_t seedbuf[3*SEEDBYTES + 2*CRHBYTES];
  91:sign.c        ****   uint8_t *rho, *tr, *key, *mu, *rhoprime;
  92:sign.c        ****   uint16_t nonce = 0;
 282              		.loc 1 92 12
 283 0032 0023     		movs	r3, #0
 284 0034 07F54542 		add	r2, r7, #50432
 285 0038 02F1DE02 		add	r2, r2, #222
 286 003c 1380     		strh	r3, [r2]	@ movhi
  93:sign.c        ****   polyvecl mat[K], s1, y, z;
  94:sign.c        ****   polyveck t0, s2, w1, w0, h;
  95:sign.c        ****   poly cp;
  96:sign.c        ****   keccak_state state;
  97:sign.c        **** 
  98:sign.c        ****   rho = seedbuf;
 287              		.loc 1 98 7
 288 003e 07F54443 		add	r3, r7, #50176
 289 0042 03F1E403 		add	r3, r3, #228
 290 0046 07F54542 		add	r2, r7, #50432
 291 004a 02F1D802 		add	r2, r2, #216
 292 004e 1360     		str	r3, [r2]
  99:sign.c        ****   tr = rho + SEEDBYTES;
 293              		.loc 1 99 6
 294 0050 07F54543 		add	r3, r7, #50432
 295 0054 03F1D803 		add	r3, r3, #216
 296 0058 1B68     		ldr	r3, [r3]
 297 005a 2033     		adds	r3, r3, #32
 298 005c 07F54542 		add	r2, r7, #50432
 299 0060 02F1D402 		add	r2, r2, #212
 300 0064 1360     		str	r3, [r2]
 100:sign.c        ****   key = tr + SEEDBYTES;
 301              		.loc 1 100 7
 302 0066 07F54543 		add	r3, r7, #50432
 303 006a 03F1D403 		add	r3, r3, #212
 304 006e 1B68     		ldr	r3, [r3]
 305 0070 2033     		adds	r3, r3, #32
 306 0072 07F54542 		add	r2, r7, #50432
 307 0076 02F1D002 		add	r2, r2, #208
 308 007a 1360     		str	r3, [r2]
 101:sign.c        ****   mu = key + SEEDBYTES;
 309              		.loc 1 101 6
 310 007c 07F54543 		add	r3, r7, #50432
 311 0080 03F1D003 		add	r3, r3, #208
 312 0084 1B68     		ldr	r3, [r3]
 313 0086 2033     		adds	r3, r3, #32
 314 0088 07F54542 		add	r2, r7, #50432
 315 008c 02F1CC02 		add	r2, r2, #204
 316 0090 1360     		str	r3, [r2]
 102:sign.c        ****   rhoprime = mu + CRHBYTES;
 317              		.loc 1 102 12
 318 0092 07F54543 		add	r3, r7, #50432
 319 0096 03F1CC03 		add	r3, r3, #204
 320 009a 1B68     		ldr	r3, [r3]
 321 009c 4033     		adds	r3, r3, #64
 322 009e 07F54542 		add	r2, r7, #50432
 323 00a2 02F1C802 		add	r2, r2, #200
 324 00a6 1360     		str	r3, [r2]
 103:sign.c        ****   unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 325              		.loc 1 103 3
 326 00a8 07F58B42 		add	r2, r7, #17792
 327 00ac 02F16002 		add	r2, r2, #96
 328 00b0 FC3A     		subs	r2, r2, #252
 329 00b2 07F54543 		add	r3, r7, #50432
 330 00b6 03F1F003 		add	r3, r3, #240
 331 00ba 1B68     		ldr	r3, [r3]
 332 00bc 0293     		str	r3, [sp, #8]
 333 00be 07F55753 		add	r3, r7, #13760
 334 00c2 03F12003 		add	r3, r3, #32
 335 00c6 FC3B     		subs	r3, r3, #252
 336 00c8 0193     		str	r3, [sp, #4]
 337 00ca 07F5EA43 		add	r3, r7, #29952
 338 00ce 03F16003 		add	r3, r3, #96
 339 00d2 7C3B     		subs	r3, r3, #124
 340 00d4 0093     		str	r3, [sp]
 341 00d6 1346     		mov	r3, r2
 342 00d8 07F54542 		add	r2, r7, #50432
 343 00dc 02F1D002 		add	r2, r2, #208
 344 00e0 1268     		ldr	r2, [r2]
 345 00e2 07F54541 		add	r1, r7, #50432
 346 00e6 01F1D401 		add	r1, r1, #212
 347 00ea 0968     		ldr	r1, [r1]
 348 00ec 07F54540 		add	r0, r7, #50432
 349 00f0 00F1D800 		add	r0, r0, #216
 350 00f4 0068     		ldr	r0, [r0]
 351 00f6 FFF7FEFF 		bl	pqcrystals_dilithium2_refunpack_sk
 104:sign.c        **** 
 105:sign.c        ****   /* Compute CRH(tr, msg) */
 106:sign.c        ****   shake256_init(&state);
 352              		.loc 1 106 3
 353 00fa 07F1E003 		add	r3, r7, #224
 354 00fe D03B     		subs	r3, r3, #208
 355 0100 1846     		mov	r0, r3
 356 0102 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_init
 107:sign.c        ****   shake256_absorb(&state, tr, SEEDBYTES);
 357              		.loc 1 107 3
 358 0106 07F1E003 		add	r3, r7, #224
 359 010a D03B     		subs	r3, r3, #208
 360 010c 2022     		movs	r2, #32
 361 010e 07F54541 		add	r1, r7, #50432
 362 0112 01F1D401 		add	r1, r1, #212
 363 0116 0968     		ldr	r1, [r1]
 364 0118 1846     		mov	r0, r3
 365 011a FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_absorb
 108:sign.c        ****   shake256_absorb(&state, m, mlen);
 366              		.loc 1 108 3
 367 011e 07F5BC63 		add	r3, r7, #1504
 368 0122 A3F5BC62 		sub	r2, r3, #1504
 369 0126 07F5BC63 		add	r3, r7, #1504
 370 012a A3F2DC51 		subw	r1, r3, #1500
 371 012e 07F1E003 		add	r3, r7, #224
 372 0132 D03B     		subs	r3, r3, #208
 373 0134 1268     		ldr	r2, [r2]
 374 0136 0968     		ldr	r1, [r1]
 375 0138 1846     		mov	r0, r3
 376 013a FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_absorb
 109:sign.c        ****   shake256_finalize(&state);
 377              		.loc 1 109 3
 378 013e 07F1E003 		add	r3, r7, #224
 379 0142 D03B     		subs	r3, r3, #208
 380 0144 1846     		mov	r0, r3
 381 0146 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_finalize
 110:sign.c        ****   shake256_squeeze(mu, CRHBYTES, &state);
 382              		.loc 1 110 3
 383 014a 07F1E003 		add	r3, r7, #224
 384 014e D03B     		subs	r3, r3, #208
 385 0150 1A46     		mov	r2, r3
 386 0152 4021     		movs	r1, #64
 387 0154 07F54543 		add	r3, r7, #50432
 388 0158 03F1CC03 		add	r3, r3, #204
 389 015c 1868     		ldr	r0, [r3]
 390 015e FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_squeeze
 111:sign.c        **** 
 112:sign.c        **** #ifdef DILITHIUM_RANDOMIZED_SIGNING
 113:sign.c        ****   randombytes(rhoprime, CRHBYTES);
 114:sign.c        **** #else
 115:sign.c        ****   shake256(rhoprime, CRHBYTES, key, SEEDBYTES + CRHBYTES);
 391              		.loc 1 115 3
 392 0162 6023     		movs	r3, #96
 393 0164 07F54542 		add	r2, r7, #50432
 394 0168 02F1D002 		add	r2, r2, #208
 395 016c 1268     		ldr	r2, [r2]
 396 016e 4021     		movs	r1, #64
 397 0170 07F54540 		add	r0, r7, #50432
 398 0174 00F1C800 		add	r0, r0, #200
 399 0178 0068     		ldr	r0, [r0]
 400 017a FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256
 116:sign.c        **** #endif
 117:sign.c        **** 
 118:sign.c        ****   /* Expand matrix and transform vectors */
 119:sign.c        ****   polyvec_matrix_expand(mat, rho);
 401              		.loc 1 119 3
 402 017e 07F50543 		add	r3, r7, #34048
 403 0182 03F16003 		add	r3, r3, #96
 404 0186 7C3B     		subs	r3, r3, #124
 405 0188 07F54542 		add	r2, r7, #50432
 406 018c 02F1D802 		add	r2, r2, #216
 407 0190 1168     		ldr	r1, [r2]
 408 0192 1846     		mov	r0, r3
 409 0194 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvec_matrix_expand
 120:sign.c        ****   polyvecl_ntt(&s1);
 410              		.loc 1 120 3
 411 0198 07F5EA43 		add	r3, r7, #29952
 412 019c 03F16003 		add	r3, r3, #96
 413 01a0 7C3B     		subs	r3, r3, #124
 414 01a2 1846     		mov	r0, r3
 415 01a4 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_ntt
 121:sign.c        ****   polyveck_ntt(&s2);
 416              		.loc 1 121 3
 417 01a8 07F55753 		add	r3, r7, #13760
 418 01ac 03F12003 		add	r3, r3, #32
 419 01b0 FC3B     		subs	r3, r3, #252
 420 01b2 1846     		mov	r0, r3
 421 01b4 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_ntt
 122:sign.c        ****   polyveck_ntt(&t0);
 422              		.loc 1 122 3
 423 01b8 07F58B43 		add	r3, r7, #17792
 424 01bc 03F16003 		add	r3, r3, #96
 425 01c0 FC3B     		subs	r3, r3, #252
 426 01c2 1846     		mov	r0, r3
 427 01c4 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_ntt
 428              	.L4:
 123:sign.c        **** 
 124:sign.c        **** rej:
 125:sign.c        ****   /* Sample intermediate vector y */
 126:sign.c        ****   polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
 429              		.loc 1 126 3
 430 01c8 07F54543 		add	r3, r7, #50432
 431 01cc 03F1DE03 		add	r3, r3, #222
 432 01d0 1A88     		ldrh	r2, [r3]
 433 01d2 531C     		adds	r3, r2, #1
 434 01d4 07F54541 		add	r1, r7, #50432
 435 01d8 01F1DE01 		add	r1, r1, #222
 436 01dc 0B80     		strh	r3, [r1]	@ movhi
 437 01de 07F5CA43 		add	r3, r7, #25856
 438 01e2 03F16003 		add	r3, r3, #96
 439 01e6 7C3B     		subs	r3, r3, #124
 440 01e8 07F54541 		add	r1, r7, #50432
 441 01ec 01F1C801 		add	r1, r1, #200
 442 01f0 0968     		ldr	r1, [r1]
 443 01f2 1846     		mov	r0, r3
 444 01f4 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_uniform_gamma1
 127:sign.c        ****   polyvecl_uniform_gamma1(&global_y, rhoprime, nonce);
 445              		.loc 1 127 3
 446 01f8 07F54543 		add	r3, r7, #50432
 447 01fc 03F1DE03 		add	r3, r3, #222
 448 0200 1B88     		ldrh	r3, [r3]
 449 0202 1A46     		mov	r2, r3
 450 0204 07F54543 		add	r3, r7, #50432
 451 0208 03F1C803 		add	r3, r3, #200
 452 020c 1968     		ldr	r1, [r3]
 453 020e CA48     		ldr	r0, .L10
 454 0210 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_uniform_gamma1
 128:sign.c        ****   global_y = y;
 455              		.loc 1 128 12
 456 0214 C84A     		ldr	r2, .L10
 457 0216 07F5CB43 		add	r3, r7, #25984
 458 021a 03F16003 		add	r3, r3, #96
 459 021e 1046     		mov	r0, r2
 460 0220 FC3B     		subs	r3, r3, #252
 461 0222 4FF48052 		mov	r2, #4096
 462 0226 1946     		mov	r1, r3
 463 0228 FFF7FEFF 		bl	memcpy
 129:sign.c        **** 
 130:sign.c        ****   /* Matrix-vector multiplication */
 131:sign.c        ****   z = y;
 464              		.loc 1 131 5
 465 022c 07F5AB43 		add	r3, r7, #21888
 466 0230 03F16003 		add	r3, r3, #96
 467 0234 07F5CB42 		add	r2, r7, #25984
 468 0238 02F16002 		add	r2, r2, #96
 469 023c FC3B     		subs	r3, r3, #252
 470 023e A2F1FC01 		sub	r1, r2, #252
 471 0242 4FF48052 		mov	r2, #4096
 472 0246 1846     		mov	r0, r3
 473 0248 FFF7FEFF 		bl	memcpy
 132:sign.c        ****   polyvecl_ntt(&z);
 474              		.loc 1 132 3
 475 024c 07F5AA43 		add	r3, r7, #21760
 476 0250 03F16003 		add	r3, r3, #96
 477 0254 7C3B     		subs	r3, r3, #124
 478 0256 1846     		mov	r0, r3
 479 0258 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_ntt
 133:sign.c        ****   polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 480              		.loc 1 133 3
 481 025c 07F5AA42 		add	r2, r7, #21760
 482 0260 02F16002 		add	r2, r2, #96
 483 0264 7C3A     		subs	r2, r2, #124
 484 0266 07F50541 		add	r1, r7, #34048
 485 026a 01F16001 		add	r1, r1, #96
 486 026e 7C39     		subs	r1, r1, #124
 487 0270 07F51753 		add	r3, r7, #9664
 488 0274 03F12003 		add	r3, r3, #32
 489 0278 FC3B     		subs	r3, r3, #252
 490 027a 1846     		mov	r0, r3
 491 027c FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvec_matrix_pointwise_montgomery
 134:sign.c        ****   polyveck_reduce(&w1);
 492              		.loc 1 134 3
 493 0280 07F51753 		add	r3, r7, #9664
 494 0284 03F12003 		add	r3, r3, #32
 495 0288 FC3B     		subs	r3, r3, #252
 496 028a 1846     		mov	r0, r3
 497 028c FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_reduce
 135:sign.c        ****   polyveck_invntt_tomont(&w1);
 498              		.loc 1 135 3
 499 0290 07F51753 		add	r3, r7, #9664
 500 0294 03F12003 		add	r3, r3, #32
 501 0298 FC3B     		subs	r3, r3, #252
 502 029a 1846     		mov	r0, r3
 503 029c FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_invntt_tomont
 136:sign.c        **** 
 137:sign.c        ****   /* Decompose w and call the random oracle */
 138:sign.c        ****   polyveck_caddq(&w1);
 504              		.loc 1 138 3
 505 02a0 07F51753 		add	r3, r7, #9664
 506 02a4 03F12003 		add	r3, r3, #32
 507 02a8 FC3B     		subs	r3, r3, #252
 508 02aa 1846     		mov	r0, r3
 509 02ac FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_caddq
 139:sign.c        ****   polyveck_decompose(&w1, &w0, &w1);
 510              		.loc 1 139 3
 511 02b0 07F51752 		add	r2, r7, #9664
 512 02b4 02F12002 		add	r2, r2, #32
 513 02b8 FC3A     		subs	r2, r2, #252
 514 02ba 07F5AF51 		add	r1, r7, #5600
 515 02be FC39     		subs	r1, r1, #252
 516 02c0 07F51753 		add	r3, r7, #9664
 517 02c4 03F12003 		add	r3, r3, #32
 518 02c8 FC3B     		subs	r3, r3, #252
 519 02ca 1846     		mov	r0, r3
 520 02cc FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_decompose
 140:sign.c        ****   polyveck_pack_w1(sig, &w1);
 521              		.loc 1 140 3
 522 02d0 07F51753 		add	r3, r7, #9664
 523 02d4 03F12003 		add	r3, r3, #32
 524 02d8 FC3B     		subs	r3, r3, #252
 525 02da 07F5BC62 		add	r2, r7, #1504
 526 02de A2F2D452 		subw	r2, r2, #1492
 527 02e2 1946     		mov	r1, r3
 528 02e4 1068     		ldr	r0, [r2]
 529 02e6 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_pack_w1
 141:sign.c        **** 
 142:sign.c        ****   shake256_init(&state);
 530              		.loc 1 142 3
 531 02ea 07F1E003 		add	r3, r7, #224
 532 02ee D03B     		subs	r3, r3, #208
 533 02f0 1846     		mov	r0, r3
 534 02f2 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_init
 143:sign.c        ****   shake256_absorb(&state, mu, CRHBYTES);
 535              		.loc 1 143 3
 536 02f6 07F1E003 		add	r3, r7, #224
 537 02fa D03B     		subs	r3, r3, #208
 538 02fc 4022     		movs	r2, #64
 539 02fe 07F54541 		add	r1, r7, #50432
 540 0302 01F1CC01 		add	r1, r1, #204
 541 0306 0968     		ldr	r1, [r1]
 542 0308 1846     		mov	r0, r3
 543 030a FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_absorb
 144:sign.c        ****   shake256_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 544              		.loc 1 144 3
 545 030e 07F5BC63 		add	r3, r7, #1504
 546 0312 A3F2D451 		subw	r1, r3, #1492
 547 0316 07F1E003 		add	r3, r7, #224
 548 031a D03B     		subs	r3, r3, #208
 549 031c 4FF44072 		mov	r2, #768
 550 0320 0968     		ldr	r1, [r1]
 551 0322 1846     		mov	r0, r3
 552 0324 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_absorb
 145:sign.c        ****   shake256_finalize(&state);
 553              		.loc 1 145 3
 554 0328 07F1E003 		add	r3, r7, #224
 555 032c D03B     		subs	r3, r3, #208
 556 032e 1846     		mov	r0, r3
 557 0330 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_finalize
 146:sign.c        ****   shake256_squeeze(sig, SEEDBYTES, &state);
 558              		.loc 1 146 3
 559 0334 07F1E003 		add	r3, r7, #224
 560 0338 D03B     		subs	r3, r3, #208
 561 033a 07F5BC62 		add	r2, r7, #1504
 562 033e A2F2D450 		subw	r0, r2, #1492
 563 0342 1A46     		mov	r2, r3
 564 0344 2021     		movs	r1, #32
 565 0346 0068     		ldr	r0, [r0]
 566 0348 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_squeeze
 147:sign.c        ****   poly_challenge(&cp, sig);
 567              		.loc 1 147 3
 568 034c 07F5BC63 		add	r3, r7, #1504
 569 0350 A3F2D452 		subw	r2, r3, #1492
 570 0354 07F5F073 		add	r3, r7, #480
 571 0358 FC3B     		subs	r3, r3, #252
 572 035a 1168     		ldr	r1, [r2]
 573 035c 1846     		mov	r0, r3
 574 035e FFF7FEFF 		bl	pqcrystals_dilithium2_refpoly_challenge
 148:sign.c        ****   poly_ntt(&cp);
 575              		.loc 1 148 3
 576 0362 07F5F073 		add	r3, r7, #480
 577 0366 FC3B     		subs	r3, r3, #252
 578 0368 1846     		mov	r0, r3
 579 036a FFF7FEFF 		bl	pqcrystals_dilithium2_refpoly_ntt
 149:sign.c        **** 
 150:sign.c        ****   /* Compute z, reject if it reveals secret */
 151:sign.c        ****   trigger_high();
 580              		.loc 1 151 3
 581 036e FFF7FEFF 		bl	trigger_high
 152:sign.c        ****   polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
 582              		.loc 1 152 3
 583 0372 07F5EA42 		add	r2, r7, #29952
 584 0376 02F16002 		add	r2, r2, #96
 585 037a 7C3A     		subs	r2, r2, #124
 586 037c 07F5F071 		add	r1, r7, #480
 587 0380 FC39     		subs	r1, r1, #252
 588 0382 07F5AA43 		add	r3, r7, #21760
 589 0386 03F16003 		add	r3, r3, #96
 590 038a 7C3B     		subs	r3, r3, #124
 591 038c 1846     		mov	r0, r3
 592 038e FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_pointwise_poly_montgomery
 153:sign.c        ****   trigger_low();
 593              		.loc 1 153 3
 594 0392 FFF7FEFF 		bl	trigger_low
 154:sign.c        ****   polyvecl_invntt_tomont(&z);
 595              		.loc 1 154 3
 596 0396 07F5AA43 		add	r3, r7, #21760
 597 039a 03F16003 		add	r3, r3, #96
 598 039e 7C3B     		subs	r3, r3, #124
 599 03a0 1846     		mov	r0, r3
 600 03a2 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_invntt_tomont
 155:sign.c        ****   polyvecl_add(&z, &z, &y);
 601              		.loc 1 155 3
 602 03a6 07F5CA42 		add	r2, r7, #25856
 603 03aa 02F16002 		add	r2, r2, #96
 604 03ae 7C3A     		subs	r2, r2, #124
 605 03b0 07F5AA41 		add	r1, r7, #21760
 606 03b4 01F16001 		add	r1, r1, #96
 607 03b8 7C39     		subs	r1, r1, #124
 608 03ba 07F5AA43 		add	r3, r7, #21760
 609 03be 03F16003 		add	r3, r3, #96
 610 03c2 7C3B     		subs	r3, r3, #124
 611 03c4 1846     		mov	r0, r3
 612 03c6 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_add
 156:sign.c        ****   polyvecl_reduce(&z);
 613              		.loc 1 156 3
 614 03ca 07F5AA43 		add	r3, r7, #21760
 615 03ce 03F16003 		add	r3, r3, #96
 616 03d2 7C3B     		subs	r3, r3, #124
 617 03d4 1846     		mov	r0, r3
 618 03d6 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_reduce
 157:sign.c        ****   if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 619              		.loc 1 157 6
 620 03da 07F5AA43 		add	r3, r7, #21760
 621 03de 03F16003 		add	r3, r3, #96
 622 03e2 7C3B     		subs	r3, r3, #124
 623 03e4 5549     		ldr	r1, .L10+4
 624 03e6 1846     		mov	r0, r3
 625 03e8 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_chknorm
 626 03ec 0346     		mov	r3, r0
 627              		.loc 1 157 5
 628 03ee 002B     		cmp	r3, #0
 629 03f0 00D0     		beq	.L5
 158:sign.c        ****     goto rej;
 630              		.loc 1 158 5
 631 03f2 E9E6     		b	.L4
 632              	.L5:
 159:sign.c        **** 
 160:sign.c        ****   /* Check that subtracting cs2 does not change high bits of w and low bits
 161:sign.c        ****    * do not reveal secret information */
 162:sign.c        ****   polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
 633              		.loc 1 162 3
 634 03f4 07F55752 		add	r2, r7, #13760
 635 03f8 02F12002 		add	r2, r2, #32
 636 03fc FC3A     		subs	r2, r2, #252
 637 03fe 07F5F071 		add	r1, r7, #480
 638 0402 FC39     		subs	r1, r1, #252
 639 0404 07F5BC63 		add	r3, r7, #1504
 640 0408 FC3B     		subs	r3, r3, #252
 641 040a 1846     		mov	r0, r3
 642 040c FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_pointwise_poly_montgomery
 163:sign.c        ****   polyveck_invntt_tomont(&h);
 643              		.loc 1 163 3
 644 0410 07F5BC63 		add	r3, r7, #1504
 645 0414 FC3B     		subs	r3, r3, #252
 646 0416 1846     		mov	r0, r3
 647 0418 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_invntt_tomont
 164:sign.c        ****   polyveck_sub(&w0, &w0, &h);
 648              		.loc 1 164 3
 649 041c 07F5BC62 		add	r2, r7, #1504
 650 0420 FC3A     		subs	r2, r2, #252
 651 0422 07F5AF51 		add	r1, r7, #5600
 652 0426 FC39     		subs	r1, r1, #252
 653 0428 07F5AF53 		add	r3, r7, #5600
 654 042c FC3B     		subs	r3, r3, #252
 655 042e 1846     		mov	r0, r3
 656 0430 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_sub
 165:sign.c        ****   polyveck_reduce(&w0);
 657              		.loc 1 165 3
 658 0434 07F5AF53 		add	r3, r7, #5600
 659 0438 FC3B     		subs	r3, r3, #252
 660 043a 1846     		mov	r0, r3
 661 043c FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_reduce
 166:sign.c        ****   if(polyveck_chknorm(&w0, GAMMA2 - BETA))
 662              		.loc 1 166 6
 663 0440 07F5AF53 		add	r3, r7, #5600
 664 0444 FC3B     		subs	r3, r3, #252
 665 0446 3E49     		ldr	r1, .L10+8
 666 0448 1846     		mov	r0, r3
 667 044a FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_chknorm
 668 044e 0346     		mov	r3, r0
 669              		.loc 1 166 5
 670 0450 002B     		cmp	r3, #0
 671 0452 00D0     		beq	.L6
 167:sign.c        ****     goto rej;
 672              		.loc 1 167 5
 673 0454 B8E6     		b	.L4
 674              	.L6:
 168:sign.c        **** 
 169:sign.c        ****   /* Compute hints for w1 */
 170:sign.c        ****   polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 675              		.loc 1 170 3
 676 0456 07F58B42 		add	r2, r7, #17792
 677 045a 02F16002 		add	r2, r2, #96
 678 045e FC3A     		subs	r2, r2, #252
 679 0460 07F5F071 		add	r1, r7, #480
 680 0464 FC39     		subs	r1, r1, #252
 681 0466 07F5BC63 		add	r3, r7, #1504
 682 046a FC3B     		subs	r3, r3, #252
 683 046c 1846     		mov	r0, r3
 684 046e FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_pointwise_poly_montgomery
 171:sign.c        ****   polyveck_invntt_tomont(&h);
 685              		.loc 1 171 3
 686 0472 07F5BC63 		add	r3, r7, #1504
 687 0476 FC3B     		subs	r3, r3, #252
 688 0478 1846     		mov	r0, r3
 689 047a FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_invntt_tomont
 172:sign.c        ****   polyveck_reduce(&h);
 690              		.loc 1 172 3
 691 047e 07F5BC63 		add	r3, r7, #1504
 692 0482 FC3B     		subs	r3, r3, #252
 693 0484 1846     		mov	r0, r3
 694 0486 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_reduce
 173:sign.c        ****   if(polyveck_chknorm(&h, GAMMA2))
 695              		.loc 1 173 6
 696 048a 07F5BC63 		add	r3, r7, #1504
 697 048e FC3B     		subs	r3, r3, #252
 698 0490 4FF4BA31 		mov	r1, #95232
 699 0494 1846     		mov	r0, r3
 700 0496 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_chknorm
 701 049a 0346     		mov	r3, r0
 702              		.loc 1 173 5
 703 049c 002B     		cmp	r3, #0
 704 049e 00D0     		beq	.L7
 174:sign.c        ****     goto rej;
 705              		.loc 1 174 5
 706 04a0 92E6     		b	.L4
 707              	.L7:
 175:sign.c        **** 
 176:sign.c        ****   polyveck_add(&w0, &w0, &h);
 708              		.loc 1 176 3
 709 04a2 07F5BC62 		add	r2, r7, #1504
 710 04a6 FC3A     		subs	r2, r2, #252
 711 04a8 07F5AF51 		add	r1, r7, #5600
 712 04ac FC39     		subs	r1, r1, #252
 713 04ae 07F5AF53 		add	r3, r7, #5600
 714 04b2 FC3B     		subs	r3, r3, #252
 715 04b4 1846     		mov	r0, r3
 716 04b6 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_add
 177:sign.c        ****   n = polyveck_make_hint(&h, &w0, &w1);
 717              		.loc 1 177 7
 718 04ba 07F51752 		add	r2, r7, #9664
 719 04be 02F12002 		add	r2, r2, #32
 720 04c2 FC3A     		subs	r2, r2, #252
 721 04c4 07F5AF51 		add	r1, r7, #5600
 722 04c8 FC39     		subs	r1, r1, #252
 723 04ca 07F5BC63 		add	r3, r7, #1504
 724 04ce FC3B     		subs	r3, r3, #252
 725 04d0 1846     		mov	r0, r3
 726 04d2 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_make_hint
 727 04d6 07F54543 		add	r3, r7, #50432
 728 04da 03F1C403 		add	r3, r3, #196
 729 04de 1860     		str	r0, [r3]
 178:sign.c        ****   if(n > OMEGA)
 730              		.loc 1 178 5
 731 04e0 07F54543 		add	r3, r7, #50432
 732 04e4 03F1C403 		add	r3, r3, #196
 733 04e8 1B68     		ldr	r3, [r3]
 734 04ea 502B     		cmp	r3, #80
 735 04ec 00D9     		bls	.L8
 179:sign.c        ****     goto rej;
 736              		.loc 1 179 5
 737 04ee 6BE6     		b	.L4
 738              	.L8:
 180:sign.c        **** 
 181:sign.c        ****   /* Write signature */
 182:sign.c        ****   pack_sig(sig, sig, &z, &h);
 739              		.loc 1 182 3
 740 04f0 07F5BC63 		add	r3, r7, #1504
 741 04f4 FC3B     		subs	r3, r3, #252
 742 04f6 07F5AA42 		add	r2, r7, #21760
 743 04fa 02F16002 		add	r2, r2, #96
 744 04fe 7C3A     		subs	r2, r2, #124
 745 0500 07F5BC61 		add	r1, r7, #1504
 746 0504 A1F2D451 		subw	r1, r1, #1492
 747 0508 07F5BC60 		add	r0, r7, #1504
 748 050c A0F2D450 		subw	r0, r0, #1492
 749 0510 0968     		ldr	r1, [r1]
 750 0512 0068     		ldr	r0, [r0]
 751 0514 FFF7FEFF 		bl	pqcrystals_dilithium2_refpack_sig
 183:sign.c        ****   *siglen = CRYPTO_BYTES;
 752              		.loc 1 183 11
 753 0518 07F5BC63 		add	r3, r7, #1504
 754 051c A3F5BB63 		sub	r3, r3, #1496
 755 0520 1B68     		ldr	r3, [r3]
 756 0522 40F67412 		movw	r2, #2420
 757 0526 1A60     		str	r2, [r3]
 184:sign.c        ****   return 0;
 758              		.loc 1 184 10
 759 0528 0023     		movs	r3, #0
 185:sign.c        **** }
 760              		.loc 1 185 1
 761 052a 1846     		mov	r0, r3
 762 052c 07F54547 		add	r7, r7, #50432
 763 0530 E437     		adds	r7, r7, #228
 764              	.LCFI10:
 765              		.cfi_def_cfa_offset 12
 766 0532 BD46     		mov	sp, r7
 767              	.LCFI11:
 768              		.cfi_def_cfa_register 13
 769              		@ sp needed
 770 0534 90BD     		pop	{r4, r7, pc}
 771              	.L11:
 772 0536 00BF     		.align	2
 773              	.L10:
 774 0538 00000000 		.word	global_y
 775 053c B2FF0100 		.word	130994
 776 0540 B2730100 		.word	95154
 777              		.cfi_endproc
 778              	.LFE1:
 780              		.section	.text.DILITHIUM_NAMESPACETOP,"ax",%progbits
 781              		.align	1
 782              		.global	DILITHIUM_NAMESPACETOP
 783              		.syntax unified
 784              		.thumb
 785              		.thumb_func
 786              		.fpu softvfp
 788              	DILITHIUM_NAMESPACETOP:
 789              	.LFB2:
 186:sign.c        **** 
 187:sign.c        **** /*************************************************
 188:sign.c        **** * Name:        crypto_sign
 189:sign.c        **** *
 190:sign.c        **** * Description: Compute signed message.
 191:sign.c        **** *
 192:sign.c        **** * Arguments:   - uint8_t *sm: pointer to output signed message (allocated
 193:sign.c        **** *                             array with CRYPTO_BYTES + mlen bytes),
 194:sign.c        **** *                             can be equal to m
 195:sign.c        **** *              - size_t *smlen: pointer to output length of signed
 196:sign.c        **** *                               message
 197:sign.c        **** *              - const uint8_t *m: pointer to message to be signed
 198:sign.c        **** *              - size_t mlen: length of message
 199:sign.c        **** *              - const uint8_t *sk: pointer to bit-packed secret key
 200:sign.c        **** *
 201:sign.c        **** * Returns 0 (success)
 202:sign.c        **** **************************************************/
 203:sign.c        **** int crypto_sign(uint8_t *sm,
 204:sign.c        ****                 size_t *smlen,
 205:sign.c        ****                 const uint8_t *m,
 206:sign.c        ****                 size_t mlen,
 207:sign.c        ****                 const uint8_t *sk)
 208:sign.c        **** {
 790              		.loc 1 208 1
 791              		.cfi_startproc
 792              		@ args = 4, pretend = 0, frame = 24
 793              		@ frame_needed = 1, uses_anonymous_args = 0
 794 0000 80B5     		push	{r7, lr}
 795              	.LCFI12:
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 7, -8
 798              		.cfi_offset 14, -4
 799 0002 88B0     		sub	sp, sp, #32
 800              	.LCFI13:
 801              		.cfi_def_cfa_offset 40
 802 0004 02AF     		add	r7, sp, #8
 803              	.LCFI14:
 804              		.cfi_def_cfa 7, 32
 805 0006 F860     		str	r0, [r7, #12]
 806 0008 B960     		str	r1, [r7, #8]
 807 000a 7A60     		str	r2, [r7, #4]
 808 000c 3B60     		str	r3, [r7]
 209:sign.c        ****   size_t i;
 210:sign.c        **** 
 211:sign.c        ****   for(i = 0; i < mlen; ++i)
 809              		.loc 1 211 9
 810 000e 0023     		movs	r3, #0
 811 0010 7B61     		str	r3, [r7, #20]
 812              		.loc 1 211 3
 813 0012 11E0     		b	.L13
 814              	.L14:
 212:sign.c        ****     sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 815              		.loc 1 212 50 discriminator 3
 816 0014 3A68     		ldr	r2, [r7]
 817 0016 7B69     		ldr	r3, [r7, #20]
 818 0018 D31A     		subs	r3, r2, r3
 819 001a 013B     		subs	r3, r3, #1
 820              		.loc 1 212 40 discriminator 3
 821 001c 7A68     		ldr	r2, [r7, #4]
 822 001e 1A44     		add	r2, r2, r3
 823              		.loc 1 212 32 discriminator 3
 824 0020 3968     		ldr	r1, [r7]
 825 0022 7B69     		ldr	r3, [r7, #20]
 826 0024 CB1A     		subs	r3, r1, r3
 827 0026 03F67313 		addw	r3, r3, #2419
 828              		.loc 1 212 7 discriminator 3
 829 002a F968     		ldr	r1, [r7, #12]
 830 002c 0B44     		add	r3, r3, r1
 831              		.loc 1 212 40 discriminator 3
 832 002e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 833              		.loc 1 212 37 discriminator 3
 834 0030 1A70     		strb	r2, [r3]
 211:sign.c        ****     sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 835              		.loc 1 211 24 discriminator 3
 836 0032 7B69     		ldr	r3, [r7, #20]
 837 0034 0133     		adds	r3, r3, #1
 838 0036 7B61     		str	r3, [r7, #20]
 839              	.L13:
 211:sign.c        ****     sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 840              		.loc 1 211 3 discriminator 1
 841 0038 7A69     		ldr	r2, [r7, #20]
 842 003a 3B68     		ldr	r3, [r7]
 843 003c 9A42     		cmp	r2, r3
 844 003e E9D3     		bcc	.L14
 213:sign.c        ****   crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
 845              		.loc 1 213 39
 846 0040 FB68     		ldr	r3, [r7, #12]
 847 0042 03F67412 		addw	r2, r3, #2420
 848              		.loc 1 213 3
 849 0046 3B6A     		ldr	r3, [r7, #32]
 850 0048 0093     		str	r3, [sp]
 851 004a 3B68     		ldr	r3, [r7]
 852 004c B968     		ldr	r1, [r7, #8]
 853 004e F868     		ldr	r0, [r7, #12]
 854 0050 FFF7FEFF 		bl	pqcrystals_dilithium2_refsignature
 214:sign.c        ****   *smlen += mlen;
 855              		.loc 1 214 10
 856 0054 BB68     		ldr	r3, [r7, #8]
 857 0056 1A68     		ldr	r2, [r3]
 858 0058 3B68     		ldr	r3, [r7]
 859 005a 1A44     		add	r2, r2, r3
 860 005c BB68     		ldr	r3, [r7, #8]
 861 005e 1A60     		str	r2, [r3]
 215:sign.c        ****   return 0;
 862              		.loc 1 215 10
 863 0060 0023     		movs	r3, #0
 216:sign.c        **** }
 864              		.loc 1 216 1
 865 0062 1846     		mov	r0, r3
 866 0064 1837     		adds	r7, r7, #24
 867              	.LCFI15:
 868              		.cfi_def_cfa_offset 8
 869 0066 BD46     		mov	sp, r7
 870              	.LCFI16:
 871              		.cfi_def_cfa_register 13
 872              		@ sp needed
 873 0068 80BD     		pop	{r7, pc}
 874              		.cfi_endproc
 875              	.LFE2:
 877              		.section	.text.pqcrystals_dilithium2_refverify,"ax",%progbits
 878              		.align	1
 879              		.global	pqcrystals_dilithium2_refverify
 880              		.syntax unified
 881              		.thumb
 882              		.thumb_func
 883              		.fpu softvfp
 885              	pqcrystals_dilithium2_refverify:
 886              	.LFB3:
 217:sign.c        **** 
 218:sign.c        **** /*************************************************
 219:sign.c        **** * Name:        crypto_sign_verify
 220:sign.c        **** *
 221:sign.c        **** * Description: Verifies signature.
 222:sign.c        **** *
 223:sign.c        **** * Arguments:   - uint8_t *m: pointer to input signature
 224:sign.c        **** *              - size_t siglen: length of signature
 225:sign.c        **** *              - const uint8_t *m: pointer to message
 226:sign.c        **** *              - size_t mlen: length of message
 227:sign.c        **** *              - const uint8_t *pk: pointer to bit-packed public key
 228:sign.c        **** *
 229:sign.c        **** * Returns 0 if signature could be verified correctly and -1 otherwise
 230:sign.c        **** **************************************************/
 231:sign.c        **** int crypto_sign_verify(const uint8_t *sig,
 232:sign.c        ****                        size_t siglen,
 233:sign.c        ****                        const uint8_t *m,
 234:sign.c        ****                        size_t mlen,
 235:sign.c        ****                        const uint8_t *pk)
 236:sign.c        **** {
 887              		.loc 1 236 1
 888              		.cfi_startproc
 889              		@ args = 4, pretend = 0, frame = 34952
 890              		@ frame_needed = 1, uses_anonymous_args = 0
 891 0000 90B5     		push	{r4, r7, lr}
 892              	.LCFI17:
 893              		.cfi_def_cfa_offset 12
 894              		.cfi_offset 4, -12
 895              		.cfi_offset 7, -8
 896              		.cfi_offset 14, -4
 897 0002 ADF5084D 		sub	sp, sp, #34816
 898              	.LCFI18:
 899              		.cfi_def_cfa_offset 34828
 900 0006 A3B0     		sub	sp, sp, #140
 901              	.LCFI19:
 902              		.cfi_def_cfa_offset 34968
 903 0008 00AF     		add	r7, sp, #0
 904              	.LCFI20:
 905              		.cfi_def_cfa_register 7
 906 000a 07F68804 		addw	r4, r7, #2184
 907 000e A4F67C04 		subw	r4, r4, #2172
 908 0012 2060     		str	r0, [r4]
 909 0014 07F68800 		addw	r0, r7, #2184
 910 0018 A0F50860 		sub	r0, r0, #2176
 911 001c 0160     		str	r1, [r0]
 912 001e 07F68801 		addw	r1, r7, #2184
 913 0022 A1F68401 		subw	r1, r1, #2180
 914 0026 0A60     		str	r2, [r1]
 915 0028 07F68802 		addw	r2, r7, #2184
 916 002c A2F68802 		subw	r2, r2, #2184
 917 0030 1360     		str	r3, [r2]
 237:sign.c        ****   unsigned int i;
 238:sign.c        ****   uint8_t buf[K*POLYW1_PACKEDBYTES];
 239:sign.c        ****   uint8_t rho[SEEDBYTES];
 240:sign.c        ****   uint8_t mu[CRHBYTES];
 241:sign.c        ****   uint8_t c[SEEDBYTES];
 242:sign.c        ****   uint8_t c2[SEEDBYTES];
 243:sign.c        ****   poly cp;
 244:sign.c        ****   polyvecl mat[K], z;
 245:sign.c        ****   polyveck t1, w1, h;
 246:sign.c        ****   keccak_state state;
 247:sign.c        **** 
 248:sign.c        ****   if(siglen != CRYPTO_BYTES)
 918              		.loc 1 248 5
 919 0032 07F68803 		addw	r3, r7, #2184
 920 0036 A3F50863 		sub	r3, r3, #2176
 921 003a 1B68     		ldr	r3, [r3]
 922 003c 40F67412 		movw	r2, #2420
 923 0040 9342     		cmp	r3, r2
 924 0042 02D0     		beq	.L17
 249:sign.c        ****     return -1;
 925              		.loc 1 249 12
 926 0044 4FF0FF33 		mov	r3, #-1
 927 0048 81E1     		b	.L24
 928              	.L17:
 250:sign.c        **** 
 251:sign.c        ****   unpack_pk(rho, &t1, pk);
 929              		.loc 1 251 3
 930 004a 07F50453 		add	r3, r7, #8448
 931 004e 03F10803 		add	r3, r3, #8
 932 0052 243B     		subs	r3, r3, #36
 933 0054 07F50540 		add	r0, r7, #34048
 934 0058 00F16400 		add	r0, r0, #100
 935 005c 07F50842 		add	r2, r7, #34816
 936 0060 02F19802 		add	r2, r2, #152
 937 0064 1268     		ldr	r2, [r2]
 938 0066 1946     		mov	r1, r3
 939 0068 FFF7FEFF 		bl	pqcrystals_dilithium2_refunpack_pk
 252:sign.c        ****   if(unpack_sig(c, &z, &h, sig))
 940              		.loc 1 252 6
 941 006c 07F68803 		addw	r3, r7, #2184
 942 0070 A3F67C03 		subw	r3, r3, #2172
 943 0074 07F5C472 		add	r2, r7, #392
 944 0078 A43A     		subs	r2, r2, #164
 945 007a 07F54451 		add	r1, r7, #12544
 946 007e 01F10801 		add	r1, r1, #8
 947 0082 2439     		subs	r1, r1, #36
 948 0084 07F50540 		add	r0, r7, #34048
 949 0088 00F10400 		add	r0, r0, #4
 950 008c 1B68     		ldr	r3, [r3]
 951 008e FFF7FEFF 		bl	pqcrystals_dilithium2_refunpack_sig
 952 0092 0346     		mov	r3, r0
 953              		.loc 1 252 5
 954 0094 002B     		cmp	r3, #0
 955 0096 02D0     		beq	.L19
 253:sign.c        ****     return -1;
 956              		.loc 1 253 12
 957 0098 4FF0FF33 		mov	r3, #-1
 958 009c 57E1     		b	.L24
 959              	.L19:
 254:sign.c        ****   if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 960              		.loc 1 254 6
 961 009e 07F54453 		add	r3, r7, #12544
 962 00a2 03F10803 		add	r3, r3, #8
 963 00a6 243B     		subs	r3, r3, #36
 964 00a8 AC49     		ldr	r1, .L25
 965 00aa 1846     		mov	r0, r3
 966 00ac FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_chknorm
 967 00b0 0346     		mov	r3, r0
 968              		.loc 1 254 5
 969 00b2 002B     		cmp	r3, #0
 970 00b4 02D0     		beq	.L20
 255:sign.c        ****     return -1;
 971              		.loc 1 255 12
 972 00b6 4FF0FF33 		mov	r3, #-1
 973 00ba 48E1     		b	.L24
 974              	.L20:
 256:sign.c        **** 
 257:sign.c        ****   /* Compute CRH(H(rho, t1), msg) */
 258:sign.c        ****   shake256(mu, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 975              		.loc 1 258 3
 976 00bc 07F50540 		add	r0, r7, #34048
 977 00c0 00F12400 		add	r0, r0, #36
 978 00c4 4FF4A463 		mov	r3, #1312
 979 00c8 07F50842 		add	r2, r7, #34816
 980 00cc 02F19802 		add	r2, r2, #152
 981 00d0 1268     		ldr	r2, [r2]
 982 00d2 2021     		movs	r1, #32
 983 00d4 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256
 259:sign.c        ****   shake256_init(&state);
 984              		.loc 1 259 3
 985 00d8 07F18803 		add	r3, r7, #136
 986 00dc 783B     		subs	r3, r3, #120
 987 00de 1846     		mov	r0, r3
 988 00e0 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_init
 260:sign.c        ****   shake256_absorb(&state, mu, SEEDBYTES);
 989              		.loc 1 260 3
 990 00e4 07F50541 		add	r1, r7, #34048
 991 00e8 01F12401 		add	r1, r1, #36
 992 00ec 07F18803 		add	r3, r7, #136
 993 00f0 783B     		subs	r3, r3, #120
 994 00f2 2022     		movs	r2, #32
 995 00f4 1846     		mov	r0, r3
 996 00f6 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_absorb
 261:sign.c        ****   shake256_absorb(&state, m, mlen);
 997              		.loc 1 261 3
 998 00fa 07F68803 		addw	r3, r7, #2184
 999 00fe A3F68802 		subw	r2, r3, #2184
 1000 0102 07F68803 		addw	r3, r7, #2184
 1001 0106 A3F68401 		subw	r1, r3, #2180
 1002 010a 07F18803 		add	r3, r7, #136
 1003 010e 783B     		subs	r3, r3, #120
 1004 0110 1268     		ldr	r2, [r2]
 1005 0112 0968     		ldr	r1, [r1]
 1006 0114 1846     		mov	r0, r3
 1007 0116 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_absorb
 262:sign.c        ****   shake256_finalize(&state);
 1008              		.loc 1 262 3
 1009 011a 07F18803 		add	r3, r7, #136
 1010 011e 783B     		subs	r3, r3, #120
 1011 0120 1846     		mov	r0, r3
 1012 0122 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_finalize
 263:sign.c        ****   shake256_squeeze(mu, CRHBYTES, &state);
 1013              		.loc 1 263 3
 1014 0126 07F18803 		add	r3, r7, #136
 1015 012a 783B     		subs	r3, r3, #120
 1016 012c 07F50540 		add	r0, r7, #34048
 1017 0130 00F12400 		add	r0, r0, #36
 1018 0134 1A46     		mov	r2, r3
 1019 0136 4021     		movs	r1, #64
 1020 0138 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_squeeze
 264:sign.c        **** 
 265:sign.c        ****   /* Matrix-vector multiplication; compute Az - c2^dt1 */
 266:sign.c        ****   poly_challenge(&cp, c);
 1021              		.loc 1 266 3
 1022 013c 07F50542 		add	r2, r7, #34048
 1023 0140 02F10402 		add	r2, r2, #4
 1024 0144 07F50043 		add	r3, r7, #32768
 1025 0148 03F1E403 		add	r3, r3, #228
 1026 014c 1146     		mov	r1, r2
 1027 014e 1846     		mov	r0, r3
 1028 0150 FFF7FEFF 		bl	pqcrystals_dilithium2_refpoly_challenge
 267:sign.c        ****   polyvec_matrix_expand(mat, rho);
 1029              		.loc 1 267 3
 1030 0154 07F50542 		add	r2, r7, #34048
 1031 0158 02F16402 		add	r2, r2, #100
 1032 015c 07F58243 		add	r3, r7, #16640
 1033 0160 03F10803 		add	r3, r3, #8
 1034 0164 243B     		subs	r3, r3, #36
 1035 0166 1146     		mov	r1, r2
 1036 0168 1846     		mov	r0, r3
 1037 016a FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvec_matrix_expand
 268:sign.c        **** 
 269:sign.c        ****   polyvecl_ntt(&z);
 1038              		.loc 1 269 3
 1039 016e 07F54453 		add	r3, r7, #12544
 1040 0172 03F10803 		add	r3, r3, #8
 1041 0176 243B     		subs	r3, r3, #36
 1042 0178 1846     		mov	r0, r3
 1043 017a FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvecl_ntt
 270:sign.c        ****   polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 1044              		.loc 1 270 3
 1045 017e 07F54452 		add	r2, r7, #12544
 1046 0182 02F10802 		add	r2, r2, #8
 1047 0186 243A     		subs	r2, r2, #36
 1048 0188 07F58241 		add	r1, r7, #16640
 1049 018c 01F10801 		add	r1, r1, #8
 1050 0190 2439     		subs	r1, r1, #36
 1051 0192 07F58853 		add	r3, r7, #4352
 1052 0196 03F10803 		add	r3, r3, #8
 1053 019a 243B     		subs	r3, r3, #36
 1054 019c 1846     		mov	r0, r3
 1055 019e FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyvec_matrix_pointwise_montgomery
 271:sign.c        **** 
 272:sign.c        ****   poly_ntt(&cp);
 1056              		.loc 1 272 3
 1057 01a2 07F50043 		add	r3, r7, #32768
 1058 01a6 03F1E403 		add	r3, r3, #228
 1059 01aa 1846     		mov	r0, r3
 1060 01ac FFF7FEFF 		bl	pqcrystals_dilithium2_refpoly_ntt
 273:sign.c        ****   polyveck_shiftl(&t1);
 1061              		.loc 1 273 3
 1062 01b0 07F50453 		add	r3, r7, #8448
 1063 01b4 03F10803 		add	r3, r3, #8
 1064 01b8 243B     		subs	r3, r3, #36
 1065 01ba 1846     		mov	r0, r3
 1066 01bc FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_shiftl
 274:sign.c        ****   polyveck_ntt(&t1);
 1067              		.loc 1 274 3
 1068 01c0 07F50453 		add	r3, r7, #8448
 1069 01c4 03F10803 		add	r3, r3, #8
 1070 01c8 243B     		subs	r3, r3, #36
 1071 01ca 1846     		mov	r0, r3
 1072 01cc FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_ntt
 275:sign.c        ****   polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
 1073              		.loc 1 275 3
 1074 01d0 07F50452 		add	r2, r7, #8448
 1075 01d4 02F10802 		add	r2, r2, #8
 1076 01d8 243A     		subs	r2, r2, #36
 1077 01da 07F50041 		add	r1, r7, #32768
 1078 01de 01F1E401 		add	r1, r1, #228
 1079 01e2 07F50453 		add	r3, r7, #8448
 1080 01e6 03F10803 		add	r3, r3, #8
 1081 01ea 243B     		subs	r3, r3, #36
 1082 01ec 1846     		mov	r0, r3
 1083 01ee FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_pointwise_poly_montgomery
 276:sign.c        **** 
 277:sign.c        ****   polyveck_sub(&w1, &w1, &t1);
 1084              		.loc 1 277 3
 1085 01f2 07F50452 		add	r2, r7, #8448
 1086 01f6 02F10802 		add	r2, r2, #8
 1087 01fa 243A     		subs	r2, r2, #36
 1088 01fc 07F58851 		add	r1, r7, #4352
 1089 0200 01F10801 		add	r1, r1, #8
 1090 0204 2439     		subs	r1, r1, #36
 1091 0206 07F58853 		add	r3, r7, #4352
 1092 020a 03F10803 		add	r3, r3, #8
 1093 020e 243B     		subs	r3, r3, #36
 1094 0210 1846     		mov	r0, r3
 1095 0212 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_sub
 278:sign.c        ****   polyveck_reduce(&w1);
 1096              		.loc 1 278 3
 1097 0216 07F58853 		add	r3, r7, #4352
 1098 021a 03F10803 		add	r3, r3, #8
 1099 021e 243B     		subs	r3, r3, #36
 1100 0220 1846     		mov	r0, r3
 1101 0222 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_reduce
 279:sign.c        ****   polyveck_invntt_tomont(&w1);
 1102              		.loc 1 279 3
 1103 0226 07F58853 		add	r3, r7, #4352
 1104 022a 03F10803 		add	r3, r3, #8
 1105 022e 243B     		subs	r3, r3, #36
 1106 0230 1846     		mov	r0, r3
 1107 0232 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_invntt_tomont
 280:sign.c        **** 
 281:sign.c        ****   /* Reconstruct w1 */
 282:sign.c        ****   polyveck_caddq(&w1);
 1108              		.loc 1 282 3
 1109 0236 07F58853 		add	r3, r7, #4352
 1110 023a 03F10803 		add	r3, r3, #8
 1111 023e 243B     		subs	r3, r3, #36
 1112 0240 1846     		mov	r0, r3
 1113 0242 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_caddq
 283:sign.c        ****   polyveck_use_hint(&w1, &w1, &h);
 1114              		.loc 1 283 3
 1115 0246 07F5C472 		add	r2, r7, #392
 1116 024a A43A     		subs	r2, r2, #164
 1117 024c 07F58851 		add	r1, r7, #4352
 1118 0250 01F10801 		add	r1, r1, #8
 1119 0254 2439     		subs	r1, r1, #36
 1120 0256 07F58853 		add	r3, r7, #4352
 1121 025a 03F10803 		add	r3, r3, #8
 1122 025e 243B     		subs	r3, r3, #36
 1123 0260 1846     		mov	r0, r3
 1124 0262 FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_use_hint
 284:sign.c        ****   polyveck_pack_w1(buf, &w1);
 1125              		.loc 1 284 3
 1126 0266 07F58853 		add	r3, r7, #4352
 1127 026a 03F10803 		add	r3, r3, #8
 1128 026e 243B     		subs	r3, r3, #36
 1129 0270 07F50542 		add	r2, r7, #34048
 1130 0274 02F18402 		add	r2, r2, #132
 1131 0278 1946     		mov	r1, r3
 1132 027a 1046     		mov	r0, r2
 1133 027c FFF7FEFF 		bl	pqcrystals_dilithium2_refpolyveck_pack_w1
 285:sign.c        **** 
 286:sign.c        ****   /* Call random oracle and verify challenge */
 287:sign.c        ****   shake256_init(&state);
 1134              		.loc 1 287 3
 1135 0280 07F18803 		add	r3, r7, #136
 1136 0284 783B     		subs	r3, r3, #120
 1137 0286 1846     		mov	r0, r3
 1138 0288 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_init
 288:sign.c        ****   shake256_absorb(&state, mu, CRHBYTES);
 1139              		.loc 1 288 3
 1140 028c 07F50541 		add	r1, r7, #34048
 1141 0290 01F12401 		add	r1, r1, #36
 1142 0294 07F18803 		add	r3, r7, #136
 1143 0298 783B     		subs	r3, r3, #120
 1144 029a 4022     		movs	r2, #64
 1145 029c 1846     		mov	r0, r3
 1146 029e FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_absorb
 289:sign.c        ****   shake256_absorb(&state, buf, K*POLYW1_PACKEDBYTES);
 1147              		.loc 1 289 3
 1148 02a2 07F50541 		add	r1, r7, #34048
 1149 02a6 01F18401 		add	r1, r1, #132
 1150 02aa 07F18803 		add	r3, r7, #136
 1151 02ae 783B     		subs	r3, r3, #120
 1152 02b0 4FF44072 		mov	r2, #768
 1153 02b4 1846     		mov	r0, r3
 1154 02b6 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_absorb
 290:sign.c        ****   shake256_finalize(&state);
 1155              		.loc 1 290 3
 1156 02ba 07F18803 		add	r3, r7, #136
 1157 02be 783B     		subs	r3, r3, #120
 1158 02c0 1846     		mov	r0, r3
 1159 02c2 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_finalize
 291:sign.c        ****   shake256_squeeze(c2, SEEDBYTES, &state);
 1160              		.loc 1 291 3
 1161 02c6 07F18803 		add	r3, r7, #136
 1162 02ca 783B     		subs	r3, r3, #120
 1163 02cc 07F50440 		add	r0, r7, #33792
 1164 02d0 00F1E400 		add	r0, r0, #228
 1165 02d4 1A46     		mov	r2, r3
 1166 02d6 2021     		movs	r1, #32
 1167 02d8 FFF7FEFF 		bl	pqcrystals_dilithium_fips202_ref_shake256_squeeze
 292:sign.c        ****   for(i = 0; i < SEEDBYTES; ++i)
 1168              		.loc 1 292 9
 1169 02dc 0023     		movs	r3, #0
 1170 02de 07F50842 		add	r2, r7, #34816
 1171 02e2 02F18402 		add	r2, r2, #132
 1172 02e6 1360     		str	r3, [r2]
 1173              		.loc 1 292 3
 1174 02e8 29E0     		b	.L21
 1175              	.L23:
 293:sign.c        ****     if(c[i] != c2[i])
 1176              		.loc 1 293 9
 1177 02ea 07F50843 		add	r3, r7, #34816
 1178 02ee 03F18803 		add	r3, r3, #136
 1179 02f2 A3F56172 		sub	r2, r3, #900
 1180 02f6 07F50843 		add	r3, r7, #34816
 1181 02fa 03F18403 		add	r3, r3, #132
 1182 02fe 1B68     		ldr	r3, [r3]
 1183 0300 1344     		add	r3, r3, r2
 1184 0302 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1185              		.loc 1 293 18
 1186 0304 07F50843 		add	r3, r7, #34816
 1187 0308 03F18803 		add	r3, r3, #136
 1188 030c A3F56971 		sub	r1, r3, #932
 1189 0310 07F50843 		add	r3, r7, #34816
 1190 0314 03F18403 		add	r3, r3, #132
 1191 0318 1B68     		ldr	r3, [r3]
 1192 031a 0B44     		add	r3, r3, r1
 1193 031c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1194              		.loc 1 293 7
 1195 031e 9A42     		cmp	r2, r3
 1196 0320 02D0     		beq	.L22
 294:sign.c        ****       return -1;
 1197              		.loc 1 294 14
 1198 0322 4FF0FF33 		mov	r3, #-1
 1199 0326 12E0     		b	.L24
 1200              	.L22:
 292:sign.c        ****   for(i = 0; i < SEEDBYTES; ++i)
 1201              		.loc 1 292 29 discriminator 2
 1202 0328 07F50843 		add	r3, r7, #34816
 1203 032c 03F18403 		add	r3, r3, #132
 1204 0330 1B68     		ldr	r3, [r3]
 1205 0332 0133     		adds	r3, r3, #1
 1206 0334 07F50842 		add	r2, r7, #34816
 1207 0338 02F18402 		add	r2, r2, #132
 1208 033c 1360     		str	r3, [r2]
 1209              	.L21:
 292:sign.c        ****   for(i = 0; i < SEEDBYTES; ++i)
 1210              		.loc 1 292 3 discriminator 1
 1211 033e 07F50843 		add	r3, r7, #34816
 1212 0342 03F18403 		add	r3, r3, #132
 1213 0346 1B68     		ldr	r3, [r3]
 1214 0348 1F2B     		cmp	r3, #31
 1215 034a CED9     		bls	.L23
 295:sign.c        **** 
 296:sign.c        ****   return 0;
 1216              		.loc 1 296 10
 1217 034c 0023     		movs	r3, #0
 1218              	.L24:
 297:sign.c        **** }
 1219              		.loc 1 297 1 discriminator 1
 1220 034e 1846     		mov	r0, r3
 1221 0350 07F50847 		add	r7, r7, #34816
 1222 0354 8C37     		adds	r7, r7, #140
 1223              	.LCFI21:
 1224              		.cfi_def_cfa_offset 12
 1225 0356 BD46     		mov	sp, r7
 1226              	.LCFI22:
 1227              		.cfi_def_cfa_register 13
 1228              		@ sp needed
 1229 0358 90BD     		pop	{r4, r7, pc}
 1230              	.L26:
 1231 035a 00BF     		.align	2
 1232              	.L25:
 1233 035c B2FF0100 		.word	130994
 1234              		.cfi_endproc
 1235              	.LFE3:
 1237              		.section	.text.pqcrystals_dilithium2_refopen,"ax",%progbits
 1238              		.align	1
 1239              		.global	pqcrystals_dilithium2_refopen
 1240              		.syntax unified
 1241              		.thumb
 1242              		.thumb_func
 1243              		.fpu softvfp
 1245              	pqcrystals_dilithium2_refopen:
 1246              	.LFB4:
 298:sign.c        **** 
 299:sign.c        **** /*************************************************
 300:sign.c        **** * Name:        crypto_sign_open
 301:sign.c        **** *
 302:sign.c        **** * Description: Verify signed message.
 303:sign.c        **** *
 304:sign.c        **** * Arguments:   - uint8_t *m: pointer to output message (allocated
 305:sign.c        **** *                            array with smlen bytes), can be equal to sm
 306:sign.c        **** *              - size_t *mlen: pointer to output length of message
 307:sign.c        **** *              - const uint8_t *sm: pointer to signed message
 308:sign.c        **** *              - size_t smlen: length of signed message
 309:sign.c        **** *              - const uint8_t *pk: pointer to bit-packed public key
 310:sign.c        **** *
 311:sign.c        **** * Returns 0 if signed message could be verified correctly and -1 otherwise
 312:sign.c        **** **************************************************/
 313:sign.c        **** int crypto_sign_open(uint8_t *m,
 314:sign.c        ****                      size_t *mlen,
 315:sign.c        ****                      const uint8_t *sm,
 316:sign.c        ****                      size_t smlen,
 317:sign.c        ****                      const uint8_t *pk)
 318:sign.c        **** {
 1247              		.loc 1 318 1
 1248              		.cfi_startproc
 1249              		@ args = 4, pretend = 0, frame = 24
 1250              		@ frame_needed = 1, uses_anonymous_args = 0
 1251 0000 80B5     		push	{r7, lr}
 1252              	.LCFI23:
 1253              		.cfi_def_cfa_offset 8
 1254              		.cfi_offset 7, -8
 1255              		.cfi_offset 14, -4
 1256 0002 88B0     		sub	sp, sp, #32
 1257              	.LCFI24:
 1258              		.cfi_def_cfa_offset 40
 1259 0004 02AF     		add	r7, sp, #8
 1260              	.LCFI25:
 1261              		.cfi_def_cfa 7, 32
 1262 0006 F860     		str	r0, [r7, #12]
 1263 0008 B960     		str	r1, [r7, #8]
 1264 000a 7A60     		str	r2, [r7, #4]
 1265 000c 3B60     		str	r3, [r7]
 319:sign.c        ****   size_t i;
 320:sign.c        **** 
 321:sign.c        ****   if(smlen < CRYPTO_BYTES)
 1266              		.loc 1 321 5
 1267 000e 3B68     		ldr	r3, [r7]
 1268 0010 40F67312 		movw	r2, #2419
 1269 0014 9342     		cmp	r3, r2
 1270 0016 2BD9     		bls	.L36
 322:sign.c        ****     goto badsig;
 323:sign.c        **** 
 324:sign.c        ****   *mlen = smlen - CRYPTO_BYTES;
 1271              		.loc 1 324 17
 1272 0018 3B68     		ldr	r3, [r7]
 1273 001a A3F67412 		subw	r2, r3, #2420
 1274              		.loc 1 324 9
 1275 001e BB68     		ldr	r3, [r7, #8]
 1276 0020 1A60     		str	r2, [r3]
 325:sign.c        ****   if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
 1277              		.loc 1 325 6
 1278 0022 7B68     		ldr	r3, [r7, #4]
 1279 0024 03F67412 		addw	r2, r3, #2420
 1280 0028 BB68     		ldr	r3, [r7, #8]
 1281 002a 1968     		ldr	r1, [r3]
 1282 002c 3B6A     		ldr	r3, [r7, #32]
 1283 002e 0093     		str	r3, [sp]
 1284 0030 0B46     		mov	r3, r1
 1285 0032 40F67411 		movw	r1, #2420
 1286 0036 7868     		ldr	r0, [r7, #4]
 1287 0038 FFF7FEFF 		bl	pqcrystals_dilithium2_refverify
 1288 003c 0346     		mov	r3, r0
 1289              		.loc 1 325 5
 1290 003e 002B     		cmp	r3, #0
 1291 0040 18D1     		bne	.L37
 326:sign.c        ****     goto badsig;
 327:sign.c        ****   else {
 328:sign.c        ****     /* All good, copy msg, return 0 */
 329:sign.c        ****     for(i = 0; i < *mlen; ++i)
 1292              		.loc 1 329 11
 1293 0042 0023     		movs	r3, #0
 1294 0044 7B61     		str	r3, [r7, #20]
 1295              		.loc 1 329 5
 1296 0046 0CE0     		b	.L31
 1297              	.L32:
 330:sign.c        ****       m[i] = sm[CRYPTO_BYTES + i];
 1298              		.loc 1 330 30 discriminator 3
 1299 0048 7B69     		ldr	r3, [r7, #20]
 1300 004a 03F67413 		addw	r3, r3, #2420
 1301              		.loc 1 330 16 discriminator 3
 1302 004e 7A68     		ldr	r2, [r7, #4]
 1303 0050 1A44     		add	r2, r2, r3
 1304              		.loc 1 330 8 discriminator 3
 1305 0052 F968     		ldr	r1, [r7, #12]
 1306 0054 7B69     		ldr	r3, [r7, #20]
 1307 0056 0B44     		add	r3, r3, r1
 1308              		.loc 1 330 16 discriminator 3
 1309 0058 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1310              		.loc 1 330 12 discriminator 3
 1311 005a 1A70     		strb	r2, [r3]
 329:sign.c        ****       m[i] = sm[CRYPTO_BYTES + i];
 1312              		.loc 1 329 27 discriminator 3
 1313 005c 7B69     		ldr	r3, [r7, #20]
 1314 005e 0133     		adds	r3, r3, #1
 1315 0060 7B61     		str	r3, [r7, #20]
 1316              	.L31:
 329:sign.c        ****       m[i] = sm[CRYPTO_BYTES + i];
 1317              		.loc 1 329 20 discriminator 1
 1318 0062 BB68     		ldr	r3, [r7, #8]
 1319 0064 1B68     		ldr	r3, [r3]
 329:sign.c        ****       m[i] = sm[CRYPTO_BYTES + i];
 1320              		.loc 1 329 5 discriminator 1
 1321 0066 7A69     		ldr	r2, [r7, #20]
 1322 0068 9A42     		cmp	r2, r3
 1323 006a EDD3     		bcc	.L32
 331:sign.c        ****     return 0;
 1324              		.loc 1 331 12
 1325 006c 0023     		movs	r3, #0
 1326 006e 17E0     		b	.L33
 1327              	.L36:
 322:sign.c        **** 
 1328              		.loc 1 322 5
 1329 0070 00BF     		nop
 1330 0072 00E0     		b	.L29
 1331              	.L37:
 326:sign.c        ****   else {
 1332              		.loc 1 326 5
 1333 0074 00BF     		nop
 1334              	.L29:
 332:sign.c        ****   }
 333:sign.c        **** 
 334:sign.c        **** badsig:
 335:sign.c        ****   /* Signature verification failed */
 336:sign.c        ****   *mlen = -1;
 1335              		.loc 1 336 9
 1336 0076 BB68     		ldr	r3, [r7, #8]
 1337 0078 4FF0FF32 		mov	r2, #-1
 1338 007c 1A60     		str	r2, [r3]
 337:sign.c        ****   for(i = 0; i < smlen; ++i)
 1339              		.loc 1 337 9
 1340 007e 0023     		movs	r3, #0
 1341 0080 7B61     		str	r3, [r7, #20]
 1342              		.loc 1 337 3
 1343 0082 07E0     		b	.L34
 1344              	.L35:
 338:sign.c        ****     m[i] = 0;
 1345              		.loc 1 338 6 discriminator 3
 1346 0084 FA68     		ldr	r2, [r7, #12]
 1347 0086 7B69     		ldr	r3, [r7, #20]
 1348 0088 1344     		add	r3, r3, r2
 1349              		.loc 1 338 10 discriminator 3
 1350 008a 0022     		movs	r2, #0
 1351 008c 1A70     		strb	r2, [r3]
 337:sign.c        ****   for(i = 0; i < smlen; ++i)
 1352              		.loc 1 337 25 discriminator 3
 1353 008e 7B69     		ldr	r3, [r7, #20]
 1354 0090 0133     		adds	r3, r3, #1
 1355 0092 7B61     		str	r3, [r7, #20]
 1356              	.L34:
 337:sign.c        ****   for(i = 0; i < smlen; ++i)
 1357              		.loc 1 337 3 discriminator 1
 1358 0094 7A69     		ldr	r2, [r7, #20]
 1359 0096 3B68     		ldr	r3, [r7]
 1360 0098 9A42     		cmp	r2, r3
 1361 009a F3D3     		bcc	.L35
 339:sign.c        **** 
 340:sign.c        ****   return -1;
 1362              		.loc 1 340 10
 1363 009c 4FF0FF33 		mov	r3, #-1
 1364              	.L33:
 341:sign.c        **** }
 1365              		.loc 1 341 1
 1366 00a0 1846     		mov	r0, r3
 1367 00a2 1837     		adds	r7, r7, #24
 1368              	.LCFI26:
 1369              		.cfi_def_cfa_offset 8
 1370 00a4 BD46     		mov	sp, r7
 1371              	.LCFI27:
 1372              		.cfi_def_cfa_register 13
 1373              		@ sp needed
 1374 00a6 80BD     		pop	{r7, pc}
 1375              		.cfi_endproc
 1376              	.LFE4:
 1378              		.section	.text.get_intermediate_vector,"ax",%progbits
 1379              		.align	1
 1380              		.global	get_intermediate_vector
 1381              		.syntax unified
 1382              		.thumb
 1383              		.thumb_func
 1384              		.fpu softvfp
 1386              	get_intermediate_vector:
 1387              	.LFB5:
 342:sign.c        **** polyvecl* get_intermediate_vector(void){
 1388              		.loc 1 342 40
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 0
 1391              		@ frame_needed = 1, uses_anonymous_args = 0
 1392              		@ link register save eliminated.
 1393 0000 80B4     		push	{r7}
 1394              	.LCFI28:
 1395              		.cfi_def_cfa_offset 4
 1396              		.cfi_offset 7, -4
 1397 0002 00AF     		add	r7, sp, #0
 1398              	.LCFI29:
 1399              		.cfi_def_cfa_register 7
 343:sign.c        ****   return &global_y;
 1400              		.loc 1 343 10
 1401 0004 024B     		ldr	r3, .L40
 344:sign.c        **** }...
 1402              		.loc 1 344 1
 1403 0006 1846     		mov	r0, r3
 1404 0008 BD46     		mov	sp, r7
 1405              	.LCFI30:
 1406              		.cfi_def_cfa_register 13
 1407              		@ sp needed
 1408 000a 80BC     		pop	{r7}
 1409              	.LCFI31:
 1410              		.cfi_restore 7
 1411              		.cfi_def_cfa_offset 0
 1412 000c 7047     		bx	lr
 1413              	.L41:
 1414 000e 00BF     		.align	2
 1415              	.L40:
 1416 0010 00000000 		.word	global_y
 1417              		.cfi_endproc
 1418              	.LFE5:
 1420              		.text
 1421              	.Letext0:
 1422              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1423              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1424              		.file 4 "poly.h"
 1425              		.file 5 "polyvec.h"
 1426              		.file 6 "fips202.h"
 1427              		.file 7 "sign.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sign.c
     /tmp/ccu4BGVr.s:20     .bss:0000000000000000 global_y
     /tmp/ccu4BGVr.s:17     .bss:0000000000000000 $d
     /tmp/ccu4BGVr.s:23     .text.pqcrystals_dilithium2_refkeypair:0000000000000000 $t
     /tmp/ccu4BGVr.s:31     .text.pqcrystals_dilithium2_refkeypair:0000000000000000 pqcrystals_dilithium2_refkeypair
     /tmp/ccu4BGVr.s:242    .text.pqcrystals_dilithium2_refsignature:0000000000000000 $t
     /tmp/ccu4BGVr.s:249    .text.pqcrystals_dilithium2_refsignature:0000000000000000 pqcrystals_dilithium2_refsignature
     /tmp/ccu4BGVr.s:774    .text.pqcrystals_dilithium2_refsignature:0000000000000538 $d
     /tmp/ccu4BGVr.s:781    .text.DILITHIUM_NAMESPACETOP:0000000000000000 $t
     /tmp/ccu4BGVr.s:788    .text.DILITHIUM_NAMESPACETOP:0000000000000000 DILITHIUM_NAMESPACETOP
     /tmp/ccu4BGVr.s:878    .text.pqcrystals_dilithium2_refverify:0000000000000000 $t
     /tmp/ccu4BGVr.s:885    .text.pqcrystals_dilithium2_refverify:0000000000000000 pqcrystals_dilithium2_refverify
     /tmp/ccu4BGVr.s:1233   .text.pqcrystals_dilithium2_refverify:000000000000035c $d
     /tmp/ccu4BGVr.s:1238   .text.pqcrystals_dilithium2_refopen:0000000000000000 $t
     /tmp/ccu4BGVr.s:1245   .text.pqcrystals_dilithium2_refopen:0000000000000000 pqcrystals_dilithium2_refopen
     /tmp/ccu4BGVr.s:1379   .text.get_intermediate_vector:0000000000000000 $t
     /tmp/ccu4BGVr.s:1386   .text.get_intermediate_vector:0000000000000000 get_intermediate_vector
     /tmp/ccu4BGVr.s:1416   .text.get_intermediate_vector:0000000000000010 $d

UNDEFINED SYMBOLS
memcpy
pqcrystals_dilithium_fips202_ref_shake256
pqcrystals_dilithium2_refpolyvec_matrix_expand
pqcrystals_dilithium2_refpolyvecl_uniform_eta
pqcrystals_dilithium2_refpolyveck_uniform_eta
pqcrystals_dilithium2_refpolyvecl_ntt
pqcrystals_dilithium2_refpolyvec_matrix_pointwise_montgomery
pqcrystals_dilithium2_refpolyveck_reduce
pqcrystals_dilithium2_refpolyveck_invntt_tomont
pqcrystals_dilithium2_refpolyveck_add
pqcrystals_dilithium2_refpolyveck_caddq
pqcrystals_dilithium2_refpolyveck_power2round
pqcrystals_dilithium2_refpack_pk
pqcrystals_dilithium2_refpack_sk
pqcrystals_dilithium2_refunpack_sk
pqcrystals_dilithium_fips202_ref_shake256_init
pqcrystals_dilithium_fips202_ref_shake256_absorb
pqcrystals_dilithium_fips202_ref_shake256_finalize
pqcrystals_dilithium_fips202_ref_shake256_squeeze
pqcrystals_dilithium2_refpolyveck_ntt
pqcrystals_dilithium2_refpolyvecl_uniform_gamma1
pqcrystals_dilithium2_refpolyveck_decompose
pqcrystals_dilithium2_refpolyveck_pack_w1
pqcrystals_dilithium2_refpoly_challenge
pqcrystals_dilithium2_refpoly_ntt
trigger_high
pqcrystals_dilithium2_refpolyvecl_pointwise_poly_montgomery
trigger_low
pqcrystals_dilithium2_refpolyvecl_invntt_tomont
pqcrystals_dilithium2_refpolyvecl_add
pqcrystals_dilithium2_refpolyvecl_reduce
pqcrystals_dilithium2_refpolyvecl_chknorm
pqcrystals_dilithium2_refpolyveck_pointwise_poly_montgomery
pqcrystals_dilithium2_refpolyveck_sub
pqcrystals_dilithium2_refpolyveck_chknorm
pqcrystals_dilithium2_refpolyveck_make_hint
pqcrystals_dilithium2_refpack_sig
pqcrystals_dilithium2_refunpack_pk
pqcrystals_dilithium2_refunpack_sig
pqcrystals_dilithium2_refpolyveck_shiftl
pqcrystals_dilithium2_refpolyveck_use_hint
