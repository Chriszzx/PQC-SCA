
simple-test-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08008d28  08008d28  00018d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091ec  080091ec  00020460  2**0
                  CONTENTS
  4 .ARM          00000000  080091ec  080091ec  00020460  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091ec  080091ec  00020460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f4  080091f4  000191f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000460  20000000  080091f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a8ac  20000460  08009658  00020460  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000ad0c  08009658  0002ad0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  0002048a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008e72  00000000  00000000  000204bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eb0  00000000  00000000  0002932f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000385a  00000000  00000000  0002b1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000738  00000000  00000000  0002ea40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000005f8  00000000  00000000  0002f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000064f8  00000000  00000000  0002f770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002b99  00000000  00000000  00035c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a10  00000000  00000000  00038804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0003a214  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000051  00000000  00000000  0003a358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000460 	.word	0x20000460
 800019c:	20000460 	.word	0x20000460
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000460 	.word	0x20000460
 80001c0:	20000460 	.word	0x20000460
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000460 	.word	0x20000460
 80001e8:	00000000 	.word	0x00000000
 80001ec:	08008d10 	.word	0x08008d10

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000464 	.word	0x20000464
 800020c:	08008d10 	.word	0x08008d10

08000210 <atexit>:
 8000210:	2300      	movs	r3, #0
 8000212:	4601      	mov	r1, r0
 8000214:	461a      	mov	r2, r3
 8000216:	4618      	mov	r0, r3
 8000218:	f000 b8d4 	b.w	80003c4 <__register_exitproc>

0800021c <__libc_fini_array>:
 800021c:	b538      	push	{r3, r4, r5, lr}
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <__libc_fini_array+0x24>)
 8000220:	4d08      	ldr	r5, [pc, #32]	; (8000244 <__libc_fini_array+0x28>)
 8000222:	1b5b      	subs	r3, r3, r5
 8000224:	109c      	asrs	r4, r3, #2
 8000226:	d007      	beq.n	8000238 <__libc_fini_array+0x1c>
 8000228:	3b04      	subs	r3, #4
 800022a:	441d      	add	r5, r3
 800022c:	3c01      	subs	r4, #1
 800022e:	f855 3904 	ldr.w	r3, [r5], #-4
 8000232:	4798      	blx	r3
 8000234:	2c00      	cmp	r4, #0
 8000236:	d1f9      	bne.n	800022c <__libc_fini_array+0x10>
 8000238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800023c:	f008 bd6e 	b.w	8008d1c <_fini>
 8000240:	080091f8 	.word	0x080091f8
 8000244:	080091f4 	.word	0x080091f4

08000248 <__libc_init_array>:
 8000248:	b570      	push	{r4, r5, r6, lr}
 800024a:	4e0d      	ldr	r6, [pc, #52]	; (8000280 <__libc_init_array+0x38>)
 800024c:	4d0d      	ldr	r5, [pc, #52]	; (8000284 <__libc_init_array+0x3c>)
 800024e:	1b76      	subs	r6, r6, r5
 8000250:	10b6      	asrs	r6, r6, #2
 8000252:	d006      	beq.n	8000262 <__libc_init_array+0x1a>
 8000254:	2400      	movs	r4, #0
 8000256:	f855 3b04 	ldr.w	r3, [r5], #4
 800025a:	3401      	adds	r4, #1
 800025c:	4798      	blx	r3
 800025e:	42a6      	cmp	r6, r4
 8000260:	d1f9      	bne.n	8000256 <__libc_init_array+0xe>
 8000262:	4e09      	ldr	r6, [pc, #36]	; (8000288 <__libc_init_array+0x40>)
 8000264:	4d09      	ldr	r5, [pc, #36]	; (800028c <__libc_init_array+0x44>)
 8000266:	1b76      	subs	r6, r6, r5
 8000268:	f008 fd52 	bl	8008d10 <_init>
 800026c:	10b6      	asrs	r6, r6, #2
 800026e:	d006      	beq.n	800027e <__libc_init_array+0x36>
 8000270:	2400      	movs	r4, #0
 8000272:	f855 3b04 	ldr.w	r3, [r5], #4
 8000276:	3401      	adds	r4, #1
 8000278:	4798      	blx	r3
 800027a:	42a6      	cmp	r6, r4
 800027c:	d1f9      	bne.n	8000272 <__libc_init_array+0x2a>
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	080091ec 	.word	0x080091ec
 8000284:	080091ec 	.word	0x080091ec
 8000288:	080091f4 	.word	0x080091f4
 800028c:	080091ec 	.word	0x080091ec

08000290 <memcpy>:
 8000290:	4684      	mov	ip, r0
 8000292:	ea41 0300 	orr.w	r3, r1, r0
 8000296:	f013 0303 	ands.w	r3, r3, #3
 800029a:	d16d      	bne.n	8000378 <memcpy+0xe8>
 800029c:	3a40      	subs	r2, #64	; 0x40
 800029e:	d341      	bcc.n	8000324 <memcpy+0x94>
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002dc:	f840 3b04 	str.w	r3, [r0], #4
 80002e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e4:	f840 3b04 	str.w	r3, [r0], #4
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	3a40      	subs	r2, #64	; 0x40
 8000322:	d2bd      	bcs.n	80002a0 <memcpy+0x10>
 8000324:	3230      	adds	r2, #48	; 0x30
 8000326:	d311      	bcc.n	800034c <memcpy+0xbc>
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	3a10      	subs	r2, #16
 800034a:	d2ed      	bcs.n	8000328 <memcpy+0x98>
 800034c:	320c      	adds	r2, #12
 800034e:	d305      	bcc.n	800035c <memcpy+0xcc>
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	3a04      	subs	r2, #4
 800035a:	d2f9      	bcs.n	8000350 <memcpy+0xc0>
 800035c:	3204      	adds	r2, #4
 800035e:	d008      	beq.n	8000372 <memcpy+0xe2>
 8000360:	07d2      	lsls	r2, r2, #31
 8000362:	bf1c      	itt	ne
 8000364:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000368:	f800 3b01 	strbne.w	r3, [r0], #1
 800036c:	d301      	bcc.n	8000372 <memcpy+0xe2>
 800036e:	880b      	ldrh	r3, [r1, #0]
 8000370:	8003      	strh	r3, [r0, #0]
 8000372:	4660      	mov	r0, ip
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	2a08      	cmp	r2, #8
 800037a:	d313      	bcc.n	80003a4 <memcpy+0x114>
 800037c:	078b      	lsls	r3, r1, #30
 800037e:	d08d      	beq.n	800029c <memcpy+0xc>
 8000380:	f010 0303 	ands.w	r3, r0, #3
 8000384:	d08a      	beq.n	800029c <memcpy+0xc>
 8000386:	f1c3 0304 	rsb	r3, r3, #4
 800038a:	1ad2      	subs	r2, r2, r3
 800038c:	07db      	lsls	r3, r3, #31
 800038e:	bf1c      	itt	ne
 8000390:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000394:	f800 3b01 	strbne.w	r3, [r0], #1
 8000398:	d380      	bcc.n	800029c <memcpy+0xc>
 800039a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800039e:	f820 3b02 	strh.w	r3, [r0], #2
 80003a2:	e77b      	b.n	800029c <memcpy+0xc>
 80003a4:	3a04      	subs	r2, #4
 80003a6:	d3d9      	bcc.n	800035c <memcpy+0xcc>
 80003a8:	3a01      	subs	r2, #1
 80003aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003ae:	f800 3b01 	strb.w	r3, [r0], #1
 80003b2:	d2f9      	bcs.n	80003a8 <memcpy+0x118>
 80003b4:	780b      	ldrb	r3, [r1, #0]
 80003b6:	7003      	strb	r3, [r0, #0]
 80003b8:	784b      	ldrb	r3, [r1, #1]
 80003ba:	7043      	strb	r3, [r0, #1]
 80003bc:	788b      	ldrb	r3, [r1, #2]
 80003be:	7083      	strb	r3, [r0, #2]
 80003c0:	4660      	mov	r0, ip
 80003c2:	4770      	bx	lr

080003c4 <__register_exitproc>:
 80003c4:	b470      	push	{r4, r5, r6}
 80003c6:	4c18      	ldr	r4, [pc, #96]	; (8000428 <__register_exitproc+0x64>)
 80003c8:	6825      	ldr	r5, [r4, #0]
 80003ca:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80003ce:	b31c      	cbz	r4, 8000418 <__register_exitproc+0x54>
 80003d0:	6865      	ldr	r5, [r4, #4]
 80003d2:	2d1f      	cmp	r5, #31
 80003d4:	dc25      	bgt.n	8000422 <__register_exitproc+0x5e>
 80003d6:	b938      	cbnz	r0, 80003e8 <__register_exitproc+0x24>
 80003d8:	1cab      	adds	r3, r5, #2
 80003da:	3501      	adds	r5, #1
 80003dc:	6065      	str	r5, [r4, #4]
 80003de:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80003e2:	2000      	movs	r0, #0
 80003e4:	bc70      	pop	{r4, r5, r6}
 80003e6:	4770      	bx	lr
 80003e8:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
 80003ec:	2802      	cmp	r0, #2
 80003ee:	f8cc 2088 	str.w	r2, [ip, #136]	; 0x88
 80003f2:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 80003f6:	f04f 0201 	mov.w	r2, #1
 80003fa:	fa02 f205 	lsl.w	r2, r2, r5
 80003fe:	ea46 0602 	orr.w	r6, r6, r2
 8000402:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8000406:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
 800040a:	d1e5      	bne.n	80003d8 <__register_exitproc+0x14>
 800040c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8000410:	4313      	orrs	r3, r2
 8000412:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8000416:	e7df      	b.n	80003d8 <__register_exitproc+0x14>
 8000418:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800041c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000420:	e7d6      	b.n	80003d0 <__register_exitproc+0xc>
 8000422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000426:	e7dd      	b.n	80003e4 <__register_exitproc+0x20>
 8000428:	080091e8 	.word	0x080091e8

0800042c <get_msg>:
  //uint8_t SEED[SEEDBYTES] = {0x9f,0x52,0xaf,0x92,0xca,0x16,0x5f,0xdc,0x38,0x78,0x8f,0x2b,0x59,0xba,0x02,0xe0,0x1c,0x82,0x81,0xff,0x7c,0x1e,0x60,0x50,0x46,0x88,0x04,0x3a,0x5f,0xe8,0x14,0xb0};
  //uint8_t SEED[SEEDBYTES] = {0x61,0x0a,0xfb,0x64,0xbe,0x8c,0xc1,0xdf,0x28,0x8c,0xfb,0x01,0x6e,0xe2,0xf4,0x4c,0x6c,0x07,0x11,0x3d,0xe7,0xf6,0xfe,0xe0,0x71,0xfe,0x0c,0x3f,0xe3,0x1c,0x62,0x15};
uint8_t SEED[SEEDBYTES] = {0x3e,0x80,0x9e,0xc8,0xdd,0x0f,0xec,0x0d,0x91,0x1a,0x4e,0x3f,0xac,0x20,0xf7,0x0f,0xbb,0x12,0x8c,0x5d,0xe9,0x4d,0xc7,0x18,0x4c,0xa7,0x31,0x0a,0xe9,0x15,0x7a,0x98};

uint8_t get_msg(uint8_t* data, uint8_t dlen)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af02      	add	r7, sp, #8
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	460b      	mov	r3, r1
 8000436:	70fb      	strb	r3, [r7, #3]
  crypto_sign(sm,&smlen, data, MLEN,sk);
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <get_msg+0x3c>)
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2320      	movs	r3, #32
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	490a      	ldr	r1, [pc, #40]	; (800046c <get_msg+0x40>)
 8000442:	480b      	ldr	r0, [pc, #44]	; (8000470 <get_msg+0x44>)
 8000444:	f000 fbe2 	bl	8000c0c <DILITHIUM_NAMESPACETOP>
  unpack_sig(c,&z,&h,sm);
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <get_msg+0x44>)
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <get_msg+0x48>)
 800044c:	490a      	ldr	r1, [pc, #40]	; (8000478 <get_msg+0x4c>)
 800044e:	480b      	ldr	r0, [pc, #44]	; (800047c <get_msg+0x50>)
 8000450:	f000 fdec 	bl	800102c <pqcrystals_dilithium2_refunpack_sig>
  simpleserial_put('r', 32, c);
 8000454:	4a09      	ldr	r2, [pc, #36]	; (800047c <get_msg+0x50>)
 8000456:	2120      	movs	r1, #32
 8000458:	2072      	movs	r0, #114	; 0x72
 800045a:	f007 f9d3 	bl	8007804 <simpleserial_put>
  return 0;
 800045e:	2300      	movs	r3, #0
}
 8000460:	4618      	mov	r0, r3
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20001ce8 	.word	0x20001ce8
 800046c:	2000049c 	.word	0x2000049c
 8000470:	200004a0 	.word	0x200004a0
 8000474:	20003768 	.word	0x20003768
 8000478:	20006768 	.word	0x20006768
 800047c:	200026c8 	.word	0x200026c8

08000480 <main>:

//////////////////////////////


int main(void)
{	
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	platform_init();
 8000484:	f007 f9f4 	bl	8007870 <platform_init>
	init_uart();
 8000488:	f007 fa42 	bl	8007910 <init_uart>
	trigger_setup();	
 800048c:	f007 fa96 	bl	80079bc <trigger_setup>
	simpleserial_init();
 8000490:	f007 f866 	bl	8007560 <simpleserial_init>
  crypto_sign_keypair(pk,sk,SEED);
 8000494:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <main+0x30>)
 8000496:	4907      	ldr	r1, [pc, #28]	; (80004b4 <main+0x34>)
 8000498:	4807      	ldr	r0, [pc, #28]	; (80004b8 <main+0x38>)
 800049a:	f000 f811 	bl	80004c0 <pqcrystals_dilithium2_refkeypair>

  simpleserial_addcmd('p',32,get_msg);
 800049e:	4a07      	ldr	r2, [pc, #28]	; (80004bc <main+0x3c>)
 80004a0:	2120      	movs	r1, #32
 80004a2:	2070      	movs	r0, #112	; 0x70
 80004a4:	f007 f876 	bl	8007594 <simpleserial_addcmd>

	while(1)
		simpleserial_get();
 80004a8:	f007 f8ca 	bl	8007640 <simpleserial_get>
 80004ac:	e7fc      	b.n	80004a8 <main+0x28>
 80004ae:	bf00      	nop
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20001ce8 	.word	0x20001ce8
 80004b8:	200017c8 	.word	0x200017c8
 80004bc:	0800042d 	.word	0x0800042d

080004c0 <pqcrystals_dilithium2_refkeypair>:
*                             array of CRYPTO_SECRETKEYBYTES bytes)
*
* Returns 0 (success)
**************************************************/
polyvecl global_y;
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk, uint8_t* SEED) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	f5ad 4d10 	sub.w	sp, sp, #36864	; 0x9000
 80004c6:	b0b4      	sub	sp, #208	; 0xd0
 80004c8:	af04      	add	r7, sp, #16
 80004ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004ce:	f843 0cb4 	str.w	r0, [r3, #-180]
 80004d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004d6:	f843 1cb8 	str.w	r1, [r3, #-184]
 80004da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004de:	f843 2cbc 	str.w	r2, [r3, #-188]
  polyvecl s1, s1hat;
  polyveck s2, t1, t0;

  /* Get randomness for rho, rhoprime and key */
  //randombytes(seedbuf, SEEDBYTES);
  memcpy(seedbuf,SEED, SEEDBYTES);
 80004e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80004e6:	4619      	mov	r1, r3
 80004e8:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 80004ec:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80004f0:	2220      	movs	r2, #32
 80004f2:	f851 1cbc 	ldr.w	r1, [r1, #-188]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff feca 	bl	8000290 <memcpy>
  shake256(seedbuf, 2*SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
 80004fc:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8000500:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000504:	f507 4010 	add.w	r0, r7, #36864	; 0x9000
 8000508:	f100 0034 	add.w	r0, r0, #52	; 0x34
 800050c:	2320      	movs	r3, #32
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	f006 fe82 	bl	8007218 <pqcrystals_dilithium_fips202_ref_shake256>
  rho = seedbuf;
 8000514:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8000518:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800051c:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8000520:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 8000524:	6013      	str	r3, [r2, #0]
  rhoprime = rho + SEEDBYTES;
 8000526:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 800052a:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3320      	adds	r3, #32
 8000532:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8000536:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 800053a:	6013      	str	r3, [r2, #0]
  key = rhoprime + CRHBYTES;
 800053c:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8000540:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3340      	adds	r3, #64	; 0x40
 8000548:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 800054c:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8000550:	6013      	str	r3, [r2, #0]

  /* Expand matrix */
  polyvec_matrix_expand(mat, rho);
 8000552:	f507 43a0 	add.w	r3, r7, #20480	; 0x5000
 8000556:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800055a:	3b2c      	subs	r3, #44	; 0x2c
 800055c:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8000560:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 8000564:	6811      	ldr	r1, [r2, #0]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fe0d 	bl	8001186 <pqcrystals_dilithium2_refpolyvec_matrix_expand>

  /* Sample short vectors s1 and s2 */
  polyvecl_uniform_eta(&s1, rhoprime, 0);
 800056c:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8000570:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8000574:	3b2c      	subs	r3, #44	; 0x2c
 8000576:	2200      	movs	r2, #0
 8000578:	f507 4110 	add.w	r1, r7, #36864	; 0x9000
 800057c:	f101 01b8 	add.w	r1, r1, #184	; 0xb8
 8000580:	6809      	ldr	r1, [r1, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fe4e 	bl	8001224 <pqcrystals_dilithium2_refpolyvecl_uniform_eta>
  polyveck_uniform_eta(&s2, rhoprime, L);
 8000588:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800058c:	3b2c      	subs	r3, #44	; 0x2c
 800058e:	2204      	movs	r2, #4
 8000590:	f507 4110 	add.w	r1, r7, #36864	; 0x9000
 8000594:	f101 01b8 	add.w	r1, r1, #184	; 0xb8
 8000598:	6809      	ldr	r1, [r1, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 ff90 	bl	80014c0 <pqcrystals_dilithium2_refpolyveck_uniform_eta>

  /* Matrix-vector multiplication */
  s1hat = s1;
 80005a0:	f507 5343 	add.w	r3, r7, #12480	; 0x30c0
 80005a4:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80005a8:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80005ac:	3bac      	subs	r3, #172	; 0xac
 80005ae:	f1a2 01ac 	sub.w	r1, r2, #172	; 0xac
 80005b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff fe6a 	bl	8000290 <memcpy>
  polyvecl_ntt(&s1hat);
 80005bc:	f507 5341 	add.w	r3, r7, #12352	; 0x3040
 80005c0:	3b2c      	subs	r3, #44	; 0x2c
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 feae 	bl	8001324 <pqcrystals_dilithium2_refpolyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
 80005c8:	f507 5241 	add.w	r2, r7, #12352	; 0x3040
 80005cc:	3a2c      	subs	r2, #44	; 0x2c
 80005ce:	f507 41a0 	add.w	r1, r7, #20480	; 0x5000
 80005d2:	f101 0140 	add.w	r1, r1, #64	; 0x40
 80005d6:	392c      	subs	r1, #44	; 0x2c
 80005d8:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80005dc:	3bac      	subs	r3, #172	; 0xac
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fe00 	bl	80011e4 <pqcrystals_dilithium2_refpolyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&t1);
 80005e4:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80005e8:	3bac      	subs	r3, #172	; 0xac
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 ff88 	bl	8001500 <pqcrystals_dilithium2_refpolyveck_reduce>
  polyveck_invntt_tomont(&t1);
 80005f0:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80005f4:	3bac      	subs	r3, #172	; 0xac
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f813 	bl	8001622 <pqcrystals_dilithium2_refpolyveck_invntt_tomont>

  /* Add error vector s2 */
  polyveck_add(&t1, &t1, &s2);
 80005fc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000600:	3a2c      	subs	r2, #44	; 0x2c
 8000602:	f507 5186 	add.w	r1, r7, #4288	; 0x10c0
 8000606:	39ac      	subs	r1, #172	; 0xac
 8000608:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800060c:	3bac      	subs	r3, #172	; 0xac
 800060e:	4618      	mov	r0, r3
 8000610:	f000 ffa8 	bl	8001564 <pqcrystals_dilithium2_refpolyveck_add>

  /* Extract t1 and write public key */
  polyveck_caddq(&t1);
 8000614:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8000618:	3bac      	subs	r3, #172	; 0xac
 800061a:	4618      	mov	r0, r3
 800061c:	f000 ff89 	bl	8001532 <pqcrystals_dilithium2_refpolyveck_caddq>
  polyveck_power2round(&t1, &t0, &t1);
 8000620:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8000624:	3aac      	subs	r2, #172	; 0xac
 8000626:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800062a:	39ac      	subs	r1, #172	; 0xac
 800062c:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8000630:	3bac      	subs	r3, #172	; 0xac
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f84e 	bl	80016d4 <pqcrystals_dilithium2_refpolyveck_power2round>
  pack_pk(pk, rho, &t1);
 8000638:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800063c:	3bac      	subs	r3, #172	; 0xac
 800063e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8000642:	4610      	mov	r0, r2
 8000644:	461a      	mov	r2, r3
 8000646:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 800064a:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 800064e:	6819      	ldr	r1, [r3, #0]
 8000650:	f850 0cb4 	ldr.w	r0, [r0, #-180]
 8000654:	f000 fb0f 	bl	8000c76 <pqcrystals_dilithium2_refpack_pk>

  /* Compute H(rho, t1) and write secret key */
  shake256(tr, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 8000658:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800065c:	461a      	mov	r2, r3
 800065e:	f507 4010 	add.w	r0, r7, #36864	; 0x9000
 8000662:	f100 0014 	add.w	r0, r0, #20
 8000666:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800066a:	f852 2cb4 	ldr.w	r2, [r2, #-180]
 800066e:	2120      	movs	r1, #32
 8000670:	f006 fdd2 	bl	8007218 <pqcrystals_dilithium_fips202_ref_shake256>
  pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
 8000674:	f507 4210 	add.w	r2, r7, #36864	; 0x9000
 8000678:	f102 0214 	add.w	r2, r2, #20
 800067c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000680:	4618      	mov	r0, r3
 8000682:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000686:	3b2c      	subs	r3, #44	; 0x2c
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800068e:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8000692:	3b2c      	subs	r3, #44	; 0x2c
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800069a:	3bac      	subs	r3, #172	; 0xac
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 80006a2:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f507 4110 	add.w	r1, r7, #36864	; 0x9000
 80006ac:	f101 01bc 	add.w	r1, r1, #188	; 0xbc
 80006b0:	6809      	ldr	r1, [r1, #0]
 80006b2:	f850 0cb8 	ldr.w	r0, [r0, #-184]
 80006b6:	f000 fb15 	bl	8000ce4 <pqcrystals_dilithium2_refpack_sk>

  return 0;
 80006ba:	2300      	movs	r3, #0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	f507 4710 	add.w	r7, r7, #36864	; 0x9000
 80006c2:	37c0      	adds	r7, #192	; 0xc0
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <pqcrystals_dilithium2_refsignature>:
int crypto_sign_signature(uint8_t *sig,
                          size_t *siglen,
                          const uint8_t *m,
                          size_t mlen,
                          const uint8_t *sk)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	f5ad 4d45 	sub.w	sp, sp, #50432	; 0xc500
 80006ce:	b0bd      	sub	sp, #244	; 0xf4
 80006d0:	af04      	add	r7, sp, #16
 80006d2:	f507 64bc 	add.w	r4, r7, #1504	; 0x5e0
 80006d6:	f2a4 54d4 	subw	r4, r4, #1492	; 0x5d4
 80006da:	6020      	str	r0, [r4, #0]
 80006dc:	f507 60bc 	add.w	r0, r7, #1504	; 0x5e0
 80006e0:	f5a0 60bb 	sub.w	r0, r0, #1496	; 0x5d8
 80006e4:	6001      	str	r1, [r0, #0]
 80006e6:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 80006ea:	f2a1 51dc 	subw	r1, r1, #1500	; 0x5dc
 80006ee:	600a      	str	r2, [r1, #0]
 80006f0:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 80006f4:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 80006f8:	6013      	str	r3, [r2, #0]
  unsigned int n;
  uint8_t seedbuf[3*SEEDBYTES + 2*CRHBYTES];
  uint8_t *rho, *tr, *key, *mu, *rhoprime;
  uint16_t nonce = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 8000700:	f102 02de 	add.w	r2, r2, #222	; 0xde
 8000704:	8013      	strh	r3, [r2, #0]
  polyvecl mat[K], s1, y, z;
  polyveck t0, s2, w1, w0, h;
  poly cp;
  keccak_state state;

  rho = seedbuf;
 8000706:	f507 4344 	add.w	r3, r7, #50176	; 0xc400
 800070a:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 800070e:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 8000712:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8000716:	6013      	str	r3, [r2, #0]
  tr = rho + SEEDBYTES;
 8000718:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 800071c:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3320      	adds	r3, #32
 8000724:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 8000728:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 800072c:	6013      	str	r3, [r2, #0]
  key = tr + SEEDBYTES;
 800072e:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 8000732:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3320      	adds	r3, #32
 800073a:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 800073e:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 8000742:	6013      	str	r3, [r2, #0]
  mu = key + SEEDBYTES;
 8000744:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 8000748:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3320      	adds	r3, #32
 8000750:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 8000754:	f102 02cc 	add.w	r2, r2, #204	; 0xcc
 8000758:	6013      	str	r3, [r2, #0]
  rhoprime = mu + CRHBYTES;
 800075a:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 800075e:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3340      	adds	r3, #64	; 0x40
 8000766:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 800076a:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 800076e:	6013      	str	r3, [r2, #0]
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 8000770:	f507 428b 	add.w	r2, r7, #17792	; 0x4580
 8000774:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8000778:	3afc      	subs	r2, #252	; 0xfc
 800077a:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 800077e:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	9302      	str	r3, [sp, #8]
 8000786:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 800078a:	f103 0320 	add.w	r3, r3, #32
 800078e:	3bfc      	subs	r3, #252	; 0xfc
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8000796:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800079a:	3b7c      	subs	r3, #124	; 0x7c
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	4613      	mov	r3, r2
 80007a0:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 80007a4:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	f507 4145 	add.w	r1, r7, #50432	; 0xc500
 80007ae:	f101 01d4 	add.w	r1, r1, #212	; 0xd4
 80007b2:	6809      	ldr	r1, [r1, #0]
 80007b4:	f507 4045 	add.w	r0, r7, #50432	; 0xc500
 80007b8:	f100 00d8 	add.w	r0, r0, #216	; 0xd8
 80007bc:	6800      	ldr	r0, [r0, #0]
 80007be:	f000 fb28 	bl	8000e12 <pqcrystals_dilithium2_refunpack_sk>

  /* Compute CRH(tr, msg) */
  shake256_init(&state);
 80007c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80007c6:	3bd0      	subs	r3, #208	; 0xd0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f006 fcab 	bl	8007124 <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, tr, SEEDBYTES);
 80007ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80007d2:	3bd0      	subs	r3, #208	; 0xd0
 80007d4:	2220      	movs	r2, #32
 80007d6:	f507 4145 	add.w	r1, r7, #50432	; 0xc500
 80007da:	f101 01d4 	add.w	r1, r1, #212	; 0xd4
 80007de:	6809      	ldr	r1, [r1, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f006 fcaf 	bl	8007144 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
 80007e6:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 80007ea:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 80007ee:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 80007f2:	f2a3 51dc 	subw	r1, r3, #1500	; 0x5dc
 80007f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80007fa:	3bd0      	subs	r3, #208	; 0xd0
 80007fc:	6812      	ldr	r2, [r2, #0]
 80007fe:	6809      	ldr	r1, [r1, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f006 fc9f 	bl	8007144 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 8000806:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800080a:	3bd0      	subs	r3, #208	; 0xd0
 800080c:	4618      	mov	r0, r3
 800080e:	f006 fcb1 	bl	8007174 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
 8000812:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000816:	3bd0      	subs	r3, #208	; 0xd0
 8000818:	461a      	mov	r2, r3
 800081a:	2140      	movs	r1, #64	; 0x40
 800081c:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 8000820:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 8000824:	6818      	ldr	r0, [r3, #0]
 8000826:	f006 fcb9 	bl	800719c <pqcrystals_dilithium_fips202_ref_shake256_squeeze>

#ifdef DILITHIUM_RANDOMIZED_SIGNING
  randombytes(rhoprime, CRHBYTES);
#else
  shake256(rhoprime, CRHBYTES, key, SEEDBYTES + CRHBYTES);
 800082a:	2360      	movs	r3, #96	; 0x60
 800082c:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 8000830:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	2140      	movs	r1, #64	; 0x40
 8000838:	f507 4045 	add.w	r0, r7, #50432	; 0xc500
 800083c:	f100 00c8 	add.w	r0, r0, #200	; 0xc8
 8000840:	6800      	ldr	r0, [r0, #0]
 8000842:	f006 fce9 	bl	8007218 <pqcrystals_dilithium_fips202_ref_shake256>
#endif

  /* Expand matrix and transform vectors */
  polyvec_matrix_expand(mat, rho);
 8000846:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 800084a:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800084e:	3b7c      	subs	r3, #124	; 0x7c
 8000850:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 8000854:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8000858:	6811      	ldr	r1, [r2, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fc93 	bl	8001186 <pqcrystals_dilithium2_refpolyvec_matrix_expand>
  polyvecl_ntt(&s1);
 8000860:	f507 43ea 	add.w	r3, r7, #29952	; 0x7500
 8000864:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000868:	3b7c      	subs	r3, #124	; 0x7c
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fd5a 	bl	8001324 <pqcrystals_dilithium2_refpolyvecl_ntt>
  polyveck_ntt(&s2);
 8000870:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8000874:	f103 0320 	add.w	r3, r3, #32
 8000878:	3bfc      	subs	r3, #252	; 0xfc
 800087a:	4618      	mov	r0, r3
 800087c:	f000 feb8 	bl	80015f0 <pqcrystals_dilithium2_refpolyveck_ntt>
  polyveck_ntt(&t0);
 8000880:	f507 438b 	add.w	r3, r7, #17792	; 0x4580
 8000884:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000888:	3bfc      	subs	r3, #252	; 0xfc
 800088a:	4618      	mov	r0, r3
 800088c:	f000 feb0 	bl	80015f0 <pqcrystals_dilithium2_refpolyveck_ntt>

rej:
  /* Sample intermediate vector y */
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
 8000890:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 8000894:	f103 03de 	add.w	r3, r3, #222	; 0xde
 8000898:	881a      	ldrh	r2, [r3, #0]
 800089a:	1c53      	adds	r3, r2, #1
 800089c:	f507 4145 	add.w	r1, r7, #50432	; 0xc500
 80008a0:	f101 01de 	add.w	r1, r1, #222	; 0xde
 80008a4:	800b      	strh	r3, [r1, #0]
 80008a6:	f507 43ca 	add.w	r3, r7, #25856	; 0x6500
 80008aa:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80008ae:	3b7c      	subs	r3, #124	; 0x7c
 80008b0:	f507 4145 	add.w	r1, r7, #50432	; 0xc500
 80008b4:	f101 01c8 	add.w	r1, r1, #200	; 0xc8
 80008b8:	6809      	ldr	r1, [r1, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fcd2 	bl	8001264 <pqcrystals_dilithium2_refpolyvecl_uniform_gamma1>
  polyvecl_uniform_gamma1(&global_y, rhoprime, nonce);
 80008c0:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 80008c4:	f103 03de 	add.w	r3, r3, #222	; 0xde
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 80008d0:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 80008d4:	6819      	ldr	r1, [r3, #0]
 80008d6:	48ca      	ldr	r0, [pc, #808]	; (8000c00 <pqcrystals_dilithium2_refsignature+0x538>)
 80008d8:	f000 fcc4 	bl	8001264 <pqcrystals_dilithium2_refpolyvecl_uniform_gamma1>
  global_y = y;
 80008dc:	4ac8      	ldr	r2, [pc, #800]	; (8000c00 <pqcrystals_dilithium2_refsignature+0x538>)
 80008de:	f507 43cb 	add.w	r3, r7, #25984	; 0x6580
 80008e2:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80008e6:	4610      	mov	r0, r2
 80008e8:	3bfc      	subs	r3, #252	; 0xfc
 80008ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008ee:	4619      	mov	r1, r3
 80008f0:	f7ff fcce 	bl	8000290 <memcpy>

  /* Matrix-vector multiplication */
  z = y;
 80008f4:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80008f8:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80008fc:	f507 42cb 	add.w	r2, r7, #25984	; 0x6580
 8000900:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8000904:	3bfc      	subs	r3, #252	; 0xfc
 8000906:	f1a2 01fc 	sub.w	r1, r2, #252	; 0xfc
 800090a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fcbe 	bl	8000290 <memcpy>
  polyvecl_ntt(&z);
 8000914:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8000918:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800091c:	3b7c      	subs	r3, #124	; 0x7c
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fd00 	bl	8001324 <pqcrystals_dilithium2_refpolyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 8000924:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8000928:	f102 0260 	add.w	r2, r2, #96	; 0x60
 800092c:	3a7c      	subs	r2, #124	; 0x7c
 800092e:	f507 4105 	add.w	r1, r7, #34048	; 0x8500
 8000932:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8000936:	397c      	subs	r1, #124	; 0x7c
 8000938:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 800093c:	f103 0320 	add.w	r3, r3, #32
 8000940:	3bfc      	subs	r3, #252	; 0xfc
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fc4e 	bl	80011e4 <pqcrystals_dilithium2_refpolyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&w1);
 8000948:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 800094c:	f103 0320 	add.w	r3, r3, #32
 8000950:	3bfc      	subs	r3, #252	; 0xfc
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fdd4 	bl	8001500 <pqcrystals_dilithium2_refpolyveck_reduce>
  polyveck_invntt_tomont(&w1);
 8000958:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 800095c:	f103 0320 	add.w	r3, r3, #32
 8000960:	3bfc      	subs	r3, #252	; 0xfc
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fe5d 	bl	8001622 <pqcrystals_dilithium2_refpolyveck_invntt_tomont>

  /* Decompose w and call the random oracle */
  polyveck_caddq(&w1);
 8000968:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 800096c:	f103 0320 	add.w	r3, r3, #32
 8000970:	3bfc      	subs	r3, #252	; 0xfc
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fddd 	bl	8001532 <pqcrystals_dilithium2_refpolyveck_caddq>
  polyveck_decompose(&w1, &w0, &w1);
 8000978:	f507 5217 	add.w	r2, r7, #9664	; 0x25c0
 800097c:	f102 0220 	add.w	r2, r2, #32
 8000980:	3afc      	subs	r2, #252	; 0xfc
 8000982:	f507 51af 	add.w	r1, r7, #5600	; 0x15e0
 8000986:	39fc      	subs	r1, #252	; 0xfc
 8000988:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 800098c:	f103 0320 	add.w	r3, r3, #32
 8000990:	3bfc      	subs	r3, #252	; 0xfc
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fec1 	bl	800171a <pqcrystals_dilithium2_refpolyveck_decompose>
  polyveck_pack_w1(sig, &w1);
 8000998:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 800099c:	f103 0320 	add.w	r3, r3, #32
 80009a0:	3bfc      	subs	r3, #252	; 0xfc
 80009a2:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 80009a6:	f2a2 52d4 	subw	r2, r2, #1492	; 0x5d4
 80009aa:	4619      	mov	r1, r3
 80009ac:	6810      	ldr	r0, [r2, #0]
 80009ae:	f000 ff00 	bl	80017b2 <pqcrystals_dilithium2_refpolyveck_pack_w1>

  shake256_init(&state);
 80009b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80009b6:	3bd0      	subs	r3, #208	; 0xd0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f006 fbb3 	bl	8007124 <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
 80009be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80009c2:	3bd0      	subs	r3, #208	; 0xd0
 80009c4:	2240      	movs	r2, #64	; 0x40
 80009c6:	f507 4145 	add.w	r1, r7, #50432	; 0xc500
 80009ca:	f101 01cc 	add.w	r1, r1, #204	; 0xcc
 80009ce:	6809      	ldr	r1, [r1, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f006 fbb7 	bl	8007144 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 80009d6:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 80009da:	f2a3 51d4 	subw	r1, r3, #1492	; 0x5d4
 80009de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80009e2:	3bd0      	subs	r3, #208	; 0xd0
 80009e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009e8:	6809      	ldr	r1, [r1, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f006 fbaa 	bl	8007144 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 80009f0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80009f4:	3bd0      	subs	r3, #208	; 0xd0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f006 fbbc 	bl	8007174 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeeze(sig, SEEDBYTES, &state);
 80009fc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000a00:	3bd0      	subs	r3, #208	; 0xd0
 8000a02:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 8000a06:	f2a2 50d4 	subw	r0, r2, #1492	; 0x5d4
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	6800      	ldr	r0, [r0, #0]
 8000a10:	f006 fbc4 	bl	800719c <pqcrystals_dilithium_fips202_ref_shake256_squeeze>
  poly_challenge(&cp, sig);
 8000a14:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8000a18:	f2a3 52d4 	subw	r2, r3, #1492	; 0x5d4
 8000a1c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8000a20:	3bfc      	subs	r3, #252	; 0xfc
 8000a22:	6811      	ldr	r1, [r2, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fa4a 	bl	8001ebe <pqcrystals_dilithium2_refpoly_challenge>
  poly_ntt(&cp);
 8000a2a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8000a2e:	3bfc      	subs	r3, #252	; 0xfc
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 ff60 	bl	80018f6 <pqcrystals_dilithium2_refpoly_ntt>

  /* Compute z, reject if it reveals secret */
  trigger_high();
 8000a36:	f006 ffe9 	bl	8007a0c <trigger_high>
  polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
 8000a3a:	f507 42ea 	add.w	r2, r7, #29952	; 0x7500
 8000a3e:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8000a42:	3a7c      	subs	r2, #124	; 0x7c
 8000a44:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 8000a48:	39fc      	subs	r1, #252	; 0xfc
 8000a4a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8000a4e:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000a52:	3b7c      	subs	r3, #124	; 0x7c
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fc97 	bl	8001388 <pqcrystals_dilithium2_refpolyvecl_pointwise_poly_montgomery>
  trigger_low();
 8000a5a:	f006 ffe3 	bl	8007a24 <trigger_low>
  polyvecl_invntt_tomont(&z);
 8000a5e:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8000a62:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000a66:	3b7c      	subs	r3, #124	; 0x7c
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fc74 	bl	8001356 <pqcrystals_dilithium2_refpolyvecl_invntt_tomont>
  polyvecl_add(&z, &z, &y);
 8000a6e:	f507 42ca 	add.w	r2, r7, #25856	; 0x6500
 8000a72:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8000a76:	3a7c      	subs	r2, #124	; 0x7c
 8000a78:	f507 41aa 	add.w	r1, r7, #21760	; 0x5500
 8000a7c:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8000a80:	397c      	subs	r1, #124	; 0x7c
 8000a82:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8000a86:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000a8a:	3b7c      	subs	r3, #124	; 0x7c
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fc26 	bl	80012de <pqcrystals_dilithium2_refpolyvecl_add>
  polyvecl_reduce(&z);
 8000a92:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8000a96:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000a9a:	3b7c      	subs	r3, #124	; 0x7c
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fc05 	bl	80012ac <pqcrystals_dilithium2_refpolyvecl_reduce>
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 8000aa2:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8000aa6:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8000aaa:	3b7c      	subs	r3, #124	; 0x7c
 8000aac:	4955      	ldr	r1, [pc, #340]	; (8000c04 <pqcrystals_dilithium2_refsignature+0x53c>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fce6 	bl	8001480 <pqcrystals_dilithium2_refpolyvecl_chknorm>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d000      	beq.n	8000abc <pqcrystals_dilithium2_refsignature+0x3f4>
    goto rej;
 8000aba:	e6e9      	b.n	8000890 <pqcrystals_dilithium2_refsignature+0x1c8>

  /* Check that subtracting cs2 does not change high bits of w and low bits
   * do not reveal secret information */
  polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
 8000abc:	f507 5257 	add.w	r2, r7, #13760	; 0x35c0
 8000ac0:	f102 0220 	add.w	r2, r2, #32
 8000ac4:	3afc      	subs	r2, #252	; 0xfc
 8000ac6:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 8000aca:	39fc      	subs	r1, #252	; 0xfc
 8000acc:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8000ad0:	3bfc      	subs	r3, #252	; 0xfc
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fdbe 	bl	8001654 <pqcrystals_dilithium2_refpolyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
 8000ad8:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8000adc:	3bfc      	subs	r3, #252	; 0xfc
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fd9f 	bl	8001622 <pqcrystals_dilithium2_refpolyveck_invntt_tomont>
  polyveck_sub(&w0, &w0, &h);
 8000ae4:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 8000ae8:	3afc      	subs	r2, #252	; 0xfc
 8000aea:	f507 51af 	add.w	r1, r7, #5600	; 0x15e0
 8000aee:	39fc      	subs	r1, #252	; 0xfc
 8000af0:	f507 53af 	add.w	r3, r7, #5600	; 0x15e0
 8000af4:	3bfc      	subs	r3, #252	; 0xfc
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fd57 	bl	80015aa <pqcrystals_dilithium2_refpolyveck_sub>
  polyveck_reduce(&w0);
 8000afc:	f507 53af 	add.w	r3, r7, #5600	; 0x15e0
 8000b00:	3bfc      	subs	r3, #252	; 0xfc
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fcfc 	bl	8001500 <pqcrystals_dilithium2_refpolyveck_reduce>
  if(polyveck_chknorm(&w0, GAMMA2 - BETA))
 8000b08:	f507 53af 	add.w	r3, r7, #5600	; 0x15e0
 8000b0c:	3bfc      	subs	r3, #252	; 0xfc
 8000b0e:	493e      	ldr	r1, [pc, #248]	; (8000c08 <pqcrystals_dilithium2_refsignature+0x540>)
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fdbf 	bl	8001694 <pqcrystals_dilithium2_refpolyveck_chknorm>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d000      	beq.n	8000b1e <pqcrystals_dilithium2_refsignature+0x456>
    goto rej;
 8000b1c:	e6b8      	b.n	8000890 <pqcrystals_dilithium2_refsignature+0x1c8>

  /* Compute hints for w1 */
  polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 8000b1e:	f507 428b 	add.w	r2, r7, #17792	; 0x4580
 8000b22:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8000b26:	3afc      	subs	r2, #252	; 0xfc
 8000b28:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 8000b2c:	39fc      	subs	r1, #252	; 0xfc
 8000b2e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8000b32:	3bfc      	subs	r3, #252	; 0xfc
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fd8d 	bl	8001654 <pqcrystals_dilithium2_refpolyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
 8000b3a:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8000b3e:	3bfc      	subs	r3, #252	; 0xfc
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fd6e 	bl	8001622 <pqcrystals_dilithium2_refpolyveck_invntt_tomont>
  polyveck_reduce(&h);
 8000b46:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8000b4a:	3bfc      	subs	r3, #252	; 0xfc
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fcd7 	bl	8001500 <pqcrystals_dilithium2_refpolyveck_reduce>
  if(polyveck_chknorm(&h, GAMMA2))
 8000b52:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8000b56:	3bfc      	subs	r3, #252	; 0xfc
 8000b58:	f44f 31ba 	mov.w	r1, #95232	; 0x17400
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fd99 	bl	8001694 <pqcrystals_dilithium2_refpolyveck_chknorm>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d000      	beq.n	8000b6a <pqcrystals_dilithium2_refsignature+0x4a2>
    goto rej;
 8000b68:	e692      	b.n	8000890 <pqcrystals_dilithium2_refsignature+0x1c8>

  polyveck_add(&w0, &w0, &h);
 8000b6a:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 8000b6e:	3afc      	subs	r2, #252	; 0xfc
 8000b70:	f507 51af 	add.w	r1, r7, #5600	; 0x15e0
 8000b74:	39fc      	subs	r1, #252	; 0xfc
 8000b76:	f507 53af 	add.w	r3, r7, #5600	; 0x15e0
 8000b7a:	3bfc      	subs	r3, #252	; 0xfc
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fcf1 	bl	8001564 <pqcrystals_dilithium2_refpolyveck_add>
  n = polyveck_make_hint(&h, &w0, &w1);
 8000b82:	f507 5217 	add.w	r2, r7, #9664	; 0x25c0
 8000b86:	f102 0220 	add.w	r2, r2, #32
 8000b8a:	3afc      	subs	r2, #252	; 0xfc
 8000b8c:	f507 51af 	add.w	r1, r7, #5600	; 0x15e0
 8000b90:	39fc      	subs	r1, #252	; 0xfc
 8000b92:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8000b96:	3bfc      	subs	r3, #252	; 0xfc
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 fde1 	bl	8001760 <pqcrystals_dilithium2_refpolyveck_make_hint>
 8000b9e:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 8000ba2:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 8000ba6:	6018      	str	r0, [r3, #0]
  if(n > OMEGA)
 8000ba8:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 8000bac:	f103 03c4 	add.w	r3, r3, #196	; 0xc4
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b50      	cmp	r3, #80	; 0x50
 8000bb4:	d900      	bls.n	8000bb8 <pqcrystals_dilithium2_refsignature+0x4f0>
    goto rej;
 8000bb6:	e66b      	b.n	8000890 <pqcrystals_dilithium2_refsignature+0x1c8>

  /* Write signature */
  pack_sig(sig, sig, &z, &h);
 8000bb8:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8000bbc:	3bfc      	subs	r3, #252	; 0xfc
 8000bbe:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8000bc2:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8000bc6:	3a7c      	subs	r2, #124	; 0x7c
 8000bc8:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 8000bcc:	f2a1 51d4 	subw	r1, r1, #1492	; 0x5d4
 8000bd0:	f507 60bc 	add.w	r0, r7, #1504	; 0x5e0
 8000bd4:	f2a0 50d4 	subw	r0, r0, #1492	; 0x5d4
 8000bd8:	6809      	ldr	r1, [r1, #0]
 8000bda:	6800      	ldr	r0, [r0, #0]
 8000bdc:	f000 f9b0 	bl	8000f40 <pqcrystals_dilithium2_refpack_sig>
  *siglen = CRYPTO_BYTES;
 8000be0:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8000be4:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f640 1274 	movw	r2, #2420	; 0x974
 8000bee:	601a      	str	r2, [r3, #0]
  return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f507 4745 	add.w	r7, r7, #50432	; 0xc500
 8000bf8:	37e4      	adds	r7, #228	; 0xe4
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd90      	pop	{r4, r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20009b68 	.word	0x20009b68
 8000c04:	0001ffb2 	.word	0x0001ffb2
 8000c08:	000173b2 	.word	0x000173b2

08000c0c <DILITHIUM_NAMESPACETOP>:
int crypto_sign(uint8_t *sm,
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af02      	add	r7, sp, #8
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	603b      	str	r3, [r7, #0]
  size_t i;

  for(i = 0; i < mlen; ++i)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	e011      	b.n	8000c44 <DILITHIUM_NAMESPACETOP+0x38>
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	3b01      	subs	r3, #1
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	441a      	add	r2, r3
 8000c2c:	6839      	ldr	r1, [r7, #0]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	1acb      	subs	r3, r1, r3
 8000c32:	f603 1373 	addw	r3, r3, #2419	; 0x973
 8000c36:	68f9      	ldr	r1, [r7, #12]
 8000c38:	440b      	add	r3, r1
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < mlen; ++i)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d3e9      	bcc.n	8000c20 <DILITHIUM_NAMESPACETOP+0x14>
  crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f603 1274 	addw	r2, r3, #2420	; 0x974
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff fd34 	bl	80006c8 <pqcrystals_dilithium2_refsignature>
  *smlen += mlen;
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	441a      	add	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	601a      	str	r2, [r3, #0]
  return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <pqcrystals_dilithium2_refpack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e00a      	b.n	8000c9e <pqcrystals_dilithium2_refpack_pk+0x28>
    pk[i] = rho[i];
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	441a      	add	r2, r3
 8000c8e:	68f9      	ldr	r1, [r7, #12]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	440b      	add	r3, r1
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2b1f      	cmp	r3, #31
 8000ca2:	d9f1      	bls.n	8000c88 <pqcrystals_dilithium2_refpack_pk+0x12>
  pk += SEEDBYTES;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3320      	adds	r3, #32
 8000ca8:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < K; ++i)
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	e011      	b.n	8000cd4 <pqcrystals_dilithium2_refpack_pk+0x5e>
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	1898      	adds	r0, r3, r2
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	029b      	lsls	r3, r3, #10
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f001 fbb2 	bl	8002432 <pqcrystals_dilithium2_refpolyt1_pack>
  for(i = 0; i < K; ++i)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d9ea      	bls.n	8000cb0 <pqcrystals_dilithium2_refpack_pk+0x3a>
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <pqcrystals_dilithium2_refpack_sk>:
             const uint8_t tr[SEEDBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0,
             const polyvecl *s1,
             const polyveck *s2)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e00a      	b.n	8000d0e <pqcrystals_dilithium2_refpack_sk+0x2a>
    sk[i] = rho[i];
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	441a      	add	r2, r3
 8000cfe:	68f9      	ldr	r1, [r7, #12]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	440b      	add	r3, r1
 8000d04:	7812      	ldrb	r2, [r2, #0]
 8000d06:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	2b1f      	cmp	r3, #31
 8000d12:	d9f1      	bls.n	8000cf8 <pqcrystals_dilithium2_refpack_sk+0x14>
  sk += SEEDBYTES;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	3320      	adds	r3, #32
 8000d18:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < SEEDBYTES; ++i)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	e00a      	b.n	8000d36 <pqcrystals_dilithium2_refpack_sk+0x52>
    sk[i] = key[i];
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	441a      	add	r2, r3
 8000d26:	68f9      	ldr	r1, [r7, #12]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	440b      	add	r3, r1
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3301      	adds	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	2b1f      	cmp	r3, #31
 8000d3a:	d9f1      	bls.n	8000d20 <pqcrystals_dilithium2_refpack_sk+0x3c>
  sk += SEEDBYTES;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3320      	adds	r3, #32
 8000d40:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < SEEDBYTES; ++i)
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	e00a      	b.n	8000d5e <pqcrystals_dilithium2_refpack_sk+0x7a>
    sk[i] = tr[i];
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	68f9      	ldr	r1, [r7, #12]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	440b      	add	r3, r1
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2b1f      	cmp	r3, #31
 8000d62:	d9f1      	bls.n	8000d48 <pqcrystals_dilithium2_refpack_sk+0x64>
  sk += SEEDBYTES;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	3320      	adds	r3, #32
 8000d68:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < L; ++i)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e011      	b.n	8000d94 <pqcrystals_dilithium2_refpack_sk+0xb0>
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	015b      	lsls	r3, r3, #5
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	1898      	adds	r0, r3, r2
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d86:	4413      	add	r3, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f001 f976 	bl	800207a <pqcrystals_dilithium2_refpolyeta_pack>
  for(i = 0; i < L; ++i)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d9ea      	bls.n	8000d70 <pqcrystals_dilithium2_refpack_sk+0x8c>
  sk += L*POLYETA_PACKEDBYTES;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000da0:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < K; ++i)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e011      	b.n	8000dcc <pqcrystals_dilithium2_refpack_sk+0xe8>
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	015b      	lsls	r3, r3, #5
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	1898      	adds	r0, r3, r2
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	029b      	lsls	r3, r3, #10
 8000dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f001 f95a 	bl	800207a <pqcrystals_dilithium2_refpolyeta_pack>
  for(i = 0; i < K; ++i)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d9ea      	bls.n	8000da8 <pqcrystals_dilithium2_refpack_sk+0xc4>
  sk += K*POLYETA_PACKEDBYTES;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000dd8:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < K; ++i)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e010      	b.n	8000e02 <pqcrystals_dilithium2_refpack_sk+0x11e>
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	18d0      	adds	r0, r2, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	029b      	lsls	r3, r3, #10
 8000df2:	6a3a      	ldr	r2, [r7, #32]
 8000df4:	4413      	add	r3, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	f001 fb9c 	bl	8002534 <pqcrystals_dilithium2_refpolyt0_pack>
  for(i = 0; i < K; ++i)
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d9eb      	bls.n	8000de0 <pqcrystals_dilithium2_refpack_sk+0xfc>
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <pqcrystals_dilithium2_refunpack_sk>:
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               polyvecl *s1,
               polyveck *s2,
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	603b      	str	r3, [r7, #0]
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e00a      	b.n	8000e3c <pqcrystals_dilithium2_refunpack_sk+0x2a>
    rho[i] = sk[i];
 8000e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	441a      	add	r2, r3
 8000e2c:	68f9      	ldr	r1, [r7, #12]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	440b      	add	r3, r1
 8000e32:	7812      	ldrb	r2, [r2, #0]
 8000e34:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2b1f      	cmp	r3, #31
 8000e40:	d9f1      	bls.n	8000e26 <pqcrystals_dilithium2_refunpack_sk+0x14>
  sk += SEEDBYTES;
 8000e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e44:	3320      	adds	r3, #32
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28

  for(i = 0; i < SEEDBYTES; ++i)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	e00a      	b.n	8000e64 <pqcrystals_dilithium2_refunpack_sk+0x52>
    key[i] = sk[i];
 8000e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	441a      	add	r2, r3
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	440b      	add	r3, r1
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	2b1f      	cmp	r3, #31
 8000e68:	d9f1      	bls.n	8000e4e <pqcrystals_dilithium2_refunpack_sk+0x3c>
  sk += SEEDBYTES;
 8000e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6c:	3320      	adds	r3, #32
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28

  for(i = 0; i < SEEDBYTES; ++i)
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e00a      	b.n	8000e8c <pqcrystals_dilithium2_refunpack_sk+0x7a>
    tr[i] = sk[i];
 8000e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	441a      	add	r2, r3
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	440b      	add	r3, r1
 8000e82:	7812      	ldrb	r2, [r2, #0]
 8000e84:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b1f      	cmp	r3, #31
 8000e90:	d9f1      	bls.n	8000e76 <pqcrystals_dilithium2_refunpack_sk+0x64>
  sk += SEEDBYTES;
 8000e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e94:	3320      	adds	r3, #32
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28

  for(i=0; i < L; ++i)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e011      	b.n	8000ec2 <pqcrystals_dilithium2_refunpack_sk+0xb0>
    polyeta_unpack(&s1->vec[i], sk + i*POLYETA_PACKEDBYTES);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	029b      	lsls	r3, r3, #10
 8000ea2:	6a3a      	ldr	r2, [r7, #32]
 8000ea4:	18d0      	adds	r0, r2, r3
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	015b      	lsls	r3, r3, #5
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f001 f992 	bl	80021e0 <pqcrystals_dilithium2_refpolyeta_unpack>
  for(i=0; i < L; ++i)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d9ea      	bls.n	8000e9e <pqcrystals_dilithium2_refunpack_sk+0x8c>
  sk += L*POLYETA_PACKEDBYTES;
 8000ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28

  for(i=0; i < K; ++i)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e011      	b.n	8000efa <pqcrystals_dilithium2_refunpack_sk+0xe8>
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	029b      	lsls	r3, r3, #10
 8000eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000edc:	18d0      	adds	r0, r2, r3
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	015b      	lsls	r3, r3, #5
 8000ee8:	461a      	mov	r2, r3
 8000eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eec:	4413      	add	r3, r2
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f001 f976 	bl	80021e0 <pqcrystals_dilithium2_refpolyeta_unpack>
  for(i=0; i < K; ++i)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d9ea      	bls.n	8000ed6 <pqcrystals_dilithium2_refunpack_sk+0xc4>
  sk += K*POLYETA_PACKEDBYTES;
 8000f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28

  for(i=0; i < K; ++i)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e010      	b.n	8000f30 <pqcrystals_dilithium2_refunpack_sk+0x11e>
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	029b      	lsls	r3, r3, #10
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	18d0      	adds	r0, r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000f1c:	fb02 f303 	mul.w	r3, r2, r3
 8000f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f22:	4413      	add	r3, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f001 fcc5 	bl	80028b4 <pqcrystals_dilithium2_refpolyt0_unpack>
  for(i=0; i < K; ++i)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d9eb      	bls.n	8000f0e <pqcrystals_dilithium2_refunpack_sk+0xfc>
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <pqcrystals_dilithium2_refpack_sig>:
**************************************************/
void pack_sig(uint8_t sig[CRYPTO_BYTES],
              const uint8_t c[SEEDBYTES],
              const polyvecl *z,
              const polyveck *h)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
  unsigned int i, j, k;

  for(i=0; i < SEEDBYTES; ++i)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e00a      	b.n	8000f6a <pqcrystals_dilithium2_refpack_sig+0x2a>
    sig[i] = c[i];
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	441a      	add	r2, r3
 8000f5a:	68f9      	ldr	r1, [r7, #12]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	440b      	add	r3, r1
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	701a      	strb	r2, [r3, #0]
  for(i=0; i < SEEDBYTES; ++i)
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	3301      	adds	r3, #1
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	2b1f      	cmp	r3, #31
 8000f6e:	d9f1      	bls.n	8000f54 <pqcrystals_dilithium2_refpack_sig+0x14>
  sig += SEEDBYTES;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3320      	adds	r3, #32
 8000f74:	60fb      	str	r3, [r7, #12]

  for(i = 0; i < L; ++i)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e011      	b.n	8000fa0 <pqcrystals_dilithium2_refpack_sig+0x60>
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4413      	add	r3, r2
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1898      	adds	r0, r3, r2
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	029b      	lsls	r3, r3, #10
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f001 ff34 	bl	8002e02 <pqcrystals_dilithium2_refpolyz_pack>
  for(i = 0; i < L; ++i)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d9ea      	bls.n	8000f7c <pqcrystals_dilithium2_refpack_sig+0x3c>
  sig += L*POLYZ_PACKEDBYTES;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Encode h */
  for(i = 0; i < OMEGA + K; ++i)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e007      	b.n	8000fc4 <pqcrystals_dilithium2_refpack_sig+0x84>
    sig[i] = 0;
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	4413      	add	r3, r2
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < OMEGA + K; ++i)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	2b53      	cmp	r3, #83	; 0x53
 8000fc8:	d9f4      	bls.n	8000fb4 <pqcrystals_dilithium2_refpack_sig+0x74>

  k = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e023      	b.n	800101c <pqcrystals_dilithium2_refpack_sig+0xdc>
    for(j = 0; j < N; ++j)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	e013      	b.n	8001002 <pqcrystals_dilithium2_refpack_sig+0xc2>
      if(h->vec[i].coeffs[j] != 0)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	0211      	lsls	r1, r2, #8
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	440a      	add	r2, r1
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d007      	beq.n	8000ffc <pqcrystals_dilithium2_refpack_sig+0xbc>
        sig[k++] = j;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	617a      	str	r2, [r7, #20]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	701a      	strb	r2, [r3, #0]
    for(j = 0; j < N; ++j)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	3301      	adds	r3, #1
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2bff      	cmp	r3, #255	; 0xff
 8001006:	d9e8      	bls.n	8000fda <pqcrystals_dilithium2_refpack_sig+0x9a>

    sig[OMEGA + i] = k;
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	3350      	adds	r3, #80	; 0x50
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < K; ++i) {
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3301      	adds	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d9d8      	bls.n	8000fd4 <pqcrystals_dilithium2_refpack_sig+0x94>
  }
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <pqcrystals_dilithium2_refunpack_sig>:
**************************************************/
int unpack_sig(uint8_t c[SEEDBYTES],
               polyvecl *z,
               polyveck *h,
               const uint8_t sig[CRYPTO_BYTES])
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
  unsigned int i, j, k;

  for(i = 0; i < SEEDBYTES; ++i)
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e00a      	b.n	8001056 <pqcrystals_dilithium2_refunpack_sig+0x2a>
    c[i] = sig[i];
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	441a      	add	r2, r3
 8001046:	68f9      	ldr	r1, [r7, #12]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	440b      	add	r3, r1
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < SEEDBYTES; ++i)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	3301      	adds	r3, #1
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	2b1f      	cmp	r3, #31
 800105a:	d9f1      	bls.n	8001040 <pqcrystals_dilithium2_refunpack_sig+0x14>
  sig += SEEDBYTES;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3320      	adds	r3, #32
 8001060:	603b      	str	r3, [r7, #0]

  for(i = 0; i < L; ++i)
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	e011      	b.n	800108c <pqcrystals_dilithium2_refunpack_sig+0x60>
    polyz_unpack(&z->vec[i], sig + i*POLYZ_PACKEDBYTES);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	029b      	lsls	r3, r3, #10
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	18d0      	adds	r0, r2, r3
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	461a      	mov	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f001 ff9c 	bl	8002fbe <pqcrystals_dilithium2_refpolyz_unpack>
  for(i = 0; i < L; ++i)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d9ea      	bls.n	8001068 <pqcrystals_dilithium2_refunpack_sig+0x3c>
  sig += L*POLYZ_PACKEDBYTES;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001098:	603b      	str	r3, [r7, #0]

  /* Decode h */
  k = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e057      	b.n	8001154 <pqcrystals_dilithium2_refunpack_sig+0x128>
    for(j = 0; j < N; ++j)
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	e00a      	b.n	80010c0 <pqcrystals_dilithium2_refunpack_sig+0x94>
      h->vec[i].coeffs[j] = 0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	0211      	lsls	r1, r2, #8
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	440a      	add	r2, r1
 80010b4:	2100      	movs	r1, #0
 80010b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(j = 0; j < N; ++j)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	3301      	adds	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2bff      	cmp	r3, #255	; 0xff
 80010c4:	d9f1      	bls.n	80010aa <pqcrystals_dilithium2_refunpack_sig+0x7e>

    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3350      	adds	r3, #80	; 0x50
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d806      	bhi.n	80010e6 <pqcrystals_dilithium2_refunpack_sig+0xba>
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	3350      	adds	r3, #80	; 0x50
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b50      	cmp	r3, #80	; 0x50
 80010e4:	d901      	bls.n	80010ea <pqcrystals_dilithium2_refunpack_sig+0xbe>
      return 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e049      	b.n	800117e <pqcrystals_dilithium2_refunpack_sig+0x152>

    for(j = k; j < sig[OMEGA + i]; ++j) {
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	e01f      	b.n	8001130 <pqcrystals_dilithium2_refunpack_sig+0x104>
      /* Coefficients are ordered for strong unforgeability */
      if(j > k && sig[j] <= sig[j-1]) return 1;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d90c      	bls.n	8001112 <pqcrystals_dilithium2_refunpack_sig+0xe6>
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	4413      	add	r3, r2
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	3b01      	subs	r3, #1
 8001104:	6839      	ldr	r1, [r7, #0]
 8001106:	440b      	add	r3, r1
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d801      	bhi.n	8001112 <pqcrystals_dilithium2_refunpack_sig+0xe6>
 800110e:	2301      	movs	r3, #1
 8001110:	e035      	b.n	800117e <pqcrystals_dilithium2_refunpack_sig+0x152>
      h->vec[i].coeffs[sig[j]] = 1;
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	0212      	lsls	r2, r2, #8
 8001122:	440a      	add	r2, r1
 8001124:	2101      	movs	r1, #1
 8001126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(j = k; j < sig[OMEGA + i]; ++j) {
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	3301      	adds	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	3350      	adds	r3, #80	; 0x50
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	4293      	cmp	r3, r2
 8001140:	d3d6      	bcc.n	80010f0 <pqcrystals_dilithium2_refunpack_sig+0xc4>
    }

    k = sig[OMEGA + i];
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3350      	adds	r3, #80	; 0x50
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	617b      	str	r3, [r7, #20]
  for(i = 0; i < K; ++i) {
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d9a4      	bls.n	80010a4 <pqcrystals_dilithium2_refunpack_sig+0x78>
  }

  /* Extra indices are zero for strong unforgeability */
  for(j = k; j < OMEGA; ++j)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	e00a      	b.n	8001176 <pqcrystals_dilithium2_refunpack_sig+0x14a>
    if(sig[j])
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <pqcrystals_dilithium2_refunpack_sig+0x144>
      return 1;
 800116c:	2301      	movs	r3, #1
 800116e:	e006      	b.n	800117e <pqcrystals_dilithium2_refunpack_sig+0x152>
  for(j = k; j < OMEGA; ++j)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	3301      	adds	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	2b4f      	cmp	r3, #79	; 0x4f
 800117a:	d9f1      	bls.n	8001160 <pqcrystals_dilithium2_refunpack_sig+0x134>

  return 0;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <pqcrystals_dilithium2_refpolyvec_matrix_expand>:
*              or AES256CTR(rho,j|i).
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
  unsigned int i, j;

  for(i = 0; i < K; ++i)
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	e01e      	b.n	80011d4 <pqcrystals_dilithium2_refpolyvec_matrix_expand+0x4e>
    for(j = 0; j < L; ++j)
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	e015      	b.n	80011c8 <pqcrystals_dilithium2_refpolyvec_matrix_expand+0x42>
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	031b      	lsls	r3, r3, #12
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	441a      	add	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	029b      	lsls	r3, r3, #10
 80011a8:	18d0      	adds	r0, r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	461a      	mov	r2, r3
 80011bc:	6839      	ldr	r1, [r7, #0]
 80011be:	f000 fcdd 	bl	8001b7c <pqcrystals_dilithium2_refpoly_uniform>
    for(j = 0; j < L; ++j)
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3301      	adds	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d9e6      	bls.n	800119c <pqcrystals_dilithium2_refpolyvec_matrix_expand+0x16>
  for(i = 0; i < K; ++i)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3301      	adds	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d9dd      	bls.n	8001196 <pqcrystals_dilithium2_refpolyvec_matrix_expand+0x10>
}
 80011da:	bf00      	nop
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <pqcrystals_dilithium2_refpolyvec_matrix_pointwise_montgomery>:

void polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e00e      	b.n	8001214 <pqcrystals_dilithium2_refpolyvec_matrix_pointwise_montgomery+0x30>
    polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	029b      	lsls	r3, r3, #10
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	18d0      	adds	r0, r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	031b      	lsls	r3, r3, #12
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	4619      	mov	r1, r3
 800120a:	f000 f8dd 	bl	80013c8 <pqcrystals_dilithium2_refpolyvecl_pointwise_acc_montgomery>
  for(i = 0; i < K; ++i)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2b03      	cmp	r3, #3
 8001218:	d9ed      	bls.n	80011f6 <pqcrystals_dilithium2_refpolyvec_matrix_pointwise_montgomery+0x12>
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <pqcrystals_dilithium2_refpolyvecl_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length L **************/
/**************************************************************/

void polyvecl_uniform_eta(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	4613      	mov	r3, r2
 8001230:	80fb      	strh	r3, [r7, #6]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	e00d      	b.n	8001254 <pqcrystals_dilithium2_refpolyvecl_uniform_eta+0x30>
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	029b      	lsls	r3, r3, #10
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	18d0      	adds	r0, r2, r3
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	80fa      	strh	r2, [r7, #6]
 8001246:	461a      	mov	r2, r3
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	f000 fd9b 	bl	8001d84 <pqcrystals_dilithium2_refpoly_uniform_eta>
  for(i = 0; i < L; ++i)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d9ee      	bls.n	8001238 <pqcrystals_dilithium2_refpolyvecl_uniform_eta+0x14>
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <pqcrystals_dilithium2_refpolyvecl_uniform_gamma1>:

void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	4613      	mov	r3, r2
 8001270:	80fb      	strh	r3, [r7, #6]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e011      	b.n	800129c <pqcrystals_dilithium2_refpolyvecl_uniform_gamma1+0x38>
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	029b      	lsls	r3, r3, #10
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	18d0      	adds	r0, r2, r3
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	b29a      	uxth	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	b29b      	uxth	r3, r3
 800128e:	461a      	mov	r2, r3
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	f000 fddc 	bl	8001e4e <pqcrystals_dilithium2_refpoly_uniform_gamma1>
  for(i = 0; i < L; ++i)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d9ea      	bls.n	8001278 <pqcrystals_dilithium2_refpolyvecl_uniform_gamma1+0x14>
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <pqcrystals_dilithium2_refpolyvecl_reduce>:

void polyvecl_reduce(polyvecl *v) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < L; ++i)
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e009      	b.n	80012ce <pqcrystals_dilithium2_refpolyvecl_reduce+0x22>
    poly_reduce(&v->vec[i]);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	029b      	lsls	r3, r3, #10
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fa97 	bl	80017f6 <pqcrystals_dilithium2_refpoly_reduce>
  for(i = 0; i < L; ++i)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d9f2      	bls.n	80012ba <pqcrystals_dilithium2_refpolyvecl_reduce+0xe>
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <pqcrystals_dilithium2_refpolyvecl_add>:
*
* Arguments:   - polyvecl *w: pointer to output vector
*              - const polyvecl *u: pointer to first summand
*              - const polyvecl *v: pointer to second summand
**************************************************/
void polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v) {
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < L; ++i)
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e011      	b.n	8001314 <pqcrystals_dilithium2_refpolyvecl_add+0x36>
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	029b      	lsls	r3, r3, #10
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	18d0      	adds	r0, r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	18d1      	adds	r1, r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	029b      	lsls	r3, r3, #10
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	461a      	mov	r2, r3
 800130a:	f000 fab0 	bl	800186e <pqcrystals_dilithium2_refpoly_add>
  for(i = 0; i < L; ++i)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d9ea      	bls.n	80012f0 <pqcrystals_dilithium2_refpolyvecl_add+0x12>
}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <pqcrystals_dilithium2_refpolyvecl_ntt>:
* Description: Forward NTT of all polynomials in vector of length L. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyvecl *v: pointer to input/output vector
**************************************************/
void polyvecl_ntt(polyvecl *v) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < L; ++i)
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	e009      	b.n	8001346 <pqcrystals_dilithium2_refpolyvecl_ntt+0x22>
    poly_ntt(&v->vec[i]);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	029b      	lsls	r3, r3, #10
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fadb 	bl	80018f6 <pqcrystals_dilithium2_refpoly_ntt>
  for(i = 0; i < L; ++i)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3301      	adds	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d9f2      	bls.n	8001332 <pqcrystals_dilithium2_refpolyvecl_ntt+0xe>
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <pqcrystals_dilithium2_refpolyvecl_invntt_tomont>:

void polyvecl_invntt_tomont(polyvecl *v) {
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < L; ++i)
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	e009      	b.n	8001378 <pqcrystals_dilithium2_refpolyvecl_invntt_tomont+0x22>
    poly_invntt_tomont(&v->vec[i]);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f000 face 	bl	800190e <pqcrystals_dilithium2_refpoly_invntt_tomont>
  for(i = 0; i < L; ++i)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b03      	cmp	r3, #3
 800137c:	d9f2      	bls.n	8001364 <pqcrystals_dilithium2_refpolyvecl_invntt_tomont+0xe>
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <pqcrystals_dilithium2_refpolyvecl_pointwise_poly_montgomery>:

void polyvecl_pointwise_poly_montgomery(polyvecl *r, const poly *a, const polyvecl *v) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < L; ++i)
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	e00e      	b.n	80013b8 <pqcrystals_dilithium2_refpolyvecl_pointwise_poly_montgomery+0x30>
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	029b      	lsls	r3, r3, #10
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	18d0      	adds	r0, r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	029b      	lsls	r3, r3, #10
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	461a      	mov	r2, r3
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	f000 faba 	bl	8001926 <pqcrystals_dilithium2_refpoly_pointwise_montgomery>
  for(i = 0; i < L; ++i)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d9ed      	bls.n	800139a <pqcrystals_dilithium2_refpolyvecl_pointwise_poly_montgomery+0x12>
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <pqcrystals_dilithium2_refpolyvecl_pointwise_acc_montgomery>:
*              - const polyvecl *v: pointer to second input vector
**************************************************/
void polyvecl_pointwise_acc_montgomery(poly *w,
                                       const polyvecl *u,
                                       const polyvecl *v)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80013d4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80013d8:	6018      	str	r0, [r3, #0]
 80013da:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80013de:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80013e2:	6019      	str	r1, [r3, #0]
 80013e4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80013e8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80013ec:	601a      	str	r2, [r3, #0]
  unsigned int i;
  poly t;

  poly_pointwise_montgomery(w, &u->vec[0], &v->vec[0]);
 80013ee:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80013f2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80013f6:	6819      	ldr	r1, [r3, #0]
 80013f8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80013fc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001406:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	f000 fa8b 	bl	8001926 <pqcrystals_dilithium2_refpoly_pointwise_montgomery>
  for(i = 1; i < L; ++i) {
 8001410:	2301      	movs	r3, #1
 8001412:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001416:	e029      	b.n	800146c <pqcrystals_dilithium2_refpolyvecl_pointwise_acc_montgomery+0xa4>
    poly_pointwise_montgomery(&t, &u->vec[i], &v->vec[i]);
 8001418:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800141c:	f5a3 6282 	sub.w	r2, r3, #1040	; 0x410
 8001420:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001424:	029b      	lsls	r3, r3, #10
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	18d1      	adds	r1, r2, r3
 800142a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800142e:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8001432:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	441a      	add	r2, r3
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fa70 	bl	8001926 <pqcrystals_dilithium2_refpoly_pointwise_montgomery>
    poly_add(w, w, &t);
 8001446:	f107 0214 	add.w	r2, r7, #20
 800144a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800144e:	f2a3 410c 	subw	r1, r3, #1036	; 0x40c
 8001452:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001456:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800145a:	6809      	ldr	r1, [r1, #0]
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	f000 fa06 	bl	800186e <pqcrystals_dilithium2_refpoly_add>
  for(i = 1; i < L; ++i) {
 8001462:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001466:	3301      	adds	r3, #1
 8001468:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800146c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001470:	2b03      	cmp	r3, #3
 8001472:	d9d1      	bls.n	8001418 <pqcrystals_dilithium2_refpolyvecl_pointwise_acc_montgomery+0x50>
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <pqcrystals_dilithium2_refpolyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < L; ++i)
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	e00f      	b.n	80014b0 <pqcrystals_dilithium2_refpolyvecl_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	029b      	lsls	r3, r3, #10
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	6839      	ldr	r1, [r7, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 faf0 	bl	8001a80 <pqcrystals_dilithium2_refpoly_chknorm>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <pqcrystals_dilithium2_refpolyvecl_chknorm+0x2a>
      return 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e006      	b.n	80014b8 <pqcrystals_dilithium2_refpolyvecl_chknorm+0x38>
  for(i = 0; i < L; ++i)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d9ec      	bls.n	8001490 <pqcrystals_dilithium2_refpolyvecl_chknorm+0x10>

  return 0;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <pqcrystals_dilithium2_refpolyveck_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/

void polyveck_uniform_eta(polyveck *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	4613      	mov	r3, r2
 80014cc:	80fb      	strh	r3, [r7, #6]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e00d      	b.n	80014f0 <pqcrystals_dilithium2_refpolyveck_uniform_eta+0x30>
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	029b      	lsls	r3, r3, #10
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	18d0      	adds	r0, r2, r3
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	80fa      	strh	r2, [r7, #6]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	f000 fc4d 	bl	8001d84 <pqcrystals_dilithium2_refpoly_uniform_eta>
  for(i = 0; i < K; ++i)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d9ee      	bls.n	80014d4 <pqcrystals_dilithium2_refpolyveck_uniform_eta+0x14>
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <pqcrystals_dilithium2_refpolyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e009      	b.n	8001522 <pqcrystals_dilithium2_refpolyveck_reduce+0x22>
    poly_reduce(&v->vec[i]);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	029b      	lsls	r3, r3, #10
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f96d 	bl	80017f6 <pqcrystals_dilithium2_refpoly_reduce>
  for(i = 0; i < K; ++i)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d9f2      	bls.n	800150e <pqcrystals_dilithium2_refpolyveck_reduce+0xe>
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <pqcrystals_dilithium2_refpolyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e009      	b.n	8001554 <pqcrystals_dilithium2_refpolyveck_caddq+0x22>
    poly_caddq(&v->vec[i]);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	029b      	lsls	r3, r3, #10
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f972 	bl	8001832 <pqcrystals_dilithium2_refpoly_caddq>
  for(i = 0; i < K; ++i)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d9f2      	bls.n	8001540 <pqcrystals_dilithium2_refpolyveck_caddq+0xe>
}
 800155a:	bf00      	nop
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <pqcrystals_dilithium2_refpolyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e011      	b.n	800159a <pqcrystals_dilithium2_refpolyveck_add+0x36>
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	029b      	lsls	r3, r3, #10
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	18d0      	adds	r0, r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	029b      	lsls	r3, r3, #10
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	18d1      	adds	r1, r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	029b      	lsls	r3, r3, #10
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	461a      	mov	r2, r3
 8001590:	f000 f96d 	bl	800186e <pqcrystals_dilithium2_refpoly_add>
  for(i = 0; i < K; ++i)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d9ea      	bls.n	8001576 <pqcrystals_dilithium2_refpolyveck_add+0x12>
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <pqcrystals_dilithium2_refpolyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e011      	b.n	80015e0 <pqcrystals_dilithium2_refpolyveck_sub+0x36>
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	029b      	lsls	r3, r3, #10
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	18d0      	adds	r0, r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	029b      	lsls	r3, r3, #10
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	18d1      	adds	r1, r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	029b      	lsls	r3, r3, #10
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	f000 f96c 	bl	80018b2 <pqcrystals_dilithium2_refpoly_sub>
  for(i = 0; i < K; ++i)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d9ea      	bls.n	80015bc <pqcrystals_dilithium2_refpolyveck_sub+0x12>
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <pqcrystals_dilithium2_refpolyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_ntt(polyveck *v) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e009      	b.n	8001612 <pqcrystals_dilithium2_refpolyveck_ntt+0x22>
    poly_ntt(&v->vec[i]);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	029b      	lsls	r3, r3, #10
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f975 	bl	80018f6 <pqcrystals_dilithium2_refpoly_ntt>
  for(i = 0; i < K; ++i)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3301      	adds	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d9f2      	bls.n	80015fe <pqcrystals_dilithium2_refpolyveck_ntt+0xe>
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <pqcrystals_dilithium2_refpolyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e009      	b.n	8001644 <pqcrystals_dilithium2_refpolyveck_invntt_tomont+0x22>
    poly_invntt_tomont(&v->vec[i]);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	029b      	lsls	r3, r3, #10
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f000 f968 	bl	800190e <pqcrystals_dilithium2_refpoly_invntt_tomont>
  for(i = 0; i < K; ++i)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3301      	adds	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d9f2      	bls.n	8001630 <pqcrystals_dilithium2_refpolyveck_invntt_tomont+0xe>
}
 800164a:	bf00      	nop
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <pqcrystals_dilithium2_refpolyveck_pointwise_poly_montgomery>:

void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e00e      	b.n	8001684 <pqcrystals_dilithium2_refpolyveck_pointwise_poly_montgomery+0x30>
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	029b      	lsls	r3, r3, #10
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	18d0      	adds	r0, r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	029b      	lsls	r3, r3, #10
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	461a      	mov	r2, r3
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	f000 f954 	bl	8001926 <pqcrystals_dilithium2_refpoly_pointwise_montgomery>
  for(i = 0; i < K; ++i)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d9ed      	bls.n	8001666 <pqcrystals_dilithium2_refpolyveck_pointwise_poly_montgomery+0x12>
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <pqcrystals_dilithium2_refpolyveck_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyveck_chknorm(const polyveck *v, int32_t bound) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e00f      	b.n	80016c4 <pqcrystals_dilithium2_refpolyveck_chknorm+0x30>
    if(poly_chknorm(&v->vec[i], bound))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	029b      	lsls	r3, r3, #10
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	6839      	ldr	r1, [r7, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f9e6 	bl	8001a80 <pqcrystals_dilithium2_refpoly_chknorm>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <pqcrystals_dilithium2_refpolyveck_chknorm+0x2a>
      return 1;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e006      	b.n	80016cc <pqcrystals_dilithium2_refpolyveck_chknorm+0x38>
  for(i = 0; i < K; ++i)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3301      	adds	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d9ec      	bls.n	80016a4 <pqcrystals_dilithium2_refpolyveck_chknorm+0x10>

  return 0;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <pqcrystals_dilithium2_refpolyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e011      	b.n	800170a <pqcrystals_dilithium2_refpolyveck_power2round+0x36>
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	029b      	lsls	r3, r3, #10
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	18d0      	adds	r0, r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	029b      	lsls	r3, r3, #10
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	18d1      	adds	r1, r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	029b      	lsls	r3, r3, #10
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	461a      	mov	r2, r3
 8001700:	f000 f947 	bl	8001992 <pqcrystals_dilithium2_refpoly_power2round>
  for(i = 0; i < K; ++i)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d9ea      	bls.n	80016e6 <pqcrystals_dilithium2_refpolyveck_power2round+0x12>
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <pqcrystals_dilithium2_refpolyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for(i = 0; i < K; ++i)
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e011      	b.n	8001750 <pqcrystals_dilithium2_refpolyveck_decompose+0x36>
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	029b      	lsls	r3, r3, #10
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	18d0      	adds	r0, r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	029b      	lsls	r3, r3, #10
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	18d1      	adds	r1, r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	029b      	lsls	r3, r3, #10
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	461a      	mov	r2, r3
 8001746:	f000 f948 	bl	80019da <pqcrystals_dilithium2_refpoly_decompose>
  for(i = 0; i < K; ++i)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d9ea      	bls.n	800172c <pqcrystals_dilithium2_refpolyveck_decompose+0x12>
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <pqcrystals_dilithium2_refpolyveck_make_hint>:
* Returns number of 1 bits.
**************************************************/
unsigned int polyveck_make_hint(polyveck *h,
                                const polyveck *v0,
                                const polyveck *v1)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]

  for(i = 0; i < K; ++i)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e015      	b.n	80017a2 <pqcrystals_dilithium2_refpolyveck_make_hint+0x42>
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	029b      	lsls	r3, r3, #10
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	18d0      	adds	r0, r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	029b      	lsls	r3, r3, #10
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	18d1      	adds	r1, r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	029b      	lsls	r3, r3, #10
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	461a      	mov	r2, r3
 8001790:	f000 f947 	bl	8001a22 <pqcrystals_dilithium2_refpoly_make_hint>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4413      	add	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
  for(i = 0; i < K; ++i)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d9e6      	bls.n	8001776 <pqcrystals_dilithium2_refpolyveck_make_hint+0x16>

  return s;
 80017a8:	693b      	ldr	r3, [r7, #16]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <pqcrystals_dilithium2_refpolyveck_pack_w1>:

  for(i = 0; i < K; ++i)
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
}

void polyveck_pack_w1(uint8_t r[K*POLYW1_PACKEDBYTES], const polyveck *w1) {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
  unsigned int i;

  for(i = 0; i < K; ++i)
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	e011      	b.n	80017e6 <pqcrystals_dilithium2_refpolyveck_pack_w1+0x34>
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	019b      	lsls	r3, r3, #6
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	1898      	adds	r0, r3, r2
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	029b      	lsls	r3, r3, #10
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	4413      	add	r3, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f001 fd60 	bl	80032a0 <pqcrystals_dilithium2_refpolyw1_pack>
  for(i = 0; i < K; ++i)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3301      	adds	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d9ea      	bls.n	80017c2 <pqcrystals_dilithium2_refpolyveck_pack_w1+0x10>
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <pqcrystals_dilithium2_refpoly_reduce>:
* Description: Inplace reduction of all coefficients of polynomial to
*              representative in [-6283009,6283007].
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *a) {
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e00e      	b.n	8001822 <pqcrystals_dilithium2_refpoly_reduce+0x2c>
    a->coeffs[i] = reduce32(a->coeffs[i]);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180c:	4618      	mov	r0, r3
 800180e:	f001 ff4a 	bl	80036a6 <pqcrystals_dilithium2_refreduce32>
 8001812:	4601      	mov	r1, r0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N; ++i)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2bff      	cmp	r3, #255	; 0xff
 8001826:	d9ed      	bls.n	8001804 <pqcrystals_dilithium2_refpoly_reduce+0xe>

  DBENCH_STOP(*tred);
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <pqcrystals_dilithium2_refpoly_caddq>:
* Description: For all coefficients of in/out polynomial add Q if
*              coefficient is negative.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_caddq(poly *a) {
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e00e      	b.n	800185e <pqcrystals_dilithium2_refpoly_caddq+0x2c>
    a->coeffs[i] = caddq(a->coeffs[i]);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	4618      	mov	r0, r3
 800184a:	f001 ff47 	bl	80036dc <pqcrystals_dilithium2_refcaddq>
 800184e:	4601      	mov	r1, r0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N; ++i)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3301      	adds	r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2bff      	cmp	r3, #255	; 0xff
 8001862:	d9ed      	bls.n	8001840 <pqcrystals_dilithium2_refpoly_caddq+0xe>

  DBENCH_STOP(*tred);
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <pqcrystals_dilithium2_refpoly_add>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/
void poly_add(poly *c, const poly *a, const poly *b)  {
 800186e:	b480      	push	{r7}
 8001870:	b087      	sub	sp, #28
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e00f      	b.n	80018a0 <pqcrystals_dilithium2_refpoly_add+0x32>
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6979      	ldr	r1, [r7, #20]
 800188c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001890:	18d1      	adds	r1, r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N; ++i)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2bff      	cmp	r3, #255	; 0xff
 80018a4:	d9ec      	bls.n	8001880 <pqcrystals_dilithium2_refpoly_add+0x12>

  DBENCH_STOP(*tadd);
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <pqcrystals_dilithium2_refpoly_sub>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
void poly_sub(poly *c, const poly *a, const poly *b) {
 80018b2:	b480      	push	{r7}
 80018b4:	b087      	sub	sp, #28
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e00f      	b.n	80018e4 <pqcrystals_dilithium2_refpoly_sub+0x32>
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018d4:	1ad1      	subs	r1, r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N; ++i)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2bff      	cmp	r3, #255	; 0xff
 80018e8:	d9ec      	bls.n	80018c4 <pqcrystals_dilithium2_refpoly_sub+0x12>

  DBENCH_STOP(*tadd);
}
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	371c      	adds	r7, #28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <pqcrystals_dilithium2_refpoly_ntt>:
* Description: Inplace forward NTT. Coefficients can grow by
*              8*Q in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_ntt(poly *a) {
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  ntt(a->coeffs);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	f001 fd61 	bl	80033c8 <pqcrystals_dilithium2_ref_ntt>

  DBENCH_STOP(*tmul);
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <pqcrystals_dilithium2_refpoly_invntt_tomont>:
*              Input coefficients need to be less than Q in absolute
*              value and output coefficients are again bounded by Q.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_invntt_tomont(poly *a) {
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  DBENCH_START();

  invntt_tomont(a->coeffs);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	f001 fdc1 	bl	80034a0 <pqcrystals_dilithium2_ref_invntt_tomont>

  DBENCH_STOP(*tmul);
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <pqcrystals_dilithium2_refpoly_pointwise_montgomery>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 8001926:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e022      	b.n	8001980 <pqcrystals_dilithium2_refpoly_pointwise_montgomery+0x5a>
    c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001942:	17da      	asrs	r2, r3, #31
 8001944:	4698      	mov	r8, r3
 8001946:	4691      	mov	r9, r2
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001950:	17da      	asrs	r2, r3, #31
 8001952:	469a      	mov	sl, r3
 8001954:	4693      	mov	fp, r2
 8001956:	fb0a f209 	mul.w	r2, sl, r9
 800195a:	fb08 f30b 	mul.w	r3, r8, fp
 800195e:	4413      	add	r3, r2
 8001960:	fba8 450a 	umull	r4, r5, r8, sl
 8001964:	442b      	add	r3, r5
 8001966:	461d      	mov	r5, r3
 8001968:	4620      	mov	r0, r4
 800196a:	4629      	mov	r1, r5
 800196c:	f001 fe52 	bl	8003614 <pqcrystals_dilithium2_refmontgomery_reduce>
 8001970:	4601      	mov	r1, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N; ++i)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2bff      	cmp	r3, #255	; 0xff
 8001984:	d9d9      	bls.n	800193a <pqcrystals_dilithium2_refpoly_pointwise_montgomery+0x14>

  DBENCH_STOP(*tmul);
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001992 <pqcrystals_dilithium2_refpoly_power2round>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_power2round(poly *a1, poly *a0, const poly *a) {
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e012      	b.n	80019ca <pqcrystals_dilithium2_refpoly_power2round+0x38>
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	18d0      	adds	r0, r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f001 fea5 	bl	8003704 <pqcrystals_dilithium2_refpower2round>
 80019ba:	4601      	mov	r1, r0
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N; ++i)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2bff      	cmp	r3, #255	; 0xff
 80019ce:	d9e9      	bls.n	80019a4 <pqcrystals_dilithium2_refpoly_power2round+0x12>

  DBENCH_STOP(*tround);
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <pqcrystals_dilithium2_refpoly_decompose>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_decompose(poly *a1, poly *a0, const poly *a) {
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e012      	b.n	8001a12 <pqcrystals_dilithium2_refpoly_decompose+0x38>
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	18d0      	adds	r0, r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f001 fe97 	bl	8003730 <pqcrystals_dilithium2_refdecompose>
 8001a02:	4601      	mov	r1, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N; ++i)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2bff      	cmp	r3, #255	; 0xff
 8001a16:	d9e9      	bls.n	80019ec <pqcrystals_dilithium2_refpoly_decompose+0x12>

  DBENCH_STOP(*tround);
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <pqcrystals_dilithium2_refpoly_make_hint>:
*              - const poly *a0: pointer to low part of input polynomial
*              - const poly *a1: pointer to high part of input polynomial
*
* Returns number of 1 bits.
**************************************************/
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  unsigned int i, s = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  DBENCH_START();

  for(i = 0; i < N; ++i) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e01b      	b.n	8001a70 <pqcrystals_dilithium2_refpoly_make_hint+0x4e>
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f001 feab 	bl	80037a4 <pqcrystals_dilithium2_refmake_hint>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4619      	mov	r1, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    s += h->coeffs[i];
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a62:	461a      	mov	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
  for(i = 0; i < N; ++i) {
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2bff      	cmp	r3, #255	; 0xff
 8001a74:	d9e0      	bls.n	8001a38 <pqcrystals_dilithium2_refpoly_make_hint+0x16>
  }

  DBENCH_STOP(*tround);
  return s;
 8001a76:	693b      	ldr	r3, [r7, #16]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <pqcrystals_dilithium2_refpoly_chknorm>:
* Arguments:   - const poly *a: pointer to polynomial
*              - int32_t B: norm bound
*
* Returns 0 if norm is strictly smaller than B <= (Q-1)/8 and 1 otherwise.
**************************************************/
int poly_chknorm(const poly *a, int32_t B) {
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  unsigned int i;
  int32_t t;
  DBENCH_START();

  if(B > (Q-1)/8)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	4a16      	ldr	r2, [pc, #88]	; (8001ae8 <pqcrystals_dilithium2_refpoly_chknorm+0x68>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	dd01      	ble.n	8001a96 <pqcrystals_dilithium2_refpoly_chknorm+0x16>
    return 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e022      	b.n	8001adc <pqcrystals_dilithium2_refpoly_chknorm+0x5c>

  /* It is ok to leak which coefficient violates the bound since
     the probability for each coefficient is independent of secret
     data but we must not leak the sign of the centralized representative. */
  for(i = 0; i < N; ++i) {
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	e01b      	b.n	8001ad4 <pqcrystals_dilithium2_refpoly_chknorm+0x54>
    /* Absolute value */
    t = a->coeffs[i] >> 31;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	17db      	asrs	r3, r3, #31
 8001aa6:	60bb      	str	r3, [r7, #8]
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68f9      	ldr	r1, [r7, #12]
 8001ab4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ab8:	0059      	lsls	r1, r3, #1
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	400b      	ands	r3, r1
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	60bb      	str	r3, [r7, #8]

    if(t >= B) {
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	db01      	blt.n	8001ace <pqcrystals_dilithium2_refpoly_chknorm+0x4e>
      DBENCH_STOP(*tsample);
      return 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e006      	b.n	8001adc <pqcrystals_dilithium2_refpoly_chknorm+0x5c>
  for(i = 0; i < N; ++i) {
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2bff      	cmp	r3, #255	; 0xff
 8001ad8:	d9e0      	bls.n	8001a9c <pqcrystals_dilithium2_refpoly_chknorm+0x1c>
    }
  }

  DBENCH_STOP(*tsample);
  return 0;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	000ffc00 	.word	0x000ffc00

08001aec <rej_uniform>:
**************************************************/
static unsigned int rej_uniform(int32_t *a,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t;
  DBENCH_START();

  ctr = pos = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos + 3 <= buflen) {
 8001b02:	e02a      	b.n	8001b5a <rej_uniform+0x6e>
    t  = buf[pos++];
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	61ba      	str	r2, [r7, #24]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 8;
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	61ba      	str	r2, [r7, #24]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
    t |= (uint32_t)buf[pos++] << 16;
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	61ba      	str	r2, [r7, #24]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	041b      	lsls	r3, r3, #16
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]
    t &= 0x7FFFFF;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001b40:	617b      	str	r3, [r7, #20]

    if(t < Q)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <rej_uniform+0x8c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d807      	bhi.n	8001b5a <rej_uniform+0x6e>
      a[ctr++] = t;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	61fa      	str	r2, [r7, #28]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos + 3 <= buflen) {
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d204      	bcs.n	8001b6c <rej_uniform+0x80>
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	3303      	adds	r3, #3
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d2cb      	bcs.n	8001b04 <rej_uniform+0x18>
  }

  DBENCH_STOP(*tsample);
  return ctr;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	007fe000 	.word	0x007fe000

08001b7c <pqcrystals_dilithium2_refpoly_uniform>:
**************************************************/
#define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
void poly_uniform(poly *a,
                  const uint8_t seed[SEEDBYTES],
                  uint16_t nonce)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001b88:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001b8c:	6018      	str	r0, [r3, #0]
 8001b8e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001b92:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8001b96:	6019      	str	r1, [r3, #0]
 8001b98:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001b9c:	f2a3 433a 	subw	r3, r3, #1082	; 0x43a
 8001ba0:	801a      	strh	r2, [r3, #0]
  unsigned int i, ctr, off;
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 8001ba2:	f44f 7352 	mov.w	r3, #840	; 0x348
 8001ba6:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
  uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2];
  stream128_state state;

  stream128_init(&state, seed, nonce);
 8001baa:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001bae:	f2a3 433a 	subw	r3, r3, #1082	; 0x43a
 8001bb2:	881a      	ldrh	r2, [r3, #0]
 8001bb4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001bb8:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8001bbc:	f107 0010 	add.w	r0, r7, #16
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	f005 fb67 	bl	8007294 <pqcrystals_dilithium2_refdilithium_shake128_stream_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8001bc6:	f107 0210 	add.w	r2, r7, #16
 8001bca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bce:	2105      	movs	r1, #5
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f005 fa97 	bl	8007104 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks>

  ctr = rej_uniform(a->coeffs, N, buf, buflen);
 8001bd6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001bda:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001be4:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bec:	f7ff ff7e 	bl	8001aec <rej_uniform>
 8001bf0:	f8c7 0438 	str.w	r0, [r7, #1080]	; 0x438

  while(ctr < N) {
 8001bf4:	e059      	b.n	8001caa <pqcrystals_dilithium2_refpoly_uniform+0x12e>
    off = buflen % 3;
 8001bf6:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <pqcrystals_dilithium2_refpoly_uniform+0x144>)
 8001bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8001c00:	0859      	lsrs	r1, r3, #1
 8001c02:	460b      	mov	r3, r1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	440b      	add	r3, r1
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
    for(i = 0; i < off; ++i)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8001c14:	e01a      	b.n	8001c4c <pqcrystals_dilithium2_refpoly_uniform+0xd0>
      buf[i] = buf[buflen - off + i];
 8001c16:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8001c1a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001c1e:	1ad2      	subs	r2, r2, r3
 8001c20:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001c24:	4413      	add	r3, r2
 8001c26:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8001c2a:	f5a2 7257 	sub.w	r2, r2, #860	; 0x35c
 8001c2e:	5cd1      	ldrb	r1, [r2, r3]
 8001c30:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001c34:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8001c38:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001c3c:	4413      	add	r3, r2
 8001c3e:	460a      	mov	r2, r1
 8001c40:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < off; ++i)
 8001c42:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001c46:	3301      	adds	r3, #1
 8001c48:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8001c4c:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8001c50:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d3de      	bcc.n	8001c16 <pqcrystals_dilithium2_refpoly_uniform+0x9a>

    stream128_squeezeblocks(buf + off, 1, &state);
 8001c58:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001c5c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001c60:	4413      	add	r3, r2
 8001c62:	f107 0210 	add.w	r2, r7, #16
 8001c66:	2101      	movs	r1, #1
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 fa4b 	bl	8007104 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks>
    buflen = STREAM128_BLOCKBYTES + off;
 8001c6e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001c72:	33a8      	adds	r3, #168	; 0xa8
 8001c74:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
    ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 8001c78:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001c7c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	18d0      	adds	r0, r2, r3
 8001c8a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001c8e:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8001c92:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001c96:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001c9a:	f7ff ff27 	bl	8001aec <rej_uniform>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
  while(ctr < N) {
 8001caa:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001cae:	2bff      	cmp	r3, #255	; 0xff
 8001cb0:	d9a1      	bls.n	8001bf6 <pqcrystals_dilithium2_refpoly_uniform+0x7a>
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
 8001cb6:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	aaaaaaab 	.word	0xaaaaaaab

08001cc4 <rej_eta>:
**************************************************/
static unsigned int rej_eta(int32_t *a,
                            unsigned int len,
                            const uint8_t *buf,
                            unsigned int buflen)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint32_t t0, t1;
  DBENCH_START();

  ctr = pos = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos < buflen) {
 8001cda:	e045      	b.n	8001d68 <rej_eta+0xa4>
    t0 = buf[pos] & 0x0F;
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	617b      	str	r3, [r7, #20]
    t1 = buf[pos++] >> 4;
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	61ba      	str	r2, [r7, #24]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	613b      	str	r3, [r7, #16]

#if ETA == 2
    if(t0 < 15) {
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b0e      	cmp	r3, #14
 8001d00:	d815      	bhi.n	8001d2e <rej_eta+0x6a>
      t0 = t0 - (205*t0 >> 10)*5;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	22cd      	movs	r2, #205	; 0xcd
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	0a9a      	lsrs	r2, r3, #10
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
      a[ctr++] = 2 - t0;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f1c3 0102 	rsb	r1, r3, #2
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	61fa      	str	r2, [r7, #28]
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4413      	add	r3, r2
 8001d2a:	460a      	mov	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
    }
    if(t1 < 15 && ctr < len) {
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b0e      	cmp	r3, #14
 8001d32:	d819      	bhi.n	8001d68 <rej_eta+0xa4>
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d215      	bcs.n	8001d68 <rej_eta+0xa4>
      t1 = t1 - (205*t1 >> 10)*5;
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	22cd      	movs	r2, #205	; 0xcd
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	0a9a      	lsrs	r2, r3, #10
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	613b      	str	r3, [r7, #16]
      a[ctr++] = 2 - t1;
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f1c3 0102 	rsb	r1, r3, #2
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	61fa      	str	r2, [r7, #28]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	460a      	mov	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
  while(ctr < len && pos < buflen) {
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d203      	bcs.n	8001d78 <rej_eta+0xb4>
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d3b1      	bcc.n	8001cdc <rej_eta+0x18>
      a[ctr++] = 4 - t1;
#endif
  }

  DBENCH_STOP(*tsample);
  return ctr;
 8001d78:	69fb      	ldr	r3, [r7, #28]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <pqcrystals_dilithium2_refpoly_uniform_eta>:
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
                      const uint8_t seed[CRHBYTES],
                      uint16_t nonce)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b0dc      	sub	sp, #368	; 0x170
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001d8e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d92:	6018      	str	r0, [r3, #0]
 8001d94:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001d98:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d9c:	6019      	str	r1, [r3, #0]
 8001d9e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001da2:	f5a3 73b5 	sub.w	r3, r3, #362	; 0x16a
 8001da6:	801a      	strh	r2, [r3, #0]
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS*STREAM256_BLOCKBYTES;
 8001da8:	2388      	movs	r3, #136	; 0x88
 8001daa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 8001dae:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001db2:	f5a3 73b5 	sub.w	r3, r3, #362	; 0x16a
 8001db6:	881a      	ldrh	r2, [r3, #0]
 8001db8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001dbc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001dc0:	f107 0010 	add.w	r0, r7, #16
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	f005 fa8a 	bl	80072de <pqcrystals_dilithium2_refdilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 8001dca:	f107 0210 	add.w	r2, r7, #16
 8001dce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f005 fa0f 	bl	80071f8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>

  ctr = rej_eta(a->coeffs, N, buf, buflen);
 8001dda:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001dde:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001de8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df0:	f7ff ff68 	bl	8001cc4 <rej_eta>
 8001df4:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c

  while(ctr < N) {
 8001df8:	e01f      	b.n	8001e3a <pqcrystals_dilithium2_refpoly_uniform_eta+0xb6>
    stream256_squeezeblocks(buf, 1, &state);
 8001dfa:	f107 0210 	add.w	r2, r7, #16
 8001dfe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e02:	2101      	movs	r1, #1
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 f9f7 	bl	80071f8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 8001e0a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001e0e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	18d0      	adds	r0, r2, r3
 8001e1c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e20:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8001e24:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001e28:	2388      	movs	r3, #136	; 0x88
 8001e2a:	f7ff ff4b 	bl	8001cc4 <rej_eta>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e34:	4413      	add	r3, r2
 8001e36:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  while(ctr < N) {
 8001e3a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e3e:	2bff      	cmp	r3, #255	; 0xff
 8001e40:	d9db      	bls.n	8001dfa <pqcrystals_dilithium2_refpoly_uniform_eta+0x76>
  }
}
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
 8001e46:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <pqcrystals_dilithium2_refpoly_uniform_gamma1>:
**************************************************/
#define POLY_UNIFORM_GAMMA1_NBLOCKS ((POLYZ_PACKEDBYTES + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
void poly_uniform_gamma1(poly *a,
                         const uint8_t seed[CRHBYTES],
                         uint16_t nonce)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001e5a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001e5e:	6018      	str	r0, [r3, #0]
 8001e60:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001e64:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001e68:	6019      	str	r1, [r3, #0]
 8001e6a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001e6e:	f2a3 3382 	subw	r3, r3, #898	; 0x382
 8001e72:	801a      	strh	r2, [r3, #0]
  uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 8001e74:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001e78:	f2a3 3382 	subw	r3, r3, #898	; 0x382
 8001e7c:	881a      	ldrh	r2, [r3, #0]
 8001e7e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001e82:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001e86:	f107 0010 	add.w	r0, r7, #16
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	f005 fa27 	bl	80072de <pqcrystals_dilithium2_refdilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 8001e90:	f107 0210 	add.w	r2, r7, #16
 8001e94:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e98:	2105      	movs	r1, #5
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f005 f9ac 	bl	80071f8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
  polyz_unpack(a, buf);
 8001ea0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001ea4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001ea8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8001eac:	4611      	mov	r1, r2
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f001 f885 	bl	8002fbe <pqcrystals_dilithium2_refpolyz_unpack>
}
 8001eb4:	bf00      	nop
 8001eb6:	f507 7762 	add.w	r7, r7, #904	; 0x388
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <pqcrystals_dilithium2_refpoly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 8001ebe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ec2:	b0de      	sub	sp, #376	; 0x178
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001eca:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ece:	6018      	str	r0, [r3, #0]
 8001ed0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001ed4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001ed8:	6019      	str	r1, [r3, #0]
  unsigned int i, b, pos;
  uint64_t signs;
  uint8_t buf[SHAKE256_RATE];
  keccak_state state;

  shake256_init(&state);
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f005 f920 	bl	8007124 <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, seed, SEEDBYTES);
 8001ee4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001ee8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001eec:	f107 0008 	add.w	r0, r7, #8
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	f005 f926 	bl	8007144 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	4618      	mov	r0, r3
 8001efe:	f005 f939 	bl	8007174 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeezeblocks(buf, 1, &state);
 8001f02:	f107 0208 	add.w	r2, r7, #8
 8001f06:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f005 f973 	bl	80071f8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>

  signs = 0;
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001f24:	e027      	b.n	8001f76 <pqcrystals_dilithium2_refpoly_challenge+0xb8>
    signs |= (uint64_t)buf[i] << 8*i;
 8001f26:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8001f2a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001f2e:	4413      	add	r3, r2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	4698      	mov	r8, r3
 8001f38:	4691      	mov	r9, r2
 8001f3a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	f1a3 0120 	sub.w	r1, r3, #32
 8001f44:	f1c3 0220 	rsb	r2, r3, #32
 8001f48:	fa09 f503 	lsl.w	r5, r9, r3
 8001f4c:	fa08 f101 	lsl.w	r1, r8, r1
 8001f50:	430d      	orrs	r5, r1
 8001f52:	fa28 f202 	lsr.w	r2, r8, r2
 8001f56:	4315      	orrs	r5, r2
 8001f58:	fa08 f403 	lsl.w	r4, r8, r3
 8001f5c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001f60:	ea42 0a04 	orr.w	sl, r2, r4
 8001f64:	ea43 0b05 	orr.w	fp, r3, r5
 8001f68:	e9c7 ab5a 	strd	sl, fp, [r7, #360]	; 0x168
  for(i = 0; i < 8; ++i)
 8001f6c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001f70:	3301      	adds	r3, #1
 8001f72:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001f76:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001f7a:	2b07      	cmp	r3, #7
 8001f7c:	d9d3      	bls.n	8001f26 <pqcrystals_dilithium2_refpoly_challenge+0x68>
  pos = 8;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

  for(i = 0; i < N; ++i)
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001f8a:	e00e      	b.n	8001faa <pqcrystals_dilithium2_refpoly_challenge+0xec>
    c->coeffs[i] = 0;
 8001f8c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001f90:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N; ++i)
 8001fa0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001faa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001fae:	2bff      	cmp	r3, #255	; 0xff
 8001fb0:	d9ec      	bls.n	8001f8c <pqcrystals_dilithium2_refpoly_challenge+0xce>
  for(i = N-TAU; i < N; ++i) {
 8001fb2:	23d9      	movs	r3, #217	; 0xd9
 8001fb4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001fb8:	e054      	b.n	8002064 <pqcrystals_dilithium2_refpoly_challenge+0x1a6>
    do {
      if(pos >= SHAKE256_RATE) {
 8001fba:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001fbe:	2b87      	cmp	r3, #135	; 0x87
 8001fc0:	d90a      	bls.n	8001fd8 <pqcrystals_dilithium2_refpoly_challenge+0x11a>
        shake256_squeezeblocks(buf, 1, &state);
 8001fc2:	f107 0208 	add.w	r2, r7, #8
 8001fc6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fca:	2101      	movs	r1, #1
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f005 f913 	bl	80071f8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
        pos = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
      }

      b = buf[pos++];
 8001fd8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8001fe2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001fe6:	443b      	add	r3, r7
 8001fe8:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 8001fec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    } while(b > i);
 8001ff0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001ff4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8de      	bhi.n	8001fba <pqcrystals_dilithium2_refpoly_challenge+0xfc>

    c->coeffs[i] = c->coeffs[b];
 8001ffc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002000:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800200a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800200e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002012:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800201c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c->coeffs[b] = 1 - 2*(signs & 1);
 8002020:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	f1c3 0301 	rsb	r3, r3, #1
 800202e:	4619      	mov	r1, r3
 8002030:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002034:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800203e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    signs >>= 1;
 8002042:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	0842      	lsrs	r2, r0, #1
 8002050:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002054:	084b      	lsrs	r3, r1, #1
 8002056:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  for(i = N-TAU; i < N; ++i) {
 800205a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800205e:	3301      	adds	r3, #1
 8002060:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002064:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002068:	2bff      	cmp	r3, #255	; 0xff
 800206a:	d9a6      	bls.n	8001fba <pqcrystals_dilithium2_refpoly_challenge+0xfc>
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800207a <pqcrystals_dilithium2_refpolyeta_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYETA_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyeta_pack(uint8_t *r, const poly *a) {
 800207a:	b480      	push	{r7}
 800207c:	b087      	sub	sp, #28
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint8_t t[8];
  DBENCH_START();

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e0a0      	b.n	80021cc <pqcrystals_dilithium2_refpolyeta_pack+0x152>
    t[0] = ETA - a->coeffs[8*i+0];
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	00da      	lsls	r2, r3, #3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f1c3 0302 	rsb	r3, r3, #2
 800209a:	b2db      	uxtb	r3, r3
 800209c:	733b      	strb	r3, [r7, #12]
    t[1] = ETA - a->coeffs[8*i+1];
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f1c3 0302 	rsb	r3, r3, #2
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	737b      	strb	r3, [r7, #13]
    t[2] = ETA - a->coeffs[8*i+2];
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1c9a      	adds	r2, r3, #2
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f1c3 0302 	rsb	r3, r3, #2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	73bb      	strb	r3, [r7, #14]
    t[3] = ETA - a->coeffs[8*i+3];
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	1cda      	adds	r2, r3, #3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f1c3 0302 	rsb	r3, r3, #2
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	73fb      	strb	r3, [r7, #15]
    t[4] = ETA - a->coeffs[8*i+4];
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	1d1a      	adds	r2, r3, #4
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f1c3 0302 	rsb	r3, r3, #2
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	743b      	strb	r3, [r7, #16]
    t[5] = ETA - a->coeffs[8*i+5];
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1d5a      	adds	r2, r3, #5
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f1c3 0302 	rsb	r3, r3, #2
 8002108:	b2db      	uxtb	r3, r3
 800210a:	747b      	strb	r3, [r7, #17]
    t[6] = ETA - a->coeffs[8*i+6];
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	1d9a      	adds	r2, r3, #6
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f1c3 0302 	rsb	r3, r3, #2
 800211e:	b2db      	uxtb	r3, r3
 8002120:	74bb      	strb	r3, [r7, #18]
    t[7] = ETA - a->coeffs[8*i+7];
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	1dda      	adds	r2, r3, #7
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f1c3 0302 	rsb	r3, r3, #2
 8002134:	b2db      	uxtb	r3, r3
 8002136:	74fb      	strb	r3, [r7, #19]

    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8002138:	7b3b      	ldrb	r3, [r7, #12]
 800213a:	b25a      	sxtb	r2, r3
 800213c:	7b7b      	ldrb	r3, [r7, #13]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	b25b      	sxtb	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	b25a      	sxtb	r2, r3
 8002146:	7bbb      	ldrb	r3, [r7, #14]
 8002148:	019b      	lsls	r3, r3, #6
 800214a:	b25b      	sxtb	r3, r3
 800214c:	4313      	orrs	r3, r2
 800214e:	b259      	sxtb	r1, r3
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	b2ca      	uxtb	r2, r1
 800215e:	701a      	strb	r2, [r3, #0]
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8002160:	7bbb      	ldrb	r3, [r7, #14]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	b2db      	uxtb	r3, r3
 8002166:	b25a      	sxtb	r2, r3
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	b25b      	sxtb	r3, r3
 800216e:	4313      	orrs	r3, r2
 8002170:	b25a      	sxtb	r2, r3
 8002172:	7c3b      	ldrb	r3, [r7, #16]
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	b25b      	sxtb	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b25a      	sxtb	r2, r3
 800217c:	7c7b      	ldrb	r3, [r7, #17]
 800217e:	01db      	lsls	r3, r3, #7
 8002180:	b25b      	sxtb	r3, r3
 8002182:	4313      	orrs	r3, r2
 8002184:	b259      	sxtb	r1, r3
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	3301      	adds	r3, #1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	b2ca      	uxtb	r2, r1
 8002196:	701a      	strb	r2, [r3, #0]
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8002198:	7c7b      	ldrb	r3, [r7, #17]
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	b25a      	sxtb	r2, r3
 80021a0:	7cbb      	ldrb	r3, [r7, #18]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b25a      	sxtb	r2, r3
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	015b      	lsls	r3, r3, #5
 80021ae:	b25b      	sxtb	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b259      	sxtb	r1, r3
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	3302      	adds	r3, #2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	b2ca      	uxtb	r2, r1
 80021c4:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N/8; ++i) {
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b1f      	cmp	r3, #31
 80021d0:	f67f af5b 	bls.w	800208a <pqcrystals_dilithium2_refpolyeta_pack+0x10>
    r[i] = t[0] | (t[1] << 4);
  }
#endif

  DBENCH_STOP(*tpack);
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <pqcrystals_dilithium2_refpolyeta_unpack>:
* Description: Unpack polynomial with coefficients in [-ETA,ETA].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyeta_unpack(poly *r, const uint8_t *a) {
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e116      	b.n	800241e <pqcrystals_dilithium2_refpolyeta_unpack+0x23e>
    r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	00da      	lsls	r2, r3, #3
 8002204:	f001 0107 	and.w	r1, r1, #7
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	4413      	add	r3, r2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	08db      	lsrs	r3, r3, #3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	f001 0107 	and.w	r1, r1, #7
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	4413      	add	r3, r2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	b2db      	uxtb	r3, r3
 8002244:	4619      	mov	r1, r3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	3301      	adds	r3, #1
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	4413      	add	r3, r2
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	430b      	orrs	r3, r1
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	00d2      	lsls	r2, r2, #3
 800225e:	3202      	adds	r2, #2
 8002260:	f003 0107 	and.w	r1, r3, #7
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	3301      	adds	r3, #1
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	4619      	mov	r1, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	1cda      	adds	r2, r3, #3
 8002286:	f001 0107 	and.w	r1, r1, #7
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	3301      	adds	r3, #1
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	4413      	add	r3, r2
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	1d1a      	adds	r2, r3, #4
 80022ac:	f001 0107 	and.w	r1, r1, #7
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	3301      	adds	r3, #1
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	09db      	lsrs	r3, r3, #7
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4619      	mov	r1, r3
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	3302      	adds	r3, #2
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	430b      	orrs	r3, r1
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	00d2      	lsls	r2, r2, #3
 80022e4:	3205      	adds	r2, #5
 80022e6:	f003 0107 	and.w	r1, r3, #7
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	3302      	adds	r3, #2
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	4619      	mov	r1, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	1d9a      	adds	r2, r3, #6
 800230c:	f001 0107 	and.w	r1, r1, #7
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	3302      	adds	r3, #2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1dda      	adds	r2, r3, #7
 8002332:	f001 0107 	and.w	r1, r1, #7
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	00da      	lsls	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	00d2      	lsls	r2, r2, #3
 800234a:	f1c3 0102 	rsb	r1, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	00d2      	lsls	r2, r2, #3
 8002364:	3201      	adds	r2, #1
 8002366:	f1c3 0102 	rsb	r1, r3, #2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	1c9a      	adds	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	00d2      	lsls	r2, r2, #3
 8002380:	3202      	adds	r2, #2
 8002382:	f1c3 0102 	rsb	r1, r3, #2
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1cda      	adds	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	00d2      	lsls	r2, r2, #3
 800239c:	3203      	adds	r2, #3
 800239e:	f1c3 0102 	rsb	r1, r3, #2
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1d1a      	adds	r2, r3, #4
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	00d2      	lsls	r2, r2, #3
 80023b8:	3204      	adds	r2, #4
 80023ba:	f1c3 0102 	rsb	r1, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	1d5a      	adds	r2, r3, #5
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	00d2      	lsls	r2, r2, #3
 80023d4:	3205      	adds	r2, #5
 80023d6:	f1c3 0102 	rsb	r1, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	1d9a      	adds	r2, r3, #6
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	00d2      	lsls	r2, r2, #3
 80023f0:	3206      	adds	r2, #6
 80023f2:	f1c3 0102 	rsb	r1, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1dda      	adds	r2, r3, #7
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	00d2      	lsls	r2, r2, #3
 800240c:	3207      	adds	r2, #7
 800240e:	f1c3 0102 	rsb	r1, r3, #2
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N/8; ++i) {
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3301      	adds	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b1f      	cmp	r3, #31
 8002422:	f67f aee5 	bls.w	80021f0 <pqcrystals_dilithium2_refpolyeta_unpack+0x10>
    r->coeffs[2*i+1] = ETA - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <pqcrystals_dilithium2_refpolyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/4; ++i) {
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e06f      	b.n	8002522 <pqcrystals_dilithium2_refpolyt1_pack+0xf0>
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	009a      	lsls	r2, r3, #2
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	b2ca      	uxtb	r2, r1
 800245a:	701a      	strb	r2, [r3, #0]
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	009a      	lsls	r2, r3, #2
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002466:	121b      	asrs	r3, r3, #8
 8002468:	b25a      	sxtb	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	1c59      	adds	r1, r3, #1
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	b25b      	sxtb	r3, r3
 800247a:	4313      	orrs	r3, r2
 800247c:	b259      	sxtb	r1, r3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	3301      	adds	r3, #1
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	b2ca      	uxtb	r2, r1
 800248e:	701a      	strb	r2, [r3, #0]
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249c:	119b      	asrs	r3, r3, #6
 800249e:	b25a      	sxtb	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	1c99      	adds	r1, r3, #2
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	b25b      	sxtb	r3, r3
 80024b0:	4313      	orrs	r3, r2
 80024b2:	b259      	sxtb	r1, r3
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	3302      	adds	r3, #2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	b2ca      	uxtb	r2, r1
 80024c4:	701a      	strb	r2, [r3, #0]
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	1c9a      	adds	r2, r3, #2
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d2:	111b      	asrs	r3, r3, #4
 80024d4:	b25a      	sxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	1cd9      	adds	r1, r3, #3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024e2:	019b      	lsls	r3, r3, #6
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b259      	sxtb	r1, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3303      	adds	r3, #3
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	b2ca      	uxtb	r2, r1
 80024fa:	701a      	strb	r2, [r3, #0]
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	1cda      	adds	r2, r3, #3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002508:	1099      	asrs	r1, r3, #2
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	3304      	adds	r3, #4
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	b2ca      	uxtb	r2, r1
 800251a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N/4; ++i) {
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3301      	adds	r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b3f      	cmp	r3, #63	; 0x3f
 8002526:	d98c      	bls.n	8002442 <pqcrystals_dilithium2_refpolyt1_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <pqcrystals_dilithium2_refpolyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
 8002534:	b480      	push	{r7}
 8002536:	b08d      	sub	sp, #52	; 0x34
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[8];
  DBENCH_START();

  for(i = 0; i < N/8; ++i) {
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002542:	e1ad      	b.n	80028a0 <pqcrystals_dilithium2_refpolyt0_pack+0x36c>
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	00da      	lsls	r2, r3, #3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002552:	60fb      	str	r3, [r7, #12]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002564:	613b      	str	r3, [r7, #16]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1c9a      	adds	r2, r3, #2
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002572:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002576:	617b      	str	r3, [r7, #20]
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1cda      	adds	r2, r3, #3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002588:	61bb      	str	r3, [r7, #24]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	1d1a      	adds	r2, r3, #4
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002596:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800259a:	61fb      	str	r3, [r7, #28]
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	1d5a      	adds	r2, r3, #5
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80025ac:	623b      	str	r3, [r7, #32]
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	1d9a      	adds	r2, r3, #6
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ba:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	1dda      	adds	r2, r3, #7
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025cc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28

    r[13*i+ 0]  =  t[0];
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	b2ca      	uxtb	r2, r1
 80025e6:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1]  =  t[0] >>  8;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	0a19      	lsrs	r1, r3, #8
 80025ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3301      	adds	r3, #1
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	b2ca      	uxtb	r2, r1
 8002600:	701a      	strb	r2, [r3, #0]
    r[13*i+ 1] |=  t[1] <<  5;
 8002602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	3301      	adds	r3, #1
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	7818      	ldrb	r0, [r3, #0]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	015b      	lsls	r3, r3, #5
 800261c:	b2d9      	uxtb	r1, r3
 800261e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	3301      	adds	r3, #1
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	ea40 0201 	orr.w	r2, r0, r1
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]
    r[13*i+ 2]  =  t[1] >>  3;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	08d9      	lsrs	r1, r3, #3
 800263c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	3302      	adds	r3, #2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	b2ca      	uxtb	r2, r1
 8002650:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3]  =  t[1] >> 11;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	0ad9      	lsrs	r1, r3, #11
 8002656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3303      	adds	r3, #3
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	b2ca      	uxtb	r2, r1
 800266a:	701a      	strb	r2, [r3, #0]
    r[13*i+ 3] |=  t[2] <<  2;
 800266c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	3303      	adds	r3, #3
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	7818      	ldrb	r0, [r3, #0]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	b2d9      	uxtb	r1, r3
 8002688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3303      	adds	r3, #3
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	ea40 0201 	orr.w	r2, r0, r1
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4]  =  t[2] >>  6;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	0999      	lsrs	r1, r3, #6
 80026a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3304      	adds	r3, #4
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	b2ca      	uxtb	r2, r1
 80026ba:	701a      	strb	r2, [r3, #0]
    r[13*i+ 4] |=  t[3] <<  7;
 80026bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	3304      	adds	r3, #4
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	7818      	ldrb	r0, [r3, #0]
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	01db      	lsls	r3, r3, #7
 80026d6:	b2d9      	uxtb	r1, r3
 80026d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	3304      	adds	r3, #4
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	ea40 0201 	orr.w	r2, r0, r1
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]
    r[13*i+ 5]  =  t[3] >>  1;
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	0859      	lsrs	r1, r3, #1
 80026f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	3305      	adds	r3, #5
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	4413      	add	r3, r2
 8002708:	b2ca      	uxtb	r2, r1
 800270a:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6]  =  t[3] >>  9;
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	0a59      	lsrs	r1, r3, #9
 8002710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	3306      	adds	r3, #6
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	b2ca      	uxtb	r2, r1
 8002724:	701a      	strb	r2, [r3, #0]
    r[13*i+ 6] |=  t[4] <<  4;
 8002726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	3306      	adds	r3, #6
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	7818      	ldrb	r0, [r3, #0]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	b2d9      	uxtb	r1, r3
 8002742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3306      	adds	r3, #6
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	ea40 0201 	orr.w	r2, r0, r1
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	701a      	strb	r2, [r3, #0]
    r[13*i+ 7]  =  t[4] >>  4;
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	0919      	lsrs	r1, r3, #4
 8002760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	3307      	adds	r3, #7
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	b2ca      	uxtb	r2, r1
 8002774:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8]  =  t[4] >> 12;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	0b19      	lsrs	r1, r3, #12
 800277a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3308      	adds	r3, #8
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	b2ca      	uxtb	r2, r1
 800278e:	701a      	strb	r2, [r3, #0]
    r[13*i+ 8] |=  t[5] <<  1;
 8002790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	3308      	adds	r3, #8
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	7818      	ldrb	r0, [r3, #0]
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	b2d9      	uxtb	r1, r3
 80027ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	3308      	adds	r3, #8
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	ea40 0201 	orr.w	r2, r0, r1
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9]  =  t[5] >>  7;
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	09d9      	lsrs	r1, r3, #7
 80027ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	3309      	adds	r3, #9
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	b2ca      	uxtb	r2, r1
 80027de:	701a      	strb	r2, [r3, #0]
    r[13*i+ 9] |=  t[6] <<  6;
 80027e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3309      	adds	r3, #9
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	7818      	ldrb	r0, [r3, #0]
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	019b      	lsls	r3, r3, #6
 80027fa:	b2d9      	uxtb	r1, r3
 80027fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3309      	adds	r3, #9
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	ea40 0201 	orr.w	r2, r0, r1
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
    r[13*i+10]  =  t[6] >>  2;
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	0899      	lsrs	r1, r3, #2
 800281a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	330a      	adds	r3, #10
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	b2ca      	uxtb	r2, r1
 800282e:	701a      	strb	r2, [r3, #0]
    r[13*i+11]  =  t[6] >> 10;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	0a99      	lsrs	r1, r3, #10
 8002834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	330b      	adds	r3, #11
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	b2ca      	uxtb	r2, r1
 8002848:	701a      	strb	r2, [r3, #0]
    r[13*i+11] |=  t[7] <<  3;
 800284a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	330b      	adds	r3, #11
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	7818      	ldrb	r0, [r3, #0]
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	b2db      	uxtb	r3, r3
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	b2d9      	uxtb	r1, r3
 8002866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	330b      	adds	r3, #11
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4413      	add	r3, r2
 8002878:	ea40 0201 	orr.w	r2, r0, r1
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]
    r[13*i+12]  =  t[7] >>  5;
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	0959      	lsrs	r1, r3, #5
 8002884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	330c      	adds	r3, #12
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	b2ca      	uxtb	r2, r1
 8002898:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N/8; ++i) {
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	3301      	adds	r3, #1
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	2b1f      	cmp	r3, #31
 80028a4:	f67f ae4e 	bls.w	8002544 <pqcrystals_dilithium2_refpolyt0_pack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3734      	adds	r7, #52	; 0x34
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <pqcrystals_dilithium2_refpolyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt0_unpack(poly *r, const uint8_t *a) {
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/8; ++i) {
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e294      	b.n	8002dee <pqcrystals_dilithium2_refpolyt0_unpack+0x53a>
    r->coeffs[8*i+0]  = a[13*i+0];
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	7819      	ldrb	r1, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	00da      	lsls	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	00da      	lsls	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ea:	4619      	mov	r1, r3
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3301      	adds	r3, #1
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	4319      	orrs	r1, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	00da      	lsls	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+0] &= 0x1FFF;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	00da      	lsls	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	00d2      	lsls	r2, r2, #3
 800291c:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3301      	adds	r3, #1
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	b2d9      	uxtb	r1, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002956:	4619      	mov	r1, r3
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	3302      	adds	r3, #2
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	4413      	add	r3, r2
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4319      	orrs	r1, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002988:	4619      	mov	r1, r3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	3303      	adds	r3, #3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	4413      	add	r3, r2
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	02db      	lsls	r3, r3, #11
 80029a0:	4319      	orrs	r1, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] &= 0x1FFF;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	00d2      	lsls	r2, r2, #3
 80029be:	3201      	adds	r2, #1
 80029c0:	f3c3 010c 	ubfx	r1, r3, #0, #13
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	3303      	adds	r3, #3
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	b2d9      	uxtb	r1, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	1c9a      	adds	r2, r3, #2
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	1c9a      	adds	r2, r3, #2
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fa:	4619      	mov	r1, r3
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	3304      	adds	r3, #4
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	019b      	lsls	r3, r3, #6
 8002a12:	4319      	orrs	r1, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	1c9a      	adds	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] &= 0x1FFF;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	1c9a      	adds	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	00d2      	lsls	r2, r2, #3
 8002a30:	3202      	adds	r2, #2
 8002a32:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	3304      	adds	r3, #4
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	09db      	lsrs	r3, r3, #7
 8002a52:	b2d9      	uxtb	r1, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	1cda      	adds	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	1cda      	adds	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	3305      	adds	r3, #5
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4319      	orrs	r1, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	1cda      	adds	r2, r3, #3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	1cda      	adds	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	3306      	adds	r3, #6
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	4319      	orrs	r1, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	1cda      	adds	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] &= 0x1FFF;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	1cda      	adds	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	00d2      	lsls	r2, r2, #3
 8002ad4:	3203      	adds	r2, #3
 8002ad6:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	3306      	adds	r3, #6
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	b2d9      	uxtb	r1, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	1d1a      	adds	r2, r3, #4
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	1d1a      	adds	r2, r3, #4
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b10:	4619      	mov	r1, r3
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3307      	adds	r3, #7
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4319      	orrs	r1, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	1d1a      	adds	r2, r3, #4
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	1d1a      	adds	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	4619      	mov	r1, r3
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	3308      	adds	r3, #8
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	031b      	lsls	r3, r3, #12
 8002b5a:	4319      	orrs	r1, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	1d1a      	adds	r2, r3, #4
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] &= 0x1FFF;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	1d1a      	adds	r2, r3, #4
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	00d2      	lsls	r2, r2, #3
 8002b78:	3204      	adds	r2, #4
 8002b7a:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	3308      	adds	r3, #8
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	4413      	add	r3, r2
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	b2d9      	uxtb	r1, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1d5a      	adds	r2, r3, #5
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1d5a      	adds	r2, r3, #5
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3309      	adds	r3, #9
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	01db      	lsls	r3, r3, #7
 8002bcc:	4319      	orrs	r1, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	1d5a      	adds	r2, r3, #5
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] &= 0x1FFF;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	1d5a      	adds	r2, r3, #5
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	00d2      	lsls	r2, r2, #3
 8002bea:	3205      	adds	r2, #5
 8002bec:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	3309      	adds	r3, #9
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	b2d9      	uxtb	r1, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	1d9a      	adds	r2, r3, #6
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	1d9a      	adds	r2, r3, #6
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c26:	4619      	mov	r1, r3
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	330a      	adds	r3, #10
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4319      	orrs	r1, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	1d9a      	adds	r2, r3, #6
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	1d9a      	adds	r2, r3, #6
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	330b      	adds	r3, #11
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	029b      	lsls	r3, r3, #10
 8002c70:	4319      	orrs	r1, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	1d9a      	adds	r2, r3, #6
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] &= 0x1FFF;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	1d9a      	adds	r2, r3, #6
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	00d2      	lsls	r2, r2, #3
 8002c8e:	3206      	adds	r2, #6
 8002c90:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	330b      	adds	r3, #11
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	08db      	lsrs	r3, r3, #3
 8002cb0:	b2d9      	uxtb	r1, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	1dda      	adds	r2, r3, #7
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	1dda      	adds	r2, r3, #7
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	330c      	adds	r3, #12
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	015b      	lsls	r3, r3, #5
 8002ce2:	4319      	orrs	r1, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	1dda      	adds	r2, r3, #7
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] &= 0x1FFF;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1dda      	adds	r2, r3, #7
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	00d2      	lsls	r2, r2, #3
 8002d00:	3207      	adds	r2, #7
 8002d02:	f3c3 010c 	ubfx	r1, r3, #0, #13
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	00da      	lsls	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	00d2      	lsls	r2, r2, #3
 8002d1a:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	00d2      	lsls	r2, r2, #3
 8002d34:	3201      	adds	r2, #1
 8002d36:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	1c9a      	adds	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	00d2      	lsls	r2, r2, #3
 8002d50:	3202      	adds	r2, #2
 8002d52:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	1cda      	adds	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	00d2      	lsls	r2, r2, #3
 8002d6c:	3203      	adds	r2, #3
 8002d6e:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	1d1a      	adds	r2, r3, #4
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	00d2      	lsls	r2, r2, #3
 8002d88:	3204      	adds	r2, #4
 8002d8a:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	1d5a      	adds	r2, r3, #5
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	00d2      	lsls	r2, r2, #3
 8002da4:	3205      	adds	r2, #5
 8002da6:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	1d9a      	adds	r2, r3, #6
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	00d2      	lsls	r2, r2, #3
 8002dc0:	3206      	adds	r2, #6
 8002dc2:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	1dda      	adds	r2, r3, #7
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	00d2      	lsls	r2, r2, #3
 8002ddc:	3207      	adds	r2, #7
 8002dde:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N/8; ++i) {
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b1f      	cmp	r3, #31
 8002df2:	f67f ad67 	bls.w	80028c4 <pqcrystals_dilithium2_refpolyt0_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <pqcrystals_dilithium2_refpolyz_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYZ_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyz_pack(uint8_t *r, const poly *a) {
 8002e02:	b480      	push	{r7}
 8002e04:	b089      	sub	sp, #36	; 0x24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint32_t t[4];
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N/4; ++i) {
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e0cb      	b.n	8002faa <pqcrystals_dilithium2_refpolyz_pack+0x1a8>
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	009a      	lsls	r2, r3, #2
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1c:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8002e20:	60fb      	str	r3, [r7, #12]
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2e:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8002e32:	613b      	str	r3, [r7, #16]
    t[2] = GAMMA1 - a->coeffs[4*i+2];
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	1c9a      	adds	r2, r3, #2
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e40:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8002e44:	617b      	str	r3, [r7, #20]
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	1cda      	adds	r2, r3, #3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e52:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
 8002e56:	61bb      	str	r3, [r7, #24]

    r[9*i+0]  = t[0];
 8002e58:	68f9      	ldr	r1, [r7, #12]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	b2ca      	uxtb	r2, r1
 8002e68:	701a      	strb	r2, [r3, #0]
    r[9*i+1]  = t[0] >> 8;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	0a19      	lsrs	r1, r3, #8
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	3301      	adds	r3, #1
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	b2ca      	uxtb	r2, r1
 8002e7e:	701a      	strb	r2, [r3, #0]
    r[9*i+2]  = t[0] >> 16;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	0c19      	lsrs	r1, r3, #16
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	b2ca      	uxtb	r2, r1
 8002e94:	701a      	strb	r2, [r3, #0]
    r[9*i+2] |= t[1] << 2;
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	7818      	ldrb	r0, [r3, #0]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	b2d9      	uxtb	r1, r3
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4413      	add	r3, r2
 8002ebc:	ea40 0201 	orr.w	r2, r0, r1
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	701a      	strb	r2, [r3, #0]
    r[9*i+3]  = t[1] >> 6;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	0999      	lsrs	r1, r3, #6
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3303      	adds	r3, #3
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	b2ca      	uxtb	r2, r1
 8002ed8:	701a      	strb	r2, [r3, #0]
    r[9*i+4]  = t[1] >> 14;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	0b99      	lsrs	r1, r3, #14
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	b2ca      	uxtb	r2, r1
 8002eee:	701a      	strb	r2, [r3, #0]
    r[9*i+4] |= t[2] << 4;
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3304      	adds	r3, #4
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	7818      	ldrb	r0, [r3, #0]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	b2d9      	uxtb	r1, r3
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3304      	adds	r3, #4
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	ea40 0201 	orr.w	r2, r0, r1
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]
    r[9*i+5]  = t[2] >> 4;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	0919      	lsrs	r1, r3, #4
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	3305      	adds	r3, #5
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	b2ca      	uxtb	r2, r1
 8002f32:	701a      	strb	r2, [r3, #0]
    r[9*i+6]  = t[2] >> 12;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	0b19      	lsrs	r1, r3, #12
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	3306      	adds	r3, #6
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	b2ca      	uxtb	r2, r1
 8002f48:	701a      	strb	r2, [r3, #0]
    r[9*i+6] |= t[3] << 6;
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	3306      	adds	r3, #6
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	7818      	ldrb	r0, [r3, #0]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	019b      	lsls	r3, r3, #6
 8002f60:	b2d9      	uxtb	r1, r3
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3306      	adds	r3, #6
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	ea40 0201 	orr.w	r2, r0, r1
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]
    r[9*i+7]  = t[3] >> 2;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	0899      	lsrs	r1, r3, #2
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	3307      	adds	r3, #7
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	b2ca      	uxtb	r2, r1
 8002f8c:	701a      	strb	r2, [r3, #0]
    r[9*i+8]  = t[3] >> 10;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	0a99      	lsrs	r1, r3, #10
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	b2ca      	uxtb	r2, r1
 8002fa2:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N/4; ++i) {
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2b3f      	cmp	r3, #63	; 0x3f
 8002fae:	f67f af30 	bls.w	8002e12 <pqcrystals_dilithium2_refpolyz_pack+0x10>
    r[5*i+4]  = t[1] >> 12;
  }
#endif

  DBENCH_STOP(*tpack);
}
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	3724      	adds	r7, #36	; 0x24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <pqcrystals_dilithium2_refpolyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a) {
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N/4; ++i) {
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	e15e      	b.n	800328c <pqcrystals_dilithium2_refpolyz_unpack+0x2ce>
    r->coeffs[4*i+0]  = a[9*i+0];
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	7819      	ldrb	r1, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	009a      	lsls	r2, r3, #2
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	009a      	lsls	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	4413      	add	r3, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	4319      	orrs	r1, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	009a      	lsls	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	009a      	lsls	r2, r3, #2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301a:	4619      	mov	r1, r3
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	3302      	adds	r3, #2
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	4413      	add	r3, r2
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	041b      	lsls	r3, r3, #16
 800302e:	4319      	orrs	r1, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	009a      	lsls	r2, r3, #2
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] &= 0x3FFFF;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	009a      	lsls	r2, r3, #2
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	f3c3 0111 	ubfx	r1, r3, #0, #18
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	3302      	adds	r3, #2
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	4413      	add	r3, r2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	089b      	lsrs	r3, r3, #2
 8003064:	b2d9      	uxtb	r1, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307e:	4619      	mov	r1, r3
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	3303      	adds	r3, #3
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4413      	add	r3, r2
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	019b      	lsls	r3, r3, #6
 8003092:	4319      	orrs	r1, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	4619      	mov	r1, r3
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	039b      	lsls	r3, r3, #14
 80030c0:	4319      	orrs	r1, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] &= 0x3FFFF;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	0092      	lsls	r2, r2, #2
 80030de:	3201      	adds	r2, #1
 80030e0:	f3c3 0111 	ubfx	r1, r3, #0, #18
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	3304      	adds	r3, #4
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	b2d9      	uxtb	r1, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	1c9a      	adds	r2, r3, #2
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003116:	4619      	mov	r1, r3
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	3305      	adds	r3, #5
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	4413      	add	r3, r2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	4319      	orrs	r1, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	1c9a      	adds	r2, r3, #2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	1c9a      	adds	r2, r3, #2
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003144:	4619      	mov	r1, r3
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	3306      	adds	r3, #6
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	4413      	add	r3, r2
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	031b      	lsls	r3, r3, #12
 8003158:	4319      	orrs	r1, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	1c9a      	adds	r2, r3, #2
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] &= 0x3FFFF;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	1c9a      	adds	r2, r3, #2
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	0092      	lsls	r2, r2, #2
 8003176:	3202      	adds	r2, #2
 8003178:	f3c3 0111 	ubfx	r1, r3, #0, #18
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	3306      	adds	r3, #6
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	4413      	add	r3, r2
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	b2d9      	uxtb	r1, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	1cda      	adds	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	1cda      	adds	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ae:	4619      	mov	r1, r3
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	3307      	adds	r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	4413      	add	r3, r2
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4319      	orrs	r1, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	1cda      	adds	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	1cda      	adds	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031dc:	4619      	mov	r1, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	3308      	adds	r3, #8
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	4413      	add	r3, r2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	029b      	lsls	r3, r3, #10
 80031f0:	4319      	orrs	r1, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	1cda      	adds	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] &= 0x3FFFF;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	1cda      	adds	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	0092      	lsls	r2, r2, #2
 800320e:	3203      	adds	r2, #3
 8003210:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	009a      	lsls	r2, r3, #2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	0092      	lsls	r2, r2, #2
 8003228:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	3201      	adds	r2, #1
 8003244:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	1c9a      	adds	r2, r3, #2
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	0092      	lsls	r2, r2, #2
 800325e:	3202      	adds	r2, #2
 8003260:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	1cda      	adds	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	0092      	lsls	r2, r2, #2
 800327a:	3203      	adds	r2, #3
 800327c:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N/4; ++i) {
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3301      	adds	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b3f      	cmp	r3, #63	; 0x3f
 8003290:	f67f ae9d 	bls.w	8002fce <pqcrystals_dilithium2_refpolyz_unpack+0x10>
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <pqcrystals_dilithium2_refpolyw1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYW1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyw1_pack(uint8_t *r, const poly *a) {
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA2 == (Q-1)/88
  for(i = 0; i < N/4; ++i) {
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e081      	b.n	80033b4 <pqcrystals_dilithium2_refpolyw1_pack+0x114>
    r[3*i+0]  = a->coeffs[4*i+0];
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	b2ca      	uxtb	r2, r1
 80032c8:	701a      	strb	r2, [r3, #0]
    r[3*i+0] |= a->coeffs[4*i+1] << 6;
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	b25a      	sxtb	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	1c59      	adds	r1, r3, #1
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032e6:	019b      	lsls	r3, r3, #6
 80032e8:	b25b      	sxtb	r3, r3
 80032ea:	4313      	orrs	r3, r2
 80032ec:	b259      	sxtb	r1, r3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	b2ca      	uxtb	r2, r1
 80032fc:	701a      	strb	r2, [r3, #0]
    r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800330a:	1099      	asrs	r1, r3, #2
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	3301      	adds	r3, #1
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	b2ca      	uxtb	r2, r1
 800331c:	701a      	strb	r2, [r3, #0]
    r[3*i+1] |= a->coeffs[4*i+2] << 4;
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	3301      	adds	r3, #1
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	4413      	add	r3, r2
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b25a      	sxtb	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	1c99      	adds	r1, r3, #2
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	b25b      	sxtb	r3, r3
 8003340:	4313      	orrs	r3, r2
 8003342:	b259      	sxtb	r1, r3
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	3301      	adds	r3, #1
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	b2ca      	uxtb	r2, r1
 8003354:	701a      	strb	r2, [r3, #0]
    r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	1c9a      	adds	r2, r3, #2
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003362:	1119      	asrs	r1, r3, #4
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	3302      	adds	r3, #2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	b2ca      	uxtb	r2, r1
 8003374:	701a      	strb	r2, [r3, #0]
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	3302      	adds	r3, #2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	b25a      	sxtb	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	1cd9      	adds	r1, r3, #3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	b25b      	sxtb	r3, r3
 8003398:	4313      	orrs	r3, r2
 800339a:	b259      	sxtb	r1, r3
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	3302      	adds	r3, #2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	b2ca      	uxtb	r2, r1
 80033ac:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < N/4; ++i) {
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3301      	adds	r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b3f      	cmp	r3, #63	; 0x3f
 80033b8:	f67f af7a 	bls.w	80032b0 <pqcrystals_dilithium2_refpolyw1_pack+0x10>
  for(i = 0; i < N/2; ++i)
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
#endif

  DBENCH_STOP(*tpack);
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <pqcrystals_dilithium2_ref_ntt>:
* Description: Forward NTT, in-place. No modular reduction is performed after
*              additions or subtractions. Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void ntt(int32_t a[N]) {
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b088      	sub	sp, #32
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  unsigned int len, start, j, k;
  int32_t zeta, t;

  k = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
  for(len = 128; len > 0; len >>= 1) {
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e056      	b.n	800348a <pqcrystals_dilithium2_ref_ntt+0xc2>
    for(start = 0; start < N; start = j + len) {
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	e04d      	b.n	800347e <pqcrystals_dilithium2_ref_ntt+0xb6>
      zeta = zetas[++k];
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	3301      	adds	r3, #1
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	4a2c      	ldr	r2, [pc, #176]	; (800349c <pqcrystals_dilithium2_ref_ntt+0xd4>)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f0:	60fb      	str	r3, [r7, #12]
      for(j = start; j < start + len; ++j) {
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	e038      	b.n	800346a <pqcrystals_dilithium2_ref_ntt+0xa2>
        t = montgomery_reduce((int64_t)zeta * a[j + len]);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	17da      	asrs	r2, r3, #31
 80033fc:	4698      	mov	r8, r3
 80033fe:	4691      	mov	r9, r2
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	4413      	add	r3, r2
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	17da      	asrs	r2, r3, #31
 8003410:	469a      	mov	sl, r3
 8003412:	4693      	mov	fp, r2
 8003414:	fb0a f209 	mul.w	r2, sl, r9
 8003418:	fb08 f30b 	mul.w	r3, r8, fp
 800341c:	4413      	add	r3, r2
 800341e:	fba8 450a 	umull	r4, r5, r8, sl
 8003422:	442b      	add	r3, r5
 8003424:	461d      	mov	r5, r3
 8003426:	4620      	mov	r0, r4
 8003428:	4629      	mov	r1, r5
 800342a:	f000 f8f3 	bl	8003614 <pqcrystals_dilithium2_refmontgomery_reduce>
 800342e:	60b8      	str	r0, [r7, #8]
        a[j + len] = a[j] - t;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	1a8a      	subs	r2, r1, r2
 800344a:	601a      	str	r2, [r3, #0]
        a[j] = a[j] + t;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4413      	add	r3, r2
 8003454:	6819      	ldr	r1, [r3, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	440a      	add	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
      for(j = start; j < start + len; ++j) {
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	3301      	adds	r3, #1
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	4413      	add	r3, r2
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	429a      	cmp	r2, r3
 8003474:	d3c0      	bcc.n	80033f8 <pqcrystals_dilithium2_ref_ntt+0x30>
    for(start = 0; start < N; start = j + len) {
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	4413      	add	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2bff      	cmp	r3, #255	; 0xff
 8003482:	d9ae      	bls.n	80033e2 <pqcrystals_dilithium2_ref_ntt+0x1a>
  for(len = 128; len > 0; len >>= 1) {
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	085b      	lsrs	r3, r3, #1
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1a5      	bne.n	80033dc <pqcrystals_dilithium2_ref_ntt+0x14>
      }
    }
  }
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349c:	08008d28 	.word	0x08008d28

080034a0 <pqcrystals_dilithium2_ref_invntt_tomont>:
*              Q in absolute value. Output coefficient are smaller than Q in
*              absolute value.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void invntt_tomont(int32_t a[N]) {
 80034a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a4:	b091      	sub	sp, #68	; 0x44
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	61f8      	str	r0, [r7, #28]
  unsigned int start, len, j, k;
  int32_t t, zeta;
  const int32_t f = 41978; // mont^2/256
 80034aa:	f24a 33fa 	movw	r3, #41978	; 0xa3fa
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  k = 256;
 80034b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
  for(len = 1; len < N; len <<= 1) {
 80034b6:	2301      	movs	r3, #1
 80034b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ba:	e073      	b.n	80035a4 <pqcrystals_dilithium2_ref_invntt_tomont+0x104>
    for(start = 0; start < N; start = j + len) {
 80034bc:	2300      	movs	r3, #0
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c0:	e06a      	b.n	8003598 <pqcrystals_dilithium2_ref_invntt_tomont+0xf8>
      zeta = -zetas[--k];
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	3b01      	subs	r3, #1
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30
 80034c8:	4a51      	ldr	r2, [pc, #324]	; (8003610 <pqcrystals_dilithium2_ref_invntt_tomont+0x170>)
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d0:	425b      	negs	r3, r3
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
      for(j = start; j < start + len; ++j) {
 80034d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
 80034d8:	e054      	b.n	8003584 <pqcrystals_dilithium2_ref_invntt_tomont+0xe4>
        t = a[j];
 80034da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
        a[j] = t + a[j + len];
 80034e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	6819      	ldr	r1, [r3, #0]
 80034f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f6:	009a      	lsls	r2, r3, #2
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	441a      	add	r2, r3
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	440b      	add	r3, r1
 8003500:	6013      	str	r3, [r2, #0]
        a[j + len] = t - a[j + len];
 8003502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	4413      	add	r3, r2
 8003516:	009a      	lsls	r2, r3, #2
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	441a      	add	r2, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	1a5b      	subs	r3, r3, r1
 8003520:	6013      	str	r3, [r2, #0]
        a[j + len] = montgomery_reduce((int64_t)zeta * a[j + len]);
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	17da      	asrs	r2, r3, #31
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	60fa      	str	r2, [r7, #12]
 800352a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	17da      	asrs	r2, r3, #31
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	617a      	str	r2, [r7, #20]
 800353e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003542:	460a      	mov	r2, r1
 8003544:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003548:	469c      	mov	ip, r3
 800354a:	fb0c f202 	mul.w	r2, ip, r2
 800354e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003552:	4684      	mov	ip, r0
 8003554:	fb0c f304 	mul.w	r3, ip, r4
 8003558:	4413      	add	r3, r2
 800355a:	4602      	mov	r2, r0
 800355c:	6939      	ldr	r1, [r7, #16]
 800355e:	fba2 ab01 	umull	sl, fp, r2, r1
 8003562:	445b      	add	r3, fp
 8003564:	469b      	mov	fp, r3
 8003566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	18d4      	adds	r4, r2, r3
 8003572:	4650      	mov	r0, sl
 8003574:	4659      	mov	r1, fp
 8003576:	f000 f84d 	bl	8003614 <pqcrystals_dilithium2_refmontgomery_reduce>
 800357a:	4603      	mov	r3, r0
 800357c:	6023      	str	r3, [r4, #0]
      for(j = start; j < start + len; ++j) {
 800357e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003580:	3301      	adds	r3, #1
 8003582:	637b      	str	r3, [r7, #52]	; 0x34
 8003584:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	4413      	add	r3, r2
 800358a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800358c:	429a      	cmp	r2, r3
 800358e:	d3a4      	bcc.n	80034da <pqcrystals_dilithium2_ref_invntt_tomont+0x3a>
    for(start = 0; start < N; start = j + len) {
 8003590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	4413      	add	r3, r2
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359a:	2bff      	cmp	r3, #255	; 0xff
 800359c:	d991      	bls.n	80034c2 <pqcrystals_dilithium2_ref_invntt_tomont+0x22>
  for(len = 1; len < N; len <<= 1) {
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a6:	2bff      	cmp	r3, #255	; 0xff
 80035a8:	d988      	bls.n	80034bc <pqcrystals_dilithium2_ref_invntt_tomont+0x1c>
      }
    }
  }

  for(j = 0; j < N; ++j) {
 80035aa:	2300      	movs	r3, #0
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
 80035ae:	e026      	b.n	80035fe <pqcrystals_dilithium2_ref_invntt_tomont+0x15e>
    a[j] = montgomery_reduce((int64_t)f * a[j]);
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	17da      	asrs	r2, r3, #31
 80035b4:	461d      	mov	r5, r3
 80035b6:	4616      	mov	r6, r2
 80035b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	4413      	add	r3, r2
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	17da      	asrs	r2, r3, #31
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035cc:	4603      	mov	r3, r0
 80035ce:	fb03 f206 	mul.w	r2, r3, r6
 80035d2:	460b      	mov	r3, r1
 80035d4:	fb05 f303 	mul.w	r3, r5, r3
 80035d8:	4413      	add	r3, r2
 80035da:	4602      	mov	r2, r0
 80035dc:	fba5 8902 	umull	r8, r9, r5, r2
 80035e0:	444b      	add	r3, r9
 80035e2:	4699      	mov	r9, r3
 80035e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	18d4      	adds	r4, r2, r3
 80035ec:	4640      	mov	r0, r8
 80035ee:	4649      	mov	r1, r9
 80035f0:	f000 f810 	bl	8003614 <pqcrystals_dilithium2_refmontgomery_reduce>
 80035f4:	4603      	mov	r3, r0
 80035f6:	6023      	str	r3, [r4, #0]
  for(j = 0; j < N; ++j) {
 80035f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fa:	3301      	adds	r3, #1
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
 80035fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003600:	2bff      	cmp	r3, #255	; 0xff
 8003602:	d9d5      	bls.n	80035b0 <pqcrystals_dilithium2_ref_invntt_tomont+0x110>
  }
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	3744      	adds	r7, #68	; 0x44
 800360a:	46bd      	mov	sp, r7
 800360c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003610:	08008d28 	.word	0x08008d28

08003614 <pqcrystals_dilithium2_refmontgomery_reduce>:
*
* Arguments:   - int64_t: finite field element a
*
* Returns r.
**************************************************/
int32_t montgomery_reduce(int64_t a) {
 8003614:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	e9c7 0102 	strd	r0, r1, [r7, #8]
  int32_t t;

  t = (int64_t)(int32_t)a*QINV;
 8003620:	68b8      	ldr	r0, [r7, #8]
 8003622:	4601      	mov	r1, r0
 8003624:	00c9      	lsls	r1, r1, #3
 8003626:	1a09      	subs	r1, r1, r0
 8003628:	0289      	lsls	r1, r1, #10
 800362a:	4401      	add	r1, r0
 800362c:	0349      	lsls	r1, r1, #13
 800362e:	4401      	add	r1, r0
 8003630:	6179      	str	r1, [r7, #20]
  t = (a - (int64_t)t*Q) >> 32;
 8003632:	6979      	ldr	r1, [r7, #20]
 8003634:	17c8      	asrs	r0, r1, #31
 8003636:	460c      	mov	r4, r1
 8003638:	4605      	mov	r5, r0
 800363a:	e9c7 4500 	strd	r4, r5, [r7]
 800363e:	f04f 0000 	mov.w	r0, #0
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	02a9      	lsls	r1, r5, #10
 8003648:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 800364c:	02a0      	lsls	r0, r4, #10
 800364e:	f8d7 c000 	ldr.w	ip, [r7]
 8003652:	ebbc 0200 	subs.w	r2, ip, r0
 8003656:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800365a:	eb6c 0301 	sbc.w	r3, ip, r1
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	0359      	lsls	r1, r3, #13
 8003668:	ea41 41d2 	orr.w	r1, r1, r2, lsr #19
 800366c:	0350      	lsls	r0, r2, #13
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	ebb2 0a04 	subs.w	sl, r2, r4
 8003676:	eb63 0b05 	sbc.w	fp, r3, r5
 800367a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800367e:	eb1a 0802 	adds.w	r8, sl, r2
 8003682:	eb4b 0903 	adc.w	r9, fp, r3
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	464a      	mov	r2, r9
 8003690:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8003694:	4613      	mov	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
  return t;
 8003698:	697b      	ldr	r3, [r7, #20]
}
 800369a:	4618      	mov	r0, r3
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80036a4:	4770      	bx	lr

080036a6 <pqcrystals_dilithium2_refreduce32>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t reduce32(int32_t a) {
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  int32_t t;

  t = (a + (1 << 22)) >> 23;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
 80036b4:	15db      	asrs	r3, r3, #23
 80036b6:	60fb      	str	r3, [r7, #12]
  t = a - t*Q;
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	025b      	lsls	r3, r3, #9
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	029b      	lsls	r3, r3, #10
 80036c2:	4413      	add	r3, r2
 80036c4:	035b      	lsls	r3, r3, #13
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	4413      	add	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  return t;
 80036ce:	68fb      	ldr	r3, [r7, #12]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	0000      	movs	r0, r0

080036dc <pqcrystals_dilithium2_refcaddq>:
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t caddq(int32_t a) {
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  a += (a >> 31) & Q;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	17da      	asrs	r2, r3, #31
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <pqcrystals_dilithium2_refcaddq+0x24>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	4413      	add	r3, r2
 80036f0:	607b      	str	r3, [r7, #4]
  return a;
 80036f2:	687b      	ldr	r3, [r7, #4]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	007fe001 	.word	0x007fe001

08003704 <pqcrystals_dilithium2_refpower2round>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003714:	135b      	asrs	r3, r3, #13
 8003716:	60fb      	str	r3, [r7, #12]
  *a0 = a - (a1 << D);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	035b      	lsls	r3, r3, #13
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	1ad2      	subs	r2, r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	601a      	str	r2, [r3, #0]
  return a1;
 8003724:	68fb      	ldr	r3, [r7, #12]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <pqcrystals_dilithium2_refdecompose>:
* Arguments:   - int32_t a: input element
*              - int32_t *a0: pointer to output element a0
*
* Returns a1.
**************************************************/
int32_t decompose(int32_t *a0, int32_t a) {
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  int32_t a1;

  a1  = (a + 127) >> 7;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	337f      	adds	r3, #127	; 0x7f
 800373e:	11db      	asrs	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
#if GAMMA2 == (Q-1)/32
  a1  = (a1*1025 + (1 << 21)) >> 22;
  a1 &= 15;
#elif GAMMA2 == (Q-1)/88
  a1  = (a1*11275 + (1 << 23)) >> 24;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f642 420b 	movw	r2, #11275	; 0x2c0b
 8003748:	fb02 f303 	mul.w	r3, r2, r3
 800374c:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8003750:	161b      	asrs	r3, r3, #24
 8003752:	60fb      	str	r3, [r7, #12]
  a1 ^= ((43 - a1) >> 31) & a1;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 800375a:	17db      	asrs	r3, r3, #31
 800375c:	43db      	mvns	r3, r3
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4013      	ands	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
#endif

  *a0  = a - a1*2*GAMMA2;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a0d      	ldr	r2, [pc, #52]	; (800379c <pqcrystals_dilithium2_refdecompose+0x6c>)
 8003768:	fb03 f202 	mul.w	r2, r3, r2
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	441a      	add	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	601a      	str	r2, [r3, #0]
  *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f5c3 137f 	rsb	r3, r3, #4177920	; 0x3fc000
 8003780:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003784:	17d9      	asrs	r1, r3, #31
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <pqcrystals_dilithium2_refdecompose+0x70>)
 8003788:	400b      	ands	r3, r1
 800378a:	1ad2      	subs	r2, r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	601a      	str	r2, [r3, #0]
  return a1;
 8003790:	68fb      	ldr	r3, [r7, #12]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	fffd1800 	.word	0xfffd1800
 80037a0:	007fe001 	.word	0x007fe001

080037a4 <pqcrystals_dilithium2_refmake_hint>:
* Arguments:   - int32_t a0: low bits of input element
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int make_hint(int32_t a0, int32_t a1) {
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f5b3 3fba 	cmp.w	r3, #95232	; 0x17400
 80037b4:	dc0a      	bgt.n	80037cc <pqcrystals_dilithium2_refmake_hint+0x28>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f513 3fba 	cmn.w	r3, #95232	; 0x17400
 80037bc:	db06      	blt.n	80037cc <pqcrystals_dilithium2_refmake_hint+0x28>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f513 3fba 	cmn.w	r3, #95232	; 0x17400
 80037c4:	d104      	bne.n	80037d0 <pqcrystals_dilithium2_refmake_hint+0x2c>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <pqcrystals_dilithium2_refmake_hint+0x2c>
    return 1;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <pqcrystals_dilithium2_refmake_hint+0x2e>

  return 0;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 80037dc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 80037e6:	f04f 0000 	mov.w	r0, #0
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 80037f2:	2100      	movs	r1, #0
 80037f4:	6179      	str	r1, [r7, #20]
 80037f6:	e022      	b.n	800383e <load64+0x62>
    r |= (uint64_t)x[i] << 8*i;
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	6979      	ldr	r1, [r7, #20]
 80037fc:	4401      	add	r1, r0
 80037fe:	7809      	ldrb	r1, [r1, #0]
 8003800:	b2c9      	uxtb	r1, r1
 8003802:	2000      	movs	r0, #0
 8003804:	460c      	mov	r4, r1
 8003806:	4605      	mov	r5, r0
 8003808:	6979      	ldr	r1, [r7, #20]
 800380a:	00c9      	lsls	r1, r1, #3
 800380c:	f1a1 0620 	sub.w	r6, r1, #32
 8003810:	f1c1 0020 	rsb	r0, r1, #32
 8003814:	fa05 f301 	lsl.w	r3, r5, r1
 8003818:	fa04 f606 	lsl.w	r6, r4, r6
 800381c:	4333      	orrs	r3, r6
 800381e:	fa24 f000 	lsr.w	r0, r4, r0
 8003822:	4303      	orrs	r3, r0
 8003824:	fa04 f201 	lsl.w	r2, r4, r1
 8003828:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800382c:	ea40 0802 	orr.w	r8, r0, r2
 8003830:	ea41 0903 	orr.w	r9, r1, r3
 8003834:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 8003838:	6979      	ldr	r1, [r7, #20]
 800383a:	3101      	adds	r1, #1
 800383c:	6179      	str	r1, [r7, #20]
 800383e:	6979      	ldr	r1, [r7, #20]
 8003840:	2907      	cmp	r1, #7
 8003842:	d9d9      	bls.n	80037f8 <load64+0x1c>

  return r;
 8003844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8003854:	4770      	bx	lr

08003856 <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 8003856:	b4f0      	push	{r4, r5, r6, r7}
 8003858:	b086      	sub	sp, #24
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e019      	b.n	800389c <store64+0x46>
    x[i] = u >> 8*i;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	00d9      	lsls	r1, r3, #3
 800386c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003870:	f1c1 0620 	rsb	r6, r1, #32
 8003874:	f1a1 0020 	sub.w	r0, r1, #32
 8003878:	fa22 f401 	lsr.w	r4, r2, r1
 800387c:	fa03 f606 	lsl.w	r6, r3, r6
 8003880:	4334      	orrs	r4, r6
 8003882:	fa23 f000 	lsr.w	r0, r3, r0
 8003886:	4304      	orrs	r4, r0
 8003888:	fa23 f501 	lsr.w	r5, r3, r1
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	4413      	add	r3, r2
 8003892:	b2e2      	uxtb	r2, r4
 8003894:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3301      	adds	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b07      	cmp	r3, #7
 80038a0:	d9e2      	bls.n	8003868 <store64+0x12>
}
 80038a2:	bf00      	nop
 80038a4:	bf00      	nop
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bcf0      	pop	{r4, r5, r6, r7}
 80038ac:	4770      	bx	lr
 80038ae:	0000      	movs	r0, r0

080038b0 <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 80038b0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80038b4:	f6ad 3d8c 	subw	sp, sp, #2956	; 0xb8c
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80038be:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038c2:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 80038c4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80038c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80038d6:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 80038da:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80038de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038e8:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80038ec:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 80038f0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80038f4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038fe:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8003902:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 8003906:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800390a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003914:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8003918:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 800391c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003920:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800392a:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800392e:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 8003932:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003936:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003940:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8003944:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 8003948:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800394c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003956:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800395a:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 800395e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003962:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800396c:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8003970:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 8003974:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003978:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003982:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8003986:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 800398a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800398e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003998:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800399c:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 80039a0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039a4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80039ae:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 80039b2:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 80039b6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80039c4:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 80039c8:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 80039cc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039d0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80039da:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 80039de:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 80039e2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80039f0:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 80039f4:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 80039f8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039fc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003a06:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8003a0a:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 8003a0e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a12:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003a1c:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8003a20:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 8003a24:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a28:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003a32:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8003a36:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 8003a3a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003a48:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8003a4c:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 8003a50:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a54:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003a5e:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8003a62:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 8003a66:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a6a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8003a74:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8003a78:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 8003a7c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a80:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8003a8a:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8003a8e:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 8003a92:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8003aa0:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8003aa4:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 8003aa8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003aac:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8003ab6:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8003aba:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 8003abe:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ac2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8003acc:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8003ad0:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 8003ad4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ad8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8003ae2:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8003ae6:	e9c1 2300 	strd	r2, r3, [r1]

        for(round = 0; round < NROUNDS; round += 2) {
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8003af0:	f002 bf10 	b.w	8006914 <KeccakF1600_StatePermute+0x3064>
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 8003af4:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003af8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003afc:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	ea80 0c02 	eor.w	ip, r0, r2
 8003b08:	f8c7 c990 	str.w	ip, [r7, #2448]	; 0x990
 8003b0c:	404b      	eors	r3, r1
 8003b0e:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 8003b12:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1a:	f507 6119 	add.w	r1, r7, #2448	; 0x990
 8003b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b22:	4684      	mov	ip, r0
 8003b24:	ea8c 0c02 	eor.w	ip, ip, r2
 8003b28:	f8c7 c988 	str.w	ip, [r7, #2440]	; 0x988
 8003b2c:	404b      	eors	r3, r1
 8003b2e:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 8003b32:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f607 1188 	addw	r1, r7, #2440	; 0x988
 8003b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b42:	4684      	mov	ip, r0
 8003b44:	ea8c 0c02 	eor.w	ip, ip, r2
 8003b48:	f8c7 c980 	str.w	ip, [r7, #2432]	; 0x980
 8003b4c:	404b      	eors	r3, r1
 8003b4e:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 8003b52:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f507 6118 	add.w	r1, r7, #2432	; 0x980
 8003b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b62:	4684      	mov	ip, r0
 8003b64:	ea82 0c0c 	eor.w	ip, r2, ip
 8003b68:	f8c7 c548 	str.w	ip, [r7, #1352]	; 0x548
 8003b6c:	404b      	eors	r3, r1
 8003b6e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8003b72:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8003b7e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 8003b82:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8003b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b8a:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	ea80 0c02 	eor.w	ip, r0, r2
 8003b96:	f8c7 c978 	str.w	ip, [r7, #2424]	; 0x978
 8003b9a:	404b      	eors	r3, r1
 8003b9c:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 8003ba0:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f607 1178 	addw	r1, r7, #2424	; 0x978
 8003bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bb0:	4684      	mov	ip, r0
 8003bb2:	ea8c 0c02 	eor.w	ip, ip, r2
 8003bb6:	f8c7 c970 	str.w	ip, [r7, #2416]	; 0x970
 8003bba:	404b      	eors	r3, r1
 8003bbc:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8003bc0:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f507 6117 	add.w	r1, r7, #2416	; 0x970
 8003bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bd0:	4684      	mov	ip, r0
 8003bd2:	ea8c 0c02 	eor.w	ip, ip, r2
 8003bd6:	f8c7 c968 	str.w	ip, [r7, #2408]	; 0x968
 8003bda:	404b      	eors	r3, r1
 8003bdc:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8003be0:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f607 1168 	addw	r1, r7, #2408	; 0x968
 8003bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bf0:	4684      	mov	ip, r0
 8003bf2:	ea82 0c0c 	eor.w	ip, r2, ip
 8003bf6:	f8c7 c540 	str.w	ip, [r7, #1344]	; 0x540
 8003bfa:	404b      	eors	r3, r1
 8003bfc:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8003c00:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003c0c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 8003c10:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8003c14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c18:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	ea80 0c02 	eor.w	ip, r0, r2
 8003c24:	f8c7 c960 	str.w	ip, [r7, #2400]	; 0x960
 8003c28:	404b      	eors	r3, r1
 8003c2a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8003c2e:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f507 6116 	add.w	r1, r7, #2400	; 0x960
 8003c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c3e:	4684      	mov	ip, r0
 8003c40:	ea8c 0c02 	eor.w	ip, ip, r2
 8003c44:	f8c7 c958 	str.w	ip, [r7, #2392]	; 0x958
 8003c48:	404b      	eors	r3, r1
 8003c4a:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 8003c4e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f607 1158 	addw	r1, r7, #2392	; 0x958
 8003c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c5e:	4684      	mov	ip, r0
 8003c60:	ea8c 0c02 	eor.w	ip, ip, r2
 8003c64:	f8c7 c950 	str.w	ip, [r7, #2384]	; 0x950
 8003c68:	404b      	eors	r3, r1
 8003c6a:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8003c6e:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f507 6115 	add.w	r1, r7, #2384	; 0x950
 8003c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c7e:	4684      	mov	ip, r0
 8003c80:	ea82 0c0c 	eor.w	ip, r2, ip
 8003c84:	f8c7 c538 	str.w	ip, [r7, #1336]	; 0x538
 8003c88:	404b      	eors	r3, r1
 8003c8a:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8003c8e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8003c9a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 8003c9e:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8003ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ca6:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	ea80 0c02 	eor.w	ip, r0, r2
 8003cb2:	f8c7 c948 	str.w	ip, [r7, #2376]	; 0x948
 8003cb6:	404b      	eors	r3, r1
 8003cb8:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 8003cbc:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f607 1148 	addw	r1, r7, #2376	; 0x948
 8003cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ccc:	4684      	mov	ip, r0
 8003cce:	ea8c 0c02 	eor.w	ip, ip, r2
 8003cd2:	f8c7 c940 	str.w	ip, [r7, #2368]	; 0x940
 8003cd6:	404b      	eors	r3, r1
 8003cd8:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 8003cdc:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8003ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cec:	4684      	mov	ip, r0
 8003cee:	ea8c 0c02 	eor.w	ip, ip, r2
 8003cf2:	f8c7 c938 	str.w	ip, [r7, #2360]	; 0x938
 8003cf6:	404b      	eors	r3, r1
 8003cf8:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 8003cfc:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8003d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d0c:	4684      	mov	ip, r0
 8003d0e:	ea82 0c0c 	eor.w	ip, r2, ip
 8003d12:	f8c7 c530 	str.w	ip, [r7, #1328]	; 0x530
 8003d16:	404b      	eors	r3, r1
 8003d18:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8003d1c:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8003d28:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 8003d2c:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8003d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d34:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	ea80 0c02 	eor.w	ip, r0, r2
 8003d40:	f8c7 c930 	str.w	ip, [r7, #2352]	; 0x930
 8003d44:	404b      	eors	r3, r1
 8003d46:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8003d4a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8003d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d5a:	4684      	mov	ip, r0
 8003d5c:	ea8c 0c02 	eor.w	ip, ip, r2
 8003d60:	f8c7 c928 	str.w	ip, [r7, #2344]	; 0x928
 8003d64:	404b      	eors	r3, r1
 8003d66:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8003d6a:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f607 1128 	addw	r1, r7, #2344	; 0x928
 8003d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d7a:	4684      	mov	ip, r0
 8003d7c:	ea8c 0c02 	eor.w	ip, ip, r2
 8003d80:	f8c7 c920 	str.w	ip, [r7, #2336]	; 0x920
 8003d84:	404b      	eors	r3, r1
 8003d86:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 8003d8a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 8003d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d9a:	4684      	mov	ip, r0
 8003d9c:	ea82 0c0c 	eor.w	ip, r2, ip
 8003da0:	f8c7 c528 	str.w	ip, [r7, #1320]	; 0x528
 8003da4:	404b      	eors	r3, r1
 8003da6:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8003daa:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8003db6:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round, A, E)
            Da = BCu^ROL(BCe, 1);
 8003dba:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8003dbe:	0fda      	lsrs	r2, r3, #31
 8003dc0:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8003dcc:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8003dd0:	0fda      	lsrs	r2, r3, #31
 8003dd2:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 8003dde:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f607 1118 	addw	r1, r7, #2328	; 0x918
 8003dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dee:	4684      	mov	ip, r0
 8003df0:	ea82 0c0c 	eor.w	ip, r2, ip
 8003df4:	f8c7 c520 	str.w	ip, [r7, #1312]	; 0x520
 8003df8:	404b      	eors	r3, r1
 8003dfa:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8003dfe:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 8003e0a:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8003e0e:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8003e12:	0fda      	lsrs	r2, r3, #31
 8003e14:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 8003e20:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8003e24:	0fda      	lsrs	r2, r3, #31
 8003e26:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8003e32:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f507 6111 	add.w	r1, r7, #2320	; 0x910
 8003e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e42:	4684      	mov	ip, r0
 8003e44:	ea82 0c0c 	eor.w	ip, r2, ip
 8003e48:	f8c7 c518 	str.w	ip, [r7, #1304]	; 0x518
 8003e4c:	404b      	eors	r3, r1
 8003e4e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8003e52:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8003e5e:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8003e62:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8003e66:	0fda      	lsrs	r2, r3, #31
 8003e68:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 8003e74:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8003e78:	0fda      	lsrs	r2, r3, #31
 8003e7a:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8003e86:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f607 1108 	addw	r1, r7, #2312	; 0x908
 8003e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e96:	4684      	mov	ip, r0
 8003e98:	ea82 0c0c 	eor.w	ip, r2, ip
 8003e9c:	f8c7 c510 	str.w	ip, [r7, #1296]	; 0x510
 8003ea0:	404b      	eors	r3, r1
 8003ea2:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8003ea6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 8003eb2:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8003eb6:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8003eba:	0fda      	lsrs	r2, r3, #31
 8003ebc:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 8003ec8:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8003ecc:	0fda      	lsrs	r2, r3, #31
 8003ece:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 8003eda:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8003ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003eea:	4684      	mov	ip, r0
 8003eec:	ea82 0c0c 	eor.w	ip, r2, ip
 8003ef0:	f8c7 c508 	str.w	ip, [r7, #1288]	; 0x508
 8003ef4:	404b      	eors	r3, r1
 8003ef6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8003efa:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 8003f06:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8003f0a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8003f0e:	0fda      	lsrs	r2, r3, #31
 8003f10:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 8003f1c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8003f20:	0fda      	lsrs	r2, r3, #31
 8003f22:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 8003f2e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f607 01f8 	addw	r1, r7, #2296	; 0x8f8
 8003f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f3e:	4684      	mov	ip, r0
 8003f40:	ea82 0c0c 	eor.w	ip, r2, ip
 8003f44:	f8c7 c500 	str.w	ip, [r7, #1280]	; 0x500
 8003f48:	404b      	eors	r3, r1
 8003f4a:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8003f4e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8003f5a:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 8003f5e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f66:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	ea80 0c02 	eor.w	ip, r0, r2
 8003f72:	f8c7 c4f8 	str.w	ip, [r7, #1272]	; 0x4f8
 8003f76:	404b      	eors	r3, r1
 8003f78:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8003f7c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8003f88:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 8003f8c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8003f98:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 8003f9c:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8003fa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fa4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	ea80 0c02 	eor.w	ip, r0, r2
 8003fb0:	f8c7 c4f0 	str.w	ip, [r7, #1264]	; 0x4f0
 8003fb4:	404b      	eors	r3, r1
 8003fb6:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8003fba:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8003fc6:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 8003fca:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8003fce:	031a      	lsls	r2, r3, #12
 8003fd0:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8003fd4:	0d1b      	lsrs	r3, r3, #20
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8003fdc:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8003fe0:	031a      	lsls	r2, r3, #12
 8003fe2:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8003fe6:	0d1b      	lsrs	r3, r3, #20
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8003fee:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003ffa:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 8003ffe:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8004002:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004006:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	ea80 0c02 	eor.w	ip, r0, r2
 8004012:	f8c7 c4e0 	str.w	ip, [r7, #1248]	; 0x4e0
 8004016:	404b      	eors	r3, r1
 8004018:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800401c:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8004028:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 800402c:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8004030:	02da      	lsls	r2, r3, #11
 8004032:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8004036:	0d5b      	lsrs	r3, r3, #21
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800403e:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8004042:	02da      	lsls	r2, r3, #11
 8004044:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8004048:	0d5b      	lsrs	r3, r3, #21
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 8004050:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800405c:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 8004060:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8004064:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004068:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	ea80 0c02 	eor.w	ip, r0, r2
 8004074:	f8c7 c4d0 	str.w	ip, [r7, #1232]	; 0x4d0
 8004078:	404b      	eors	r3, r1
 800407a:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800407e:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800408a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 800408e:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 8004092:	0ada      	lsrs	r2, r3, #11
 8004094:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 8004098:	055b      	lsls	r3, r3, #21
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 80040a0:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 80040a4:	0ada      	lsrs	r2, r3, #11
 80040a6:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 80040aa:	055b      	lsls	r3, r3, #21
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 80040b2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80040be:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 80040c2:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80040c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040ca:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	ea80 0c02 	eor.w	ip, r0, r2
 80040d6:	f8c7 c4c0 	str.w	ip, [r7, #1216]	; 0x4c0
 80040da:	404b      	eors	r3, r1
 80040dc:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 80040e0:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 80040ec:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 80040f0:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 80040f4:	0c9a      	lsrs	r2, r3, #18
 80040f6:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 80040fa:	039b      	lsls	r3, r3, #14
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8004102:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 8004106:	0c9a      	lsrs	r2, r3, #18
 8004108:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800410c:	039b      	lsls	r3, r3, #14
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8004114:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8004120:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 8004124:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	43d1      	mvns	r1, r2
 800412e:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 8004132:	43db      	mvns	r3, r3
 8004134:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8004138:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 8004144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004148:	4684      	mov	ip, r0
 800414a:	ea0c 0c02 	and.w	ip, ip, r2
 800414e:	f8c7 c8e8 	str.w	ip, [r7, #2280]	; 0x8e8
 8004152:	400b      	ands	r3, r1
 8004154:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 8004158:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 8004164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004168:	4684      	mov	ip, r0
 800416a:	ea82 0c0c 	eor.w	ip, r2, ip
 800416e:	f8c7 c4b0 	str.w	ip, [r7, #1200]	; 0x4b0
 8004172:	404b      	eors	r3, r1
 8004174:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 8004178:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 8004184:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8004188:	4ac7      	ldr	r2, [pc, #796]	; (80044a8 <KeccakF1600_StatePermute+0xbf8>)
 800418a:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004196:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	ea82 0c00 	eor.w	ip, r2, r0
 80041a2:	f8c7 c4a8 	str.w	ip, [r7, #1192]	; 0x4a8
 80041a6:	404b      	eors	r3, r1
 80041a8:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 80041ac:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 80041b8:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 80041bc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	43d1      	mvns	r1, r2
 80041c6:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 80041ca:	43db      	mvns	r3, r3
 80041cc:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 80041d0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f507 610e 	add.w	r1, r7, #2272	; 0x8e0
 80041dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041e0:	4684      	mov	ip, r0
 80041e2:	ea0c 0c02 	and.w	ip, ip, r2
 80041e6:	f8c7 c8d8 	str.w	ip, [r7, #2264]	; 0x8d8
 80041ea:	400b      	ands	r3, r1
 80041ec:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 80041f0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80041fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004200:	4684      	mov	ip, r0
 8004202:	ea82 0c0c 	eor.w	ip, r2, ip
 8004206:	f8c7 c4a0 	str.w	ip, [r7, #1184]	; 0x4a0
 800420a:	404b      	eors	r3, r1
 800420c:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8004210:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 800421c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 8004220:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	43d1      	mvns	r1, r2
 800422a:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 800422e:	43db      	mvns	r3, r3
 8004230:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 8004234:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f507 610d 	add.w	r1, r7, #2256	; 0x8d0
 8004240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004244:	4684      	mov	ip, r0
 8004246:	ea0c 0c02 	and.w	ip, ip, r2
 800424a:	f8c7 c8c8 	str.w	ip, [r7, #2248]	; 0x8c8
 800424e:	400b      	ands	r3, r1
 8004250:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 8004254:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8004260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004264:	4684      	mov	ip, r0
 8004266:	ea82 0c0c 	eor.w	ip, r2, ip
 800426a:	f8c7 c498 	str.w	ip, [r7, #1176]	; 0x498
 800426e:	404b      	eors	r3, r1
 8004270:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8004274:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8004280:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 8004284:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	43d1      	mvns	r1, r2
 800428e:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 8004292:	43db      	mvns	r3, r3
 8004294:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8004298:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f507 610c 	add.w	r1, r7, #2240	; 0x8c0
 80042a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042a8:	4684      	mov	ip, r0
 80042aa:	ea0c 0c02 	and.w	ip, ip, r2
 80042ae:	f8c7 c8b8 	str.w	ip, [r7, #2232]	; 0x8b8
 80042b2:	400b      	ands	r3, r1
 80042b4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80042b8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f607 01b8 	addw	r1, r7, #2232	; 0x8b8
 80042c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042c8:	4684      	mov	ip, r0
 80042ca:	ea82 0c0c 	eor.w	ip, r2, ip
 80042ce:	f8c7 c490 	str.w	ip, [r7, #1168]	; 0x490
 80042d2:	404b      	eors	r3, r1
 80042d4:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 80042d8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 80042e4:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 80042e8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	43d1      	mvns	r1, r2
 80042f2:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 80042f6:	43db      	mvns	r3, r3
 80042f8:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 80042fc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8004308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800430c:	4684      	mov	ip, r0
 800430e:	ea0c 0c02 	and.w	ip, ip, r2
 8004312:	f8c7 c8a8 	str.w	ip, [r7, #2216]	; 0x8a8
 8004316:	400b      	ands	r3, r1
 8004318:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 800431c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 8004328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800432c:	4684      	mov	ip, r0
 800432e:	ea82 0c0c 	eor.w	ip, r2, ip
 8004332:	f8c7 c488 	str.w	ip, [r7, #1160]	; 0x488
 8004336:	404b      	eors	r3, r1
 8004338:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800433c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 8004348:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 800434c:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8004350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004354:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	ea80 0c02 	eor.w	ip, r0, r2
 8004360:	f8c7 c480 	str.w	ip, [r7, #1152]	; 0x480
 8004364:	404b      	eors	r3, r1
 8004366:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800436a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8004376:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 800437a:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800437e:	091a      	lsrs	r2, r3, #4
 8004380:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8004384:	071b      	lsls	r3, r3, #28
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800438c:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8004390:	091a      	lsrs	r2, r3, #4
 8004392:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8004396:	071b      	lsls	r3, r3, #28
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800439e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80043aa:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 80043ae:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80043b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043b6:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	ea80 0c02 	eor.w	ip, r0, r2
 80043c2:	f8c7 c470 	str.w	ip, [r7, #1136]	; 0x470
 80043c6:	404b      	eors	r3, r1
 80043c8:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80043cc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 80043d8:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 80043dc:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80043e0:	0b1a      	lsrs	r2, r3, #12
 80043e2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80043e6:	051b      	lsls	r3, r3, #20
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 80043ee:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80043f2:	0b1a      	lsrs	r2, r3, #12
 80043f4:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80043f8:	051b      	lsls	r3, r3, #20
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8004400:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800440c:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 8004410:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8004414:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004418:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	ea80 0c02 	eor.w	ip, r0, r2
 8004424:	f8c7 c460 	str.w	ip, [r7, #1120]	; 0x460
 8004428:	404b      	eors	r3, r1
 800442a:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800442e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800443a:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 800443e:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 8004442:	0f5a      	lsrs	r2, r3, #29
 8004444:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8004450:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 8004454:	0f5a      	lsrs	r2, r3, #29
 8004456:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8004462:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800446e:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 8004472:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8004476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800447a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	ea80 0c02 	eor.w	ip, r0, r2
 8004486:	f8c7 c450 	str.w	ip, [r7, #1104]	; 0x450
 800448a:	404b      	eors	r3, r1
 800448c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8004490:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800449c:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 80044a0:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80044a4:	035a      	lsls	r2, r3, #13
 80044a6:	e001      	b.n	80044ac <KeccakF1600_StatePermute+0xbfc>
 80044a8:	08009128 	.word	0x08009128
 80044ac:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80044b0:	0cdb      	lsrs	r3, r3, #19
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 80044b8:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80044bc:	035a      	lsls	r2, r3, #13
 80044be:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80044c2:	0cdb      	lsrs	r3, r3, #19
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 80044ca:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80044d6:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 80044da:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 80044de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044e2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	ea80 0c02 	eor.w	ip, r0, r2
 80044ee:	f8c7 c440 	str.w	ip, [r7, #1088]	; 0x440
 80044f2:	404b      	eors	r3, r1
 80044f4:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 80044f8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8004504:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 8004508:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800450c:	075a      	lsls	r2, r3, #29
 800450e:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8004512:	08db      	lsrs	r3, r3, #3
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800451a:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800451e:	075a      	lsls	r2, r3, #29
 8004520:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8004524:	08db      	lsrs	r3, r3, #3
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800452c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8004538:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 800453c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	43d1      	mvns	r1, r2
 8004546:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 800454a:	43db      	mvns	r3, r3
 800454c:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 8004550:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 800455c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004560:	4684      	mov	ip, r0
 8004562:	ea0c 0c02 	and.w	ip, ip, r2
 8004566:	f8c7 c898 	str.w	ip, [r7, #2200]	; 0x898
 800456a:	400b      	ands	r3, r1
 800456c:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 8004570:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f607 0198 	addw	r1, r7, #2200	; 0x898
 800457c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004580:	4684      	mov	ip, r0
 8004582:	ea82 0c0c 	eor.w	ip, r2, ip
 8004586:	f8c7 c430 	str.w	ip, [r7, #1072]	; 0x430
 800458a:	404b      	eors	r3, r1
 800458c:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8004590:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004598:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800459c:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 80045a0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	43d1      	mvns	r1, r2
 80045aa:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 80045ae:	43db      	mvns	r3, r3
 80045b0:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 80045b4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 80045c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045c4:	4684      	mov	ip, r0
 80045c6:	ea0c 0c02 	and.w	ip, ip, r2
 80045ca:	f8c7 c888 	str.w	ip, [r7, #2184]	; 0x888
 80045ce:	400b      	ands	r3, r1
 80045d0:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 80045d4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	f607 0188 	addw	r1, r7, #2184	; 0x888
 80045e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045e4:	4684      	mov	ip, r0
 80045e6:	ea82 0c0c 	eor.w	ip, r2, ip
 80045ea:	f8c7 c428 	str.w	ip, [r7, #1064]	; 0x428
 80045ee:	404b      	eors	r3, r1
 80045f0:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80045f4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8004600:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 8004604:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	43d1      	mvns	r1, r2
 800460e:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 8004612:	43db      	mvns	r3, r3
 8004614:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 8004618:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8004624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004628:	4684      	mov	ip, r0
 800462a:	ea0c 0c02 	and.w	ip, ip, r2
 800462e:	f8c7 c878 	str.w	ip, [r7, #2168]	; 0x878
 8004632:	400b      	ands	r3, r1
 8004634:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 8004638:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f607 0178 	addw	r1, r7, #2168	; 0x878
 8004644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004648:	4684      	mov	ip, r0
 800464a:	ea82 0c0c 	eor.w	ip, r2, ip
 800464e:	f8c7 c420 	str.w	ip, [r7, #1056]	; 0x420
 8004652:	404b      	eors	r3, r1
 8004654:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8004658:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8004664:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 8004668:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	43d1      	mvns	r1, r2
 8004672:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 8004676:	43db      	mvns	r3, r3
 8004678:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 800467c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 8004688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800468c:	4684      	mov	ip, r0
 800468e:	ea0c 0c02 	and.w	ip, ip, r2
 8004692:	f8c7 c868 	str.w	ip, [r7, #2152]	; 0x868
 8004696:	400b      	ands	r3, r1
 8004698:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 800469c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f607 0168 	addw	r1, r7, #2152	; 0x868
 80046a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046ac:	4684      	mov	ip, r0
 80046ae:	ea82 0c0c 	eor.w	ip, r2, ip
 80046b2:	f8c7 c418 	str.w	ip, [r7, #1048]	; 0x418
 80046b6:	404b      	eors	r3, r1
 80046b8:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 80046bc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 80046c8:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 80046cc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	43d1      	mvns	r1, r2
 80046d6:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 80046da:	43db      	mvns	r3, r3
 80046dc:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 80046e0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 80046ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046f0:	4684      	mov	ip, r0
 80046f2:	ea0c 0c02 	and.w	ip, ip, r2
 80046f6:	f8c7 c858 	str.w	ip, [r7, #2136]	; 0x858
 80046fa:	400b      	ands	r3, r1
 80046fc:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 8004700:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f607 0158 	addw	r1, r7, #2136	; 0x858
 800470c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004710:	4684      	mov	ip, r0
 8004712:	ea82 0c0c 	eor.w	ip, r2, ip
 8004716:	f8c7 c410 	str.w	ip, [r7, #1040]	; 0x410
 800471a:	404b      	eors	r3, r1
 800471c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8004720:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 800472c:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 8004730:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8004734:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004738:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	ea80 0c02 	eor.w	ip, r0, r2
 8004744:	f8c7 c408 	str.w	ip, [r7, #1032]	; 0x408
 8004748:	404b      	eors	r3, r1
 800474a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800474e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800475a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 800475e:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 8004762:	0fda      	lsrs	r2, r3, #31
 8004764:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8004770:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 8004774:	0fda      	lsrs	r2, r3, #31
 8004776:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8004782:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800478e:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 8004792:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8004796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800479a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	ea80 0c02 	eor.w	ip, r0, r2
 80047a6:	f8c7 c3f8 	str.w	ip, [r7, #1016]	; 0x3f8
 80047aa:	404b      	eors	r3, r1
 80047ac:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 80047b0:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 80047b4:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 80047b8:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 80047bc:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 80047c0:	0e9a      	lsrs	r2, r3, #26
 80047c2:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 80047c6:	019b      	lsls	r3, r3, #6
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80047ce:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 80047d2:	0e9a      	lsrs	r2, r3, #26
 80047d4:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 80047d8:	019b      	lsls	r3, r3, #6
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 80047e0:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 80047e4:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80047e8:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 80047ec:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80047f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047f4:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	ea80 0c02 	eor.w	ip, r0, r2
 8004800:	f8c7 c3e8 	str.w	ip, [r7, #1000]	; 0x3e8
 8004804:	404b      	eors	r3, r1
 8004806:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800480a:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 800480e:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8004812:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 8004816:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800481a:	09da      	lsrs	r2, r3, #7
 800481c:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8004820:	065b      	lsls	r3, r3, #25
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8004828:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800482c:	09da      	lsrs	r2, r3, #7
 800482e:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8004832:	065b      	lsls	r3, r3, #25
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800483a:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 800483e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8004842:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 8004846:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800484a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800484e:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	ea80 0c02 	eor.w	ip, r0, r2
 800485a:	f8c7 c3d8 	str.w	ip, [r7, #984]	; 0x3d8
 800485e:	404b      	eors	r3, r1
 8004860:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8004864:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 8004868:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800486c:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 8004870:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 8004874:	0e1a      	lsrs	r2, r3, #24
 8004876:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8004882:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 8004886:	0e1a      	lsrs	r2, r3, #24
 8004888:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8004894:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8004898:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800489c:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 80048a0:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80048a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048a8:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	ea80 0c02 	eor.w	ip, r0, r2
 80048b4:	f8c7 c3c8 	str.w	ip, [r7, #968]	; 0x3c8
 80048b8:	404b      	eors	r3, r1
 80048ba:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80048be:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 80048c2:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 80048c6:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 80048ca:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 80048ce:	0b9a      	lsrs	r2, r3, #14
 80048d0:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 80048d4:	049b      	lsls	r3, r3, #18
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 80048dc:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 80048e0:	0b9a      	lsrs	r2, r3, #14
 80048e2:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 80048e6:	049b      	lsls	r3, r3, #18
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 80048ee:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 80048f2:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80048f6:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 80048fa:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	43d1      	mvns	r1, r2
 8004904:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 8004908:	43db      	mvns	r3, r3
 800490a:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 800490e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 800491a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800491e:	4684      	mov	ip, r0
 8004920:	ea0c 0c02 	and.w	ip, ip, r2
 8004924:	f8c7 c848 	str.w	ip, [r7, #2120]	; 0x848
 8004928:	400b      	ands	r3, r1
 800492a:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 800492e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	f607 0148 	addw	r1, r7, #2120	; 0x848
 800493a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800493e:	4684      	mov	ip, r0
 8004940:	ea82 0c0c 	eor.w	ip, r2, ip
 8004944:	f8c7 c3b8 	str.w	ip, [r7, #952]	; 0x3b8
 8004948:	404b      	eors	r3, r1
 800494a:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800494e:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8004952:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8004956:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 800495a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	43d1      	mvns	r1, r2
 8004964:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 8004968:	43db      	mvns	r3, r3
 800496a:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 800496e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f507 6104 	add.w	r1, r7, #2112	; 0x840
 800497a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800497e:	4684      	mov	ip, r0
 8004980:	ea0c 0c02 	and.w	ip, ip, r2
 8004984:	f8c7 c838 	str.w	ip, [r7, #2104]	; 0x838
 8004988:	400b      	ands	r3, r1
 800498a:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 800498e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	f607 0138 	addw	r1, r7, #2104	; 0x838
 800499a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800499e:	4684      	mov	ip, r0
 80049a0:	ea82 0c0c 	eor.w	ip, r2, ip
 80049a4:	f8c7 c3b0 	str.w	ip, [r7, #944]	; 0x3b0
 80049a8:	404b      	eors	r3, r1
 80049aa:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80049ae:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 80049b2:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 80049b6:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 80049ba:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	43d1      	mvns	r1, r2
 80049c4:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 80049c8:	43db      	mvns	r3, r3
 80049ca:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 80049ce:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f507 6103 	add.w	r1, r7, #2096	; 0x830
 80049da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049de:	4684      	mov	ip, r0
 80049e0:	ea0c 0c02 	and.w	ip, ip, r2
 80049e4:	f8c7 c828 	str.w	ip, [r7, #2088]	; 0x828
 80049e8:	400b      	ands	r3, r1
 80049ea:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 80049ee:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f607 0128 	addw	r1, r7, #2088	; 0x828
 80049fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049fe:	4684      	mov	ip, r0
 8004a00:	ea82 0c0c 	eor.w	ip, r2, ip
 8004a04:	f8c7 c3a8 	str.w	ip, [r7, #936]	; 0x3a8
 8004a08:	404b      	eors	r3, r1
 8004a0a:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8004a0e:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 8004a12:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 8004a16:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 8004a1a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	43d1      	mvns	r1, r2
 8004a24:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8004a2e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8004a3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a3e:	4684      	mov	ip, r0
 8004a40:	ea0c 0c02 	and.w	ip, ip, r2
 8004a44:	f8c7 c818 	str.w	ip, [r7, #2072]	; 0x818
 8004a48:	400b      	ands	r3, r1
 8004a4a:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8004a4e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8004a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a5e:	4684      	mov	ip, r0
 8004a60:	ea82 0c0c 	eor.w	ip, r2, ip
 8004a64:	f8c7 c3a0 	str.w	ip, [r7, #928]	; 0x3a0
 8004a68:	404b      	eors	r3, r1
 8004a6a:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8004a6e:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 8004a72:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8004a76:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 8004a7a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	43d1      	mvns	r1, r2
 8004a84:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8004a8e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8004a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a9e:	4684      	mov	ip, r0
 8004aa0:	ea0c 0c02 	and.w	ip, ip, r2
 8004aa4:	f8c7 c808 	str.w	ip, [r7, #2056]	; 0x808
 8004aa8:	400b      	ands	r3, r1
 8004aaa:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004aae:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8004aba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004abe:	4684      	mov	ip, r0
 8004ac0:	ea82 0c0c 	eor.w	ip, r2, ip
 8004ac4:	f8c7 c398 	str.w	ip, [r7, #920]	; 0x398
 8004ac8:	404b      	eors	r3, r1
 8004aca:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8004ace:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 8004ad2:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8004ad6:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 8004ada:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8004ade:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ae2:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	ea80 0c02 	eor.w	ip, r0, r2
 8004aee:	f8c7 c390 	str.w	ip, [r7, #912]	; 0x390
 8004af2:	404b      	eors	r3, r1
 8004af4:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8004af8:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 8004afc:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8004b00:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 8004b04:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 8004b08:	095a      	lsrs	r2, r3, #5
 8004b0a:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 8004b0e:	06db      	lsls	r3, r3, #27
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8004b16:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 8004b1a:	095a      	lsrs	r2, r3, #5
 8004b1c:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 8004b20:	06db      	lsls	r3, r3, #27
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8004b28:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8004b2c:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8004b30:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 8004b34:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8004b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b3c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	ea80 0c02 	eor.w	ip, r0, r2
 8004b48:	f8c7 c380 	str.w	ip, [r7, #896]	; 0x380
 8004b4c:	404b      	eors	r3, r1
 8004b4e:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8004b52:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8004b56:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8004b5a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 8004b5e:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8004b62:	011a      	lsls	r2, r3, #4
 8004b64:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8004b68:	0f1b      	lsrs	r3, r3, #28
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8004b70:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8004b74:	011a      	lsls	r2, r3, #4
 8004b76:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8004b7a:	0f1b      	lsrs	r3, r3, #28
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8004b82:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8004b86:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8004b8a:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 8004b8e:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8004b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b96:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	ea80 0c02 	eor.w	ip, r0, r2
 8004ba2:	f8c7 c370 	str.w	ip, [r7, #880]	; 0x370
 8004ba6:	404b      	eors	r3, r1
 8004ba8:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8004bac:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8004bb0:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8004bb4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 8004bb8:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8004bbc:	0d9a      	lsrs	r2, r3, #22
 8004bbe:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8004bc2:	029b      	lsls	r3, r3, #10
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004bca:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8004bce:	0d9a      	lsrs	r2, r3, #22
 8004bd0:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8004bd4:	029b      	lsls	r3, r3, #10
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8004bdc:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8004be0:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8004be4:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 8004be8:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8004bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bf0:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	ea80 0c02 	eor.w	ip, r0, r2
 8004bfc:	f8c7 c360 	str.w	ip, [r7, #864]	; 0x360
 8004c00:	404b      	eors	r3, r1
 8004c02:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8004c06:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8004c0a:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8004c0e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 8004c12:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8004c16:	0c5a      	lsrs	r2, r3, #17
 8004c18:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8004c1c:	03db      	lsls	r3, r3, #15
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8004c24:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8004c28:	0c5a      	lsrs	r2, r3, #17
 8004c2a:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8004c2e:	03db      	lsls	r3, r3, #15
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8004c36:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8004c3a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8004c3e:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 8004c42:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004c46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c4a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	ea80 0c02 	eor.w	ip, r0, r2
 8004c56:	f8c7 c350 	str.w	ip, [r7, #848]	; 0x350
 8004c5a:	404b      	eors	r3, r1
 8004c5c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004c60:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8004c64:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8004c68:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 8004c6c:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8004c70:	061a      	lsls	r2, r3, #24
 8004c72:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8004c7e:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8004c82:	061a      	lsls	r2, r3, #24
 8004c84:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8004c88:	0a1b      	lsrs	r3, r3, #8
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8004c90:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8004c94:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8004c98:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 8004c9c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	43d1      	mvns	r1, r2
 8004ca6:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 8004caa:	43db      	mvns	r3, r3
 8004cac:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8004cb0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 8004cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cc0:	4684      	mov	ip, r0
 8004cc2:	ea0c 0c02 	and.w	ip, ip, r2
 8004cc6:	f8c7 c7f8 	str.w	ip, [r7, #2040]	; 0x7f8
 8004cca:	400b      	ands	r3, r1
 8004ccc:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8004cd0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f507 61ff 	add.w	r1, r7, #2040	; 0x7f8
 8004cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ce0:	4684      	mov	ip, r0
 8004ce2:	ea82 0c0c 	eor.w	ip, r2, ip
 8004ce6:	f8c7 c340 	str.w	ip, [r7, #832]	; 0x340
 8004cea:	404b      	eors	r3, r1
 8004cec:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8004cf0:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8004cf4:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8004cf8:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 8004cfc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	43d1      	mvns	r1, r2
 8004d06:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8004d10:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8004d1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d20:	4684      	mov	ip, r0
 8004d22:	ea0c 0c02 	and.w	ip, ip, r2
 8004d26:	f8c7 c7e8 	str.w	ip, [r7, #2024]	; 0x7e8
 8004d2a:	400b      	ands	r3, r1
 8004d2c:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8004d30:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f507 61fd 	add.w	r1, r7, #2024	; 0x7e8
 8004d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d40:	4684      	mov	ip, r0
 8004d42:	ea82 0c0c 	eor.w	ip, r2, ip
 8004d46:	f8c7 c338 	str.w	ip, [r7, #824]	; 0x338
 8004d4a:	404b      	eors	r3, r1
 8004d4c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8004d50:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8004d54:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8004d58:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 8004d5c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	43d1      	mvns	r1, r2
 8004d66:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 8004d70:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f507 61fc 	add.w	r1, r7, #2016	; 0x7e0
 8004d7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d80:	4684      	mov	ip, r0
 8004d82:	ea0c 0c02 	and.w	ip, ip, r2
 8004d86:	f8c7 c7d8 	str.w	ip, [r7, #2008]	; 0x7d8
 8004d8a:	400b      	ands	r3, r1
 8004d8c:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8004d90:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8004d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004da0:	4684      	mov	ip, r0
 8004da2:	ea82 0c0c 	eor.w	ip, r2, ip
 8004da6:	f8c7 c330 	str.w	ip, [r7, #816]	; 0x330
 8004daa:	404b      	eors	r3, r1
 8004dac:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8004db0:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8004db4:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8004db8:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 8004dbc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	43d1      	mvns	r1, r2
 8004dc6:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8004dd0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f507 61fa 	add.w	r1, r7, #2000	; 0x7d0
 8004ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004de0:	4684      	mov	ip, r0
 8004de2:	ea0c 0c02 	and.w	ip, ip, r2
 8004de6:	f8c7 c7c8 	str.w	ip, [r7, #1992]	; 0x7c8
 8004dea:	400b      	ands	r3, r1
 8004dec:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 8004df0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 8004dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e00:	4684      	mov	ip, r0
 8004e02:	ea82 0c0c 	eor.w	ip, r2, ip
 8004e06:	f8c7 c328 	str.w	ip, [r7, #808]	; 0x328
 8004e0a:	404b      	eors	r3, r1
 8004e0c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8004e10:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8004e14:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8004e18:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 8004e1c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	43d1      	mvns	r1, r2
 8004e26:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 8004e30:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f507 61f8 	add.w	r1, r7, #1984	; 0x7c0
 8004e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e40:	4684      	mov	ip, r0
 8004e42:	ea0c 0c02 	and.w	ip, ip, r2
 8004e46:	f8c7 c7b8 	str.w	ip, [r7, #1976]	; 0x7b8
 8004e4a:	400b      	ands	r3, r1
 8004e4c:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 8004e50:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8004e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e60:	4684      	mov	ip, r0
 8004e62:	ea82 0c0c 	eor.w	ip, r2, ip
 8004e66:	f8c7 c320 	str.w	ip, [r7, #800]	; 0x320
 8004e6a:	404b      	eors	r3, r1
 8004e6c:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8004e70:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8004e74:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8004e78:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 8004e7c:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8004e80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e84:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	ea80 0c02 	eor.w	ip, r0, r2
 8004e90:	f8c7 c318 	str.w	ip, [r7, #792]	; 0x318
 8004e94:	404b      	eors	r3, r1
 8004e96:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8004e9a:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8004e9e:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8004ea2:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 8004ea6:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8004eaa:	079a      	lsls	r2, r3, #30
 8004eac:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8004eb0:	089b      	lsrs	r3, r3, #2
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8004eb8:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8004ebc:	079a      	lsls	r2, r3, #30
 8004ebe:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8004eca:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8004ece:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8004ed2:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 8004ed6:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8004eda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ede:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	ea80 0c02 	eor.w	ip, r0, r2
 8004eea:	f8c7 c308 	str.w	ip, [r7, #776]	; 0x308
 8004eee:	404b      	eors	r3, r1
 8004ef0:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8004ef4:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8004ef8:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8004efc:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 8004f00:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8004f04:	05da      	lsls	r2, r3, #23
 8004f06:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8004f0a:	0a5b      	lsrs	r3, r3, #9
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8004f12:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8004f16:	05da      	lsls	r2, r3, #23
 8004f18:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8004f1c:	0a5b      	lsrs	r3, r3, #9
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8004f24:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8004f28:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8004f2c:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 8004f30:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f38:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	ea80 0c02 	eor.w	ip, r0, r2
 8004f44:	f8c7 c2f8 	str.w	ip, [r7, #760]	; 0x2f8
 8004f48:	404b      	eors	r3, r1
 8004f4a:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8004f4e:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8004f52:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8004f56:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 8004f5a:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8004f5e:	01da      	lsls	r2, r3, #7
 8004f60:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8004f64:	0e5b      	lsrs	r3, r3, #25
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8004f6c:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8004f70:	01da      	lsls	r2, r3, #7
 8004f72:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8004f76:	0e5b      	lsrs	r3, r3, #25
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8004f7e:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8004f82:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8004f86:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 8004f8a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8004f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f92:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8004f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9a:	ea80 0c02 	eor.w	ip, r0, r2
 8004f9e:	f8c7 c2e8 	str.w	ip, [r7, #744]	; 0x2e8
 8004fa2:	404b      	eors	r3, r1
 8004fa4:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8004fa8:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8004fac:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8004fb0:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 8004fb4:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8004fb8:	025a      	lsls	r2, r3, #9
 8004fba:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8004fbe:	0ddb      	lsrs	r3, r3, #23
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8004fc6:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8004fca:	025a      	lsls	r2, r3, #9
 8004fcc:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8004fd0:	0ddb      	lsrs	r3, r3, #23
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004fd8:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8004fdc:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8004fe0:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 8004fe4:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8004fe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fec:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	ea80 0c02 	eor.w	ip, r0, r2
 8004ff8:	f8c7 c2d8 	str.w	ip, [r7, #728]	; 0x2d8
 8004ffc:	404b      	eors	r3, r1
 8004ffe:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8005002:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8005006:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800500a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 800500e:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8005012:	0f9a      	lsrs	r2, r3, #30
 8005014:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8005020:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8005024:	0f9a      	lsrs	r2, r3, #30
 8005026:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8005032:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005036:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800503a:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 800503e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	43d1      	mvns	r1, r2
 8005048:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 800504c:	43db      	mvns	r3, r3
 800504e:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8005052:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 800505e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005062:	4684      	mov	ip, r0
 8005064:	ea0c 0c02 	and.w	ip, ip, r2
 8005068:	f8c7 c7a8 	str.w	ip, [r7, #1960]	; 0x7a8
 800506c:	400b      	ands	r3, r1
 800506e:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 8005072:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 800507e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005082:	4684      	mov	ip, r0
 8005084:	ea82 0c0c 	eor.w	ip, r2, ip
 8005088:	f8c7 c2c8 	str.w	ip, [r7, #712]	; 0x2c8
 800508c:	404b      	eors	r3, r1
 800508e:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8005092:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8005096:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 800509a:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 800509e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	43d1      	mvns	r1, r2
 80050a8:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 80050ac:	43db      	mvns	r3, r3
 80050ae:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 80050b2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 80050be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050c2:	4684      	mov	ip, r0
 80050c4:	ea0c 0c02 	and.w	ip, ip, r2
 80050c8:	f8c7 c798 	str.w	ip, [r7, #1944]	; 0x798
 80050cc:	400b      	ands	r3, r1
 80050ce:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 80050d2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 80050de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050e2:	4684      	mov	ip, r0
 80050e4:	ea82 0c0c 	eor.w	ip, r2, ip
 80050e8:	f8c7 c2c0 	str.w	ip, [r7, #704]	; 0x2c0
 80050ec:	404b      	eors	r3, r1
 80050ee:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80050f2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80050f6:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 80050fa:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 80050fe:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	43d1      	mvns	r1, r2
 8005108:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 800510c:	43db      	mvns	r3, r3
 800510e:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 8005112:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 800511e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005122:	4684      	mov	ip, r0
 8005124:	ea0c 0c02 	and.w	ip, ip, r2
 8005128:	f8c7 c788 	str.w	ip, [r7, #1928]	; 0x788
 800512c:	400b      	ands	r3, r1
 800512e:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 8005132:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 800513e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005142:	4684      	mov	ip, r0
 8005144:	ea82 0c0c 	eor.w	ip, r2, ip
 8005148:	f8c7 c2b8 	str.w	ip, [r7, #696]	; 0x2b8
 800514c:	404b      	eors	r3, r1
 800514e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8005152:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8005156:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 800515a:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 800515e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	43d1      	mvns	r1, r2
 8005168:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 800516c:	43db      	mvns	r3, r3
 800516e:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 8005172:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517a:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 800517e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005182:	4684      	mov	ip, r0
 8005184:	ea0c 0c02 	and.w	ip, ip, r2
 8005188:	f8c7 c778 	str.w	ip, [r7, #1912]	; 0x778
 800518c:	400b      	ands	r3, r1
 800518e:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 8005192:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 800519e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051a2:	4684      	mov	ip, r0
 80051a4:	ea82 0c0c 	eor.w	ip, r2, ip
 80051a8:	f8c7 c2b0 	str.w	ip, [r7, #688]	; 0x2b0
 80051ac:	404b      	eors	r3, r1
 80051ae:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80051b2:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 80051b6:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 80051ba:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 80051be:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	43d1      	mvns	r1, r2
 80051c8:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 80051cc:	43db      	mvns	r3, r3
 80051ce:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 80051d2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 80051de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051e2:	4684      	mov	ip, r0
 80051e4:	ea0c 0c02 	and.w	ip, ip, r2
 80051e8:	f8c7 c768 	str.w	ip, [r7, #1896]	; 0x768
 80051ec:	400b      	ands	r3, r1
 80051ee:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 80051f2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 80051fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005202:	4684      	mov	ip, r0
 8005204:	ea82 0c0c 	eor.w	ip, r2, ip
 8005208:	f8c7 c2a8 	str.w	ip, [r7, #680]	; 0x2a8
 800520c:	404b      	eors	r3, r1
 800520e:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8005212:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8005216:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 800521a:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 800521e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005226:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	ea80 0c02 	eor.w	ip, r0, r2
 8005232:	f8c7 c760 	str.w	ip, [r7, #1888]	; 0x760
 8005236:	404b      	eors	r3, r1
 8005238:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 800523c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 8005248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800524c:	4684      	mov	ip, r0
 800524e:	ea8c 0c02 	eor.w	ip, ip, r2
 8005252:	f8c7 c758 	str.w	ip, [r7, #1880]	; 0x758
 8005256:	404b      	eors	r3, r1
 8005258:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 800525c:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 8005268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800526c:	4684      	mov	ip, r0
 800526e:	ea8c 0c02 	eor.w	ip, ip, r2
 8005272:	f8c7 c750 	str.w	ip, [r7, #1872]	; 0x750
 8005276:	404b      	eors	r3, r1
 8005278:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 800527c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 8005288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800528c:	4684      	mov	ip, r0
 800528e:	ea82 0c0c 	eor.w	ip, r2, ip
 8005292:	f8c7 c2a0 	str.w	ip, [r7, #672]	; 0x2a0
 8005296:	404b      	eors	r3, r1
 8005298:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800529c:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80052a0:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80052a4:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 80052a8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 80052ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052b0:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	ea80 0c02 	eor.w	ip, r0, r2
 80052bc:	f8c7 c748 	str.w	ip, [r7, #1864]	; 0x748
 80052c0:	404b      	eors	r3, r1
 80052c2:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 80052c6:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 80052d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d6:	4684      	mov	ip, r0
 80052d8:	ea8c 0c02 	eor.w	ip, ip, r2
 80052dc:	f8c7 c740 	str.w	ip, [r7, #1856]	; 0x740
 80052e0:	404b      	eors	r3, r1
 80052e2:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 80052e6:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 80052f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052f6:	4684      	mov	ip, r0
 80052f8:	ea8c 0c02 	eor.w	ip, ip, r2
 80052fc:	f8c7 c738 	str.w	ip, [r7, #1848]	; 0x738
 8005300:	404b      	eors	r3, r1
 8005302:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 8005306:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 8005312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005316:	4684      	mov	ip, r0
 8005318:	ea82 0c0c 	eor.w	ip, r2, ip
 800531c:	f8c7 c298 	str.w	ip, [r7, #664]	; 0x298
 8005320:	404b      	eors	r3, r1
 8005322:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8005326:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800532a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800532e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8005332:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8005336:	e9d3 0100 	ldrd	r0, r1, [r3]
 800533a:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 800533e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005342:	ea80 0c02 	eor.w	ip, r0, r2
 8005346:	f8c7 c730 	str.w	ip, [r7, #1840]	; 0x730
 800534a:	404b      	eors	r3, r1
 800534c:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 8005350:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 800535c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005360:	4684      	mov	ip, r0
 8005362:	ea8c 0c02 	eor.w	ip, ip, r2
 8005366:	f8c7 c728 	str.w	ip, [r7, #1832]	; 0x728
 800536a:	404b      	eors	r3, r1
 800536c:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 8005370:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 800537c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005380:	4684      	mov	ip, r0
 8005382:	ea8c 0c02 	eor.w	ip, ip, r2
 8005386:	f8c7 c720 	str.w	ip, [r7, #1824]	; 0x720
 800538a:	404b      	eors	r3, r1
 800538c:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8005390:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 800539c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053a0:	4684      	mov	ip, r0
 80053a2:	ea82 0c0c 	eor.w	ip, r2, ip
 80053a6:	f8c7 c290 	str.w	ip, [r7, #656]	; 0x290
 80053aa:	404b      	eors	r3, r1
 80053ac:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80053b0:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 80053b4:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80053b8:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 80053bc:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80053c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053c4:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	ea80 0c02 	eor.w	ip, r0, r2
 80053d0:	f8c7 c718 	str.w	ip, [r7, #1816]	; 0x718
 80053d4:	404b      	eors	r3, r1
 80053d6:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 80053da:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 80053e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053ea:	4684      	mov	ip, r0
 80053ec:	ea8c 0c02 	eor.w	ip, ip, r2
 80053f0:	f8c7 c710 	str.w	ip, [r7, #1808]	; 0x710
 80053f4:	404b      	eors	r3, r1
 80053f6:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80053fa:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 8005406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800540a:	4684      	mov	ip, r0
 800540c:	ea8c 0c02 	eor.w	ip, ip, r2
 8005410:	f8c7 c708 	str.w	ip, [r7, #1800]	; 0x708
 8005414:	404b      	eors	r3, r1
 8005416:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 800541a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8005426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800542a:	4684      	mov	ip, r0
 800542c:	ea82 0c0c 	eor.w	ip, r2, ip
 8005430:	f8c7 c288 	str.w	ip, [r7, #648]	; 0x288
 8005434:	404b      	eors	r3, r1
 8005436:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800543a:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800543e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8005442:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8005446:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800544a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800544e:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	ea80 0c02 	eor.w	ip, r0, r2
 800545a:	f8c7 c700 	str.w	ip, [r7, #1792]	; 0x700
 800545e:	404b      	eors	r3, r1
 8005460:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8005464:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 8005470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005474:	4684      	mov	ip, r0
 8005476:	ea8c 0c02 	eor.w	ip, ip, r2
 800547a:	f8c7 c6f8 	str.w	ip, [r7, #1784]	; 0x6f8
 800547e:	404b      	eors	r3, r1
 8005480:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 8005484:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 8005490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005494:	4684      	mov	ip, r0
 8005496:	ea8c 0c02 	eor.w	ip, ip, r2
 800549a:	f8c7 c6f0 	str.w	ip, [r7, #1776]	; 0x6f0
 800549e:	404b      	eors	r3, r1
 80054a0:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 80054a4:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 80054b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054b4:	4684      	mov	ip, r0
 80054b6:	ea82 0c0c 	eor.w	ip, r2, ip
 80054ba:	f8c7 c280 	str.w	ip, [r7, #640]	; 0x280
 80054be:	404b      	eors	r3, r1
 80054c0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80054c4:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80054c8:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80054cc:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 80054d0:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 80054d4:	0fda      	lsrs	r2, r3, #31
 80054d6:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 80054e2:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 80054e6:	0fda      	lsrs	r2, r3, #31
 80054e8:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 80054f4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 8005500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005504:	4684      	mov	ip, r0
 8005506:	ea82 0c0c 	eor.w	ip, r2, ip
 800550a:	f8c7 c278 	str.w	ip, [r7, #632]	; 0x278
 800550e:	404b      	eors	r3, r1
 8005510:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8005514:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8005518:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 800551c:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8005520:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8005524:	0fda      	lsrs	r2, r3, #31
 8005526:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 8005532:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8005536:	0fda      	lsrs	r2, r3, #31
 8005538:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8005544:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8005550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005554:	4684      	mov	ip, r0
 8005556:	ea82 0c0c 	eor.w	ip, r2, ip
 800555a:	f8c7 c270 	str.w	ip, [r7, #624]	; 0x270
 800555e:	404b      	eors	r3, r1
 8005560:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8005564:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8005568:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 800556c:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8005570:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8005574:	0fda      	lsrs	r2, r3, #31
 8005576:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 8005582:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8005586:	0fda      	lsrs	r2, r3, #31
 8005588:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 8005594:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 80055a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055a4:	4684      	mov	ip, r0
 80055a6:	ea82 0c0c 	eor.w	ip, r2, ip
 80055aa:	f8c7 c268 	str.w	ip, [r7, #616]	; 0x268
 80055ae:	404b      	eors	r3, r1
 80055b0:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80055b4:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 80055b8:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 80055bc:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 80055c0:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 80055c4:	0fda      	lsrs	r2, r3, #31
 80055c6:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 80055d2:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 80055d6:	0fda      	lsrs	r2, r3, #31
 80055d8:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 80055e4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 80055f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055f4:	4684      	mov	ip, r0
 80055f6:	ea82 0c0c 	eor.w	ip, r2, ip
 80055fa:	f8c7 c260 	str.w	ip, [r7, #608]	; 0x260
 80055fe:	404b      	eors	r3, r1
 8005600:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8005604:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8005608:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 800560c:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8005610:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8005614:	0fda      	lsrs	r2, r3, #31
 8005616:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 8005622:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8005626:	0fda      	lsrs	r2, r3, #31
 8005628:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 8005634:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 8005640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005644:	4684      	mov	ip, r0
 8005646:	ea82 0c0c 	eor.w	ip, r2, ip
 800564a:	f8c7 c258 	str.w	ip, [r7, #600]	; 0x258
 800564e:	404b      	eors	r3, r1
 8005650:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8005654:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8005658:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 800565c:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 8005660:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005664:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005668:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	ea80 0c02 	eor.w	ip, r0, r2
 8005674:	f8c7 c250 	str.w	ip, [r7, #592]	; 0x250
 8005678:	404b      	eors	r3, r1
 800567a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800567e:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8005682:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 8005686:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 800568a:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8005696:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 800569a:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 800569e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056a2:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	ea80 0c02 	eor.w	ip, r0, r2
 80056ae:	f8c7 c248 	str.w	ip, [r7, #584]	; 0x248
 80056b2:	404b      	eors	r3, r1
 80056b4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80056b8:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80056bc:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 80056c0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 80056c4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80056c8:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 80056cc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80056d0:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 80056d4:	6803      	ldr	r3, [r0, #0]
 80056d6:	031a      	lsls	r2, r3, #12
 80056d8:	680b      	ldr	r3, [r1, #0]
 80056da:	0d1b      	lsrs	r3, r3, #20
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80056e2:	680b      	ldr	r3, [r1, #0]
 80056e4:	031a      	lsls	r2, r3, #12
 80056e6:	6803      	ldr	r3, [r0, #0]
 80056e8:	0d1b      	lsrs	r3, r3, #20
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80056f0:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80056f4:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80056f8:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 80056fc:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8005700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005704:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8005708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570c:	ea80 0c02 	eor.w	ip, r0, r2
 8005710:	f8c7 c238 	str.w	ip, [r7, #568]	; 0x238
 8005714:	404b      	eors	r3, r1
 8005716:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800571a:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 800571e:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 8005722:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 8005726:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800572a:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 800572e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005732:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 8005736:	6803      	ldr	r3, [r0, #0]
 8005738:	02da      	lsls	r2, r3, #11
 800573a:	680b      	ldr	r3, [r1, #0]
 800573c:	0d5b      	lsrs	r3, r3, #21
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8005744:	680b      	ldr	r3, [r1, #0]
 8005746:	02da      	lsls	r2, r3, #11
 8005748:	6803      	ldr	r3, [r0, #0]
 800574a:	0d5b      	lsrs	r3, r3, #21
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8005752:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8005756:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800575a:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 800575e:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8005762:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005766:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	ea80 0c02 	eor.w	ip, r0, r2
 8005772:	f8c7 c228 	str.w	ip, [r7, #552]	; 0x228
 8005776:	404b      	eors	r3, r1
 8005778:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800577c:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8005780:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8005784:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 8005788:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800578c:	f5a3 70dc 	sub.w	r0, r3, #440	; 0x1b8
 8005790:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005794:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 8005798:	6803      	ldr	r3, [r0, #0]
 800579a:	0ada      	lsrs	r2, r3, #11
 800579c:	680b      	ldr	r3, [r1, #0]
 800579e:	055b      	lsls	r3, r3, #21
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80057a6:	680b      	ldr	r3, [r1, #0]
 80057a8:	0ada      	lsrs	r2, r3, #11
 80057aa:	6803      	ldr	r3, [r0, #0]
 80057ac:	055b      	lsls	r3, r3, #21
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80057b4:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 80057b8:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80057bc:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 80057c0:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80057c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057c8:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	ea80 0c02 	eor.w	ip, r0, r2
 80057d4:	f8c7 c218 	str.w	ip, [r7, #536]	; 0x218
 80057d8:	404b      	eors	r3, r1
 80057da:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80057de:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 80057e2:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 80057e6:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 80057ea:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80057ee:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 80057f2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80057f6:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 80057fa:	6803      	ldr	r3, [r0, #0]
 80057fc:	0c9a      	lsrs	r2, r3, #18
 80057fe:	680b      	ldr	r3, [r1, #0]
 8005800:	039b      	lsls	r3, r3, #14
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8005808:	680b      	ldr	r3, [r1, #0]
 800580a:	0c9a      	lsrs	r2, r3, #18
 800580c:	6803      	ldr	r3, [r0, #0]
 800580e:	039b      	lsls	r3, r3, #14
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005816:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 800581a:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800581e:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 8005822:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	43d1      	mvns	r1, r2
 800582c:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 8005830:	43db      	mvns	r3, r3
 8005832:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 8005836:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 8005842:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005846:	4684      	mov	ip, r0
 8005848:	ea0c 0c02 	and.w	ip, ip, r2
 800584c:	f8c7 c6b8 	str.w	ip, [r7, #1720]	; 0x6b8
 8005850:	400b      	ands	r3, r1
 8005852:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 8005856:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8005862:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005866:	4684      	mov	ip, r0
 8005868:	ea82 0c0c 	eor.w	ip, r2, ip
 800586c:	f8c7 c208 	str.w	ip, [r7, #520]	; 0x208
 8005870:	404b      	eors	r3, r1
 8005872:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005876:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 800587a:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800587e:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8005882:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8005886:	3301      	adds	r3, #1
 8005888:	4ac1      	ldr	r2, [pc, #772]	; (8005b90 <KeccakF1600_StatePermute+0x22e0>)
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005892:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	ea82 0c00 	eor.w	ip, r2, r0
 800589e:	f8c7 c200 	str.w	ip, [r7, #512]	; 0x200
 80058a2:	404b      	eors	r3, r1
 80058a4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80058a8:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 80058ac:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80058b0:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 80058b4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	43d1      	mvns	r1, r2
 80058be:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 80058c2:	43db      	mvns	r3, r3
 80058c4:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 80058c8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80058d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058d8:	4684      	mov	ip, r0
 80058da:	ea0c 0c02 	and.w	ip, ip, r2
 80058de:	f8c7 c6a8 	str.w	ip, [r7, #1704]	; 0x6a8
 80058e2:	400b      	ands	r3, r1
 80058e4:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 80058e8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 80058f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058f8:	4684      	mov	ip, r0
 80058fa:	ea82 0c0c 	eor.w	ip, r2, ip
 80058fe:	f8c7 c1f8 	str.w	ip, [r7, #504]	; 0x1f8
 8005902:	404b      	eors	r3, r1
 8005904:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8005908:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 800590c:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8005910:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 8005914:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	43d1      	mvns	r1, r2
 800591e:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 8005922:	43db      	mvns	r3, r3
 8005924:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 8005928:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8005934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005938:	4684      	mov	ip, r0
 800593a:	ea0c 0c02 	and.w	ip, ip, r2
 800593e:	f8c7 c698 	str.w	ip, [r7, #1688]	; 0x698
 8005942:	400b      	ands	r3, r1
 8005944:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 8005948:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8005954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005958:	4684      	mov	ip, r0
 800595a:	ea82 0c0c 	eor.w	ip, r2, ip
 800595e:	f8c7 c1f0 	str.w	ip, [r7, #496]	; 0x1f0
 8005962:	404b      	eors	r3, r1
 8005964:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8005968:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800596c:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8005970:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 8005974:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	43d1      	mvns	r1, r2
 800597e:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 8005982:	43db      	mvns	r3, r3
 8005984:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 8005988:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 8005994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005998:	4684      	mov	ip, r0
 800599a:	ea0c 0c02 	and.w	ip, ip, r2
 800599e:	f8c7 c688 	str.w	ip, [r7, #1672]	; 0x688
 80059a2:	400b      	ands	r3, r1
 80059a4:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 80059a8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 80059b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059b8:	4684      	mov	ip, r0
 80059ba:	ea82 0c0c 	eor.w	ip, r2, ip
 80059be:	f8c7 c1e8 	str.w	ip, [r7, #488]	; 0x1e8
 80059c2:	404b      	eors	r3, r1
 80059c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80059c8:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80059cc:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 80059d0:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 80059d4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	43d1      	mvns	r1, r2
 80059de:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 80059e2:	43db      	mvns	r3, r3
 80059e4:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 80059e8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 80059f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059f8:	4684      	mov	ip, r0
 80059fa:	ea0c 0c02 	and.w	ip, ip, r2
 80059fe:	f8c7 c678 	str.w	ip, [r7, #1656]	; 0x678
 8005a02:	400b      	ands	r3, r1
 8005a04:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8005a08:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8005a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a18:	4684      	mov	ip, r0
 8005a1a:	ea82 0c0c 	eor.w	ip, r2, ip
 8005a1e:	f8c7 c1e0 	str.w	ip, [r7, #480]	; 0x1e0
 8005a22:	404b      	eors	r3, r1
 8005a24:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005a28:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8005a2c:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8005a30:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 8005a34:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8005a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a3c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	ea80 0c02 	eor.w	ip, r0, r2
 8005a48:	f8c7 c1d8 	str.w	ip, [r7, #472]	; 0x1d8
 8005a4c:	404b      	eors	r3, r1
 8005a4e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005a52:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8005a56:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8005a5a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 8005a5e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005a62:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 8005a66:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005a6a:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8005a6e:	6803      	ldr	r3, [r0, #0]
 8005a70:	091a      	lsrs	r2, r3, #4
 8005a72:	680b      	ldr	r3, [r1, #0]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8005a7c:	680b      	ldr	r3, [r1, #0]
 8005a7e:	091a      	lsrs	r2, r3, #4
 8005a80:	6803      	ldr	r3, [r0, #0]
 8005a82:	071b      	lsls	r3, r3, #28
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005a8a:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8005a8e:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8005a92:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 8005a96:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8005a9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a9e:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	ea80 0c02 	eor.w	ip, r0, r2
 8005aaa:	f8c7 c1c8 	str.w	ip, [r7, #456]	; 0x1c8
 8005aae:	404b      	eors	r3, r1
 8005ab0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8005ab4:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8005ab8:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8005abc:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 8005ac0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005ac4:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 8005ac8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005acc:	f5a3 71b6 	sub.w	r1, r3, #364	; 0x16c
 8005ad0:	6803      	ldr	r3, [r0, #0]
 8005ad2:	0b1a      	lsrs	r2, r3, #12
 8005ad4:	680b      	ldr	r3, [r1, #0]
 8005ad6:	051b      	lsls	r3, r3, #20
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005ade:	680b      	ldr	r3, [r1, #0]
 8005ae0:	0b1a      	lsrs	r2, r3, #12
 8005ae2:	6803      	ldr	r3, [r0, #0]
 8005ae4:	051b      	lsls	r3, r3, #20
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005aec:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8005af0:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8005af4:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8005af8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8005afc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b00:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	ea80 0c02 	eor.w	ip, r0, r2
 8005b0c:	f8c7 c1b8 	str.w	ip, [r7, #440]	; 0x1b8
 8005b10:	404b      	eors	r3, r1
 8005b12:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005b16:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8005b1a:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8005b1e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8005b22:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005b26:	f5a3 70bc 	sub.w	r0, r3, #376	; 0x178
 8005b2a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005b2e:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 8005b32:	6803      	ldr	r3, [r0, #0]
 8005b34:	0f5a      	lsrs	r2, r3, #29
 8005b36:	680b      	ldr	r3, [r1, #0]
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8005b40:	680b      	ldr	r3, [r1, #0]
 8005b42:	0f5a      	lsrs	r2, r3, #29
 8005b44:	6803      	ldr	r3, [r0, #0]
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005b4e:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8005b52:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8005b56:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8005b5a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8005b5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b62:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	ea80 0c02 	eor.w	ip, r0, r2
 8005b6e:	f8c7 c1a8 	str.w	ip, [r7, #424]	; 0x1a8
 8005b72:	404b      	eors	r3, r1
 8005b74:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8005b78:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8005b7c:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8005b80:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 8005b84:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005b88:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 8005b8c:	e002      	b.n	8005b94 <KeccakF1600_StatePermute+0x22e4>
 8005b8e:	bf00      	nop
 8005b90:	08009128 	.word	0x08009128
 8005b94:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005b98:	f5a3 71d4 	sub.w	r1, r3, #424	; 0x1a8
 8005b9c:	6803      	ldr	r3, [r0, #0]
 8005b9e:	035a      	lsls	r2, r3, #13
 8005ba0:	680b      	ldr	r3, [r1, #0]
 8005ba2:	0cdb      	lsrs	r3, r3, #19
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005baa:	680b      	ldr	r3, [r1, #0]
 8005bac:	035a      	lsls	r2, r3, #13
 8005bae:	6803      	ldr	r3, [r0, #0]
 8005bb0:	0cdb      	lsrs	r3, r3, #19
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005bb8:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8005bbc:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8005bc0:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8005bc4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8005bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bcc:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	ea80 0c02 	eor.w	ip, r0, r2
 8005bd8:	f8c7 c198 	str.w	ip, [r7, #408]	; 0x198
 8005bdc:	404b      	eors	r3, r1
 8005bde:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005be2:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8005be6:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8005bea:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8005bee:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005bf2:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8005bf6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005bfa:	f5a3 71ec 	sub.w	r1, r3, #472	; 0x1d8
 8005bfe:	6803      	ldr	r3, [r0, #0]
 8005c00:	075a      	lsls	r2, r3, #29
 8005c02:	680b      	ldr	r3, [r1, #0]
 8005c04:	08db      	lsrs	r3, r3, #3
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005c0c:	680b      	ldr	r3, [r1, #0]
 8005c0e:	075a      	lsls	r2, r3, #29
 8005c10:	6803      	ldr	r3, [r0, #0]
 8005c12:	08db      	lsrs	r3, r3, #3
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8005c1a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8005c1e:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8005c22:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 8005c26:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	43d1      	mvns	r1, r2
 8005c30:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 8005c34:	43db      	mvns	r3, r3
 8005c36:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8005c3a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8005c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c4a:	4684      	mov	ip, r0
 8005c4c:	ea0c 0c02 	and.w	ip, ip, r2
 8005c50:	f8c7 c668 	str.w	ip, [r7, #1640]	; 0x668
 8005c54:	400b      	ands	r3, r1
 8005c56:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 8005c5a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8005c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c6a:	4684      	mov	ip, r0
 8005c6c:	ea82 0c0c 	eor.w	ip, r2, ip
 8005c70:	f8c7 c188 	str.w	ip, [r7, #392]	; 0x188
 8005c74:	404b      	eors	r3, r1
 8005c76:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8005c7a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8005c7e:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8005c82:	e9c1 2300 	strd	r2, r3, [r1]
            Age =   BCe ^((~BCi)&  BCo );
 8005c86:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	43d1      	mvns	r1, r2
 8005c90:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 8005c94:	43db      	mvns	r3, r3
 8005c96:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8005c9a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8005ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005caa:	4684      	mov	ip, r0
 8005cac:	ea0c 0c02 	and.w	ip, ip, r2
 8005cb0:	f8c7 c658 	str.w	ip, [r7, #1624]	; 0x658
 8005cb4:	400b      	ands	r3, r1
 8005cb6:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8005cba:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8005cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cca:	4684      	mov	ip, r0
 8005ccc:	ea82 0c0c 	eor.w	ip, r2, ip
 8005cd0:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
 8005cd4:	404b      	eors	r3, r1
 8005cd6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005cda:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8005cde:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8005ce2:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8005ce6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	43d1      	mvns	r1, r2
 8005cf0:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8005cfa:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8005d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d0a:	4684      	mov	ip, r0
 8005d0c:	ea0c 0c02 	and.w	ip, ip, r2
 8005d10:	f8c7 c648 	str.w	ip, [r7, #1608]	; 0x648
 8005d14:	400b      	ands	r3, r1
 8005d16:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8005d1a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8005d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d2a:	4684      	mov	ip, r0
 8005d2c:	ea82 0c0c 	eor.w	ip, r2, ip
 8005d30:	f8c7 c178 	str.w	ip, [r7, #376]	; 0x178
 8005d34:	404b      	eors	r3, r1
 8005d36:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005d3a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8005d3e:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8005d42:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8005d46:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	43d1      	mvns	r1, r2
 8005d50:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 8005d54:	43db      	mvns	r3, r3
 8005d56:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8005d5a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8005d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d6a:	4684      	mov	ip, r0
 8005d6c:	ea0c 0c02 	and.w	ip, ip, r2
 8005d70:	f8c7 c638 	str.w	ip, [r7, #1592]	; 0x638
 8005d74:	400b      	ands	r3, r1
 8005d76:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8005d7a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 8005d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d8a:	4684      	mov	ip, r0
 8005d8c:	ea82 0c0c 	eor.w	ip, r2, ip
 8005d90:	f8c7 c170 	str.w	ip, [r7, #368]	; 0x170
 8005d94:	404b      	eors	r3, r1
 8005d96:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005d9a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8005d9e:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8005da2:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8005da6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	43d1      	mvns	r1, r2
 8005db0:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 8005db4:	43db      	mvns	r3, r3
 8005db6:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8005dba:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8005dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dca:	4684      	mov	ip, r0
 8005dcc:	ea0c 0c02 	and.w	ip, ip, r2
 8005dd0:	f8c7 c628 	str.w	ip, [r7, #1576]	; 0x628
 8005dd4:	400b      	ands	r3, r1
 8005dd6:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8005dda:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8005de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dea:	4684      	mov	ip, r0
 8005dec:	ea82 0c0c 	eor.w	ip, r2, ip
 8005df0:	f8c7 c168 	str.w	ip, [r7, #360]	; 0x168
 8005df4:	404b      	eors	r3, r1
 8005df6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005dfa:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005dfe:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8005e02:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8005e06:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8005e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e0e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	ea80 0c02 	eor.w	ip, r0, r2
 8005e1a:	f8c7 c160 	str.w	ip, [r7, #352]	; 0x160
 8005e1e:	404b      	eors	r3, r1
 8005e20:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005e24:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8005e28:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8005e2c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8005e30:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005e34:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8005e38:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005e3c:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8005e40:	6803      	ldr	r3, [r0, #0]
 8005e42:	0fda      	lsrs	r2, r3, #31
 8005e44:	680b      	ldr	r3, [r1, #0]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005e4e:	680b      	ldr	r3, [r1, #0]
 8005e50:	0fda      	lsrs	r2, r3, #31
 8005e52:	6803      	ldr	r3, [r0, #0]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005e5c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8005e60:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8005e64:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8005e68:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8005e6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e70:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	ea80 0c02 	eor.w	ip, r0, r2
 8005e7c:	f8c7 c150 	str.w	ip, [r7, #336]	; 0x150
 8005e80:	404b      	eors	r3, r1
 8005e82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005e86:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8005e8a:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8005e8e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8005e92:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005e96:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8005e9a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005e9e:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 8005ea2:	6803      	ldr	r3, [r0, #0]
 8005ea4:	0e9a      	lsrs	r2, r3, #26
 8005ea6:	680b      	ldr	r3, [r1, #0]
 8005ea8:	019b      	lsls	r3, r3, #6
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005eb0:	680b      	ldr	r3, [r1, #0]
 8005eb2:	0e9a      	lsrs	r2, r3, #26
 8005eb4:	6803      	ldr	r3, [r0, #0]
 8005eb6:	019b      	lsls	r3, r3, #6
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005ebe:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8005ec2:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8005ec6:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8005eca:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8005ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ed2:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	ea80 0c02 	eor.w	ip, r0, r2
 8005ede:	f8c7 c140 	str.w	ip, [r7, #320]	; 0x140
 8005ee2:	404b      	eors	r3, r1
 8005ee4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005ee8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8005eec:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8005ef0:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8005ef4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005ef8:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8005efc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005f00:	f5a3 71c6 	sub.w	r1, r3, #396	; 0x18c
 8005f04:	6803      	ldr	r3, [r0, #0]
 8005f06:	09da      	lsrs	r2, r3, #7
 8005f08:	680b      	ldr	r3, [r1, #0]
 8005f0a:	065b      	lsls	r3, r3, #25
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005f12:	680b      	ldr	r3, [r1, #0]
 8005f14:	09da      	lsrs	r2, r3, #7
 8005f16:	6803      	ldr	r3, [r0, #0]
 8005f18:	065b      	lsls	r3, r3, #25
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005f20:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005f24:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8005f28:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8005f2c:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8005f30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f34:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	ea80 0c02 	eor.w	ip, r0, r2
 8005f40:	f8c7 c130 	str.w	ip, [r7, #304]	; 0x130
 8005f44:	404b      	eors	r3, r1
 8005f46:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005f4a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005f4e:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8005f52:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 8005f56:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005f5a:	f5a3 70e0 	sub.w	r0, r3, #448	; 0x1c0
 8005f5e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005f62:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 8005f66:	6803      	ldr	r3, [r0, #0]
 8005f68:	0e1a      	lsrs	r2, r3, #24
 8005f6a:	680b      	ldr	r3, [r1, #0]
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005f74:	680b      	ldr	r3, [r1, #0]
 8005f76:	0e1a      	lsrs	r2, r3, #24
 8005f78:	6803      	ldr	r3, [r0, #0]
 8005f7a:	021b      	lsls	r3, r3, #8
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005f82:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8005f86:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8005f8a:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8005f8e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8005f92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f96:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	ea80 0c02 	eor.w	ip, r0, r2
 8005fa2:	f8c7 c120 	str.w	ip, [r7, #288]	; 0x120
 8005fa6:	404b      	eors	r3, r1
 8005fa8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005fac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8005fb0:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8005fb4:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 8005fb8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005fbc:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8005fc0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005fc4:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8005fc8:	6803      	ldr	r3, [r0, #0]
 8005fca:	0b9a      	lsrs	r2, r3, #14
 8005fcc:	680b      	ldr	r3, [r1, #0]
 8005fce:	049b      	lsls	r3, r3, #18
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005fd6:	680b      	ldr	r3, [r1, #0]
 8005fd8:	0b9a      	lsrs	r2, r3, #14
 8005fda:	6803      	ldr	r3, [r0, #0]
 8005fdc:	049b      	lsls	r3, r3, #18
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005fe4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8005fe8:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8005fec:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 8005ff0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	43d1      	mvns	r1, r2
 8005ffa:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 8005ffe:	43db      	mvns	r3, r3
 8006000:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 8006004:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8006010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006014:	4684      	mov	ip, r0
 8006016:	ea0c 0c02 	and.w	ip, ip, r2
 800601a:	f8c7 c618 	str.w	ip, [r7, #1560]	; 0x618
 800601e:	400b      	ands	r3, r1
 8006020:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8006024:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 8006030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006034:	4684      	mov	ip, r0
 8006036:	ea82 0c0c 	eor.w	ip, r2, ip
 800603a:	f8c7 c110 	str.w	ip, [r7, #272]	; 0x110
 800603e:	404b      	eors	r3, r1
 8006040:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006044:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8006048:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800604c:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 8006050:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	43d1      	mvns	r1, r2
 800605a:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 800605e:	43db      	mvns	r3, r3
 8006060:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8006064:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8006070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006074:	4684      	mov	ip, r0
 8006076:	ea0c 0c02 	and.w	ip, ip, r2
 800607a:	f8c7 c608 	str.w	ip, [r7, #1544]	; 0x608
 800607e:	400b      	ands	r3, r1
 8006080:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8006084:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 8006090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006094:	4684      	mov	ip, r0
 8006096:	ea82 0c0c 	eor.w	ip, r2, ip
 800609a:	f8c7 c108 	str.w	ip, [r7, #264]	; 0x108
 800609e:	404b      	eors	r3, r1
 80060a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060a4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80060a8:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 80060ac:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 80060b0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	43d1      	mvns	r1, r2
 80060ba:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 80060be:	43db      	mvns	r3, r3
 80060c0:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 80060c4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 80060d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060d4:	4684      	mov	ip, r0
 80060d6:	ea0c 0c02 	and.w	ip, ip, r2
 80060da:	f8c7 c5f8 	str.w	ip, [r7, #1528]	; 0x5f8
 80060de:	400b      	ands	r3, r1
 80060e0:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 80060e4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 80060f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060f4:	4684      	mov	ip, r0
 80060f6:	ea82 0c0c 	eor.w	ip, r2, ip
 80060fa:	f8c7 c100 	str.w	ip, [r7, #256]	; 0x100
 80060fe:	404b      	eors	r3, r1
 8006100:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006104:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8006108:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800610c:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 8006110:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	43d1      	mvns	r1, r2
 800611a:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 800611e:	43db      	mvns	r3, r3
 8006120:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8006124:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8006130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006134:	4684      	mov	ip, r0
 8006136:	ea0c 0c02 	and.w	ip, ip, r2
 800613a:	f8c7 c5e8 	str.w	ip, [r7, #1512]	; 0x5e8
 800613e:	400b      	ands	r3, r1
 8006140:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 8006144:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8006150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006154:	4684      	mov	ip, r0
 8006156:	ea82 0c0c 	eor.w	ip, r2, ip
 800615a:	f8c7 c0f8 	str.w	ip, [r7, #248]	; 0xf8
 800615e:	404b      	eors	r3, r1
 8006160:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006164:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8006168:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800616c:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 8006170:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	43d1      	mvns	r1, r2
 800617a:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 800617e:	43db      	mvns	r3, r3
 8006180:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 8006184:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 8006190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006194:	4684      	mov	ip, r0
 8006196:	ea0c 0c02 	and.w	ip, ip, r2
 800619a:	f8c7 c5d8 	str.w	ip, [r7, #1496]	; 0x5d8
 800619e:	400b      	ands	r3, r1
 80061a0:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 80061a4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 80061b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061b4:	4684      	mov	ip, r0
 80061b6:	ea82 0c0c 	eor.w	ip, r2, ip
 80061ba:	f8c7 c0f0 	str.w	ip, [r7, #240]	; 0xf0
 80061be:	404b      	eors	r3, r1
 80061c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061c4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80061c8:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 80061cc:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 80061d0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80061d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061d8:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	ea80 0c02 	eor.w	ip, r0, r2
 80061e4:	f8c7 c0e8 	str.w	ip, [r7, #232]	; 0xe8
 80061e8:	404b      	eors	r3, r1
 80061ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061ee:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80061f2:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 80061f6:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 80061fa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80061fe:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 8006202:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006206:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 800620a:	6803      	ldr	r3, [r0, #0]
 800620c:	095a      	lsrs	r2, r3, #5
 800620e:	680b      	ldr	r3, [r1, #0]
 8006210:	06db      	lsls	r3, r3, #27
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006218:	680b      	ldr	r3, [r1, #0]
 800621a:	095a      	lsrs	r2, r3, #5
 800621c:	6803      	ldr	r3, [r0, #0]
 800621e:	06db      	lsls	r3, r3, #27
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006226:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800622a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800622e:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 8006232:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8006236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800623a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	ea80 0c02 	eor.w	ip, r0, r2
 8006246:	f8c7 c0d8 	str.w	ip, [r7, #216]	; 0xd8
 800624a:	404b      	eors	r3, r1
 800624c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006250:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006254:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8006258:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 800625c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006260:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8006264:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006268:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 800626c:	6803      	ldr	r3, [r0, #0]
 800626e:	011a      	lsls	r2, r3, #4
 8006270:	680b      	ldr	r3, [r1, #0]
 8006272:	0f1b      	lsrs	r3, r3, #28
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800627a:	680b      	ldr	r3, [r1, #0]
 800627c:	011a      	lsls	r2, r3, #4
 800627e:	6803      	ldr	r3, [r0, #0]
 8006280:	0f1b      	lsrs	r3, r3, #28
 8006282:	4313      	orrs	r3, r2
 8006284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006288:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800628c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8006290:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 8006294:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8006298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800629c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	ea80 0c02 	eor.w	ip, r0, r2
 80062a8:	f8c7 c0c8 	str.w	ip, [r7, #200]	; 0xc8
 80062ac:	404b      	eors	r3, r1
 80062ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062b2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80062b6:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 80062ba:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 80062be:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80062c2:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 80062c6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80062ca:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 80062ce:	6803      	ldr	r3, [r0, #0]
 80062d0:	0d9a      	lsrs	r2, r3, #22
 80062d2:	680b      	ldr	r3, [r1, #0]
 80062d4:	029b      	lsls	r3, r3, #10
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062dc:	680b      	ldr	r3, [r1, #0]
 80062de:	0d9a      	lsrs	r2, r3, #22
 80062e0:	6803      	ldr	r3, [r0, #0]
 80062e2:	029b      	lsls	r3, r3, #10
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ea:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80062ee:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80062f2:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 80062f6:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 80062fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062fe:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	ea80 0c02 	eor.w	ip, r0, r2
 800630a:	f8c7 c0b8 	str.w	ip, [r7, #184]	; 0xb8
 800630e:	404b      	eors	r3, r1
 8006310:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006314:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006318:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 800631c:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 8006320:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006324:	f5a3 70d8 	sub.w	r0, r3, #432	; 0x1b0
 8006328:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800632c:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8006330:	6803      	ldr	r3, [r0, #0]
 8006332:	0c5a      	lsrs	r2, r3, #17
 8006334:	680b      	ldr	r3, [r1, #0]
 8006336:	03db      	lsls	r3, r3, #15
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800633e:	680b      	ldr	r3, [r1, #0]
 8006340:	0c5a      	lsrs	r2, r3, #17
 8006342:	6803      	ldr	r3, [r0, #0]
 8006344:	03db      	lsls	r3, r3, #15
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800634c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006350:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8006354:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 8006358:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800635c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006360:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	ea80 0c02 	eor.w	ip, r0, r2
 800636c:	f8c7 c0a8 	str.w	ip, [r7, #168]	; 0xa8
 8006370:	404b      	eors	r3, r1
 8006372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006376:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800637a:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800637e:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 8006382:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006386:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 800638a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800638e:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 8006392:	6803      	ldr	r3, [r0, #0]
 8006394:	061a      	lsls	r2, r3, #24
 8006396:	680b      	ldr	r3, [r1, #0]
 8006398:	0a1b      	lsrs	r3, r3, #8
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063a0:	680b      	ldr	r3, [r1, #0]
 80063a2:	061a      	lsls	r2, r3, #24
 80063a4:	6803      	ldr	r3, [r0, #0]
 80063a6:	0a1b      	lsrs	r3, r3, #8
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063ae:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80063b2:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80063b6:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 80063ba:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	43d1      	mvns	r1, r2
 80063c4:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 80063c8:	43db      	mvns	r3, r3
 80063ca:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80063ce:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 80063da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063de:	4684      	mov	ip, r0
 80063e0:	ea0c 0c02 	and.w	ip, ip, r2
 80063e4:	f8c7 c5c8 	str.w	ip, [r7, #1480]	; 0x5c8
 80063e8:	400b      	ands	r3, r1
 80063ea:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 80063ee:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 80063fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063fe:	4684      	mov	ip, r0
 8006400:	ea82 0c0c 	eor.w	ip, r2, ip
 8006404:	f8c7 c098 	str.w	ip, [r7, #152]	; 0x98
 8006408:	404b      	eors	r3, r1
 800640a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800640e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006412:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8006416:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 800641a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	43d1      	mvns	r1, r2
 8006424:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 8006428:	43db      	mvns	r3, r3
 800642a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800642e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 800643a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800643e:	4684      	mov	ip, r0
 8006440:	ea0c 0c02 	and.w	ip, ip, r2
 8006444:	f8c7 c5b8 	str.w	ip, [r7, #1464]	; 0x5b8
 8006448:	400b      	ands	r3, r1
 800644a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800644e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 800645a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800645e:	4684      	mov	ip, r0
 8006460:	ea82 0c0c 	eor.w	ip, r2, ip
 8006464:	f8c7 c090 	str.w	ip, [r7, #144]	; 0x90
 8006468:	404b      	eors	r3, r1
 800646a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800646e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006472:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8006476:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 800647a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	43d1      	mvns	r1, r2
 8006484:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8006488:	43db      	mvns	r3, r3
 800648a:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800648e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 800649a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800649e:	4684      	mov	ip, r0
 80064a0:	ea0c 0c02 	and.w	ip, ip, r2
 80064a4:	f8c7 c5a8 	str.w	ip, [r7, #1448]	; 0x5a8
 80064a8:	400b      	ands	r3, r1
 80064aa:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80064ae:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 80064ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064be:	4684      	mov	ip, r0
 80064c0:	ea82 0c0c 	eor.w	ip, r2, ip
 80064c4:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
 80064c8:	404b      	eors	r3, r1
 80064ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064ce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80064d2:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 80064d6:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 80064da:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	43d1      	mvns	r1, r2
 80064e4:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 80064e8:	43db      	mvns	r3, r3
 80064ea:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80064ee:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 80064fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064fe:	4684      	mov	ip, r0
 8006500:	ea0c 0c02 	and.w	ip, ip, r2
 8006504:	f8c7 c598 	str.w	ip, [r7, #1432]	; 0x598
 8006508:	400b      	ands	r3, r1
 800650a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800650e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 800651a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800651e:	4684      	mov	ip, r0
 8006520:	ea82 0c0c 	eor.w	ip, r2, ip
 8006524:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8006528:	404b      	eors	r3, r1
 800652a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800652e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006532:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8006536:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 800653a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	43d1      	mvns	r1, r2
 8006544:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 8006548:	43db      	mvns	r3, r3
 800654a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800654e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 800655a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800655e:	4684      	mov	ip, r0
 8006560:	ea0c 0c02 	and.w	ip, ip, r2
 8006564:	f8c7 c588 	str.w	ip, [r7, #1416]	; 0x588
 8006568:	400b      	ands	r3, r1
 800656a:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800656e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 800657a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800657e:	4684      	mov	ip, r0
 8006580:	ea82 0c0c 	eor.w	ip, r2, ip
 8006584:	f8c7 c078 	str.w	ip, [r7, #120]	; 0x78
 8006588:	404b      	eors	r3, r1
 800658a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800658c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006590:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8006594:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 8006598:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800659c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065a0:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	ea80 0c02 	eor.w	ip, r0, r2
 80065ac:	f8c7 c070 	str.w	ip, [r7, #112]	; 0x70
 80065b0:	404b      	eors	r3, r1
 80065b2:	677b      	str	r3, [r7, #116]	; 0x74
 80065b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80065b8:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 80065bc:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 80065c0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80065c4:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80065c8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80065cc:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 80065d0:	6803      	ldr	r3, [r0, #0]
 80065d2:	079a      	lsls	r2, r3, #30
 80065d4:	680b      	ldr	r3, [r1, #0]
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	4313      	orrs	r3, r2
 80065da:	66bb      	str	r3, [r7, #104]	; 0x68
 80065dc:	680b      	ldr	r3, [r1, #0]
 80065de:	079a      	lsls	r2, r3, #30
 80065e0:	6803      	ldr	r3, [r0, #0]
 80065e2:	089b      	lsrs	r3, r3, #2
 80065e4:	4313      	orrs	r3, r2
 80065e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80065ec:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80065f0:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 80065f4:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80065f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065fc:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	ea80 0c02 	eor.w	ip, r0, r2
 8006608:	f8c7 c060 	str.w	ip, [r7, #96]	; 0x60
 800660c:	404b      	eors	r3, r1
 800660e:	667b      	str	r3, [r7, #100]	; 0x64
 8006610:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006614:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 8006618:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 800661c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006620:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 8006624:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006628:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 800662c:	6803      	ldr	r3, [r0, #0]
 800662e:	05da      	lsls	r2, r3, #23
 8006630:	680b      	ldr	r3, [r1, #0]
 8006632:	0a5b      	lsrs	r3, r3, #9
 8006634:	4313      	orrs	r3, r2
 8006636:	65bb      	str	r3, [r7, #88]	; 0x58
 8006638:	680b      	ldr	r3, [r1, #0]
 800663a:	05da      	lsls	r2, r3, #23
 800663c:	6803      	ldr	r3, [r0, #0]
 800663e:	0a5b      	lsrs	r3, r3, #9
 8006640:	4313      	orrs	r3, r2
 8006642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006644:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006648:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800664c:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 8006650:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8006654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006658:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	ea80 0c02 	eor.w	ip, r0, r2
 8006664:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8006668:	404b      	eors	r3, r1
 800666a:	657b      	str	r3, [r7, #84]	; 0x54
 800666c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006670:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8006674:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 8006678:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800667c:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 8006680:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006684:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 8006688:	6803      	ldr	r3, [r0, #0]
 800668a:	01da      	lsls	r2, r3, #7
 800668c:	680b      	ldr	r3, [r1, #0]
 800668e:	0e5b      	lsrs	r3, r3, #25
 8006690:	4313      	orrs	r3, r2
 8006692:	64bb      	str	r3, [r7, #72]	; 0x48
 8006694:	680b      	ldr	r3, [r1, #0]
 8006696:	01da      	lsls	r2, r3, #7
 8006698:	6803      	ldr	r3, [r0, #0]
 800669a:	0e5b      	lsrs	r3, r3, #25
 800669c:	4313      	orrs	r3, r2
 800669e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066a4:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80066a8:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 80066ac:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80066b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066b4:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	ea80 0c02 	eor.w	ip, r0, r2
 80066c0:	f8c7 c040 	str.w	ip, [r7, #64]	; 0x40
 80066c4:	404b      	eors	r3, r1
 80066c6:	647b      	str	r3, [r7, #68]	; 0x44
 80066c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066cc:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 80066d0:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 80066d4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80066d8:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80066dc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80066e0:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 80066e4:	6803      	ldr	r3, [r0, #0]
 80066e6:	025a      	lsls	r2, r3, #9
 80066e8:	680b      	ldr	r3, [r1, #0]
 80066ea:	0ddb      	lsrs	r3, r3, #23
 80066ec:	4313      	orrs	r3, r2
 80066ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80066f0:	680b      	ldr	r3, [r1, #0]
 80066f2:	025a      	lsls	r2, r3, #9
 80066f4:	6803      	ldr	r3, [r0, #0]
 80066f6:	0ddb      	lsrs	r3, r3, #23
 80066f8:	4313      	orrs	r3, r2
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006700:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8006704:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 8006708:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800670c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006710:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	ea80 0c02 	eor.w	ip, r0, r2
 800671c:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 8006720:	404b      	eors	r3, r1
 8006722:	637b      	str	r3, [r7, #52]	; 0x34
 8006724:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006728:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 800672c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 8006730:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006734:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 8006738:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800673c:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 8006740:	6803      	ldr	r3, [r0, #0]
 8006742:	0f9a      	lsrs	r2, r3, #30
 8006744:	680b      	ldr	r3, [r1, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4313      	orrs	r3, r2
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800674c:	680b      	ldr	r3, [r1, #0]
 800674e:	0f9a      	lsrs	r2, r3, #30
 8006750:	6803      	ldr	r3, [r0, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4313      	orrs	r3, r2
 8006756:	62bb      	str	r3, [r7, #40]	; 0x28
 8006758:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800675c:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8006760:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 8006764:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	43d1      	mvns	r1, r2
 800676e:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 8006772:	43db      	mvns	r3, r3
 8006774:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8006778:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8006784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006788:	4684      	mov	ip, r0
 800678a:	ea0c 0c02 	and.w	ip, ip, r2
 800678e:	f8c7 c578 	str.w	ip, [r7, #1400]	; 0x578
 8006792:	400b      	ands	r3, r1
 8006794:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8006798:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 80067a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067a8:	4684      	mov	ip, r0
 80067aa:	ea82 0c0c 	eor.w	ip, r2, ip
 80067ae:	f8c7 c020 	str.w	ip, [r7, #32]
 80067b2:	404b      	eors	r3, r1
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
 80067b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ba:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 80067be:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 80067c2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	43d1      	mvns	r1, r2
 80067cc:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 80067d0:	43db      	mvns	r3, r3
 80067d2:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 80067d6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 80067e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067e6:	4684      	mov	ip, r0
 80067e8:	ea0c 0c02 	and.w	ip, ip, r2
 80067ec:	f8c7 c568 	str.w	ip, [r7, #1384]	; 0x568
 80067f0:	400b      	ands	r3, r1
 80067f2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80067f6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8006802:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006806:	4684      	mov	ip, r0
 8006808:	ea82 0c0c 	eor.w	ip, r2, ip
 800680c:	f8c7 c018 	str.w	ip, [r7, #24]
 8006810:	404b      	eors	r3, r1
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006818:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800681c:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 8006820:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	43d1      	mvns	r1, r2
 800682a:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800682e:	43db      	mvns	r3, r3
 8006830:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8006834:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8006840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006844:	4684      	mov	ip, r0
 8006846:	ea0c 0c02 	and.w	ip, ip, r2
 800684a:	f8c7 c558 	str.w	ip, [r7, #1368]	; 0x558
 800684e:	400b      	ands	r3, r1
 8006850:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8006854:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006864:	4684      	mov	ip, r0
 8006866:	ea82 0c0c 	eor.w	ip, r2, ip
 800686a:	f8c7 c010 	str.w	ip, [r7, #16]
 800686e:	404b      	eors	r3, r1
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006876:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800687a:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 800687e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	43d1      	mvns	r1, r2
 8006888:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 800688c:	43db      	mvns	r3, r3
 800688e:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8006892:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 800689e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068a2:	4684      	mov	ip, r0
 80068a4:	ea0c 0a02 	and.w	sl, ip, r2
 80068a8:	ea01 0b03 	and.w	fp, r1, r3
 80068ac:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	ea82 010a 	eor.w	r1, r2, sl
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	ea83 030b 	eor.w	r3, r3, fp
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068c4:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 80068c8:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 80068cc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	ea6f 0802 	mvn.w	r8, r2
 80068d8:	ea6f 0903 	mvn.w	r9, r3
 80068dc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	ea08 0402 	and.w	r4, r8, r2
 80068e8:	ea09 0503 	and.w	r5, r9, r3
 80068ec:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80068f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f4:	ea82 0104 	eor.w	r1, r2, r4
 80068f8:	6039      	str	r1, [r7, #0]
 80068fa:	406b      	eors	r3, r5
 80068fc:	607b      	str	r3, [r7, #4]
 80068fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006902:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8006906:	e9c1 2300 	strd	r2, r3, [r1]
        for(round = 0; round < NROUNDS; round += 2) {
 800690a:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800690e:	3302      	adds	r3, #2
 8006910:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8006914:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8006918:	2b17      	cmp	r3, #23
 800691a:	f77d a8eb 	ble.w	8003af4 <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 800691e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006922:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006926:	6819      	ldr	r1, [r3, #0]
 8006928:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 8006934:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006938:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f103 0108 	add.w	r1, r3, #8
 8006942:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 800694e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006952:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f103 0110 	add.w	r1, r3, #16
 800695c:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 8006968:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800696c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f103 0118 	add.w	r1, r3, #24
 8006976:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 8006982:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006986:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f103 0120 	add.w	r1, r3, #32
 8006990:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 800699c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80069a0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80069aa:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 80069b6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80069ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069c4:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 80069d0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80069d4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069de:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 80069ea:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80069ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80069f8:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 8006a04:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006a08:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006a12:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 8006a1e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006a22:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8006a2c:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 8006a38:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006a3c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8006a46:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 8006a52:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006a56:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8006a60:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 8006a6c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006a70:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8006a7a:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 8006a86:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006a8a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8006a94:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 8006aa0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006aa4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006aae:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 8006aba:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006abe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8006ac8:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 8006ad4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006ad8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8006ae2:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 8006aee:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006af2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8006afc:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 8006b08:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006b0c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8006b16:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8006b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1e:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 8006b22:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006b26:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8006b30:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 8006b3c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006b40:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8006b4a:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 8006b56:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006b5a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8006b64:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 8006b70:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006b74:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8006b7e:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8006b8a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006b8e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8006b98:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006ba4:	bf00      	nop
 8006ba6:	f607 378c 	addw	r7, r7, #2956	; 0xb8c
 8006baa:	46bd      	mov	sp, r7
 8006bac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop

08006bb4 <keccak_init>:
* Description: Initializes the Keccak state.
*
* Arguments:   - uint64_t *s: pointer to Keccak state
**************************************************/
static void keccak_init(uint64_t s[25])
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<25;i++)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	e00c      	b.n	8006bdc <keccak_init+0x28>
    s[i] = 0;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	18d1      	adds	r1, r2, r3
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b18      	cmp	r3, #24
 8006be0:	d9ef      	bls.n	8006bc2 <keccak_init+0xe>
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int pos,
                                  unsigned int r,
                                  const uint8_t *in,
                                  size_t inlen)
{
 8006bee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bf2:	b08c      	sub	sp, #48	; 0x30
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6278      	str	r0, [r7, #36]	; 0x24
 8006bf8:	6239      	str	r1, [r7, #32]
 8006bfa:	61fa      	str	r2, [r7, #28]
 8006bfc:	61bb      	str	r3, [r7, #24]
  unsigned int i;

  while(pos+inlen >= r) {
 8006bfe:	e04e      	b.n	8006c9e <keccak_absorb+0xb0>
    for(i=pos;i<r;i++)
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c04:	e03c      	b.n	8006c80 <keccak_absorb+0x92>
      s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	61ba      	str	r2, [r7, #24]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2200      	movs	r2, #0
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	617a      	str	r2, [r7, #20]
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	f1a3 0120 	sub.w	r1, r3, #32
 8006c22:	f1c3 0220 	rsb	r2, r3, #32
 8006c26:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8006c2a:	fa0c f903 	lsl.w	r9, ip, r3
 8006c2e:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8006c32:	fa0c f101 	lsl.w	r1, ip, r1
 8006c36:	ea49 0901 	orr.w	r9, r9, r1
 8006c3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c3e:	4684      	mov	ip, r0
 8006c40:	fa2c f202 	lsr.w	r2, ip, r2
 8006c44:	ea49 0902 	orr.w	r9, r9, r2
 8006c48:	4602      	mov	r2, r0
 8006c4a:	fa02 f803 	lsl.w	r8, r2, r3
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	f023 0307 	bic.w	r3, r3, #7
 8006c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c56:	4413      	add	r3, r2
 8006c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	f023 0207 	bic.w	r2, r3, #7
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	4413      	add	r3, r2
 8006c66:	ea88 0200 	eor.w	r2, r8, r0
 8006c6a:	60ba      	str	r2, [r7, #8]
 8006c6c:	ea89 0201 	eor.w	r2, r9, r1
 8006c70:	60fa      	str	r2, [r7, #12]
 8006c72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c76:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=pos;i<r;i++)
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d3be      	bcc.n	8006c06 <keccak_absorb+0x18>
    inlen -= r-pos;
 8006c88:	6a3a      	ldr	r2, [r7, #32]
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c90:	4413      	add	r3, r2
 8006c92:	653b      	str	r3, [r7, #80]	; 0x50
    KeccakF1600_StatePermute(s);
 8006c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c96:	f7fc fe0b 	bl	80038b0 <KeccakF1600_StatePermute>
    pos = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	623b      	str	r3, [r7, #32]
  while(pos+inlen >= r) {
 8006c9e:	6a3a      	ldr	r2, [r7, #32]
 8006ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca2:	4413      	add	r3, r2
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d9aa      	bls.n	8006c00 <keccak_absorb+0x12>
  }

  for(i=pos;i<pos+inlen;i++)
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cae:	e031      	b.n	8006d14 <keccak_absorb+0x126>
    s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	61ba      	str	r2, [r7, #24]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2200      	movs	r2, #0
 8006cbc:	469a      	mov	sl, r3
 8006cbe:	4693      	mov	fp, r2
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	f1a3 0120 	sub.w	r1, r3, #32
 8006ccc:	f1c3 0220 	rsb	r2, r3, #32
 8006cd0:	fa0b f503 	lsl.w	r5, fp, r3
 8006cd4:	fa0a f101 	lsl.w	r1, sl, r1
 8006cd8:	430d      	orrs	r5, r1
 8006cda:	fa2a f202 	lsr.w	r2, sl, r2
 8006cde:	4315      	orrs	r5, r2
 8006ce0:	fa0a f403 	lsl.w	r4, sl, r3
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	f023 0307 	bic.w	r3, r3, #7
 8006cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cec:	4413      	add	r3, r2
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cf4:	f021 0107 	bic.w	r1, r1, #7
 8006cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cfa:	4401      	add	r1, r0
 8006cfc:	ea84 0002 	eor.w	r0, r4, r2
 8006d00:	6038      	str	r0, [r7, #0]
 8006d02:	406b      	eors	r3, r5
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d0a:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=pos;i<pos+inlen;i++)
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	3301      	adds	r3, #1
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d14:	6a3a      	ldr	r2, [r7, #32]
 8006d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d18:	4413      	add	r3, r2
 8006d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d3c7      	bcc.n	8006cb0 <keccak_absorb+0xc2>

  return i;
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3730      	adds	r7, #48	; 0x30
 8006d26:	46bd      	mov	sp, r7
 8006d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d2c <keccak_finalize>:
*              - unsigned int pos: position in current block to be absorbed
*              - unsigned int r: rate in bytes (e.g., 168 for SHAKE128)
*              - uint8_t p: domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int pos, unsigned int r, uint8_t p)
{
 8006d2c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6178      	str	r0, [r7, #20]
 8006d36:	6139      	str	r1, [r7, #16]
 8006d38:	60fa      	str	r2, [r7, #12]
 8006d3a:	72fb      	strb	r3, [r7, #11]
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f023 0307 	bic.w	r3, r3, #7
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4413      	add	r3, r2
 8006d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d4a:	7afb      	ldrb	r3, [r7, #11]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	4698      	mov	r8, r3
 8006d50:	4691      	mov	r9, r2
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	f1a3 0620 	sub.w	r6, r3, #32
 8006d5e:	f1c3 0220 	rsb	r2, r3, #32
 8006d62:	fa09 f503 	lsl.w	r5, r9, r3
 8006d66:	fa08 f606 	lsl.w	r6, r8, r6
 8006d6a:	4335      	orrs	r5, r6
 8006d6c:	fa28 f202 	lsr.w	r2, r8, r2
 8006d70:	4315      	orrs	r5, r2
 8006d72:	fa08 f403 	lsl.w	r4, r8, r3
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f023 0307 	bic.w	r3, r3, #7
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4413      	add	r3, r2
 8006d80:	ea80 0a04 	eor.w	sl, r0, r4
 8006d84:	ea81 0b05 	eor.w	fp, r1, r5
 8006d88:	e9c3 ab00 	strd	sl, fp, [r3]
  s[r/8-1] ^= 1ULL << 63;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0307 	bic.w	r3, r3, #7
 8006d92:	3b08      	subs	r3, #8
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4413      	add	r3, r2
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	68f9      	ldr	r1, [r7, #12]
 8006d9e:	f021 0107 	bic.w	r1, r1, #7
 8006da2:	3908      	subs	r1, #8
 8006da4:	6978      	ldr	r0, [r7, #20]
 8006da6:	4401      	add	r1, r0
 8006da8:	603a      	str	r2, [r7, #0]
 8006daa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006dae:	607b      	str	r3, [r7, #4]
 8006db0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006db4:	e9c1 3400 	strd	r3, r4, [r1]
}
 8006db8:	bf00      	nop
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006dc2:	4770      	bx	lr

08006dc4 <keccak_squeeze>:
static unsigned int keccak_squeeze(uint8_t *out,
                                   size_t outlen,
                                   uint64_t s[25],
                                   unsigned int pos,
                                   unsigned int r)
{
 8006dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(outlen) {
 8006dd2:	e03e      	b.n	8006e52 <keccak_squeeze+0x8e>
    if(pos == r) {
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d104      	bne.n	8006de6 <keccak_squeeze+0x22>
      KeccakF1600_StatePermute(s);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7fc fd67 	bl	80038b0 <KeccakF1600_StatePermute>
      pos = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	603b      	str	r3, [r7, #0]
    }
    for(i=pos;i < r && i < pos+outlen; i++)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	e020      	b.n	8006e2e <keccak_squeeze+0x6a>
      *out++ = s[i/8] >> 8*(i%8);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f023 0307 	bic.w	r3, r3, #7
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	4413      	add	r3, r2
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	6979      	ldr	r1, [r7, #20]
 8006dfc:	f001 0107 	and.w	r1, r1, #7
 8006e00:	00c9      	lsls	r1, r1, #3
 8006e02:	f1c1 0620 	rsb	r6, r1, #32
 8006e06:	f1a1 0020 	sub.w	r0, r1, #32
 8006e0a:	fa22 f401 	lsr.w	r4, r2, r1
 8006e0e:	fa03 f606 	lsl.w	r6, r3, r6
 8006e12:	4334      	orrs	r4, r6
 8006e14:	fa23 f000 	lsr.w	r0, r3, r0
 8006e18:	4304      	orrs	r4, r0
 8006e1a:	fa23 f501 	lsr.w	r5, r3, r1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	60fa      	str	r2, [r7, #12]
 8006e24:	b2e2      	uxtb	r2, r4
 8006e26:	701a      	strb	r2, [r3, #0]
    for(i=pos;i < r && i < pos+outlen; i++)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	617b      	str	r3, [r7, #20]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d205      	bcs.n	8006e42 <keccak_squeeze+0x7e>
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d3d4      	bcc.n	8006dec <keccak_squeeze+0x28>
    outlen -= i-pos;
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	60bb      	str	r3, [r7, #8]
    pos = i;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	603b      	str	r3, [r7, #0]
  while(outlen) {
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1bd      	bne.n	8006dd4 <keccak_squeeze+0x10>
  }

  return pos;
 8006e58:	683b      	ldr	r3, [r7, #0]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e62 <keccak_absorb_once>:
static void keccak_absorb_once(uint64_t s[25],
                               unsigned int r,
                               const uint8_t *in,
                               size_t inlen,
                               uint8_t p)
{
 8006e62:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e66:	b092      	sub	sp, #72	; 0x48
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8006e6c:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e6e:	637a      	str	r2, [r7, #52]	; 0x34
 8006e70:	633b      	str	r3, [r7, #48]	; 0x30
  unsigned int i;

  for(i=0;i<25;i++)
 8006e72:	2300      	movs	r3, #0
 8006e74:	647b      	str	r3, [r7, #68]	; 0x44
 8006e76:	e00c      	b.n	8006e92 <keccak_absorb_once+0x30>
    s[i] = 0;
 8006e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e7a:	00da      	lsls	r2, r3, #3
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7e:	1899      	adds	r1, r3, r2
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 8006e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e8e:	3301      	adds	r3, #1
 8006e90:	647b      	str	r3, [r7, #68]	; 0x44
 8006e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e94:	2b18      	cmp	r3, #24
 8006e96:	d9ef      	bls.n	8006e78 <keccak_absorb_once+0x16>

  while(inlen >= r) {
 8006e98:	e032      	b.n	8006f00 <keccak_absorb_once+0x9e>
    for(i=0;i<r/8;i++)
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e9e:	e01f      	b.n	8006ee0 <keccak_absorb_once+0x7e>
      s[i] ^= load64(in+8*i);
 8006ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea2:	00da      	lsls	r2, r3, #3
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea6:	4413      	add	r3, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fc fc97 	bl	80037dc <load64>
 8006eae:	4604      	mov	r4, r0
 8006eb0:	460d      	mov	r5, r1
 8006eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb4:	00da      	lsls	r2, r3, #3
 8006eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb8:	4413      	add	r3, r2
 8006eba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec0:	00da      	lsls	r2, r3, #3
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec4:	4413      	add	r3, r2
 8006ec6:	ea84 0200 	eor.w	r2, r4, r0
 8006eca:	623a      	str	r2, [r7, #32]
 8006ecc:	ea85 0201 	eor.w	r2, r5, r1
 8006ed0:	627a      	str	r2, [r7, #36]	; 0x24
 8006ed2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ed6:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<r/8;i++)
 8006eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006edc:	3301      	adds	r3, #1
 8006ede:	647b      	str	r3, [r7, #68]	; 0x44
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	08da      	lsrs	r2, r3, #3
 8006ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d3da      	bcc.n	8006ea0 <keccak_absorb_once+0x3e>
    in += r;
 8006eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	4413      	add	r3, r2
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
    inlen -= r;
 8006ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	633b      	str	r3, [r7, #48]	; 0x30
    KeccakF1600_StatePermute(s);
 8006efa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006efc:	f7fc fcd8 	bl	80038b0 <KeccakF1600_StatePermute>
  while(inlen >= r) {
 8006f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d2c8      	bcs.n	8006e9a <keccak_absorb_once+0x38>
  }

  for(i=0;i<inlen;i++)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f0c:	e038      	b.n	8006f80 <keccak_absorb_once+0x11e>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
 8006f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f10:	f023 0207 	bic.w	r2, r3, #7
 8006f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f16:	4413      	add	r3, r2
 8006f18:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f20:	4413      	add	r3, r2
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2200      	movs	r2, #0
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	00d9      	lsls	r1, r3, #3
 8006f34:	f1a1 0320 	sub.w	r3, r1, #32
 8006f38:	f1c1 0220 	rsb	r2, r1, #32
 8006f3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f3e:	fa00 fb01 	lsl.w	fp, r0, r1
 8006f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f44:	fa00 f303 	lsl.w	r3, r0, r3
 8006f48:	ea4b 0b03 	orr.w	fp, fp, r3
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	fa23 f202 	lsr.w	r2, r3, r2
 8006f52:	ea4b 0b02 	orr.w	fp, fp, r2
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	fa03 fa01 	lsl.w	sl, r3, r1
 8006f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f5e:	f023 0207 	bic.w	r2, r3, #7
 8006f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f64:	4413      	add	r3, r2
 8006f66:	ea84 020a 	eor.w	r2, r4, sl
 8006f6a:	61ba      	str	r2, [r7, #24]
 8006f6c:	ea85 020b 	eor.w	r2, r5, fp
 8006f70:	61fa      	str	r2, [r7, #28]
 8006f72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f76:	e9c3 1200 	strd	r1, r2, [r3]
  for(i=0;i<inlen;i++)
 8006f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d3c2      	bcc.n	8006f0e <keccak_absorb_once+0xac>

  s[i/8] ^= (uint64_t)p << 8*(i%8);
 8006f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8a:	f023 0307 	bic.w	r3, r3, #7
 8006f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f90:	4413      	add	r3, r2
 8006f92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f96:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	617a      	str	r2, [r7, #20]
 8006fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	f1a3 0420 	sub.w	r4, r3, #32
 8006fac:	f1c3 0220 	rsb	r2, r3, #32
 8006fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fb4:	465d      	mov	r5, fp
 8006fb6:	fa05 f903 	lsl.w	r9, r5, r3
 8006fba:	4655      	mov	r5, sl
 8006fbc:	fa05 f404 	lsl.w	r4, r5, r4
 8006fc0:	ea49 0904 	orr.w	r9, r9, r4
 8006fc4:	46d4      	mov	ip, sl
 8006fc6:	fa2c f202 	lsr.w	r2, ip, r2
 8006fca:	ea49 0902 	orr.w	r9, r9, r2
 8006fce:	4652      	mov	r2, sl
 8006fd0:	fa02 f803 	lsl.w	r8, r2, r3
 8006fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd6:	f023 0307 	bic.w	r3, r3, #7
 8006fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fdc:	4413      	add	r3, r2
 8006fde:	ea80 0208 	eor.w	r2, r0, r8
 8006fe2:	60ba      	str	r2, [r7, #8]
 8006fe4:	ea81 0209 	eor.w	r2, r1, r9
 8006fe8:	60fa      	str	r2, [r7, #12]
 8006fea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006fee:	e9c3 1200 	strd	r1, r2, [r3]
  s[(r-1)/8] ^= 1ULL << 63;
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	f023 0307 	bic.w	r3, r3, #7
 8006ffa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ffc:	4413      	add	r3, r2
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007004:	3901      	subs	r1, #1
 8007006:	f021 0107 	bic.w	r1, r1, #7
 800700a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800700c:	4401      	add	r1, r0
 800700e:	603a      	str	r2, [r7, #0]
 8007010:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007014:	607b      	str	r3, [r7, #4]
 8007016:	e9d7 3400 	ldrd	r3, r4, [r7]
 800701a:	e9c1 3400 	strd	r3, r4, [r1]
}
 800701e:	bf00      	nop
 8007020:	3748      	adds	r7, #72	; 0x48
 8007022:	46bd      	mov	sp, r7
 8007024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007028 <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(nblocks) {
 8007036:	e021      	b.n	800707c <keccak_squeezeblocks+0x54>
    KeccakF1600_StatePermute(s);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fc fc39 	bl	80038b0 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	e00f      	b.n	8007064 <keccak_squeezeblocks+0x3c>
      store64(out+8*i, s[i]);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	18d1      	adds	r1, r2, r3
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	4413      	add	r3, r2
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	4608      	mov	r0, r1
 800705a:	f7fc fbfc 	bl	8003856 <store64>
    for(i=0;i<r/8;i++)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	3301      	adds	r3, #1
 8007062:	617b      	str	r3, [r7, #20]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	08db      	lsrs	r3, r3, #3
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	429a      	cmp	r2, r3
 800706c:	d3ea      	bcc.n	8007044 <keccak_squeezeblocks+0x1c>
    out += r;
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	4413      	add	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
    nblocks -= 1;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	3b01      	subs	r3, #1
 800707a:	60bb      	str	r3, [r7, #8]
  while(nblocks) {
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1da      	bne.n	8007038 <keccak_squeezeblocks+0x10>
  }
}
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <pqcrystals_dilithium_fips202_ref_shake128_init>:
* Description: Initilizes Keccak state for use as SHAKE128 XOF
*
* Arguments:   - keccak_state *state: pointer to (uninitialized) Keccak state
**************************************************/
void shake128_init(keccak_state *state)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  keccak_init(state->s);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff fd8c 	bl	8006bb4 <keccak_init>
  state->pos = 0;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <pqcrystals_dilithium_fips202_ref_shake128_absorb>:
* Arguments:   - keccak_state *state: pointer to (initialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	22a8      	movs	r2, #168	; 0xa8
 80070c8:	f7ff fd91 	bl	8006bee <keccak_absorb>
 80070cc:	4602      	mov	r2, r0
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80070d4:	bf00      	nop
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <pqcrystals_dilithium_fips202_ref_shake128_finalize>:
* Description: Finalize absorb step of the SHAKE128 XOF.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake128_finalize(keccak_state *state)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  keccak_finalize(state->s, state->pos, SHAKE128_RATE, 0x1F);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 80070ec:	231f      	movs	r3, #31
 80070ee:	22a8      	movs	r2, #168	; 0xa8
 80070f0:	f7ff fe1c 	bl	8006d2c <keccak_finalize>
  state->pos = SHAKE128_RATE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	22a8      	movs	r2, #168	; 0xa8
 80070f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake128_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE128_RATE);
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	23a8      	movs	r3, #168	; 0xa8
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f7ff ff86 	bl	8007028 <keccak_squeezeblocks>
}
 800711c:	bf00      	nop
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <pqcrystals_dilithium_fips202_ref_shake256_init>:
* Description: Initilizes Keccak state for use as SHAKE256 XOF
*
* Arguments:   - keccak_state *state: pointer to (uninitialized) Keccak state
**************************************************/
void shake256_init(keccak_state *state)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  keccak_init(state->s);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff fd40 	bl	8006bb4 <keccak_init>
  state->pos = 0;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800713c:	bf00      	nop
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <pqcrystals_dilithium_fips202_ref_shake256_absorb>:
* Arguments:   - keccak_state *state: pointer to (initialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af02      	add	r7, sp, #8
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2288      	movs	r2, #136	; 0x88
 8007160:	f7ff fd45 	bl	8006bee <keccak_absorb>
 8007164:	4602      	mov	r2, r0
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <pqcrystals_dilithium_fips202_ref_shake256_finalize>:
* Description: Finalize absorb step of the SHAKE256 XOF.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  keccak_finalize(state->s, state->pos, SHAKE256_RATE, 0x1F);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8007184:	231f      	movs	r3, #31
 8007186:	2288      	movs	r2, #136	; 0x88
 8007188:	f7ff fdd0 	bl	8006d2c <keccak_finalize>
  state->pos = SHAKE256_RATE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2288      	movs	r2, #136	; 0x88
 8007190:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <pqcrystals_dilithium_fips202_ref_shake256_squeeze>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t outlen : number of bytes to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80071b0:	2188      	movs	r1, #136	; 0x88
 80071b2:	9100      	str	r1, [sp, #0]
 80071b4:	68b9      	ldr	r1, [r7, #8]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff fe04 	bl	8006dc4 <keccak_squeeze>
 80071bc:	4602      	mov	r2, r0
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80071c4:	bf00      	nop
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <pqcrystals_dilithium_fips202_ref_shake256_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	231f      	movs	r3, #31
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	2188      	movs	r1, #136	; 0x88
 80071e4:	f7ff fe3d 	bl	8006e62 <keccak_absorb_once>
  state->pos = SHAKE256_RATE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2288      	movs	r2, #136	; 0x88
 80071ec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80071f0:	bf00      	nop
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	2388      	movs	r3, #136	; 0x88
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f7ff ff0c 	bl	8007028 <keccak_squeezeblocks>
}
 8007210:	bf00      	nop
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <pqcrystals_dilithium_fips202_ref_shake256>:
*              - size_t outlen: requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b0ba      	sub	sp, #232	; 0xe8
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
  size_t nblocks;
  keccak_state state;

  shake256_absorb_once(&state, in, inlen);
 8007226:	f107 0310 	add.w	r3, r7, #16
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff ffcc 	bl	80071cc <pqcrystals_dilithium_fips202_ref_shake256_absorb_once>
  nblocks = outlen/SHAKE256_RATE;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4a16      	ldr	r2, [pc, #88]	; (8007290 <pqcrystals_dilithium_fips202_ref_shake256+0x78>)
 8007238:	fba2 2303 	umull	r2, r3, r2, r3
 800723c:	09db      	lsrs	r3, r3, #7
 800723e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  shake256_squeezeblocks(out, nblocks, &state);
 8007242:	f107 0310 	add.w	r3, r7, #16
 8007246:	461a      	mov	r2, r3
 8007248:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff ffd3 	bl	80071f8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
  outlen -= nblocks*SHAKE256_RATE;
 8007252:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007256:	4613      	mov	r3, r2
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	4413      	add	r3, r2
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	461a      	mov	r2, r3
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	60bb      	str	r3, [r7, #8]
  out += nblocks*SHAKE256_RATE;
 8007266:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800726a:	4613      	mov	r3, r2
 800726c:	011b      	lsls	r3, r3, #4
 800726e:	4413      	add	r3, r2
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	461a      	mov	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
  shake256_squeeze(out, outlen, &state);
 800727a:	f107 0310 	add.w	r3, r7, #16
 800727e:	461a      	mov	r2, r3
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f7ff ff8a 	bl	800719c <pqcrystals_dilithium_fips202_ref_shake256_squeeze>
}
 8007288:	bf00      	nop
 800728a:	37e8      	adds	r7, #232	; 0xe8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	f0f0f0f1 	.word	0xf0f0f0f1

08007294 <pqcrystals_dilithium2_refdilithium_shake128_stream_init>:
#include "params.h"
#include "symmetric.h"
#include "fips202.h"

void dilithium_shake128_stream_init(keccak_state *state, const uint8_t seed[SEEDBYTES], uint16_t nonce)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	80fb      	strh	r3, [r7, #6]
  uint8_t t[2];
  t[0] = nonce;
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	753b      	strb	r3, [r7, #20]
  t[1] = nonce >> 8;
 80072a8:	88fb      	ldrh	r3, [r7, #6]
 80072aa:	0a1b      	lsrs	r3, r3, #8
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	757b      	strb	r3, [r7, #21]

  shake128_init(state);
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7ff feea 	bl	800708c <pqcrystals_dilithium_fips202_ref_shake128_init>
  shake128_absorb(state, seed, SEEDBYTES);
 80072b8:	2220      	movs	r2, #32
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f7ff fef5 	bl	80070ac <pqcrystals_dilithium_fips202_ref_shake128_absorb>
  shake128_absorb(state, t, 2);
 80072c2:	f107 0314 	add.w	r3, r7, #20
 80072c6:	2202      	movs	r2, #2
 80072c8:	4619      	mov	r1, r3
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f7ff feee 	bl	80070ac <pqcrystals_dilithium_fips202_ref_shake128_absorb>
  shake128_finalize(state);
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7ff ff03 	bl	80070dc <pqcrystals_dilithium_fips202_ref_shake128_finalize>
}
 80072d6:	bf00      	nop
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <pqcrystals_dilithium2_refdilithium_shake256_stream_init>:

void dilithium_shake256_stream_init(keccak_state *state, const uint8_t seed[CRHBYTES], uint16_t nonce)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b086      	sub	sp, #24
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	4613      	mov	r3, r2
 80072ea:	80fb      	strh	r3, [r7, #6]
  uint8_t t[2];
  t[0] = nonce;
 80072ec:	88fb      	ldrh	r3, [r7, #6]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	753b      	strb	r3, [r7, #20]
  t[1] = nonce >> 8;
 80072f2:	88fb      	ldrh	r3, [r7, #6]
 80072f4:	0a1b      	lsrs	r3, r3, #8
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	757b      	strb	r3, [r7, #21]

  shake256_init(state);
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff ff11 	bl	8007124 <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(state, seed, CRHBYTES);
 8007302:	2240      	movs	r2, #64	; 0x40
 8007304:	68b9      	ldr	r1, [r7, #8]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7ff ff1c 	bl	8007144 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(state, t, 2);
 800730c:	f107 0314 	add.w	r3, r7, #20
 8007310:	2202      	movs	r2, #2
 8007312:	4619      	mov	r1, r3
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f7ff ff15 	bl	8007144 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(state);
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f7ff ff2a 	bl	8007174 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
}
 8007320:	bf00      	nop
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <check_version>:
} ss_cmd;
static ss_cmd commands[MAX_SS_CMDS];
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]
	return SS_VER;
 8007334:	2301      	movs	r3, #1
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	bc80      	pop	{r7}
 800733e:	4770      	bx	lr

08007340 <ss_num_commands>:

uint8_t ss_num_commands(uint8_t *x, uint8_t len)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	70fb      	strb	r3, [r7, #3]
    uint8_t ncmds = num_commands & 0xFF;
 800734c:	4b07      	ldr	r3, [pc, #28]	; (800736c <ss_num_commands+0x2c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	73fb      	strb	r3, [r7, #15]
    simpleserial_put('r', 0x01, &ncmds);
 8007354:	f107 030f 	add.w	r3, r7, #15
 8007358:	461a      	mov	r2, r3
 800735a:	2101      	movs	r1, #1
 800735c:	2072      	movs	r0, #114	; 0x72
 800735e:	f000 fa51 	bl	8007804 <simpleserial_put>
    return 0x00;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	2000ab68 	.word	0x2000ab68

08007370 <ss_get_commands>:
    uint8_t len;
    uint8_t flags;
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b090      	sub	sp, #64	; 0x40
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800737c:	2300      	movs	r3, #0
 800737e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007382:	e037      	b.n	80073f4 <ss_get_commands+0x84>
        repr_cmd_buf[i].c = commands[i].c;
 8007384:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007388:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800738c:	4926      	ldr	r1, [pc, #152]	; (8007428 <ss_get_commands+0xb8>)
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	440b      	add	r3, r1
 8007392:	7819      	ldrb	r1, [r3, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	005b      	lsls	r3, r3, #1
 8007398:	4413      	add	r3, r2
 800739a:	3340      	adds	r3, #64	; 0x40
 800739c:	443b      	add	r3, r7
 800739e:	3b34      	subs	r3, #52	; 0x34
 80073a0:	460a      	mov	r2, r1
 80073a2:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].len = commands[i].len;
 80073a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073a8:	4a1f      	ldr	r2, [pc, #124]	; (8007428 <ss_get_commands+0xb8>)
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	4413      	add	r3, r2
 80073ae:	3304      	adds	r3, #4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80073b6:	b2d9      	uxtb	r1, r3
 80073b8:	4613      	mov	r3, r2
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	4413      	add	r3, r2
 80073be:	3340      	adds	r3, #64	; 0x40
 80073c0:	443b      	add	r3, r7
 80073c2:	3b33      	subs	r3, #51	; 0x33
 80073c4:	460a      	mov	r2, r1
 80073c6:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].flags = commands[i].flags;
 80073c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073cc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80073d0:	4915      	ldr	r1, [pc, #84]	; (8007428 <ss_get_commands+0xb8>)
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	440b      	add	r3, r1
 80073d6:	330c      	adds	r3, #12
 80073d8:	7819      	ldrb	r1, [r3, #0]
 80073da:	4613      	mov	r3, r2
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	4413      	add	r3, r2
 80073e0:	3340      	adds	r3, #64	; 0x40
 80073e2:	443b      	add	r3, r7
 80073e4:	3b32      	subs	r3, #50	; 0x32
 80073e6:	460a      	mov	r2, r1
 80073e8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80073ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073ee:	3301      	adds	r3, #1
 80073f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80073f4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80073f8:	4b0c      	ldr	r3, [pc, #48]	; (800742c <ss_get_commands+0xbc>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	429a      	cmp	r2, r3
 8007400:	dbc0      	blt.n	8007384 <ss_get_commands+0x14>
    }

    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8007402:	4b0a      	ldr	r3, [pc, #40]	; (800742c <ss_get_commands+0xbc>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	0052      	lsls	r2, r2, #1
 800740c:	4413      	add	r3, r2
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f107 020c 	add.w	r2, r7, #12
 8007414:	4619      	mov	r1, r3
 8007416:	2072      	movs	r0, #114	; 0x72
 8007418:	f000 f9f4 	bl	8007804 <simpleserial_put>
    return 0x00;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3740      	adds	r7, #64	; 0x40
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	2000ab6c 	.word	0x2000ab6c
 800742c:	2000ab68 	.word	0x2000ab68

08007430 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 800743c:	2300      	movs	r3, #0
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e083      	b.n	800754a <hex_decode+0x11a>
	{
		char n_hi = ascii_buf[2*i];
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	461a      	mov	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4413      	add	r3, r2
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	74fb      	strb	r3, [r7, #19]
		char n_lo = ascii_buf[2*i+1];
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	3301      	adds	r3, #1
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	4413      	add	r3, r2
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	74bb      	strb	r3, [r7, #18]

		if(n_lo >= '0' && n_lo <= '9')
 800745e:	7cbb      	ldrb	r3, [r7, #18]
 8007460:	2b2f      	cmp	r3, #47	; 0x2f
 8007462:	d90a      	bls.n	800747a <hex_decode+0x4a>
 8007464:	7cbb      	ldrb	r3, [r7, #18]
 8007466:	2b39      	cmp	r3, #57	; 0x39
 8007468:	d807      	bhi.n	800747a <hex_decode+0x4a>
			data_buf[i] = n_lo - '0';
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4413      	add	r3, r2
 8007470:	7cba      	ldrb	r2, [r7, #18]
 8007472:	3a30      	subs	r2, #48	; 0x30
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	e01d      	b.n	80074b6 <hex_decode+0x86>
		else if(n_lo >= 'A' && n_lo <= 'F')
 800747a:	7cbb      	ldrb	r3, [r7, #18]
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	d90a      	bls.n	8007496 <hex_decode+0x66>
 8007480:	7cbb      	ldrb	r3, [r7, #18]
 8007482:	2b46      	cmp	r3, #70	; 0x46
 8007484:	d807      	bhi.n	8007496 <hex_decode+0x66>
			data_buf[i] = n_lo - 'A' + 10;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	4413      	add	r3, r2
 800748c:	7cba      	ldrb	r2, [r7, #18]
 800748e:	3a37      	subs	r2, #55	; 0x37
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	e00f      	b.n	80074b6 <hex_decode+0x86>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8007496:	7cbb      	ldrb	r3, [r7, #18]
 8007498:	2b60      	cmp	r3, #96	; 0x60
 800749a:	d90a      	bls.n	80074b2 <hex_decode+0x82>
 800749c:	7cbb      	ldrb	r3, [r7, #18]
 800749e:	2b66      	cmp	r3, #102	; 0x66
 80074a0:	d807      	bhi.n	80074b2 <hex_decode+0x82>
			data_buf[i] = n_lo - 'a' + 10;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	4413      	add	r3, r2
 80074a8:	7cba      	ldrb	r2, [r7, #18]
 80074aa:	3a57      	subs	r2, #87	; 0x57
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	e001      	b.n	80074b6 <hex_decode+0x86>
		else
			return 1;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e04f      	b.n	8007556 <hex_decode+0x126>

		if(n_hi >= '0' && n_hi <= '9')
 80074b6:	7cfb      	ldrb	r3, [r7, #19]
 80074b8:	2b2f      	cmp	r3, #47	; 0x2f
 80074ba:	d913      	bls.n	80074e4 <hex_decode+0xb4>
 80074bc:	7cfb      	ldrb	r3, [r7, #19]
 80074be:	2b39      	cmp	r3, #57	; 0x39
 80074c0:	d810      	bhi.n	80074e4 <hex_decode+0xb4>
			data_buf[i] |= (n_hi - '0') << 4;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	4413      	add	r3, r2
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	b25a      	sxtb	r2, r3
 80074cc:	7cfb      	ldrb	r3, [r7, #19]
 80074ce:	3b30      	subs	r3, #48	; 0x30
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	b25b      	sxtb	r3, r3
 80074d4:	4313      	orrs	r3, r2
 80074d6:	b259      	sxtb	r1, r3
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	4413      	add	r3, r2
 80074de:	b2ca      	uxtb	r2, r1
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	e02f      	b.n	8007544 <hex_decode+0x114>
		else if(n_hi >= 'A' && n_hi <= 'F')
 80074e4:	7cfb      	ldrb	r3, [r7, #19]
 80074e6:	2b40      	cmp	r3, #64	; 0x40
 80074e8:	d913      	bls.n	8007512 <hex_decode+0xe2>
 80074ea:	7cfb      	ldrb	r3, [r7, #19]
 80074ec:	2b46      	cmp	r3, #70	; 0x46
 80074ee:	d810      	bhi.n	8007512 <hex_decode+0xe2>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	4413      	add	r3, r2
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	b25a      	sxtb	r2, r3
 80074fa:	7cfb      	ldrb	r3, [r7, #19]
 80074fc:	3b37      	subs	r3, #55	; 0x37
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	b25b      	sxtb	r3, r3
 8007502:	4313      	orrs	r3, r2
 8007504:	b259      	sxtb	r1, r3
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	4413      	add	r3, r2
 800750c:	b2ca      	uxtb	r2, r1
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	e018      	b.n	8007544 <hex_decode+0x114>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8007512:	7cfb      	ldrb	r3, [r7, #19]
 8007514:	2b60      	cmp	r3, #96	; 0x60
 8007516:	d913      	bls.n	8007540 <hex_decode+0x110>
 8007518:	7cfb      	ldrb	r3, [r7, #19]
 800751a:	2b66      	cmp	r3, #102	; 0x66
 800751c:	d810      	bhi.n	8007540 <hex_decode+0x110>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	4413      	add	r3, r2
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	b25a      	sxtb	r2, r3
 8007528:	7cfb      	ldrb	r3, [r7, #19]
 800752a:	3b57      	subs	r3, #87	; 0x57
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	b25b      	sxtb	r3, r3
 8007530:	4313      	orrs	r3, r2
 8007532:	b259      	sxtb	r1, r3
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	4413      	add	r3, r2
 800753a:	b2ca      	uxtb	r2, r1
 800753c:	701a      	strb	r2, [r3, #0]
 800753e:	e001      	b.n	8007544 <hex_decode+0x114>
		else
			return 1;
 8007540:	2301      	movs	r3, #1
 8007542:	e008      	b.n	8007556 <hex_decode+0x126>
	for(int i = 0; i < len; i++)
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	3301      	adds	r3, #1
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	429a      	cmp	r2, r3
 8007550:	f6ff af77 	blt.w	8007442 <hex_decode+0x12>
	}

	return 0;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	bc80      	pop	{r7}
 800755e:	4770      	bx	lr

08007560 <simpleserial_init>:


// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 8007564:	4a08      	ldr	r2, [pc, #32]	; (8007588 <simpleserial_init+0x28>)
 8007566:	2100      	movs	r1, #0
 8007568:	2076      	movs	r0, #118	; 0x76
 800756a:	f000 f813 	bl	8007594 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 800756e:	4a07      	ldr	r2, [pc, #28]	; (800758c <simpleserial_init+0x2c>)
 8007570:	2100      	movs	r1, #0
 8007572:	2077      	movs	r0, #119	; 0x77
 8007574:	f000 f80e 	bl	8007594 <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 8007578:	4a05      	ldr	r2, [pc, #20]	; (8007590 <simpleserial_init+0x30>)
 800757a:	2100      	movs	r1, #0
 800757c:	2079      	movs	r0, #121	; 0x79
 800757e:	f000 f809 	bl	8007594 <simpleserial_addcmd>
}
 8007582:	bf00      	nop
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	08007329 	.word	0x08007329
 800758c:	08007371 	.word	0x08007371
 8007590:	08007341 	.word	0x08007341

08007594 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	73fb      	strb	r3, [r7, #15]
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 80075a2:	7bf8      	ldrb	r0, [r7, #15]
 80075a4:	2300      	movs	r3, #0
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	68b9      	ldr	r1, [r7, #8]
 80075aa:	f000 f805 	bl	80075b8 <simpleserial_addcmd_flags>
 80075ae:	4603      	mov	r3, r0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <simpleserial_addcmd_flags>:

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	461a      	mov	r2, r3
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]
 80075c8:	4613      	mov	r3, r2
 80075ca:	73bb      	strb	r3, [r7, #14]
	if(num_commands >= MAX_SS_CMDS)
 80075cc:	4b1a      	ldr	r3, [pc, #104]	; (8007638 <simpleserial_addcmd_flags+0x80>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b0f      	cmp	r3, #15
 80075d2:	dd01      	ble.n	80075d8 <simpleserial_addcmd_flags+0x20>
		return 1;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e029      	b.n	800762c <simpleserial_addcmd_flags+0x74>

	if(len >= MAX_SS_LEN)
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2bff      	cmp	r3, #255	; 0xff
 80075dc:	d901      	bls.n	80075e2 <simpleserial_addcmd_flags+0x2a>
		return 1;
 80075de:	2301      	movs	r3, #1
 80075e0:	e024      	b.n	800762c <simpleserial_addcmd_flags+0x74>

	commands[num_commands].c   = c;
 80075e2:	4b15      	ldr	r3, [pc, #84]	; (8007638 <simpleserial_addcmd_flags+0x80>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a15      	ldr	r2, [pc, #84]	; (800763c <simpleserial_addcmd_flags+0x84>)
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	4413      	add	r3, r2
 80075ec:	7bfa      	ldrb	r2, [r7, #15]
 80075ee:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 80075f0:	4b11      	ldr	r3, [pc, #68]	; (8007638 <simpleserial_addcmd_flags+0x80>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a11      	ldr	r2, [pc, #68]	; (800763c <simpleserial_addcmd_flags+0x84>)
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	4413      	add	r3, r2
 80075fa:	3304      	adds	r3, #4
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 8007600:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <simpleserial_addcmd_flags+0x80>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a0d      	ldr	r2, [pc, #52]	; (800763c <simpleserial_addcmd_flags+0x84>)
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	4413      	add	r3, r2
 800760a:	3308      	adds	r3, #8
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	601a      	str	r2, [r3, #0]
	commands[num_commands].flags = fl;
 8007610:	4b09      	ldr	r3, [pc, #36]	; (8007638 <simpleserial_addcmd_flags+0x80>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a09      	ldr	r2, [pc, #36]	; (800763c <simpleserial_addcmd_flags+0x84>)
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	4413      	add	r3, r2
 800761a:	330c      	adds	r3, #12
 800761c:	7bba      	ldrb	r2, [r7, #14]
 800761e:	701a      	strb	r2, [r3, #0]
	num_commands++;
 8007620:	4b05      	ldr	r3, [pc, #20]	; (8007638 <simpleserial_addcmd_flags+0x80>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3301      	adds	r3, #1
 8007626:	4a04      	ldr	r2, [pc, #16]	; (8007638 <simpleserial_addcmd_flags+0x80>)
 8007628:	6013      	str	r3, [r2, #0]

	return 0;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	2000ab68 	.word	0x2000ab68
 800763c:	2000ab6c 	.word	0x2000ab6c

08007640 <simpleserial_get>:

void simpleserial_get(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8007646:	af00      	add	r7, sp, #0
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 8007648:	f000 f9f8 	bl	8007a3c <getch>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 8007652:	2300      	movs	r3, #0
 8007654:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8007658:	e00e      	b.n	8007678 <simpleserial_get+0x38>
	{
		if(commands[cmd].c == c)
 800765a:	4a68      	ldr	r2, [pc, #416]	; (80077fc <simpleserial_get+0x1bc>)
 800765c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	4413      	add	r3, r2
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 800766a:	429a      	cmp	r2, r3
 800766c:	d00b      	beq.n	8007686 <simpleserial_get+0x46>
	for(cmd = 0; cmd < num_commands; cmd++)
 800766e:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8007672:	3301      	adds	r3, #1
 8007674:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8007678:	4b61      	ldr	r3, [pc, #388]	; (8007800 <simpleserial_get+0x1c0>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8007680:	429a      	cmp	r2, r3
 8007682:	dbea      	blt.n	800765a <simpleserial_get+0x1a>
 8007684:	e000      	b.n	8007688 <simpleserial_get+0x48>
			break;
 8007686:	bf00      	nop
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 8007688:	4b5d      	ldr	r3, [pc, #372]	; (8007800 <simpleserial_get+0x1c0>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8007690:	429a      	cmp	r2, r3
 8007692:	f000 80a6 	beq.w	80077e2 <simpleserial_get+0x1a2>
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8007696:	4a59      	ldr	r2, [pc, #356]	; (80077fc <simpleserial_get+0x1bc>)
 8007698:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	4413      	add	r3, r2
 80076a0:	330c      	adds	r3, #12
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d02d      	beq.n	8007708 <simpleserial_get+0xc8>
	{
		uint8_t l = 0;
 80076ac:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80076b0:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 80076b4:	2200      	movs	r2, #0
 80076b6:	701a      	strb	r2, [r3, #0]
		char buff[2];
		buff[0] = getch();
 80076b8:	f000 f9c0 	bl	8007a3c <getch>
 80076bc:	4603      	mov	r3, r0
 80076be:	461a      	mov	r2, r3
 80076c0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80076c4:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80076c8:	701a      	strb	r2, [r3, #0]
		buff[1] = getch();
 80076ca:	f000 f9b7 	bl	8007a3c <getch>
 80076ce:	4603      	mov	r3, r0
 80076d0:	461a      	mov	r2, r3
 80076d2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80076d6:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80076da:	705a      	strb	r2, [r3, #1]
		if (hex_decode(1, buff, &l))
 80076dc:	1dfa      	adds	r2, r7, #7
 80076de:	1d3b      	adds	r3, r7, #4
 80076e0:	4619      	mov	r1, r3
 80076e2:	2001      	movs	r0, #1
 80076e4:	f7ff fea4 	bl	8007430 <hex_decode>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d17b      	bne.n	80077e6 <simpleserial_get+0x1a6>
			return;
		commands[cmd].len = l;
 80076ee:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80076f2:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	4619      	mov	r1, r3
 80076fa:	4a40      	ldr	r2, [pc, #256]	; (80077fc <simpleserial_get+0x1bc>)
 80076fc:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8007700:	011b      	lsls	r3, r3, #4
 8007702:	4413      	add	r3, r2
 8007704:	3304      	adds	r3, #4
 8007706:	6019      	str	r1, [r3, #0]
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8007708:	2300      	movs	r3, #0
 800770a:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800770e:	e01b      	b.n	8007748 <simpleserial_get+0x108>
	{
		c = getch();
 8007710:	f000 f994 	bl	8007a3c <getch>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

		// Check for early \n
		if(c == '\n' || c == '\r')
 800771a:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800771e:	2b0a      	cmp	r3, #10
 8007720:	d063      	beq.n	80077ea <simpleserial_get+0x1aa>
 8007722:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8007726:	2b0d      	cmp	r3, #13
 8007728:	d05f      	beq.n	80077ea <simpleserial_get+0x1aa>
			return;

		ascii_buf[i] = c;
 800772a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800772e:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8007732:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8007736:	4413      	add	r3, r2
 8007738:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 800773c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 800773e:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8007742:	3301      	adds	r3, #1
 8007744:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8007748:	4a2c      	ldr	r2, [pc, #176]	; (80077fc <simpleserial_get+0x1bc>)
 800774a:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800774e:	011b      	lsls	r3, r3, #4
 8007750:	4413      	add	r3, r2
 8007752:	3304      	adds	r3, #4
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	005a      	lsls	r2, r3, #1
 8007758:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800775c:	429a      	cmp	r2, r3
 800775e:	d8d7      	bhi.n	8007710 <simpleserial_get+0xd0>
	}

	// Assert that last character is \n or \r
	c = getch();
 8007760:	f000 f96c 	bl	8007a3c <getch>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
	if(c != '\n' && c != '\r')
 800776a:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800776e:	2b0a      	cmp	r3, #10
 8007770:	d003      	beq.n	800777a <simpleserial_get+0x13a>
 8007772:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8007776:	2b0d      	cmp	r3, #13
 8007778:	d139      	bne.n	80077ee <simpleserial_get+0x1ae>
		return;

	// ASCII buffer is full: convert to bytes
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 800777a:	4a20      	ldr	r2, [pc, #128]	; (80077fc <simpleserial_get+0x1bc>)
 800777c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	4413      	add	r3, r2
 8007784:	3304      	adds	r3, #4
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f107 020c 	add.w	r2, r7, #12
 800778e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007792:	4619      	mov	r1, r3
 8007794:	f7ff fe4c 	bl	8007430 <hex_decode>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d129      	bne.n	80077f2 <simpleserial_get+0x1b2>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 800779e:	4a17      	ldr	r2, [pc, #92]	; (80077fc <simpleserial_get+0x1bc>)
 80077a0:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	4413      	add	r3, r2
 80077a8:	3308      	adds	r3, #8
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4913      	ldr	r1, [pc, #76]	; (80077fc <simpleserial_get+0x1bc>)
 80077ae:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 80077b2:	0112      	lsls	r2, r2, #4
 80077b4:	440a      	add	r2, r1
 80077b6:	3204      	adds	r2, #4
 80077b8:	6812      	ldr	r2, [r2, #0]
 80077ba:	b2d1      	uxtb	r1, r2
 80077bc:	f107 020c 	add.w	r2, r7, #12
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	4603      	mov	r3, r0
 80077c6:	461a      	mov	r2, r3
 80077c8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80077cc:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80077d0:	701a      	strb	r2, [r3, #0]

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 80077d2:	f107 0308 	add.w	r3, r7, #8
 80077d6:	461a      	mov	r2, r3
 80077d8:	2101      	movs	r1, #1
 80077da:	207a      	movs	r0, #122	; 0x7a
 80077dc:	f000 f812 	bl	8007804 <simpleserial_put>
 80077e0:	e008      	b.n	80077f4 <simpleserial_get+0x1b4>
		return;
 80077e2:	bf00      	nop
 80077e4:	e006      	b.n	80077f4 <simpleserial_get+0x1b4>
			return;
 80077e6:	bf00      	nop
 80077e8:	e004      	b.n	80077f4 <simpleserial_get+0x1b4>
			return;
 80077ea:	bf00      	nop
 80077ec:	e002      	b.n	80077f4 <simpleserial_get+0x1b4>
		return;
 80077ee:	bf00      	nop
 80077f0:	e000      	b.n	80077f4 <simpleserial_get+0x1b4>
		return;
 80077f2:	bf00      	nop
#endif
}
 80077f4:	f507 7746 	add.w	r7, r7, #792	; 0x318
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	2000ab6c 	.word	0x2000ab6c
 8007800:	2000ab68 	.word	0x2000ab68

08007804 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	603a      	str	r2, [r7, #0]
 800780e:	71fb      	strb	r3, [r7, #7]
 8007810:	460b      	mov	r3, r1
 8007812:	71bb      	strb	r3, [r7, #6]
	// Write first character
	putch(c);
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	4618      	mov	r0, r3
 8007818:	f000 f926 	bl	8007a68 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 800781c:	2300      	movs	r3, #0
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	e019      	b.n	8007856 <simpleserial_put+0x52>
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	4413      	add	r3, r2
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	091b      	lsrs	r3, r3, #4
 800782c:	b2db      	uxtb	r3, r3
 800782e:	461a      	mov	r2, r3
 8007830:	4b0e      	ldr	r3, [pc, #56]	; (800786c <simpleserial_put+0x68>)
 8007832:	5c9b      	ldrb	r3, [r3, r2]
 8007834:	4618      	mov	r0, r3
 8007836:	f000 f917 	bl	8007a68 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	4413      	add	r3, r2
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	4a09      	ldr	r2, [pc, #36]	; (800786c <simpleserial_put+0x68>)
 8007848:	5cd3      	ldrb	r3, [r2, r3]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 f90c 	bl	8007a68 <putch>
	for(int i = 0; i < size; i++)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3301      	adds	r3, #1
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	79bb      	ldrb	r3, [r7, #6]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	429a      	cmp	r2, r3
 800785c:	dbe1      	blt.n	8007822 <simpleserial_put+0x1e>
	}

	// Write trailing '\n'
	putch('\n');
 800785e:	200a      	movs	r0, #10
 8007860:	f000 f902 	bl	8007a68 <putch>
}
 8007864:	bf00      	nop
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20000020 	.word	0x20000020

08007870 <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b092      	sub	sp, #72	; 0x48
 8007874:	af00      	add	r7, sp, #0
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_5WS);
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8007876:	2303      	movs	r3, #3
 8007878:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800787a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800787e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 8007880:	2301      	movs	r3, #1
 8007882:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
 8007884:	2302      	movs	r3, #2
 8007886:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8007888:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
 800788e:	230c      	movs	r3, #12
 8007890:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN       = 196;
 8007892:	23c4      	movs	r3, #196	; 0xc4
 8007894:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
 8007896:	2304      	movs	r3, #4
 8007898:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 800789a:	2307      	movs	r3, #7
 800789c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800789e:	f107 0318 	add.w	r3, r7, #24
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 f904 	bl	8007ab0 <HAL_RCC_OscConfig>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d000      	beq.n	80078b0 <platform_init+0x40>
        for(;;);
 80078ae:	e7fe      	b.n	80078ae <platform_init+0x3e>
    }

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80078b0:	230f      	movs	r3, #15
 80078b2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80078b4:	2301      	movs	r3, #1
 80078b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80078b8:	2300      	movs	r3, #0
 80078ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80078bc:	2300      	movs	r3, #0
 80078be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80078c0:	2300      	movs	r3, #0
 80078c2:	617b      	str	r3, [r7, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 80078c4:	1d3b      	adds	r3, r7, #4
 80078c6:	2100      	movs	r1, #0
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fb53 	bl	8007f74 <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 80078ce:	2300      	movs	r3, #0
 80078d0:	603b      	str	r3, [r7, #0]
 80078d2:	4b0c      	ldr	r3, [pc, #48]	; (8007904 <platform_init+0x94>)
 80078d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d6:	4a0b      	ldr	r2, [pc, #44]	; (8007904 <platform_init+0x94>)
 80078d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078dc:	6353      	str	r3, [r2, #52]	; 0x34
 80078de:	4b09      	ldr	r3, [pc, #36]	; (8007904 <platform_init+0x94>)
 80078e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	683b      	ldr	r3, [r7, #0]
	RngHandle.Instance = RNG;
 80078ea:	4b07      	ldr	r3, [pc, #28]	; (8007908 <platform_init+0x98>)
 80078ec:	4a07      	ldr	r2, [pc, #28]	; (800790c <platform_init+0x9c>)
 80078ee:	601a      	str	r2, [r3, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 80078f0:	4b05      	ldr	r3, [pc, #20]	; (8007908 <platform_init+0x98>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	715a      	strb	r2, [r3, #5]
	HAL_RNG_Init(&RngHandle);
 80078f6:	4804      	ldr	r0, [pc, #16]	; (8007908 <platform_init+0x98>)
 80078f8:	f001 f99e 	bl	8008c38 <HAL_RNG_Init>

}
 80078fc:	bf00      	nop
 80078fe:	3748      	adds	r7, #72	; 0x48
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40023800 	.word	0x40023800
 8007908:	2000ac6c 	.word	0x2000ac6c
 800790c:	50060800 	.word	0x50060800

08007910 <init_uart>:

void init_uart(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8007916:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800791a:	60fb      	str	r3, [r7, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 800791c:	2302      	movs	r3, #2
 800791e:	613b      	str	r3, [r7, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 8007920:	2301      	movs	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007924:	2302      	movs	r3, #2
 8007926:	61bb      	str	r3, [r7, #24]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8007928:	2307      	movs	r3, #7
 800792a:	61fb      	str	r3, [r7, #28]
	__GPIOA_CLK_ENABLE();
 800792c:	2300      	movs	r3, #0
 800792e:	60bb      	str	r3, [r7, #8]
 8007930:	4b1e      	ldr	r3, [pc, #120]	; (80079ac <init_uart+0x9c>)
 8007932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007934:	4a1d      	ldr	r2, [pc, #116]	; (80079ac <init_uart+0x9c>)
 8007936:	f043 0301 	orr.w	r3, r3, #1
 800793a:	6313      	str	r3, [r2, #48]	; 0x30
 800793c:	4b1b      	ldr	r3, [pc, #108]	; (80079ac <init_uart+0x9c>)
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	60bb      	str	r3, [r7, #8]
 8007946:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8007948:	f107 030c 	add.w	r3, r7, #12
 800794c:	4619      	mov	r1, r3
 800794e:	4818      	ldr	r0, [pc, #96]	; (80079b0 <init_uart+0xa0>)
 8007950:	f000 fc18 	bl	8008184 <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 8007954:	4b17      	ldr	r3, [pc, #92]	; (80079b4 <init_uart+0xa4>)
 8007956:	4a18      	ldr	r2, [pc, #96]	; (80079b8 <init_uart+0xa8>)
 8007958:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 800795a:	4b16      	ldr	r3, [pc, #88]	; (80079b4 <init_uart+0xa4>)
 800795c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8007960:	605a      	str	r2, [r3, #4]
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8007962:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <init_uart+0xa4>)
 8007964:	2200      	movs	r2, #0
 8007966:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8007968:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <init_uart+0xa4>)
 800796a:	2200      	movs	r2, #0
 800796c:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 800796e:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <init_uart+0xa4>)
 8007970:	2200      	movs	r2, #0
 8007972:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8007974:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <init_uart+0xa4>)
 8007976:	2200      	movs	r2, #0
 8007978:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800797a:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <init_uart+0xa4>)
 800797c:	220c      	movs	r2, #12
 800797e:	615a      	str	r2, [r3, #20]
	__USART1_CLK_ENABLE();
 8007980:	2300      	movs	r3, #0
 8007982:	607b      	str	r3, [r7, #4]
 8007984:	4b09      	ldr	r3, [pc, #36]	; (80079ac <init_uart+0x9c>)
 8007986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007988:	4a08      	ldr	r2, [pc, #32]	; (80079ac <init_uart+0x9c>)
 800798a:	f043 0310 	orr.w	r3, r3, #16
 800798e:	6453      	str	r3, [r2, #68]	; 0x44
 8007990:	4b06      	ldr	r3, [pc, #24]	; (80079ac <init_uart+0x9c>)
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007994:	f003 0310 	and.w	r3, r3, #16
 8007998:	607b      	str	r3, [r7, #4]
 800799a:	687b      	ldr	r3, [r7, #4]
	HAL_UART_Init(&UartHandle);
 800799c:	4805      	ldr	r0, [pc, #20]	; (80079b4 <init_uart+0xa4>)
 800799e:	f000 ffbf 	bl	8008920 <HAL_UART_Init>
}
 80079a2:	bf00      	nop
 80079a4:	3720      	adds	r7, #32
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	40023800 	.word	0x40023800
 80079b0:	40020000 	.word	0x40020000
 80079b4:	2000ac78 	.word	0x2000ac78
 80079b8:	40011000 	.word	0x40011000

080079bc <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE();
 80079c2:	2300      	movs	r3, #0
 80079c4:	603b      	str	r3, [r7, #0]
 80079c6:	4b0f      	ldr	r3, [pc, #60]	; (8007a04 <trigger_setup+0x48>)
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	4a0e      	ldr	r2, [pc, #56]	; (8007a04 <trigger_setup+0x48>)
 80079cc:	f043 0301 	orr.w	r3, r3, #1
 80079d0:	6313      	str	r3, [r2, #48]	; 0x30
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <trigger_setup+0x48>)
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	683b      	ldr	r3, [r7, #0]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
    __GPIOD_CLK_ENABLE();
    HAL_GPIO_Init(GPIOD, &GpioInit);
#else
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
 80079de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079e2:	607b      	str	r3, [r7, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80079e4:	2301      	movs	r3, #1
 80079e6:	60bb      	str	r3, [r7, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80079ec:	2302      	movs	r3, #2
 80079ee:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80079f0:	1d3b      	adds	r3, r7, #4
 80079f2:	4619      	mov	r1, r3
 80079f4:	4804      	ldr	r0, [pc, #16]	; (8007a08 <trigger_setup+0x4c>)
 80079f6:	f000 fbc5 	bl	8008184 <HAL_GPIO_Init>
#endif
}
 80079fa:	bf00      	nop
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	40023800 	.word	0x40023800
 8007a08:	40020000 	.word	0x40020000

08007a0c <trigger_high>:
void trigger_high(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8007a10:	2201      	movs	r2, #1
 8007a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a16:	4802      	ldr	r0, [pc, #8]	; (8007a20 <trigger_high+0x14>)
 8007a18:	f000 fd4e 	bl	80084b8 <HAL_GPIO_WritePin>
#endif
}
 8007a1c:	bf00      	nop
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	40020000 	.word	0x40020000

08007a24 <trigger_low>:

void trigger_low(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a2e:	4802      	ldr	r0, [pc, #8]	; (8007a38 <trigger_low+0x14>)
 8007a30:	f000 fd42 	bl	80084b8 <HAL_GPIO_WritePin>
#endif
}
 8007a34:	bf00      	nop
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	40020000 	.word	0x40020000

08007a3c <getch>:
char getch(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 8007a42:	bf00      	nop
 8007a44:	1df9      	adds	r1, r7, #7
 8007a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	4805      	ldr	r0, [pc, #20]	; (8007a64 <getch+0x28>)
 8007a4e:	f001 f858 	bl	8008b02 <HAL_UART_Receive>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1f5      	bne.n	8007a44 <getch+0x8>
	return d;
 8007a58:	79fb      	ldrb	r3, [r7, #7]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	2000ac78 	.word	0x2000ac78

08007a68 <putch>:

void putch(char c)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	71fb      	strb	r3, [r7, #7]
	uint8_t d  = c;
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8007a76:	f107 010f 	add.w	r1, r7, #15
 8007a7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4803      	ldr	r0, [pc, #12]	; (8007a90 <putch+0x28>)
 8007a82:	f000 ffb4 	bl	80089ee <HAL_UART_Transmit>
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	2000ac78 	.word	0x2000ac78

08007a94 <HAL_GetTick>:

#define CLOCKSWITCH_TIMEOUT_VALUE  5000U /* 5 s */


uint32_t HAL_GetTick(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
	static uint32_t tick;
	return tick++;;
 8007a98:	4b04      	ldr	r3, [pc, #16]	; (8007aac <HAL_GetTick+0x18>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	4903      	ldr	r1, [pc, #12]	; (8007aac <HAL_GetTick+0x18>)
 8007aa0:	600a      	str	r2, [r1, #0]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	2000ad08 	.word	0x2000ad08

08007ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08e      	sub	sp, #56	; 0x38
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d077      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ac8:	4b93      	ldr	r3, [pc, #588]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 030c 	and.w	r3, r3, #12
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d00c      	beq.n	8007aee <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ad4:	4b90      	ldr	r3, [pc, #576]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d112      	bne.n	8007b06 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ae0:	4b8d      	ldr	r3, [pc, #564]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aec:	d10b      	bne.n	8007b06 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aee:	4b8a      	ldr	r3, [pc, #552]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d05d      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x106>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d159      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x106>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e22a      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0e:	d106      	bne.n	8007b1e <HAL_RCC_OscConfig+0x6e>
 8007b10:	4b81      	ldr	r3, [pc, #516]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a80      	ldr	r2, [pc, #512]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	e01d      	b.n	8007b5a <HAL_RCC_OscConfig+0xaa>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b26:	d10c      	bne.n	8007b42 <HAL_RCC_OscConfig+0x92>
 8007b28:	4b7b      	ldr	r3, [pc, #492]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a7a      	ldr	r2, [pc, #488]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	4b78      	ldr	r3, [pc, #480]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a77      	ldr	r2, [pc, #476]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	e00b      	b.n	8007b5a <HAL_RCC_OscConfig+0xaa>
 8007b42:	4b75      	ldr	r3, [pc, #468]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a74      	ldr	r2, [pc, #464]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	4b72      	ldr	r3, [pc, #456]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a71      	ldr	r2, [pc, #452]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d014      	beq.n	8007b8c <HAL_RCC_OscConfig+0xdc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b62:	f7ff ff97 	bl	8007a94 <HAL_GetTick>
 8007b66:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b68:	e009      	b.n	8007b7e <HAL_RCC_OscConfig+0xce>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b6a:	f7ff ff93 	bl	8007a94 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	4a69      	ldr	r2, [pc, #420]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e1ee      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b7e:	4b66      	ldr	r3, [pc, #408]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d0ef      	beq.n	8007b6a <HAL_RCC_OscConfig+0xba>
 8007b8a:	e015      	b.n	8007bb8 <HAL_RCC_OscConfig+0x108>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8c:	f7ff ff82 	bl	8007a94 <HAL_GetTick>
 8007b90:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b92:	e009      	b.n	8007ba8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b94:	f7ff ff7e 	bl	8007a94 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	4a5f      	ldr	r2, [pc, #380]	; (8007d1c <HAL_RCC_OscConfig+0x26c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d901      	bls.n	8007ba8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e1d9      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ba8:	4b5b      	ldr	r3, [pc, #364]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1ef      	bne.n	8007b94 <HAL_RCC_OscConfig+0xe4>
 8007bb4:	e000      	b.n	8007bb8 <HAL_RCC_OscConfig+0x108>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bb6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d077      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x204>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bc4:	4b54      	ldr	r3, [pc, #336]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 030c 	and.w	r3, r3, #12
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bd0:	4b51      	ldr	r3, [pc, #324]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bd8:	2b08      	cmp	r3, #8
 8007bda:	d126      	bne.n	8007c2a <HAL_RCC_OscConfig+0x17a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bdc:	4b4e      	ldr	r3, [pc, #312]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d120      	bne.n	8007c2a <HAL_RCC_OscConfig+0x17a>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007be8:	4b4b      	ldr	r3, [pc, #300]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <HAL_RCC_OscConfig+0x150>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d001      	beq.n	8007c00 <HAL_RCC_OscConfig+0x150>
      {
        return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e1ad      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c00:	4b45      	ldr	r3, [pc, #276]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6919      	ldr	r1, [r3, #16]
 8007c0c:	23f8      	movs	r3, #248	; 0xf8
 8007c0e:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	fa93 f3a3 	rbit	r3, r3
 8007c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	fab3 f383 	clz	r3, r3
 8007c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c22:	493d      	ldr	r1, [pc, #244]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c28:	e044      	b.n	8007cb4 <HAL_RCC_OscConfig+0x204>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d02a      	beq.n	8007c88 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c32:	4b3b      	ldr	r3, [pc, #236]	; (8007d20 <HAL_RCC_OscConfig+0x270>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c38:	f7ff ff2c 	bl	8007a94 <HAL_GetTick>
 8007c3c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c40:	f7ff ff28 	bl	8007a94 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0x1a2>
          {
            return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e184      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c52:	4b31      	ldr	r3, [pc, #196]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0302 	and.w	r3, r3, #2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0f0      	beq.n	8007c40 <HAL_RCC_OscConfig+0x190>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c5e:	4b2e      	ldr	r3, [pc, #184]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6919      	ldr	r1, [r3, #16]
 8007c6a:	23f8      	movs	r3, #248	; 0xf8
 8007c6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	fa93 f3a3 	rbit	r3, r3
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	fab3 f383 	clz	r3, r3
 8007c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c80:	4925      	ldr	r1, [pc, #148]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	600b      	str	r3, [r1, #0]
 8007c86:	e015      	b.n	8007cb4 <HAL_RCC_OscConfig+0x204>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c88:	4b25      	ldr	r3, [pc, #148]	; (8007d20 <HAL_RCC_OscConfig+0x270>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8e:	f7ff ff01 	bl	8007a94 <HAL_GetTick>
 8007c92:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c94:	e008      	b.n	8007ca8 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c96:	f7ff fefd 	bl	8007a94 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d901      	bls.n	8007ca8 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e159      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ca8:	4b1b      	ldr	r3, [pc, #108]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1f0      	bne.n	8007c96 <HAL_RCC_OscConfig+0x1e6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d039      	beq.n	8007d34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d016      	beq.n	8007cf6 <HAL_RCC_OscConfig+0x246>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cc8:	4b16      	ldr	r3, [pc, #88]	; (8007d24 <HAL_RCC_OscConfig+0x274>)
 8007cca:	2201      	movs	r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cce:	f7ff fee1 	bl	8007a94 <HAL_GetTick>
 8007cd2:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCC_OscConfig+0x238>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cd6:	f7ff fedd 	bl	8007a94 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCC_OscConfig+0x238>
        {
          return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e139      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ce8:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <HAL_RCC_OscConfig+0x268>)
 8007cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0f0      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x226>
 8007cf4:	e01e      	b.n	8007d34 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <HAL_RCC_OscConfig+0x274>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfc:	f7ff feca 	bl	8007a94 <HAL_GetTick>
 8007d00:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d02:	e011      	b.n	8007d28 <HAL_RCC_OscConfig+0x278>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d04:	f7ff fec6 	bl	8007a94 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d90a      	bls.n	8007d28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e122      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
 8007d16:	bf00      	nop
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	05f5e100 	.word	0x05f5e100
 8007d20:	42470000 	.word	0x42470000
 8007d24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d28:	4b8e      	ldr	r3, [pc, #568]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e7      	bne.n	8007d04 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d07d      	beq.n	8007e3c <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d40:	2300      	movs	r3, #0
 8007d42:	60bb      	str	r3, [r7, #8]
 8007d44:	4b87      	ldr	r3, [pc, #540]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	4a86      	ldr	r2, [pc, #536]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8007d50:	4b84      	ldr	r3, [pc, #528]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d58:	60bb      	str	r3, [r7, #8]
 8007d5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007d5c:	4b82      	ldr	r3, [pc, #520]	; (8007f68 <HAL_RCC_OscConfig+0x4b8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a81      	ldr	r2, [pc, #516]	; (8007f68 <HAL_RCC_OscConfig+0x4b8>)
 8007d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8007d68:	f7ff fe94 	bl	8007a94 <HAL_GetTick>
 8007d6c:	6378      	str	r0, [r7, #52]	; 0x34

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d6e:	e008      	b.n	8007d82 <HAL_RCC_OscConfig+0x2d2>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007d70:	f7ff fe90 	bl	8007a94 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_OscConfig+0x2d2>
      {
        return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e0ec      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d82:	4b79      	ldr	r3, [pc, #484]	; (8007f68 <HAL_RCC_OscConfig+0x4b8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0f0      	beq.n	8007d70 <HAL_RCC_OscConfig+0x2c0>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d106      	bne.n	8007da4 <HAL_RCC_OscConfig+0x2f4>
 8007d96:	4b73      	ldr	r3, [pc, #460]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9a:	4a72      	ldr	r2, [pc, #456]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007d9c:	f043 0301 	orr.w	r3, r3, #1
 8007da0:	6713      	str	r3, [r2, #112]	; 0x70
 8007da2:	e01c      	b.n	8007dde <HAL_RCC_OscConfig+0x32e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d10c      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x316>
 8007dac:	4b6d      	ldr	r3, [pc, #436]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db0:	4a6c      	ldr	r2, [pc, #432]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007db2:	f043 0304 	orr.w	r3, r3, #4
 8007db6:	6713      	str	r3, [r2, #112]	; 0x70
 8007db8:	4b6a      	ldr	r3, [pc, #424]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dbc:	4a69      	ldr	r2, [pc, #420]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007dc4:	e00b      	b.n	8007dde <HAL_RCC_OscConfig+0x32e>
 8007dc6:	4b67      	ldr	r3, [pc, #412]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dca:	4a66      	ldr	r2, [pc, #408]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007dcc:	f023 0301 	bic.w	r3, r3, #1
 8007dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8007dd2:	4b64      	ldr	r3, [pc, #400]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd6:	4a63      	ldr	r2, [pc, #396]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007dd8:	f023 0304 	bic.w	r3, r3, #4
 8007ddc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d015      	beq.n	8007e12 <HAL_RCC_OscConfig+0x362>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de6:	f7ff fe55 	bl	8007a94 <HAL_GetTick>
 8007dea:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dec:	e00a      	b.n	8007e04 <HAL_RCC_OscConfig+0x354>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dee:	f7ff fe51 	bl	8007a94 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d901      	bls.n	8007e04 <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e0ab      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e04:	4b57      	ldr	r3, [pc, #348]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0ee      	beq.n	8007dee <HAL_RCC_OscConfig+0x33e>
 8007e10:	e014      	b.n	8007e3c <HAL_RCC_OscConfig+0x38c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e12:	f7ff fe3f 	bl	8007a94 <HAL_GetTick>
 8007e16:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e18:	e00a      	b.n	8007e30 <HAL_RCC_OscConfig+0x380>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e1a:	f7ff fe3b 	bl	8007a94 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e095      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e30:	4b4c      	ldr	r3, [pc, #304]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1ee      	bne.n	8007e1a <HAL_RCC_OscConfig+0x36a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 808a 	beq.w	8007f5a <HAL_RCC_OscConfig+0x4aa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e46:	4b47      	ldr	r3, [pc, #284]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f003 030c 	and.w	r3, r3, #12
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	f000 8081 	beq.w	8007f56 <HAL_RCC_OscConfig+0x4a6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d164      	bne.n	8007f26 <HAL_RCC_OscConfig+0x476>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e5c:	4b43      	ldr	r3, [pc, #268]	; (8007f6c <HAL_RCC_OscConfig+0x4bc>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e62:	f7ff fe17 	bl	8007a94 <HAL_GetTick>
 8007e66:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e68:	e009      	b.n	8007e7e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e6a:	f7ff fe13 	bl	8007a94 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	4a3e      	ldr	r2, [pc, #248]	; (8007f70 <HAL_RCC_OscConfig+0x4c0>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e06e      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e7e:	4b39      	ldr	r3, [pc, #228]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1ef      	bne.n	8007e6a <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	69da      	ldr	r2, [r3, #28]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	fa93 f3a3 	rbit	r3, r3
 8007ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	fab3 f383 	clz	r3, r3
 8007eac:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	085b      	lsrs	r3, r3, #1
 8007eb8:	1e59      	subs	r1, r3, #1
 8007eba:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	fa93 f3a3 	rbit	r3, r3
 8007ec6:	617b      	str	r3, [r7, #20]
  return(result);
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	fab3 f383 	clz	r3, r3
 8007ece:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ed8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8007edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	fa93 f3a3 	rbit	r3, r3
 8007ee4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	fab3 f383 	clz	r3, r3
 8007eec:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef0:	491c      	ldr	r1, [pc, #112]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ef6:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <HAL_RCC_OscConfig+0x4bc>)
 8007ef8:	2201      	movs	r2, #1
 8007efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efc:	f7ff fdca 	bl	8007a94 <HAL_GetTick>
 8007f00:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f02:	e009      	b.n	8007f18 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f04:	f7ff fdc6 	bl	8007a94 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	4a18      	ldr	r2, [pc, #96]	; (8007f70 <HAL_RCC_OscConfig+0x4c0>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d901      	bls.n	8007f18 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e021      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f18:	4b12      	ldr	r3, [pc, #72]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d0ef      	beq.n	8007f04 <HAL_RCC_OscConfig+0x454>
 8007f24:	e019      	b.n	8007f5a <HAL_RCC_OscConfig+0x4aa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f26:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <HAL_RCC_OscConfig+0x4bc>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2c:	f7ff fdb2 	bl	8007a94 <HAL_GetTick>
 8007f30:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f32:	e009      	b.n	8007f48 <HAL_RCC_OscConfig+0x498>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f34:	f7ff fdae 	bl	8007a94 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	4a0c      	ldr	r2, [pc, #48]	; (8007f70 <HAL_RCC_OscConfig+0x4c0>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d901      	bls.n	8007f48 <HAL_RCC_OscConfig+0x498>
          {
            return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e009      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f48:	4b06      	ldr	r3, [pc, #24]	; (8007f64 <HAL_RCC_OscConfig+0x4b4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1ef      	bne.n	8007f34 <HAL_RCC_OscConfig+0x484>
 8007f54:	e001      	b.n	8007f5a <HAL_RCC_OscConfig+0x4aa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <HAL_RCC_OscConfig+0x4ac>
    }
  }
  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3738      	adds	r7, #56	; 0x38
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40023800 	.word	0x40023800
 8007f68:	40007000 	.word	0x40007000
 8007f6c:	42470060 	.word	0x42470060
 8007f70:	001e8480 	.word	0x001e8480

08007f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8007f82:	4b74      	ldr	r3, [pc, #464]	; (8008154 <HAL_RCC_ClockConfig+0x1e0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 030f 	and.w	r3, r3, #15
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d90c      	bls.n	8007faa <HAL_RCC_ClockConfig+0x36>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f90:	4b70      	ldr	r3, [pc, #448]	; (8008154 <HAL_RCC_ClockConfig+0x1e0>)
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	b2d2      	uxtb	r2, r2
 8007f96:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007f98:	4b6e      	ldr	r3, [pc, #440]	; (8008154 <HAL_RCC_ClockConfig+0x1e0>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d001      	beq.n	8007faa <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e0cf      	b.n	800814a <HAL_RCC_ClockConfig+0x1d6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d008      	beq.n	8007fc8 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fb6:	4b68      	ldr	r3, [pc, #416]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	4965      	ldr	r1, [pc, #404]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 8086 	beq.w	80080e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d107      	bne.n	8007fee <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fde:	4b5e      	ldr	r3, [pc, #376]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d119      	bne.n	800801e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e0ad      	b.n	800814a <HAL_RCC_ClockConfig+0x1d6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d003      	beq.n	8007ffe <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d107      	bne.n	800800e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ffe:	4b56      	ldr	r3, [pc, #344]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d109      	bne.n	800801e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e09d      	b.n	800814a <HAL_RCC_ClockConfig+0x1d6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800800e:	4b52      	ldr	r3, [pc, #328]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e095      	b.n	800814a <HAL_RCC_ClockConfig+0x1d6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800801e:	4b4e      	ldr	r3, [pc, #312]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f023 0203 	bic.w	r2, r3, #3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	494b      	ldr	r1, [pc, #300]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 800802c:	4313      	orrs	r3, r2
 800802e:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008030:	f7ff fd30 	bl	8007a94 <HAL_GetTick>
 8008034:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d112      	bne.n	8008064 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800803e:	e00a      	b.n	8008056 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008040:	f7ff fd28 	bl	8007a94 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	f241 3288 	movw	r2, #5000	; 0x1388
 800804e:	4293      	cmp	r3, r2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e079      	b.n	800814a <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008056:	4b40      	ldr	r3, [pc, #256]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 030c 	and.w	r3, r3, #12
 800805e:	2b04      	cmp	r3, #4
 8008060:	d1ee      	bne.n	8008040 <HAL_RCC_ClockConfig+0xcc>
 8008062:	e03e      	b.n	80080e2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	2b02      	cmp	r3, #2
 800806a:	d112      	bne.n	8008092 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800806c:	e00a      	b.n	8008084 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800806e:	f7ff fd11 	bl	8007a94 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	f241 3288 	movw	r2, #5000	; 0x1388
 800807c:	4293      	cmp	r3, r2
 800807e:	d901      	bls.n	8008084 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e062      	b.n	800814a <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008084:	4b34      	ldr	r3, [pc, #208]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f003 030c 	and.w	r3, r3, #12
 800808c:	2b08      	cmp	r3, #8
 800808e:	d1ee      	bne.n	800806e <HAL_RCC_ClockConfig+0xfa>
 8008090:	e027      	b.n	80080e2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	2b03      	cmp	r3, #3
 8008098:	d11d      	bne.n	80080d6 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800809a:	e00a      	b.n	80080b2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800809c:	f7ff fcfa 	bl	8007a94 <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e04b      	b.n	800814a <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80080b2:	4b29      	ldr	r3, [pc, #164]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 030c 	and.w	r3, r3, #12
 80080ba:	2b0c      	cmp	r3, #12
 80080bc:	d1ee      	bne.n	800809c <HAL_RCC_ClockConfig+0x128>
 80080be:	e010      	b.n	80080e2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080c0:	f7ff fce8 	bl	8007a94 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e039      	b.n	800814a <HAL_RCC_ClockConfig+0x1d6>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80080d6:	4b20      	ldr	r3, [pc, #128]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 030c 	and.w	r3, r3, #12
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1ee      	bne.n	80080c0 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80080e2:	4b1c      	ldr	r3, [pc, #112]	; (8008154 <HAL_RCC_ClockConfig+0x1e0>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d20c      	bcs.n	800810a <HAL_RCC_ClockConfig+0x196>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080f0:	4b18      	ldr	r3, [pc, #96]	; (8008154 <HAL_RCC_ClockConfig+0x1e0>)
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	b2d2      	uxtb	r2, r2
 80080f6:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80080f8:	4b16      	ldr	r3, [pc, #88]	; (8008154 <HAL_RCC_ClockConfig+0x1e0>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 030f 	and.w	r3, r3, #15
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d001      	beq.n	800810a <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e01f      	b.n	800814a <HAL_RCC_ClockConfig+0x1d6>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0304 	and.w	r3, r3, #4
 8008112:	2b00      	cmp	r3, #0
 8008114:	d008      	beq.n	8008128 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008116:	4b10      	ldr	r3, [pc, #64]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	490d      	ldr	r1, [pc, #52]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8008124:	4313      	orrs	r3, r2
 8008126:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d009      	beq.n	8008148 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008134:	4b08      	ldr	r3, [pc, #32]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	4905      	ldr	r1, [pc, #20]	; (8008158 <HAL_RCC_ClockConfig+0x1e4>)
 8008144:	4313      	orrs	r3, r2
 8008146:	608b      	str	r3, [r1, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	40023c00 	.word	0x40023c00
 8008158:	40023800 	.word	0x40023800

0800815c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
  return 7.37E6;
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <HAL_RCC_GetPCLK1Freq+0x10>)
}
 8008162:	4618      	mov	r0, r3
 8008164:	46bd      	mov	sp, r7
 8008166:	bc80      	pop	{r7}
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	00707510 	.word	0x00707510

08008170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return 7.37E6;
 8008174:	4b02      	ldr	r3, [pc, #8]	; (8008180 <HAL_RCC_GetPCLK2Freq+0x10>)
}
 8008176:	4618      	mov	r0, r3
 8008178:	46bd      	mov	sp, r7
 800817a:	bc80      	pop	{r7}
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	00707510 	.word	0x00707510

08008184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008184:	b480      	push	{r7}
 8008186:	b089      	sub	sp, #36	; 0x24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800818e:	2300      	movs	r3, #0
 8008190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008192:	2300      	movs	r3, #0
 8008194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008196:	2300      	movs	r3, #0
 8008198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800819a:	2300      	movs	r3, #0
 800819c:	61fb      	str	r3, [r7, #28]
 800819e:	e16b      	b.n	8008478 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80081a0:	2201      	movs	r2, #1
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	4013      	ands	r3, r2
 80081b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	f040 815a 	bne.w	8008472 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d003      	beq.n	80081ce <HAL_GPIO_Init+0x4a>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	2b12      	cmp	r3, #18
 80081cc:	d123      	bne.n	8008216 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	08da      	lsrs	r2, r3, #3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3208      	adds	r2, #8
 80081d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f003 0307 	and.w	r3, r3, #7
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	220f      	movs	r2, #15
 80081e6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ea:	43db      	mvns	r3, r3
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	4013      	ands	r3, r2
 80081f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	691a      	ldr	r2, [r3, #16]
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	4313      	orrs	r3, r2
 8008206:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	08da      	lsrs	r2, r3, #3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3208      	adds	r2, #8
 8008210:	69b9      	ldr	r1, [r7, #24]
 8008212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	2203      	movs	r2, #3
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
 8008226:	43db      	mvns	r3, r3
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	4013      	ands	r3, r2
 800822c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f003 0203 	and.w	r2, r3, #3
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	fa02 f303 	lsl.w	r3, r2, r3
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	4313      	orrs	r3, r2
 8008242:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d00b      	beq.n	800826a <HAL_GPIO_Init+0xe6>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2b02      	cmp	r3, #2
 8008258:	d007      	beq.n	800826a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800825e:	2b11      	cmp	r3, #17
 8008260:	d003      	beq.n	800826a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2b12      	cmp	r3, #18
 8008268:	d130      	bne.n	80082cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	2203      	movs	r2, #3
 8008276:	fa02 f303 	lsl.w	r3, r2, r3
 800827a:	43db      	mvns	r3, r3
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	4013      	ands	r3, r2
 8008280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	fa02 f303 	lsl.w	r3, r2, r3
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	4313      	orrs	r3, r2
 8008292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082a0:	2201      	movs	r2, #1
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	fa02 f303 	lsl.w	r3, r2, r3
 80082a8:	43db      	mvns	r3, r3
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	4013      	ands	r3, r2
 80082ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	091b      	lsrs	r3, r3, #4
 80082b6:	f003 0201 	and.w	r2, r3, #1
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	2203      	movs	r2, #3
 80082d8:	fa02 f303 	lsl.w	r3, r2, r3
 80082dc:	43db      	mvns	r3, r3
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	4013      	ands	r3, r2
 80082e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	fa02 f303 	lsl.w	r3, r2, r3
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80b4 	beq.w	8008472 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	4b5f      	ldr	r3, [pc, #380]	; (800848c <HAL_GPIO_Init+0x308>)
 8008310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008312:	4a5e      	ldr	r2, [pc, #376]	; (800848c <HAL_GPIO_Init+0x308>)
 8008314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008318:	6453      	str	r3, [r2, #68]	; 0x44
 800831a:	4b5c      	ldr	r3, [pc, #368]	; (800848c <HAL_GPIO_Init+0x308>)
 800831c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008326:	4a5a      	ldr	r2, [pc, #360]	; (8008490 <HAL_GPIO_Init+0x30c>)
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	089b      	lsrs	r3, r3, #2
 800832c:	3302      	adds	r3, #2
 800832e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f003 0303 	and.w	r3, r3, #3
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	220f      	movs	r2, #15
 800833e:	fa02 f303 	lsl.w	r3, r2, r3
 8008342:	43db      	mvns	r3, r3
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	4013      	ands	r3, r2
 8008348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a51      	ldr	r2, [pc, #324]	; (8008494 <HAL_GPIO_Init+0x310>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d02b      	beq.n	80083aa <HAL_GPIO_Init+0x226>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a50      	ldr	r2, [pc, #320]	; (8008498 <HAL_GPIO_Init+0x314>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d025      	beq.n	80083a6 <HAL_GPIO_Init+0x222>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a4f      	ldr	r2, [pc, #316]	; (800849c <HAL_GPIO_Init+0x318>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d01f      	beq.n	80083a2 <HAL_GPIO_Init+0x21e>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a4e      	ldr	r2, [pc, #312]	; (80084a0 <HAL_GPIO_Init+0x31c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d019      	beq.n	800839e <HAL_GPIO_Init+0x21a>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a4d      	ldr	r2, [pc, #308]	; (80084a4 <HAL_GPIO_Init+0x320>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d013      	beq.n	800839a <HAL_GPIO_Init+0x216>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a4c      	ldr	r2, [pc, #304]	; (80084a8 <HAL_GPIO_Init+0x324>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d00d      	beq.n	8008396 <HAL_GPIO_Init+0x212>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a4b      	ldr	r2, [pc, #300]	; (80084ac <HAL_GPIO_Init+0x328>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d007      	beq.n	8008392 <HAL_GPIO_Init+0x20e>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a4a      	ldr	r2, [pc, #296]	; (80084b0 <HAL_GPIO_Init+0x32c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d101      	bne.n	800838e <HAL_GPIO_Init+0x20a>
 800838a:	2307      	movs	r3, #7
 800838c:	e00e      	b.n	80083ac <HAL_GPIO_Init+0x228>
 800838e:	2308      	movs	r3, #8
 8008390:	e00c      	b.n	80083ac <HAL_GPIO_Init+0x228>
 8008392:	2306      	movs	r3, #6
 8008394:	e00a      	b.n	80083ac <HAL_GPIO_Init+0x228>
 8008396:	2305      	movs	r3, #5
 8008398:	e008      	b.n	80083ac <HAL_GPIO_Init+0x228>
 800839a:	2304      	movs	r3, #4
 800839c:	e006      	b.n	80083ac <HAL_GPIO_Init+0x228>
 800839e:	2303      	movs	r3, #3
 80083a0:	e004      	b.n	80083ac <HAL_GPIO_Init+0x228>
 80083a2:	2302      	movs	r3, #2
 80083a4:	e002      	b.n	80083ac <HAL_GPIO_Init+0x228>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e000      	b.n	80083ac <HAL_GPIO_Init+0x228>
 80083aa:	2300      	movs	r3, #0
 80083ac:	69fa      	ldr	r2, [r7, #28]
 80083ae:	f002 0203 	and.w	r2, r2, #3
 80083b2:	0092      	lsls	r2, r2, #2
 80083b4:	4093      	lsls	r3, r2
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083bc:	4934      	ldr	r1, [pc, #208]	; (8008490 <HAL_GPIO_Init+0x30c>)
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	089b      	lsrs	r3, r3, #2
 80083c2:	3302      	adds	r3, #2
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80083ca:	4b3a      	ldr	r3, [pc, #232]	; (80084b4 <HAL_GPIO_Init+0x330>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	43db      	mvns	r3, r3
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	4013      	ands	r3, r2
 80083d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80083ee:	4a31      	ldr	r2, [pc, #196]	; (80084b4 <HAL_GPIO_Init+0x330>)
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80083f4:	4b2f      	ldr	r3, [pc, #188]	; (80084b4 <HAL_GPIO_Init+0x330>)
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	43db      	mvns	r3, r3
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	4013      	ands	r3, r2
 8008402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	4313      	orrs	r3, r2
 8008416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008418:	4a26      	ldr	r2, [pc, #152]	; (80084b4 <HAL_GPIO_Init+0x330>)
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800841e:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <HAL_GPIO_Init+0x330>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	43db      	mvns	r3, r3
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	4013      	ands	r3, r2
 800842c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008442:	4a1c      	ldr	r2, [pc, #112]	; (80084b4 <HAL_GPIO_Init+0x330>)
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008448:	4b1a      	ldr	r3, [pc, #104]	; (80084b4 <HAL_GPIO_Init+0x330>)
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	43db      	mvns	r3, r3
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	4013      	ands	r3, r2
 8008456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	4313      	orrs	r3, r2
 800846a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800846c:	4a11      	ldr	r2, [pc, #68]	; (80084b4 <HAL_GPIO_Init+0x330>)
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	3301      	adds	r3, #1
 8008476:	61fb      	str	r3, [r7, #28]
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	2b0f      	cmp	r3, #15
 800847c:	f67f ae90 	bls.w	80081a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008480:	bf00      	nop
 8008482:	bf00      	nop
 8008484:	3724      	adds	r7, #36	; 0x24
 8008486:	46bd      	mov	sp, r7
 8008488:	bc80      	pop	{r7}
 800848a:	4770      	bx	lr
 800848c:	40023800 	.word	0x40023800
 8008490:	40013800 	.word	0x40013800
 8008494:	40020000 	.word	0x40020000
 8008498:	40020400 	.word	0x40020400
 800849c:	40020800 	.word	0x40020800
 80084a0:	40020c00 	.word	0x40020c00
 80084a4:	40021000 	.word	0x40021000
 80084a8:	40021400 	.word	0x40021400
 80084ac:	40021800 	.word	0x40021800
 80084b0:	40021c00 	.word	0x40021c00
 80084b4:	40013c00 	.word	0x40013c00

080084b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	807b      	strh	r3, [r7, #2]
 80084c4:	4613      	mov	r3, r2
 80084c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084c8:	787b      	ldrb	r3, [r7, #1]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084ce:	887a      	ldrh	r2, [r7, #2]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80084d4:	e003      	b.n	80084de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80084d6:	887b      	ldrh	r3, [r7, #2]
 80084d8:	041a      	lsls	r2, r3, #16
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	619a      	str	r2, [r3, #24]
}
 80084de:	bf00      	nop
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bc80      	pop	{r7}
 80084e6:	4770      	bx	lr

080084e8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e8:	b5b0      	push	{r4, r5, r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008502:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008524:	f023 030c 	bic.w	r3, r3, #12
 8008528:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689a      	ldr	r2, [r3, #8]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	431a      	orrs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	431a      	orrs	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	4313      	orrs	r3, r2
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = huart->Instance->CR3;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	60fb      	str	r3, [r7, #12]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800855c:	60fb      	str	r3, [r7, #12]

  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008578:	f040 80e4 	bne.w	8008744 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4aab      	ldr	r2, [pc, #684]	; (8008830 <UART_SetConfig+0x348>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d004      	beq.n	8008590 <UART_SetConfig+0xa8>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4aaa      	ldr	r2, [pc, #680]	; (8008834 <UART_SetConfig+0x34c>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d16c      	bne.n	800866a <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008590:	f7ff fdee 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 8008594:	4602      	mov	r2, r0
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009a      	lsls	r2, r3, #2
 800859e:	441a      	add	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085aa:	4aa3      	ldr	r2, [pc, #652]	; (8008838 <UART_SetConfig+0x350>)
 80085ac:	fba2 2303 	umull	r2, r3, r2, r3
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	011c      	lsls	r4, r3, #4
 80085b4:	f7ff fddc 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 80085b8:	4602      	mov	r2, r0
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	009a      	lsls	r2, r3, #2
 80085c2:	441a      	add	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80085ce:	f7ff fdcf 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 80085d2:	4602      	mov	r2, r0
 80085d4:	4613      	mov	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	009a      	lsls	r2, r3, #2
 80085dc:	441a      	add	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e8:	4a93      	ldr	r2, [pc, #588]	; (8008838 <UART_SetConfig+0x350>)
 80085ea:	fba2 2303 	umull	r2, r3, r2, r3
 80085ee:	095b      	lsrs	r3, r3, #5
 80085f0:	2264      	movs	r2, #100	; 0x64
 80085f2:	fb02 f303 	mul.w	r3, r2, r3
 80085f6:	1aeb      	subs	r3, r5, r3
 80085f8:	00db      	lsls	r3, r3, #3
 80085fa:	3332      	adds	r3, #50	; 0x32
 80085fc:	4a8e      	ldr	r2, [pc, #568]	; (8008838 <UART_SetConfig+0x350>)
 80085fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008602:	095b      	lsrs	r3, r3, #5
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800860a:	441c      	add	r4, r3
 800860c:	f7ff fdb0 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 8008610:	4602      	mov	r2, r0
 8008612:	4613      	mov	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	009a      	lsls	r2, r3, #2
 800861a:	441a      	add	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	fbb2 f5f3 	udiv	r5, r2, r3
 8008626:	f7ff fda3 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 800862a:	4602      	mov	r2, r0
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009a      	lsls	r2, r3, #2
 8008634:	441a      	add	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008640:	4a7d      	ldr	r2, [pc, #500]	; (8008838 <UART_SetConfig+0x350>)
 8008642:	fba2 2303 	umull	r2, r3, r2, r3
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	2264      	movs	r2, #100	; 0x64
 800864a:	fb02 f303 	mul.w	r3, r2, r3
 800864e:	1aeb      	subs	r3, r5, r3
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	3332      	adds	r3, #50	; 0x32
 8008654:	4a78      	ldr	r2, [pc, #480]	; (8008838 <UART_SetConfig+0x350>)
 8008656:	fba2 2303 	umull	r2, r3, r2, r3
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	f003 0207 	and.w	r2, r3, #7
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4422      	add	r2, r4
 8008666:	609a      	str	r2, [r3, #8]
 8008668:	e154      	b.n	8008914 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800866a:	f7ff fd77 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 800866e:	4602      	mov	r2, r0
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009a      	lsls	r2, r3, #2
 8008678:	441a      	add	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	fbb2 f3f3 	udiv	r3, r2, r3
 8008684:	4a6c      	ldr	r2, [pc, #432]	; (8008838 <UART_SetConfig+0x350>)
 8008686:	fba2 2303 	umull	r2, r3, r2, r3
 800868a:	095b      	lsrs	r3, r3, #5
 800868c:	011c      	lsls	r4, r3, #4
 800868e:	f7ff fd65 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 8008692:	4602      	mov	r2, r0
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009a      	lsls	r2, r3, #2
 800869c:	441a      	add	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80086a8:	f7ff fd58 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 80086ac:	4602      	mov	r2, r0
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	009a      	lsls	r2, r3, #2
 80086b6:	441a      	add	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c2:	4a5d      	ldr	r2, [pc, #372]	; (8008838 <UART_SetConfig+0x350>)
 80086c4:	fba2 2303 	umull	r2, r3, r2, r3
 80086c8:	095b      	lsrs	r3, r3, #5
 80086ca:	2264      	movs	r2, #100	; 0x64
 80086cc:	fb02 f303 	mul.w	r3, r2, r3
 80086d0:	1aeb      	subs	r3, r5, r3
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	3332      	adds	r3, #50	; 0x32
 80086d6:	4a58      	ldr	r2, [pc, #352]	; (8008838 <UART_SetConfig+0x350>)
 80086d8:	fba2 2303 	umull	r2, r3, r2, r3
 80086dc:	095b      	lsrs	r3, r3, #5
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086e4:	441c      	add	r4, r3
 80086e6:	f7ff fd39 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 80086ea:	4602      	mov	r2, r0
 80086ec:	4613      	mov	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	009a      	lsls	r2, r3, #2
 80086f4:	441a      	add	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	fbb2 f5f3 	udiv	r5, r2, r3
 8008700:	f7ff fd2c 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 8008704:	4602      	mov	r2, r0
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009a      	lsls	r2, r3, #2
 800870e:	441a      	add	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	fbb2 f3f3 	udiv	r3, r2, r3
 800871a:	4a47      	ldr	r2, [pc, #284]	; (8008838 <UART_SetConfig+0x350>)
 800871c:	fba2 2303 	umull	r2, r3, r2, r3
 8008720:	095b      	lsrs	r3, r3, #5
 8008722:	2264      	movs	r2, #100	; 0x64
 8008724:	fb02 f303 	mul.w	r3, r2, r3
 8008728:	1aeb      	subs	r3, r5, r3
 800872a:	00db      	lsls	r3, r3, #3
 800872c:	3332      	adds	r3, #50	; 0x32
 800872e:	4a42      	ldr	r2, [pc, #264]	; (8008838 <UART_SetConfig+0x350>)
 8008730:	fba2 2303 	umull	r2, r3, r2, r3
 8008734:	095b      	lsrs	r3, r3, #5
 8008736:	f003 0207 	and.w	r2, r3, #7
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4422      	add	r2, r4
 8008740:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8008742:	e0e7      	b.n	8008914 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a39      	ldr	r2, [pc, #228]	; (8008830 <UART_SetConfig+0x348>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d004      	beq.n	8008758 <UART_SetConfig+0x270>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a38      	ldr	r2, [pc, #224]	; (8008834 <UART_SetConfig+0x34c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d171      	bne.n	800883c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008758:	f7ff fd0a 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 800875c:	4602      	mov	r2, r0
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	009a      	lsls	r2, r3, #2
 8008766:	441a      	add	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008772:	4a31      	ldr	r2, [pc, #196]	; (8008838 <UART_SetConfig+0x350>)
 8008774:	fba2 2303 	umull	r2, r3, r2, r3
 8008778:	095b      	lsrs	r3, r3, #5
 800877a:	011c      	lsls	r4, r3, #4
 800877c:	f7ff fcf8 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 8008780:	4602      	mov	r2, r0
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009a      	lsls	r2, r3, #2
 800878a:	441a      	add	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	fbb2 f5f3 	udiv	r5, r2, r3
 8008796:	f7ff fceb 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 800879a:	4602      	mov	r2, r0
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009a      	lsls	r2, r3, #2
 80087a4:	441a      	add	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b0:	4a21      	ldr	r2, [pc, #132]	; (8008838 <UART_SetConfig+0x350>)
 80087b2:	fba2 2303 	umull	r2, r3, r2, r3
 80087b6:	095b      	lsrs	r3, r3, #5
 80087b8:	2264      	movs	r2, #100	; 0x64
 80087ba:	fb02 f303 	mul.w	r3, r2, r3
 80087be:	1aeb      	subs	r3, r5, r3
 80087c0:	011b      	lsls	r3, r3, #4
 80087c2:	3332      	adds	r3, #50	; 0x32
 80087c4:	4a1c      	ldr	r2, [pc, #112]	; (8008838 <UART_SetConfig+0x350>)
 80087c6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ca:	095b      	lsrs	r3, r3, #5
 80087cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087d0:	441c      	add	r4, r3
 80087d2:	f7ff fccd 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 80087d6:	4602      	mov	r2, r0
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009a      	lsls	r2, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80087ec:	f7ff fcc0 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 80087f0:	4602      	mov	r2, r0
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009a      	lsls	r2, r3, #2
 80087fa:	441a      	add	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	fbb2 f3f3 	udiv	r3, r2, r3
 8008806:	4a0c      	ldr	r2, [pc, #48]	; (8008838 <UART_SetConfig+0x350>)
 8008808:	fba2 2303 	umull	r2, r3, r2, r3
 800880c:	095b      	lsrs	r3, r3, #5
 800880e:	2264      	movs	r2, #100	; 0x64
 8008810:	fb02 f303 	mul.w	r3, r2, r3
 8008814:	1aeb      	subs	r3, r5, r3
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	3332      	adds	r3, #50	; 0x32
 800881a:	4a07      	ldr	r2, [pc, #28]	; (8008838 <UART_SetConfig+0x350>)
 800881c:	fba2 2303 	umull	r2, r3, r2, r3
 8008820:	095b      	lsrs	r3, r3, #5
 8008822:	f003 020f 	and.w	r2, r3, #15
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4422      	add	r2, r4
 800882c:	609a      	str	r2, [r3, #8]
 800882e:	e071      	b.n	8008914 <UART_SetConfig+0x42c>
 8008830:	40011000 	.word	0x40011000
 8008834:	40011400 	.word	0x40011400
 8008838:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800883c:	f7ff fc8e 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 8008840:	4602      	mov	r2, r0
 8008842:	4613      	mov	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	009a      	lsls	r2, r3, #2
 800884a:	441a      	add	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	fbb2 f3f3 	udiv	r3, r2, r3
 8008856:	4a31      	ldr	r2, [pc, #196]	; (800891c <UART_SetConfig+0x434>)
 8008858:	fba2 2303 	umull	r2, r3, r2, r3
 800885c:	095b      	lsrs	r3, r3, #5
 800885e:	011c      	lsls	r4, r3, #4
 8008860:	f7ff fc7c 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 8008864:	4602      	mov	r2, r0
 8008866:	4613      	mov	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	009a      	lsls	r2, r3, #2
 800886e:	441a      	add	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	fbb2 f5f3 	udiv	r5, r2, r3
 800887a:	f7ff fc6f 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 800887e:	4602      	mov	r2, r0
 8008880:	4613      	mov	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	009a      	lsls	r2, r3, #2
 8008888:	441a      	add	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	fbb2 f3f3 	udiv	r3, r2, r3
 8008894:	4a21      	ldr	r2, [pc, #132]	; (800891c <UART_SetConfig+0x434>)
 8008896:	fba2 2303 	umull	r2, r3, r2, r3
 800889a:	095b      	lsrs	r3, r3, #5
 800889c:	2264      	movs	r2, #100	; 0x64
 800889e:	fb02 f303 	mul.w	r3, r2, r3
 80088a2:	1aeb      	subs	r3, r5, r3
 80088a4:	011b      	lsls	r3, r3, #4
 80088a6:	3332      	adds	r3, #50	; 0x32
 80088a8:	4a1c      	ldr	r2, [pc, #112]	; (800891c <UART_SetConfig+0x434>)
 80088aa:	fba2 2303 	umull	r2, r3, r2, r3
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088b4:	441c      	add	r4, r3
 80088b6:	f7ff fc51 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 80088ba:	4602      	mov	r2, r0
 80088bc:	4613      	mov	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	009a      	lsls	r2, r3, #2
 80088c4:	441a      	add	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80088d0:	f7ff fc44 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 80088d4:	4602      	mov	r2, r0
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009a      	lsls	r2, r3, #2
 80088de:	441a      	add	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ea:	4a0c      	ldr	r2, [pc, #48]	; (800891c <UART_SetConfig+0x434>)
 80088ec:	fba2 2303 	umull	r2, r3, r2, r3
 80088f0:	095b      	lsrs	r3, r3, #5
 80088f2:	2264      	movs	r2, #100	; 0x64
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	1aeb      	subs	r3, r5, r3
 80088fa:	011b      	lsls	r3, r3, #4
 80088fc:	3332      	adds	r3, #50	; 0x32
 80088fe:	4a07      	ldr	r2, [pc, #28]	; (800891c <UART_SetConfig+0x434>)
 8008900:	fba2 2303 	umull	r2, r3, r2, r3
 8008904:	095b      	lsrs	r3, r3, #5
 8008906:	f003 020f 	and.w	r2, r3, #15
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4422      	add	r2, r4
 8008910:	609a      	str	r2, [r3, #8]
}
 8008912:	e7ff      	b.n	8008914 <UART_SetConfig+0x42c>
 8008914:	bf00      	nop
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bdb0      	pop	{r4, r5, r7, pc}
 800891c:	51eb851f 	.word	0x51eb851f

08008920 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e03c      	b.n	80089ac <HAL_UART_Init+0x8c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d103      	bne.n	8008946 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2224      	movs	r2, #36	; 0x24
 800894a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800895c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff fdc2 	bl	80084e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	691a      	ldr	r2, [r3, #16]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008972:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	695a      	ldr	r2, [r3, #20]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008982:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008992:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <UART_WaitOnFlagForever>:

static HAL_StatusTypeDef UART_WaitOnFlagForever(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4613      	mov	r3, r2
 80089c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80089c2:	bf00      	nop
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	4013      	ands	r3, r2
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	bf0c      	ite	eq
 80089d4:	2301      	moveq	r3, #1
 80089d6:	2300      	movne	r3, #0
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	461a      	mov	r2, r3
 80089dc:	79fb      	ldrb	r3, [r7, #7]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d0f0      	beq.n	80089c4 <UART_WaitOnFlagForever+0x10>
  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bc80      	pop	{r7}
 80089ec:	4770      	bx	lr

080089ee <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b086      	sub	sp, #24
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	603b      	str	r3, [r7, #0]
 80089fa:	4613      	mov	r3, r2
 80089fc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	d176      	bne.n	8008af8 <HAL_UART_Transmit+0x10a>
  {
    if((pData == NULL ) || (Size == 0))
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <HAL_UART_Transmit+0x28>
 8008a10:	88fb      	ldrh	r3, [r7, #6]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e06f      	b.n	8008afa <HAL_UART_Transmit+0x10c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d101      	bne.n	8008a28 <HAL_UART_Transmit+0x3a>
 8008a24:	2302      	movs	r3, #2
 8008a26:	e068      	b.n	8008afa <HAL_UART_Transmit+0x10c>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2221      	movs	r2, #33	; 0x21
 8008a3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	88fa      	ldrh	r2, [r7, #6]
 8008a42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	88fa      	ldrh	r2, [r7, #6]
 8008a48:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8008a4a:	e03c      	b.n	8008ac6 <HAL_UART_Transmit+0xd8>
    {
      huart->TxXferCount--;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	3b01      	subs	r3, #1
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a62:	d11f      	bne.n	8008aa4 <HAL_UART_Transmit+0xb6>
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 8008a64:	2200      	movs	r2, #0
 8008a66:	2180      	movs	r1, #128	; 0x80
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7ff ffa3 	bl	80089b4 <UART_WaitOnFlagForever>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <HAL_UART_Transmit+0x8a>
        {
          return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e040      	b.n	8008afa <HAL_UART_Transmit+0x10c>
        }
        tmp = (uint16_t*) pData;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	617b      	str	r3, [r7, #20]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	461a      	mov	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a8a:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d103      	bne.n	8008a9c <HAL_UART_Transmit+0xae>
        {
          pData +=2U;
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3302      	adds	r3, #2
 8008a98:	60bb      	str	r3, [r7, #8]
 8008a9a:	e014      	b.n	8008ac6 <HAL_UART_Transmit+0xd8>
        }
        else
        {
          pData +=1U;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60bb      	str	r3, [r7, #8]
 8008aa2:	e010      	b.n	8008ac6 <HAL_UART_Transmit+0xd8>
        }
      }
      else
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2180      	movs	r1, #128	; 0x80
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f7ff ff83 	bl	80089b4 <UART_WaitOnFlagForever>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <HAL_UART_Transmit+0xca>
        {
          return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e020      	b.n	8008afa <HAL_UART_Transmit+0x10c>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	60ba      	str	r2, [r7, #8]
 8008abe:	781a      	ldrb	r2, [r3, #0]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1bd      	bne.n	8008a4c <HAL_UART_Transmit+0x5e>
      }
    }

    if(UART_WaitOnFlagForever(huart, UART_FLAG_TC, RESET) != HAL_OK)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2140      	movs	r1, #64	; 0x40
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f7ff ff6d 	bl	80089b4 <UART_WaitOnFlagForever>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e00a      	b.n	8008afa <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	e000      	b.n	8008afa <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008af8:	2302      	movs	r3, #2
  }
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b086      	sub	sp, #24
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	603b      	str	r3, [r7, #0]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b20      	cmp	r3, #32
 8008b1c:	f040 8087 	bne.w	8008c2e <HAL_UART_Receive+0x12c>
  {
    if((pData == NULL ) || (Size == 0))
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <HAL_UART_Receive+0x2a>
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e07f      	b.n	8008c30 <HAL_UART_Receive+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d101      	bne.n	8008b3e <HAL_UART_Receive+0x3c>
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	e078      	b.n	8008c30 <HAL_UART_Receive+0x12e>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2222      	movs	r2, #34	; 0x22
 8008b50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	88fa      	ldrh	r2, [r7, #6]
 8008b58:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	88fa      	ldrh	r2, [r7, #6]
 8008b5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8008b60:	e056      	b.n	8008c10 <HAL_UART_Receive+0x10e>
    {
      huart->RxXferCount--;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b78:	d128      	bne.n	8008bcc <HAL_UART_Receive+0xca>
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2120      	movs	r1, #32
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7ff ff18 	bl	80089b4 <UART_WaitOnFlagForever>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <HAL_UART_Receive+0x8c>
        {
          return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e050      	b.n	8008c30 <HAL_UART_Receive+0x12e>
        }
        tmp = (uint16_t*) pData;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	617b      	str	r3, [r7, #20]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10c      	bne.n	8008bb4 <HAL_UART_Receive+0xb2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	3302      	adds	r3, #2
 8008bb0:	60bb      	str	r3, [r7, #8]
 8008bb2:	e02d      	b.n	8008c10 <HAL_UART_Receive+0x10e>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	60bb      	str	r3, [r7, #8]
 8008bca:	e021      	b.n	8008c10 <HAL_UART_Receive+0x10e>
        }

      }
      else
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2120      	movs	r1, #32
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff feef 	bl	80089b4 <UART_WaitOnFlagForever>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <HAL_UART_Receive+0xde>
        {
          return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e027      	b.n	8008c30 <HAL_UART_Receive+0x12e>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d108      	bne.n	8008bfa <HAL_UART_Receive+0xf8>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6859      	ldr	r1, [r3, #4]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	60ba      	str	r2, [r7, #8]
 8008bf4:	b2ca      	uxtb	r2, r1
 8008bf6:	701a      	strb	r2, [r3, #0]
 8008bf8:	e00a      	b.n	8008c10 <HAL_UART_Receive+0x10e>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	1c59      	adds	r1, r3, #1
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c0c:	b2d2      	uxtb	r2, r2
 8008c0e:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1a3      	bne.n	8008b62 <HAL_UART_Receive+0x60>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e000      	b.n	8008c30 <HAL_UART_Receive+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8008c2e:	2302      	movs	r3, #2
  }
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_RNG_Init>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e025      	b.n	8008c96 <HAL_RNG_Init+0x5e>
  }
  
  __HAL_LOCK(hrng);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	791b      	ldrb	r3, [r3, #4]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_RNG_Init+0x1e>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e01f      	b.n	8008c96 <HAL_RNG_Init+0x5e>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	711a      	strb	r2, [r3, #4]
  
  if(hrng->State == HAL_RNG_STATE_RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	795b      	ldrb	r3, [r3, #5]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d105      	bne.n	8008c72 <HAL_RNG_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f816 	bl	8008c9e <HAL_RNG_MspInit>
  }
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2202      	movs	r2, #2
 8008c76:	715a      	strb	r2, [r3, #5]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0204 	orr.w	r2, r2, #4
 8008c86:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	715a      	strb	r2, [r3, #5]
  
  __HAL_UNLOCK(hrng);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <HAL_RNG_MspInit>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8008ca6:	bf00      	nop
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bc80      	pop	{r7}
 8008cae:	4770      	bx	lr

08008cb0 <Reset_Handler>:
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	e003      	b.n	8008cbc <LoopCopyDataInit>

08008cb4 <CopyDataInit>:
 8008cb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <LoopForever+0x2>)
 8008cb6:	585b      	ldr	r3, [r3, r1]
 8008cb8:	5043      	str	r3, [r0, r1]
 8008cba:	3104      	adds	r1, #4

08008cbc <LoopCopyDataInit>:
 8008cbc:	480a      	ldr	r0, [pc, #40]	; (8008ce8 <LoopForever+0x6>)
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <LoopForever+0xa>)
 8008cc0:	1842      	adds	r2, r0, r1
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d3f6      	bcc.n	8008cb4 <CopyDataInit>
 8008cc6:	4a0a      	ldr	r2, [pc, #40]	; (8008cf0 <LoopForever+0xe>)
 8008cc8:	e002      	b.n	8008cd0 <LoopFillZerobss>

08008cca <FillZerobss>:
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	3204      	adds	r2, #4

08008cd0 <LoopFillZerobss>:
 8008cd0:	4b08      	ldr	r3, [pc, #32]	; (8008cf4 <LoopForever+0x12>)
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d3f9      	bcc.n	8008cca <FillZerobss>
 8008cd6:	f3af 8000 	nop.w
 8008cda:	f7f7 fab5 	bl	8000248 <__libc_init_array>
 8008cde:	f7f7 fbcf 	bl	8000480 <main>

08008ce2 <LoopForever>:
 8008ce2:	e7fe      	b.n	8008ce2 <LoopForever>
 8008ce4:	080091f8 	.word	0x080091f8
 8008ce8:	20000000 	.word	0x20000000
 8008cec:	20000460 	.word	0x20000460
 8008cf0:	20000460 	.word	0x20000460
 8008cf4:	2000ad0c 	.word	0x2000ad0c

08008cf8 <BusFault_Handler>:
 8008cf8:	e7fe      	b.n	8008cf8 <BusFault_Handler>
 8008cfa:	0000      	movs	r0, r0

08008cfc <register_fini>:
 8008cfc:	4b02      	ldr	r3, [pc, #8]	; (8008d08 <register_fini+0xc>)
 8008cfe:	b113      	cbz	r3, 8008d06 <register_fini+0xa>
 8008d00:	4802      	ldr	r0, [pc, #8]	; (8008d0c <register_fini+0x10>)
 8008d02:	f7f7 ba85 	b.w	8000210 <atexit>
 8008d06:	4770      	bx	lr
 8008d08:	00000000 	.word	0x00000000
 8008d0c:	0800021d 	.word	0x0800021d

08008d10 <_init>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr

08008d1c <_fini>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	bf00      	nop
 8008d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d22:	bc08      	pop	{r3}
 8008d24:	469e      	mov	lr, r3
 8008d26:	4770      	bx	lr
