   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	m
  16              		.bss
  17              		.align	2
  20              	m:
  21 0000 00000000 		.space	32
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.global	smlen
  23              		.align	2
  26              	smlen:
  27 0020 00000000 		.space	4
  28              		.global	sm
  29              		.align	2
  32              	sm:
  33 0024 00000000 		.space	2452
  33      00000000 
  33      00000000 
  33      00000000 
  33      00000000 
  34              		.global	m2
  35              		.align	2
  38              	m2:
  39 09b8 00000000 		.space	2452
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              		.global	pk
  41              		.align	2
  44              	pk:
  45 134c 00000000 		.space	1312
  45      00000000 
  45      00000000 
  45      00000000 
  45      00000000 
  46              		.global	sk
  47              		.align	2
  50              	sk:
  51 186c 00000000 		.space	2528
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.global	c
  53              		.align	2
  56              	c:
  57 224c 00000000 		.space	32
  57      00000000 
  57      00000000 
  57      00000000 
  57      00000000 
  58              		.global	rho
  59              		.align	2
  62              	rho:
  63 226c 00000000 		.space	32
  63      00000000 
  63      00000000 
  63      00000000 
  63      00000000 
  64              		.global	rhop
  65              		.align	2
  68              	rhop:
  69 228c 00000000 		.space	32
  69      00000000 
  69      00000000 
  69      00000000 
  69      00000000 
  70              		.global	tr
  71              		.align	2
  74              	tr:
  75 22ac 00000000 		.space	32
  75      00000000 
  75      00000000 
  75      00000000 
  75      00000000 
  76              		.global	key
  77              		.align	2
  80              	key:
  81 22cc 00000000 		.space	32
  81      00000000 
  81      00000000 
  81      00000000 
  81      00000000 
  82              		.global	t1
  83              		.align	2
  86              	t1:
  87 22ec 00000000 		.space	4096
  87      00000000 
  87      00000000 
  87      00000000 
  87      00000000 
  88              		.global	h
  89              		.align	2
  92              	h:
  93 32ec 00000000 		.space	4096
  93      00000000 
  93      00000000 
  93      00000000 
  93      00000000 
  94              		.global	t0
  95              		.align	2
  98              	t0:
  99 42ec 00000000 		.space	4096
  99      00000000 
  99      00000000 
  99      00000000 
  99      00000000 
 100              		.global	s2
 101              		.align	2
 104              	s2:
 105 52ec 00000000 		.space	4096
 105      00000000 
 105      00000000 
 105      00000000 
 105      00000000 
 106              		.global	z
 107              		.align	2
 110              	z:
 111 62ec 00000000 		.space	4096
 111      00000000 
 111      00000000 
 111      00000000 
 111      00000000 
 112              		.global	s1
 113              		.align	2
 116              	s1:
 117 72ec 00000000 		.space	4096
 117      00000000 
 117      00000000 
 117      00000000 
 117      00000000 
 118              		.global	temp
 119              		.align	2
 122              	temp:
 123 82ec 00000000 		.space	4096
 123      00000000 
 123      00000000 
 123      00000000 
 123      00000000 
 124              		.global	cp
 125              		.align	2
 128              	cp:
 129 92ec 00000000 		.space	1024
 129      00000000 
 129      00000000 
 129      00000000 
 129      00000000 
 130              		.global	SEED
 131              		.data
 132              		.align	2
 135              	SEED:
 136 0000 3E809EC8 		.ascii	">\200\236\310\335\017\354\015\221\032N?\254 \367\017"
 136      DD0FEC0D 
 136      911A4E3F 
 136      AC20F70F 
 137 0010 BB128C5D 		.ascii	"\273\022\214]\351M\307\030L\2471\012\351\025z\230"
 137      E94DC718 
 137      4CA7310A 
 137      E9157A98 
 138              		.section	.text.get_msg,"ax",%progbits
 139              		.align	1
 140              		.global	get_msg
 141              		.arch armv7e-m
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu softvfp
 147              	get_msg:
 148              	.LFB3:
 149              		.file 1 "main.c"
   1:main.c        **** #include <stddef.h>
   2:main.c        **** #include <stdlib.h>
   3:main.c        **** #include <stdint.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <string.h>
   6:main.c        **** #include "randombytes.h"
   7:main.c        **** #include "sign.h"
   8:main.c        **** #include "polyvec.h"
   9:main.c        **** #include "packing.h"
  10:main.c        **** 
  11:main.c        **** #define MLEN 32
  12:main.c        **** #define NTESTS 1
  13:main.c        **** 
  14:main.c        **** uint8_t m[MLEN];
  15:main.c        **** size_t smlen;
  16:main.c        **** //uint8_t m[MLEN] = {0}; //这里不要修改
  17:main.c        **** uint8_t sm[MLEN + CRYPTO_BYTES]; //签名后的 2420 + MLEN = 2453
  18:main.c        **** uint8_t m2[MLEN + CRYPTO_BYTES];
  19:main.c        **** uint8_t pk[CRYPTO_PUBLICKEYBYTES];//1312 = 5* 255+37
  20:main.c        **** uint8_t sk[CRYPTO_SECRETKEYBYTES];//2528
  21:main.c        **** uint8_t c[SEEDBYTES];
  22:main.c        **** uint8_t rho[SEEDBYTES];
  23:main.c        **** uint8_t rhop[SEEDBYTES];
  24:main.c        **** uint8_t tr[SEEDBYTES];
  25:main.c        **** uint8_t key[SEEDBYTES];
  26:main.c        **** polyveck t1,h,t0,s2;
  27:main.c        **** polyvecl z,s1,temp;
  28:main.c        **** poly cp;
  29:main.c        ****   //这是官方的seed用来验证
  30:main.c        ****   //uint8_t SEED[SEEDBYTES]={0x7c,0x99,0x35,0xa0,0xb0,0x76,0x94,0xaa,0x0c,0x6d,0x10,0xe4,0xdb,0x6b,
  31:main.c        **** 
  32:main.c        ****   //这是batch0的seed
  33:main.c        ****   //uint8_t SEED[SEEDBYTES] = {0x06,0x10,0x67,0x8f,0xf4,0xdc,0x31,0x28,0xe1,0x61,0x9f,0x91,0x5d,0xc
  34:main.c        ****   //uint8_t SEED[SEEDBYTES] = {0xef,0x99,0x22,0x4a,0x03,0xa8,0x5a,0x46,0xef,0x11,0x54,0x74,0xec,0x5
  35:main.c        ****   //uint8_t SEED[SEEDBYTES] = {0x9f,0x52,0xaf,0x92,0xca,0x16,0x5f,0xdc,0x38,0x78,0x8f,0x2b,0x59,0xb
  36:main.c        ****   //uint8_t SEED[SEEDBYTES] = {0x61,0x0a,0xfb,0x64,0xbe,0x8c,0xc1,0xdf,0x28,0x8c,0xfb,0x01,0x6e,0xe
  37:main.c        **** uint8_t SEED[SEEDBYTES] = {0x3e,0x80,0x9e,0xc8,0xdd,0x0f,0xec,0x0d,0x91,0x1a,0x4e,0x3f,0xac,0x20,0x
  38:main.c        **** 
  39:main.c        **** uint8_t get_msg(uint8_t* data, uint8_t dlen)
  40:main.c        **** {
 150              		.loc 1 40 1
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 8
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154 0000 80B5     		push	{r7, lr}
 155              	.LCFI0:
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 7, -8
 158              		.cfi_offset 14, -4
 159 0002 84B0     		sub	sp, sp, #16
 160              	.LCFI1:
 161              		.cfi_def_cfa_offset 24
 162 0004 02AF     		add	r7, sp, #8
 163              	.LCFI2:
 164              		.cfi_def_cfa 7, 16
 165 0006 7860     		str	r0, [r7, #4]
 166 0008 0B46     		mov	r3, r1
 167 000a FB70     		strb	r3, [r7, #3]
  41:main.c        ****   crypto_sign(sm,&smlen, data, MLEN,sk);
 168              		.loc 1 41 3
 169 000c 0B4B     		ldr	r3, .L3
 170 000e 0093     		str	r3, [sp]
 171 0010 2023     		movs	r3, #32
 172 0012 7A68     		ldr	r2, [r7, #4]
 173 0014 0A49     		ldr	r1, .L3+4
 174 0016 0B48     		ldr	r0, .L3+8
 175 0018 FFF7FEFF 		bl	DILITHIUM_NAMESPACETOP
  42:main.c        ****   unpack_sig(c,&z,&h,sm);
 176              		.loc 1 42 3
 177 001c 094B     		ldr	r3, .L3+8
 178 001e 0A4A     		ldr	r2, .L3+12
 179 0020 0A49     		ldr	r1, .L3+16
 180 0022 0B48     		ldr	r0, .L3+20
 181 0024 FFF7FEFF 		bl	pqcrystals_dilithium2_refunpack_sig
  43:main.c        ****   simpleserial_put('r', 32, c);
 182              		.loc 1 43 3
 183 0028 094A     		ldr	r2, .L3+20
 184 002a 2021     		movs	r1, #32
 185 002c 7220     		movs	r0, #114
 186 002e FFF7FEFF 		bl	simpleserial_put
  44:main.c        ****   return 0;
 187              		.loc 1 44 10
 188 0032 0023     		movs	r3, #0
  45:main.c        **** }
 189              		.loc 1 45 1
 190 0034 1846     		mov	r0, r3
 191 0036 0837     		adds	r7, r7, #8
 192              	.LCFI3:
 193              		.cfi_def_cfa_offset 8
 194 0038 BD46     		mov	sp, r7
 195              	.LCFI4:
 196              		.cfi_def_cfa_register 13
 197              		@ sp needed
 198 003a 80BD     		pop	{r7, pc}
 199              	.L4:
 200              		.align	2
 201              	.L3:
 202 003c 00000000 		.word	sk
 203 0040 00000000 		.word	smlen
 204 0044 00000000 		.word	sm
 205 0048 00000000 		.word	h
 206 004c 00000000 		.word	z
 207 0050 00000000 		.word	c
 208              		.cfi_endproc
 209              	.LFE3:
 211              		.section	.text.main,"ax",%progbits
 212              		.align	1
 213              		.global	main
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 217              		.fpu softvfp
 219              	main:
 220              	.LFB4:
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** //////////////////////////////
  49:main.c        **** 
  50:main.c        **** 
  51:main.c        **** int main(void)
  52:main.c        **** {	
 221              		.loc 1 52 1
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 1, uses_anonymous_args = 0
 225 0000 80B5     		push	{r7, lr}
 226              	.LCFI5:
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 7, -8
 229              		.cfi_offset 14, -4
 230 0002 00AF     		add	r7, sp, #0
 231              	.LCFI6:
 232              		.cfi_def_cfa_register 7
  53:main.c        **** 	platform_init();
 233              		.loc 1 53 2
 234 0004 FFF7FEFF 		bl	platform_init
  54:main.c        **** 	init_uart();
 235              		.loc 1 54 2
 236 0008 FFF7FEFF 		bl	init_uart
  55:main.c        **** 	trigger_setup();	
 237              		.loc 1 55 2
 238 000c FFF7FEFF 		bl	trigger_setup
  56:main.c        **** 	simpleserial_init();
 239              		.loc 1 56 2
 240 0010 FFF7FEFF 		bl	simpleserial_init
  57:main.c        ****   crypto_sign_keypair(pk,sk,SEED);
 241              		.loc 1 57 3
 242 0014 064A     		ldr	r2, .L7
 243 0016 0749     		ldr	r1, .L7+4
 244 0018 0748     		ldr	r0, .L7+8
 245 001a FFF7FEFF 		bl	pqcrystals_dilithium2_refkeypair
  58:main.c        **** 
  59:main.c        ****   simpleserial_addcmd('p',32,get_msg);
 246              		.loc 1 59 3
 247 001e 074A     		ldr	r2, .L7+12
 248 0020 2021     		movs	r1, #32
 249 0022 7020     		movs	r0, #112
 250 0024 FFF7FEFF 		bl	simpleserial_addcmd
 251              	.L6:
 252              	.LBB2:
  60:main.c        **** 
  61:main.c        **** 	while(1)
  62:main.c        **** 		simpleserial_get();
 253              		.loc 1 62 3 discriminator 1
 254 0028 FFF7FEFF 		bl	simpleserial_get
 255              	.LBE2:
 256 002c FCE7     		b	.L6
 257              	.L8:
 258 002e 00BF     		.align	2
 259              	.L7:
 260 0030 00000000 		.word	SEED
 261 0034 00000000 		.word	sk
 262 0038 00000000 		.word	pk
 263 003c 00000000 		.word	get_msg
 264              		.cfi_endproc
 265              	.LFE4:
 267              		.text
 268              	.Letext0:
 269              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 270              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 271              		.file 4 "poly.h"
 272              		.file 5 "polyvec.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccAnqLdh.s:20     .bss:0000000000000000 m
     /tmp/ccAnqLdh.s:17     .bss:0000000000000000 $d
     /tmp/ccAnqLdh.s:26     .bss:0000000000000020 smlen
     /tmp/ccAnqLdh.s:32     .bss:0000000000000024 sm
     /tmp/ccAnqLdh.s:38     .bss:00000000000009b8 m2
     /tmp/ccAnqLdh.s:44     .bss:000000000000134c pk
     /tmp/ccAnqLdh.s:50     .bss:000000000000186c sk
     /tmp/ccAnqLdh.s:56     .bss:000000000000224c c
     /tmp/ccAnqLdh.s:62     .bss:000000000000226c rho
     /tmp/ccAnqLdh.s:68     .bss:000000000000228c rhop
     /tmp/ccAnqLdh.s:74     .bss:00000000000022ac tr
     /tmp/ccAnqLdh.s:80     .bss:00000000000022cc key
     /tmp/ccAnqLdh.s:86     .bss:00000000000022ec t1
     /tmp/ccAnqLdh.s:92     .bss:00000000000032ec h
     /tmp/ccAnqLdh.s:98     .bss:00000000000042ec t0
     /tmp/ccAnqLdh.s:104    .bss:00000000000052ec s2
     /tmp/ccAnqLdh.s:110    .bss:00000000000062ec z
     /tmp/ccAnqLdh.s:116    .bss:00000000000072ec s1
     /tmp/ccAnqLdh.s:122    .bss:00000000000082ec temp
     /tmp/ccAnqLdh.s:128    .bss:00000000000092ec cp
     /tmp/ccAnqLdh.s:135    .data:0000000000000000 SEED
     /tmp/ccAnqLdh.s:132    .data:0000000000000000 $d
     /tmp/ccAnqLdh.s:139    .text.get_msg:0000000000000000 $t
     /tmp/ccAnqLdh.s:147    .text.get_msg:0000000000000000 get_msg
     /tmp/ccAnqLdh.s:202    .text.get_msg:000000000000003c $d
     /tmp/ccAnqLdh.s:212    .text.main:0000000000000000 $t
     /tmp/ccAnqLdh.s:219    .text.main:0000000000000000 main
     /tmp/ccAnqLdh.s:260    .text.main:0000000000000030 $d

UNDEFINED SYMBOLS
DILITHIUM_NAMESPACETOP
pqcrystals_dilithium2_refunpack_sig
simpleserial_put
platform_init
init_uart
trigger_setup
simpleserial_init
pqcrystals_dilithium2_refkeypair
simpleserial_addcmd
simpleserial_get
