   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"fips202.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.load64,"ax",%progbits
  16              		.align	1
  17              		.arch armv7e-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	load64:
  24              	.LFB0:
  25              		.file 1 "fips202.c"
   1:fips202.c     **** /* Based on the public domain implementation in
   2:fips202.c     ****  * crypto_hash/keccakc512/simple/ from http://bench.cr.yp.to/supercop.html
   3:fips202.c     ****  * by Ronny Van Keer
   4:fips202.c     ****  * and the public domain "TweetFips202" implementation
   5:fips202.c     ****  * from https://twitter.com/tweetfips202
   6:fips202.c     ****  * by Gilles Van Assche, Daniel J. Bernstein, and Peter Schwabe */
   7:fips202.c     **** 
   8:fips202.c     **** #include <stddef.h>
   9:fips202.c     **** #include <stdint.h>
  10:fips202.c     **** #include <stdlib.h>
  11:fips202.c     **** #include <string.h>
  12:fips202.c     **** 
  13:fips202.c     **** #include "fips202.h"
  14:fips202.c     **** 
  15:fips202.c     **** #define NROUNDS 24
  16:fips202.c     **** #define ROL(a, offset) (((a) << (offset)) ^ ((a) >> (64 - (offset))))
  17:fips202.c     **** 
  18:fips202.c     **** /*************************************************
  19:fips202.c     ****  * Name:        load64
  20:fips202.c     ****  *
  21:fips202.c     ****  * Description: Load 8 bytes into uint64_t in little-endian order
  22:fips202.c     ****  *
  23:fips202.c     ****  * Arguments:   - const uint8_t *x: pointer to input byte array
  24:fips202.c     ****  *
  25:fips202.c     ****  * Returns the loaded 64-bit unsigned integer
  26:fips202.c     ****  **************************************************/
  27:fips202.c     **** static uint64_t load64(const uint8_t *x) {
  26              		.loc 1 27 42
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 2DE9F003 		push	{r4, r5, r6, r7, r8, r9}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 9, -4
  40 0004 86B0     		sub	sp, sp, #24
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 48
  43 0006 00AF     		add	r7, sp, #0
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0008 7860     		str	r0, [r7, #4]
  28:fips202.c     ****     uint64_t r = 0;
  47              		.loc 1 28 14
  48 000a 4FF00000 		mov	r0, #0
  49 000e 4FF00001 		mov	r1, #0
  50 0012 C7E90401 		strd	r0, [r7, #16]
  51              	.LBB2:
  29:fips202.c     ****     for (size_t i = 0; i < 8; ++i) {
  52              		.loc 1 29 17
  53 0016 0021     		movs	r1, #0
  54 0018 F960     		str	r1, [r7, #12]
  55              		.loc 1 29 5
  56 001a 22E0     		b	.L2
  57              	.L3:
  30:fips202.c     ****         r |= (uint64_t)x[i] << 8 * i;
  58              		.loc 1 30 25 discriminator 3
  59 001c 7868     		ldr	r0, [r7, #4]
  60 001e F968     		ldr	r1, [r7, #12]
  61 0020 0144     		add	r1, r1, r0
  62 0022 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
  63              		.loc 1 30 14 discriminator 3
  64 0024 C9B2     		uxtb	r1, r1
  65 0026 0020     		movs	r0, #0
  66 0028 0C46     		mov	r4, r1
  67 002a 0546     		mov	r5, r0
  68              		.loc 1 30 34 discriminator 3
  69 002c F968     		ldr	r1, [r7, #12]
  70 002e C900     		lsls	r1, r1, #3
  71              		.loc 1 30 29 discriminator 3
  72 0030 A1F12006 		sub	r6, r1, #32
  73 0034 C1F12000 		rsb	r0, r1, #32
  74 0038 05FA01F3 		lsl	r3, r5, r1
  75 003c 04FA06F6 		lsl	r6, r4, r6
  76 0040 3343     		orrs	r3, r3, r6
  77 0042 24FA00F0 		lsr	r0, r4, r0
  78 0046 0343     		orrs	r3, r3, r0
  79 0048 04FA01F2 		lsl	r2, r4, r1
  80              		.loc 1 30 11 discriminator 3
  81 004c D7E90401 		ldrd	r0, [r7, #16]
  82 0050 40EA0208 		orr	r8, r0, r2
  83 0054 41EA0309 		orr	r9, r1, r3
  84 0058 C7E90489 		strd	r8, [r7, #16]
  29:fips202.c     ****     for (size_t i = 0; i < 8; ++i) {
  85              		.loc 1 29 31 discriminator 3
  86 005c F968     		ldr	r1, [r7, #12]
  87 005e 0131     		adds	r1, r1, #1
  88 0060 F960     		str	r1, [r7, #12]
  89              	.L2:
  29:fips202.c     ****     for (size_t i = 0; i < 8; ++i) {
  90              		.loc 1 29 5 discriminator 1
  91 0062 F968     		ldr	r1, [r7, #12]
  92 0064 0729     		cmp	r1, #7
  93 0066 D9D9     		bls	.L3
  94              	.LBE2:
  31:fips202.c     ****     }
  32:fips202.c     **** 
  33:fips202.c     ****     return r;
  95              		.loc 1 33 12
  96 0068 D7E90423 		ldrd	r2, [r7, #16]
  34:fips202.c     **** }
  97              		.loc 1 34 1
  98 006c 1046     		mov	r0, r2
  99 006e 1946     		mov	r1, r3
 100 0070 1837     		adds	r7, r7, #24
 101              	.LCFI3:
 102              		.cfi_def_cfa_offset 24
 103 0072 BD46     		mov	sp, r7
 104              	.LCFI4:
 105              		.cfi_def_cfa_register 13
 106              		@ sp needed
 107 0074 BDE8F003 		pop	{r4, r5, r6, r7, r8, r9}
 108              	.LCFI5:
 109              		.cfi_restore 9
 110              		.cfi_restore 8
 111              		.cfi_restore 7
 112              		.cfi_restore 6
 113              		.cfi_restore 5
 114              		.cfi_restore 4
 115              		.cfi_def_cfa_offset 0
 116 0078 7047     		bx	lr
 117              		.cfi_endproc
 118              	.LFE0:
 120              		.section	.text.store64,"ax",%progbits
 121              		.align	1
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu softvfp
 127              	store64:
 128              	.LFB1:
  35:fips202.c     **** 
  36:fips202.c     **** /*************************************************
  37:fips202.c     ****  * Name:        store64
  38:fips202.c     ****  *
  39:fips202.c     ****  * Description: Store a 64-bit integer to a byte array in little-endian order
  40:fips202.c     ****  *
  41:fips202.c     ****  * Arguments:   - uint8_t *x: pointer to the output byte array
  42:fips202.c     ****  *              - uint64_t u: input 64-bit unsigned integer
  43:fips202.c     ****  **************************************************/
  44:fips202.c     **** static void store64(uint8_t *x, uint64_t u) {
 129              		.loc 1 44 45
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 24
 132              		@ frame_needed = 1, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134 0000 F0B4     		push	{r4, r5, r6, r7}
 135              	.LCFI6:
 136              		.cfi_def_cfa_offset 16
 137              		.cfi_offset 4, -16
 138              		.cfi_offset 5, -12
 139              		.cfi_offset 6, -8
 140              		.cfi_offset 7, -4
 141 0002 86B0     		sub	sp, sp, #24
 142              	.LCFI7:
 143              		.cfi_def_cfa_offset 40
 144 0004 00AF     		add	r7, sp, #0
 145              	.LCFI8:
 146              		.cfi_def_cfa_register 7
 147 0006 F860     		str	r0, [r7, #12]
 148 0008 C7E90023 		strd	r2, [r7]
 149              	.LBB3:
  45:fips202.c     ****     for (size_t i = 0; i < 8; ++i) {
 150              		.loc 1 45 17
 151 000c 0023     		movs	r3, #0
 152 000e 7B61     		str	r3, [r7, #20]
 153              		.loc 1 45 5
 154 0010 19E0     		b	.L6
 155              	.L7:
  46:fips202.c     ****         x[i] = (uint8_t) (u >> 8 * i);
 156              		.loc 1 46 34 discriminator 3
 157 0012 7B69     		ldr	r3, [r7, #20]
 158 0014 D900     		lsls	r1, r3, #3
 159              		.loc 1 46 29 discriminator 3
 160 0016 D7E90023 		ldrd	r2, [r7]
 161 001a C1F12006 		rsb	r6, r1, #32
 162 001e A1F12000 		sub	r0, r1, #32
 163 0022 22FA01F4 		lsr	r4, r2, r1
 164 0026 03FA06F6 		lsl	r6, r3, r6
 165 002a 3443     		orrs	r4, r4, r6
 166 002c 23FA00F0 		lsr	r0, r3, r0
 167 0030 0443     		orrs	r4, r4, r0
 168 0032 23FA01F5 		lsr	r5, r3, r1
 169              		.loc 1 46 10 discriminator 3
 170 0036 FA68     		ldr	r2, [r7, #12]
 171 0038 7B69     		ldr	r3, [r7, #20]
 172 003a 1344     		add	r3, r3, r2
 173              		.loc 1 46 16 discriminator 3
 174 003c E2B2     		uxtb	r2, r4
 175              		.loc 1 46 14 discriminator 3
 176 003e 1A70     		strb	r2, [r3]
  45:fips202.c     ****     for (size_t i = 0; i < 8; ++i) {
 177              		.loc 1 45 31 discriminator 3
 178 0040 7B69     		ldr	r3, [r7, #20]
 179 0042 0133     		adds	r3, r3, #1
 180 0044 7B61     		str	r3, [r7, #20]
 181              	.L6:
  45:fips202.c     ****     for (size_t i = 0; i < 8; ++i) {
 182              		.loc 1 45 5 discriminator 1
 183 0046 7B69     		ldr	r3, [r7, #20]
 184 0048 072B     		cmp	r3, #7
 185 004a E2D9     		bls	.L7
 186              	.LBE3:
  47:fips202.c     ****     }
  48:fips202.c     **** }
 187              		.loc 1 48 1
 188 004c 00BF     		nop
 189 004e 00BF     		nop
 190 0050 1837     		adds	r7, r7, #24
 191              	.LCFI9:
 192              		.cfi_def_cfa_offset 16
 193 0052 BD46     		mov	sp, r7
 194              	.LCFI10:
 195              		.cfi_def_cfa_register 13
 196              		@ sp needed
 197 0054 F0BC     		pop	{r4, r5, r6, r7}
 198              	.LCFI11:
 199              		.cfi_restore 7
 200              		.cfi_restore 6
 201              		.cfi_restore 5
 202              		.cfi_restore 4
 203              		.cfi_def_cfa_offset 0
 204 0056 7047     		bx	lr
 205              		.cfi_endproc
 206              	.LFE1:
 208              		.section	.rodata
 209              		.align	3
 212              	KeccakF_RoundConstants:
 213 0000 01000000 		.word	1
 214 0004 00000000 		.word	0
 215 0008 82800000 		.word	32898
 216 000c 00000000 		.word	0
 217 0010 8A800000 		.word	32906
 218 0014 00000080 		.word	-2147483648
 219 0018 00800080 		.word	-2147450880
 220 001c 00000080 		.word	-2147483648
 221 0020 8B800000 		.word	32907
 222 0024 00000000 		.word	0
 223 0028 01000080 		.word	-2147483647
 224 002c 00000000 		.word	0
 225 0030 81800080 		.word	-2147450751
 226 0034 00000080 		.word	-2147483648
 227 0038 09800000 		.word	32777
 228 003c 00000080 		.word	-2147483648
 229 0040 8A000000 		.word	138
 230 0044 00000000 		.word	0
 231 0048 88000000 		.word	136
 232 004c 00000000 		.word	0
 233 0050 09800080 		.word	-2147450871
 234 0054 00000000 		.word	0
 235 0058 0A000080 		.word	-2147483638
 236 005c 00000000 		.word	0
 237 0060 8B800080 		.word	-2147450741
 238 0064 00000000 		.word	0
 239 0068 8B000000 		.word	139
 240 006c 00000080 		.word	-2147483648
 241 0070 89800000 		.word	32905
 242 0074 00000080 		.word	-2147483648
 243 0078 03800000 		.word	32771
 244 007c 00000080 		.word	-2147483648
 245 0080 02800000 		.word	32770
 246 0084 00000080 		.word	-2147483648
 247 0088 80000000 		.word	128
 248 008c 00000080 		.word	-2147483648
 249 0090 0A800000 		.word	32778
 250 0094 00000000 		.word	0
 251 0098 0A000080 		.word	-2147483638
 252 009c 00000080 		.word	-2147483648
 253 00a0 81800080 		.word	-2147450751
 254 00a4 00000080 		.word	-2147483648
 255 00a8 80800000 		.word	32896
 256 00ac 00000080 		.word	-2147483648
 257 00b0 01000080 		.word	-2147483647
 258 00b4 00000000 		.word	0
 259 00b8 08800080 		.word	-2147450872
 260 00bc 00000080 		.word	-2147483648
 261              		.section	.text.KeccakF1600_StatePermute,"ax",%progbits
 262              		.align	1
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 266              		.fpu softvfp
 268              	KeccakF1600_StatePermute:
 269              	.LFB2:
  49:fips202.c     **** 
  50:fips202.c     **** /* Keccak round constants */
  51:fips202.c     **** static const uint64_t KeccakF_RoundConstants[NROUNDS] = {
  52:fips202.c     ****     0x0000000000000001ULL, 0x0000000000008082ULL,
  53:fips202.c     ****     0x800000000000808aULL, 0x8000000080008000ULL,
  54:fips202.c     ****     0x000000000000808bULL, 0x0000000080000001ULL,
  55:fips202.c     ****     0x8000000080008081ULL, 0x8000000000008009ULL,
  56:fips202.c     ****     0x000000000000008aULL, 0x0000000000000088ULL,
  57:fips202.c     ****     0x0000000080008009ULL, 0x000000008000000aULL,
  58:fips202.c     ****     0x000000008000808bULL, 0x800000000000008bULL,
  59:fips202.c     ****     0x8000000000008089ULL, 0x8000000000008003ULL,
  60:fips202.c     ****     0x8000000000008002ULL, 0x8000000000000080ULL,
  61:fips202.c     ****     0x000000000000800aULL, 0x800000008000000aULL,
  62:fips202.c     ****     0x8000000080008081ULL, 0x8000000000008080ULL,
  63:fips202.c     ****     0x0000000080000001ULL, 0x8000000080008008ULL
  64:fips202.c     **** };
  65:fips202.c     **** 
  66:fips202.c     **** /*************************************************
  67:fips202.c     ****  * Name:        KeccakF1600_StatePermute
  68:fips202.c     ****  *
  69:fips202.c     ****  * Description: The Keccak F1600 Permutation
  70:fips202.c     ****  *
  71:fips202.c     ****  * Arguments:   - uint64_t *state: pointer to input/output Keccak state
  72:fips202.c     ****  **************************************************/
  73:fips202.c     **** static void KeccakF1600_StatePermute(uint64_t *state) {
 270              		.loc 1 73 55
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 2952
 273              		@ frame_needed = 1, uses_anonymous_args = 0
 274              		@ link register save eliminated.
 275 0000 2DE9B00F 		push	{r4, r5, r7, r8, r9, r10, fp}
 276              	.LCFI12:
 277              		.cfi_def_cfa_offset 28
 278              		.cfi_offset 4, -28
 279              		.cfi_offset 5, -24
 280              		.cfi_offset 7, -20
 281              		.cfi_offset 8, -16
 282              		.cfi_offset 9, -12
 283              		.cfi_offset 10, -8
 284              		.cfi_offset 11, -4
 285 0004 ADF68C3D 		subw	sp, sp, #2956
 286              	.LCFI13:
 287              		.cfi_def_cfa_offset 2984
 288 0008 00AF     		add	r7, sp, #0
 289              	.LCFI14:
 290              		.cfi_def_cfa_register 7
 291 000a 07F68833 		addw	r3, r7, #2952
 292 000e A3F5F673 		sub	r3, r3, #492
 293 0012 1860     		str	r0, [r3]
  74:fips202.c     ****     int round;
  75:fips202.c     **** 
  76:fips202.c     ****     uint64_t Aba, Abe, Abi, Abo, Abu;
  77:fips202.c     ****     uint64_t Aga, Age, Agi, Ago, Agu;
  78:fips202.c     ****     uint64_t Aka, Ake, Aki, Ako, Aku;
  79:fips202.c     ****     uint64_t Ama, Ame, Ami, Amo, Amu;
  80:fips202.c     ****     uint64_t Asa, Ase, Asi, Aso, Asu;
  81:fips202.c     ****     uint64_t BCa, BCe, BCi, BCo, BCu;
  82:fips202.c     ****     uint64_t Da, De, Di, Do, Du;
  83:fips202.c     ****     uint64_t Eba, Ebe, Ebi, Ebo, Ebu;
  84:fips202.c     ****     uint64_t Ega, Ege, Egi, Ego, Egu;
  85:fips202.c     ****     uint64_t Eka, Eke, Eki, Eko, Eku;
  86:fips202.c     ****     uint64_t Ema, Eme, Emi, Emo, Emu;
  87:fips202.c     ****     uint64_t Esa, Ese, Esi, Eso, Esu;
  88:fips202.c     **** 
  89:fips202.c     ****     // copyFromState(A, state)
  90:fips202.c     ****     Aba = state[0];
 294              		.loc 1 90 9
 295 0014 07F68833 		addw	r3, r7, #2952
 296 0018 A3F5F673 		sub	r3, r3, #492
 297 001c 1B68     		ldr	r3, [r3]
 298 001e D3E90023 		ldrd	r2, [r3]
 299 0022 07F67831 		addw	r1, r7, #2936
 300 0026 C1E90023 		strd	r2, [r1]
  91:fips202.c     ****     Abe = state[1];
 301              		.loc 1 91 9
 302 002a 07F68833 		addw	r3, r7, #2952
 303 002e A3F5F673 		sub	r3, r3, #492
 304 0032 1B68     		ldr	r3, [r3]
 305 0034 D3E90223 		ldrd	r2, [r3, #8]
 306 0038 07F53761 		add	r1, r7, #2928
 307 003c C1E90023 		strd	r2, [r1]
  92:fips202.c     ****     Abi = state[2];
 308              		.loc 1 92 9
 309 0040 07F68833 		addw	r3, r7, #2952
 310 0044 A3F5F673 		sub	r3, r3, #492
 311 0048 1B68     		ldr	r3, [r3]
 312 004a D3E90423 		ldrd	r2, [r3, #16]
 313 004e 07F66831 		addw	r1, r7, #2920
 314 0052 C1E90023 		strd	r2, [r1]
  93:fips202.c     ****     Abo = state[3];
 315              		.loc 1 93 9
 316 0056 07F68833 		addw	r3, r7, #2952
 317 005a A3F5F673 		sub	r3, r3, #492
 318 005e 1B68     		ldr	r3, [r3]
 319 0060 D3E90623 		ldrd	r2, [r3, #24]
 320 0064 07F53661 		add	r1, r7, #2912
 321 0068 C1E90023 		strd	r2, [r1]
  94:fips202.c     ****     Abu = state[4];
 322              		.loc 1 94 9
 323 006c 07F68833 		addw	r3, r7, #2952
 324 0070 A3F5F673 		sub	r3, r3, #492
 325 0074 1B68     		ldr	r3, [r3]
 326 0076 D3E90823 		ldrd	r2, [r3, #32]
 327 007a 07F65831 		addw	r1, r7, #2904
 328 007e C1E90023 		strd	r2, [r1]
  95:fips202.c     ****     Aga = state[5];
 329              		.loc 1 95 9
 330 0082 07F68833 		addw	r3, r7, #2952
 331 0086 A3F5F673 		sub	r3, r3, #492
 332 008a 1B68     		ldr	r3, [r3]
 333 008c D3E90A23 		ldrd	r2, [r3, #40]
 334 0090 07F53561 		add	r1, r7, #2896
 335 0094 C1E90023 		strd	r2, [r1]
  96:fips202.c     ****     Age = state[6];
 336              		.loc 1 96 9
 337 0098 07F68833 		addw	r3, r7, #2952
 338 009c A3F5F673 		sub	r3, r3, #492
 339 00a0 1B68     		ldr	r3, [r3]
 340 00a2 D3E90C23 		ldrd	r2, [r3, #48]
 341 00a6 07F64831 		addw	r1, r7, #2888
 342 00aa C1E90023 		strd	r2, [r1]
  97:fips202.c     ****     Agi = state[7];
 343              		.loc 1 97 9
 344 00ae 07F68833 		addw	r3, r7, #2952
 345 00b2 A3F5F673 		sub	r3, r3, #492
 346 00b6 1B68     		ldr	r3, [r3]
 347 00b8 D3E90E23 		ldrd	r2, [r3, #56]
 348 00bc 07F53461 		add	r1, r7, #2880
 349 00c0 C1E90023 		strd	r2, [r1]
  98:fips202.c     ****     Ago = state[8];
 350              		.loc 1 98 9
 351 00c4 07F68833 		addw	r3, r7, #2952
 352 00c8 A3F5F673 		sub	r3, r3, #492
 353 00cc 1B68     		ldr	r3, [r3]
 354 00ce D3E91023 		ldrd	r2, [r3, #64]
 355 00d2 07F63831 		addw	r1, r7, #2872
 356 00d6 C1E90023 		strd	r2, [r1]
  99:fips202.c     ****     Agu = state[9];
 357              		.loc 1 99 9
 358 00da 07F68833 		addw	r3, r7, #2952
 359 00de A3F5F673 		sub	r3, r3, #492
 360 00e2 1B68     		ldr	r3, [r3]
 361 00e4 D3E91223 		ldrd	r2, [r3, #72]
 362 00e8 07F53361 		add	r1, r7, #2864
 363 00ec C1E90023 		strd	r2, [r1]
 100:fips202.c     ****     Aka = state[10];
 364              		.loc 1 100 9
 365 00f0 07F68833 		addw	r3, r7, #2952
 366 00f4 A3F5F673 		sub	r3, r3, #492
 367 00f8 1B68     		ldr	r3, [r3]
 368 00fa D3E91423 		ldrd	r2, [r3, #80]
 369 00fe 07F62831 		addw	r1, r7, #2856
 370 0102 C1E90023 		strd	r2, [r1]
 101:fips202.c     ****     Ake = state[11];
 371              		.loc 1 101 9
 372 0106 07F68833 		addw	r3, r7, #2952
 373 010a A3F5F673 		sub	r3, r3, #492
 374 010e 1B68     		ldr	r3, [r3]
 375 0110 D3E91623 		ldrd	r2, [r3, #88]
 376 0114 07F53261 		add	r1, r7, #2848
 377 0118 C1E90023 		strd	r2, [r1]
 102:fips202.c     ****     Aki = state[12];
 378              		.loc 1 102 9
 379 011c 07F68833 		addw	r3, r7, #2952
 380 0120 A3F5F673 		sub	r3, r3, #492
 381 0124 1B68     		ldr	r3, [r3]
 382 0126 D3E91823 		ldrd	r2, [r3, #96]
 383 012a 07F61831 		addw	r1, r7, #2840
 384 012e C1E90023 		strd	r2, [r1]
 103:fips202.c     ****     Ako = state[13];
 385              		.loc 1 103 9
 386 0132 07F68833 		addw	r3, r7, #2952
 387 0136 A3F5F673 		sub	r3, r3, #492
 388 013a 1B68     		ldr	r3, [r3]
 389 013c D3E91A23 		ldrd	r2, [r3, #104]
 390 0140 07F53161 		add	r1, r7, #2832
 391 0144 C1E90023 		strd	r2, [r1]
 104:fips202.c     ****     Aku = state[14];
 392              		.loc 1 104 9
 393 0148 07F68833 		addw	r3, r7, #2952
 394 014c A3F5F673 		sub	r3, r3, #492
 395 0150 1B68     		ldr	r3, [r3]
 396 0152 D3E91C23 		ldrd	r2, [r3, #112]
 397 0156 07F60831 		addw	r1, r7, #2824
 398 015a C1E90023 		strd	r2, [r1]
 105:fips202.c     ****     Ama = state[15];
 399              		.loc 1 105 9
 400 015e 07F68833 		addw	r3, r7, #2952
 401 0162 A3F5F673 		sub	r3, r3, #492
 402 0166 1B68     		ldr	r3, [r3]
 403 0168 D3E91E23 		ldrd	r2, [r3, #120]
 404 016c 07F53061 		add	r1, r7, #2816
 405 0170 C1E90023 		strd	r2, [r1]
 106:fips202.c     ****     Ame = state[16];
 406              		.loc 1 106 9
 407 0174 07F68833 		addw	r3, r7, #2952
 408 0178 A3F5F673 		sub	r3, r3, #492
 409 017c 1B68     		ldr	r3, [r3]
 410 017e D3E92023 		ldrd	r2, [r3, #128]
 411 0182 07F6F821 		addw	r1, r7, #2808
 412 0186 C1E90023 		strd	r2, [r1]
 107:fips202.c     ****     Ami = state[17];
 413              		.loc 1 107 9
 414 018a 07F68833 		addw	r3, r7, #2952
 415 018e A3F5F673 		sub	r3, r3, #492
 416 0192 1B68     		ldr	r3, [r3]
 417 0194 D3E92223 		ldrd	r2, [r3, #136]
 418 0198 07F52F61 		add	r1, r7, #2800
 419 019c C1E90023 		strd	r2, [r1]
 108:fips202.c     ****     Amo = state[18];
 420              		.loc 1 108 9
 421 01a0 07F68833 		addw	r3, r7, #2952
 422 01a4 A3F5F673 		sub	r3, r3, #492
 423 01a8 1B68     		ldr	r3, [r3]
 424 01aa D3E92423 		ldrd	r2, [r3, #144]
 425 01ae 07F6E821 		addw	r1, r7, #2792
 426 01b2 C1E90023 		strd	r2, [r1]
 109:fips202.c     ****     Amu = state[19];
 427              		.loc 1 109 9
 428 01b6 07F68833 		addw	r3, r7, #2952
 429 01ba A3F5F673 		sub	r3, r3, #492
 430 01be 1B68     		ldr	r3, [r3]
 431 01c0 D3E92623 		ldrd	r2, [r3, #152]
 432 01c4 07F52E61 		add	r1, r7, #2784
 433 01c8 C1E90023 		strd	r2, [r1]
 110:fips202.c     ****     Asa = state[20];
 434              		.loc 1 110 9
 435 01cc 07F68833 		addw	r3, r7, #2952
 436 01d0 A3F5F673 		sub	r3, r3, #492
 437 01d4 1B68     		ldr	r3, [r3]
 438 01d6 D3E92823 		ldrd	r2, [r3, #160]
 439 01da 07F6D821 		addw	r1, r7, #2776
 440 01de C1E90023 		strd	r2, [r1]
 111:fips202.c     ****     Ase = state[21];
 441              		.loc 1 111 9
 442 01e2 07F68833 		addw	r3, r7, #2952
 443 01e6 A3F5F673 		sub	r3, r3, #492
 444 01ea 1B68     		ldr	r3, [r3]
 445 01ec D3E92A23 		ldrd	r2, [r3, #168]
 446 01f0 07F52D61 		add	r1, r7, #2768
 447 01f4 C1E90023 		strd	r2, [r1]
 112:fips202.c     ****     Asi = state[22];
 448              		.loc 1 112 9
 449 01f8 07F68833 		addw	r3, r7, #2952
 450 01fc A3F5F673 		sub	r3, r3, #492
 451 0200 1B68     		ldr	r3, [r3]
 452 0202 D3E92C23 		ldrd	r2, [r3, #176]
 453 0206 07F6C821 		addw	r1, r7, #2760
 454 020a C1E90023 		strd	r2, [r1]
 113:fips202.c     ****     Aso = state[23];
 455              		.loc 1 113 9
 456 020e 07F68833 		addw	r3, r7, #2952
 457 0212 A3F5F673 		sub	r3, r3, #492
 458 0216 1B68     		ldr	r3, [r3]
 459 0218 D3E92E23 		ldrd	r2, [r3, #184]
 460 021c 07F52C61 		add	r1, r7, #2752
 461 0220 C1E90023 		strd	r2, [r1]
 114:fips202.c     ****     Asu = state[24];
 462              		.loc 1 114 9
 463 0224 07F68833 		addw	r3, r7, #2952
 464 0228 A3F5F673 		sub	r3, r3, #492
 465 022c 1B68     		ldr	r3, [r3]
 466 022e D3E93023 		ldrd	r2, [r3, #192]
 467 0232 07F6B821 		addw	r1, r7, #2744
 468 0236 C1E90023 		strd	r2, [r1]
 115:fips202.c     **** 
 116:fips202.c     ****     for (round = 0; round < NROUNDS; round += 2) {
 469              		.loc 1 116 16
 470 023a 0023     		movs	r3, #0
 471 023c C7F8843B 		str	r3, [r7, #2948]
 472              		.loc 1 116 5
 473 0240 02F010BF 		b	.L9
 474              	.L10:
 117:fips202.c     ****         //    prepareTheta
 118:fips202.c     ****         BCa = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
 475              		.loc 1 118 19 discriminator 3
 476 0244 07F67833 		addw	r3, r7, #2936
 477 0248 D3E90001 		ldrd	r0, [r3]
 478 024c 07F53563 		add	r3, r7, #2896
 479 0250 D3E90023 		ldrd	r2, [r3]
 480 0254 80EA020C 		eor	ip, r0, r2
 481 0258 C7F890C9 		str	ip, [r7, #2448]
 482 025c 4B40     		eors	r3, r3, r1
 483 025e C7F89439 		str	r3, [r7, #2452]
 484              		.loc 1 118 25 discriminator 3
 485 0262 07F62833 		addw	r3, r7, #2856
 486 0266 D3E90023 		ldrd	r2, [r3]
 487 026a 07F51961 		add	r1, r7, #2448
 488 026e D1E90001 		ldrd	r0, [r1]
 489 0272 8446     		mov	ip, r0
 490 0274 8CEA020C 		eor	ip, ip, r2
 491 0278 C7F888C9 		str	ip, [r7, #2440]
 492 027c 4B40     		eors	r3, r3, r1
 493 027e C7F88C39 		str	r3, [r7, #2444]
 494              		.loc 1 118 31 discriminator 3
 495 0282 07F53063 		add	r3, r7, #2816
 496 0286 D3E90023 		ldrd	r2, [r3]
 497 028a 07F68811 		addw	r1, r7, #2440
 498 028e D1E90001 		ldrd	r0, [r1]
 499 0292 8446     		mov	ip, r0
 500 0294 8CEA020C 		eor	ip, ip, r2
 501 0298 C7F880C9 		str	ip, [r7, #2432]
 502 029c 4B40     		eors	r3, r3, r1
 503 029e C7F88439 		str	r3, [r7, #2436]
 504              		.loc 1 118 13 discriminator 3
 505 02a2 07F6D823 		addw	r3, r7, #2776
 506 02a6 D3E90023 		ldrd	r2, [r3]
 507 02aa 07F51861 		add	r1, r7, #2432
 508 02ae D1E90001 		ldrd	r0, [r1]
 509 02b2 8446     		mov	ip, r0
 510 02b4 82EA0C0C 		eor	ip, r2, ip
 511 02b8 C7F848C5 		str	ip, [r7, #1352]
 512 02bc 4B40     		eors	r3, r3, r1
 513 02be C7F84C35 		str	r3, [r7, #1356]
 514 02c2 07F5A963 		add	r3, r7, #1352
 515 02c6 D3E90023 		ldrd	r2, [r3]
 516 02ca 07F52B61 		add	r1, r7, #2736
 517 02ce C1E90023 		strd	r2, [r1]
 119:fips202.c     ****         BCe = Abe ^ Age ^ Ake ^ Ame ^ Ase;
 518              		.loc 1 119 19 discriminator 3
 519 02d2 07F53763 		add	r3, r7, #2928
 520 02d6 D3E90001 		ldrd	r0, [r3]
 521 02da 07F64833 		addw	r3, r7, #2888
 522 02de D3E90023 		ldrd	r2, [r3]
 523 02e2 80EA020C 		eor	ip, r0, r2
 524 02e6 C7F878C9 		str	ip, [r7, #2424]
 525 02ea 4B40     		eors	r3, r3, r1
 526 02ec C7F87C39 		str	r3, [r7, #2428]
 527              		.loc 1 119 25 discriminator 3
 528 02f0 07F53263 		add	r3, r7, #2848
 529 02f4 D3E90023 		ldrd	r2, [r3]
 530 02f8 07F67811 		addw	r1, r7, #2424
 531 02fc D1E90001 		ldrd	r0, [r1]
 532 0300 8446     		mov	ip, r0
 533 0302 8CEA020C 		eor	ip, ip, r2
 534 0306 C7F870C9 		str	ip, [r7, #2416]
 535 030a 4B40     		eors	r3, r3, r1
 536 030c C7F87439 		str	r3, [r7, #2420]
 537              		.loc 1 119 31 discriminator 3
 538 0310 07F6F823 		addw	r3, r7, #2808
 539 0314 D3E90023 		ldrd	r2, [r3]
 540 0318 07F51761 		add	r1, r7, #2416
 541 031c D1E90001 		ldrd	r0, [r1]
 542 0320 8446     		mov	ip, r0
 543 0322 8CEA020C 		eor	ip, ip, r2
 544 0326 C7F868C9 		str	ip, [r7, #2408]
 545 032a 4B40     		eors	r3, r3, r1
 546 032c C7F86C39 		str	r3, [r7, #2412]
 547              		.loc 1 119 13 discriminator 3
 548 0330 07F52D63 		add	r3, r7, #2768
 549 0334 D3E90023 		ldrd	r2, [r3]
 550 0338 07F66811 		addw	r1, r7, #2408
 551 033c D1E90001 		ldrd	r0, [r1]
 552 0340 8446     		mov	ip, r0
 553 0342 82EA0C0C 		eor	ip, r2, ip
 554 0346 C7F840C5 		str	ip, [r7, #1344]
 555 034a 4B40     		eors	r3, r3, r1
 556 034c C7F84435 		str	r3, [r7, #1348]
 557 0350 07F5A863 		add	r3, r7, #1344
 558 0354 D3E90023 		ldrd	r2, [r3]
 559 0358 07F6A821 		addw	r1, r7, #2728
 560 035c C1E90023 		strd	r2, [r1]
 120:fips202.c     ****         BCi = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
 561              		.loc 1 120 19 discriminator 3
 562 0360 07F66833 		addw	r3, r7, #2920
 563 0364 D3E90001 		ldrd	r0, [r3]
 564 0368 07F53463 		add	r3, r7, #2880
 565 036c D3E90023 		ldrd	r2, [r3]
 566 0370 80EA020C 		eor	ip, r0, r2
 567 0374 C7F860C9 		str	ip, [r7, #2400]
 568 0378 4B40     		eors	r3, r3, r1
 569 037a C7F86439 		str	r3, [r7, #2404]
 570              		.loc 1 120 25 discriminator 3
 571 037e 07F61833 		addw	r3, r7, #2840
 572 0382 D3E90023 		ldrd	r2, [r3]
 573 0386 07F51661 		add	r1, r7, #2400
 574 038a D1E90001 		ldrd	r0, [r1]
 575 038e 8446     		mov	ip, r0
 576 0390 8CEA020C 		eor	ip, ip, r2
 577 0394 C7F858C9 		str	ip, [r7, #2392]
 578 0398 4B40     		eors	r3, r3, r1
 579 039a C7F85C39 		str	r3, [r7, #2396]
 580              		.loc 1 120 31 discriminator 3
 581 039e 07F52F63 		add	r3, r7, #2800
 582 03a2 D3E90023 		ldrd	r2, [r3]
 583 03a6 07F65811 		addw	r1, r7, #2392
 584 03aa D1E90001 		ldrd	r0, [r1]
 585 03ae 8446     		mov	ip, r0
 586 03b0 8CEA020C 		eor	ip, ip, r2
 587 03b4 C7F850C9 		str	ip, [r7, #2384]
 588 03b8 4B40     		eors	r3, r3, r1
 589 03ba C7F85439 		str	r3, [r7, #2388]
 590              		.loc 1 120 13 discriminator 3
 591 03be 07F6C823 		addw	r3, r7, #2760
 592 03c2 D3E90023 		ldrd	r2, [r3]
 593 03c6 07F51561 		add	r1, r7, #2384
 594 03ca D1E90001 		ldrd	r0, [r1]
 595 03ce 8446     		mov	ip, r0
 596 03d0 82EA0C0C 		eor	ip, r2, ip
 597 03d4 C7F838C5 		str	ip, [r7, #1336]
 598 03d8 4B40     		eors	r3, r3, r1
 599 03da C7F83C35 		str	r3, [r7, #1340]
 600 03de 07F5A763 		add	r3, r7, #1336
 601 03e2 D3E90023 		ldrd	r2, [r3]
 602 03e6 07F52A61 		add	r1, r7, #2720
 603 03ea C1E90023 		strd	r2, [r1]
 121:fips202.c     ****         BCo = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
 604              		.loc 1 121 19 discriminator 3
 605 03ee 07F53663 		add	r3, r7, #2912
 606 03f2 D3E90001 		ldrd	r0, [r3]
 607 03f6 07F63833 		addw	r3, r7, #2872
 608 03fa D3E90023 		ldrd	r2, [r3]
 609 03fe 80EA020C 		eor	ip, r0, r2
 610 0402 C7F848C9 		str	ip, [r7, #2376]
 611 0406 4B40     		eors	r3, r3, r1
 612 0408 C7F84C39 		str	r3, [r7, #2380]
 613              		.loc 1 121 25 discriminator 3
 614 040c 07F53163 		add	r3, r7, #2832
 615 0410 D3E90023 		ldrd	r2, [r3]
 616 0414 07F64811 		addw	r1, r7, #2376
 617 0418 D1E90001 		ldrd	r0, [r1]
 618 041c 8446     		mov	ip, r0
 619 041e 8CEA020C 		eor	ip, ip, r2
 620 0422 C7F840C9 		str	ip, [r7, #2368]
 621 0426 4B40     		eors	r3, r3, r1
 622 0428 C7F84439 		str	r3, [r7, #2372]
 623              		.loc 1 121 31 discriminator 3
 624 042c 07F6E823 		addw	r3, r7, #2792
 625 0430 D3E90023 		ldrd	r2, [r3]
 626 0434 07F51461 		add	r1, r7, #2368
 627 0438 D1E90001 		ldrd	r0, [r1]
 628 043c 8446     		mov	ip, r0
 629 043e 8CEA020C 		eor	ip, ip, r2
 630 0442 C7F838C9 		str	ip, [r7, #2360]
 631 0446 4B40     		eors	r3, r3, r1
 632 0448 C7F83C39 		str	r3, [r7, #2364]
 633              		.loc 1 121 13 discriminator 3
 634 044c 07F52C63 		add	r3, r7, #2752
 635 0450 D3E90023 		ldrd	r2, [r3]
 636 0454 07F63811 		addw	r1, r7, #2360
 637 0458 D1E90001 		ldrd	r0, [r1]
 638 045c 8446     		mov	ip, r0
 639 045e 82EA0C0C 		eor	ip, r2, ip
 640 0462 C7F830C5 		str	ip, [r7, #1328]
 641 0466 4B40     		eors	r3, r3, r1
 642 0468 C7F83435 		str	r3, [r7, #1332]
 643 046c 07F5A663 		add	r3, r7, #1328
 644 0470 D3E90023 		ldrd	r2, [r3]
 645 0474 07F69821 		addw	r1, r7, #2712
 646 0478 C1E90023 		strd	r2, [r1]
 122:fips202.c     ****         BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
 647              		.loc 1 122 19 discriminator 3
 648 047c 07F65833 		addw	r3, r7, #2904
 649 0480 D3E90001 		ldrd	r0, [r3]
 650 0484 07F53363 		add	r3, r7, #2864
 651 0488 D3E90023 		ldrd	r2, [r3]
 652 048c 80EA020C 		eor	ip, r0, r2
 653 0490 C7F830C9 		str	ip, [r7, #2352]
 654 0494 4B40     		eors	r3, r3, r1
 655 0496 C7F83439 		str	r3, [r7, #2356]
 656              		.loc 1 122 25 discriminator 3
 657 049a 07F60833 		addw	r3, r7, #2824
 658 049e D3E90023 		ldrd	r2, [r3]
 659 04a2 07F51361 		add	r1, r7, #2352
 660 04a6 D1E90001 		ldrd	r0, [r1]
 661 04aa 8446     		mov	ip, r0
 662 04ac 8CEA020C 		eor	ip, ip, r2
 663 04b0 C7F828C9 		str	ip, [r7, #2344]
 664 04b4 4B40     		eors	r3, r3, r1
 665 04b6 C7F82C39 		str	r3, [r7, #2348]
 666              		.loc 1 122 31 discriminator 3
 667 04ba 07F52E63 		add	r3, r7, #2784
 668 04be D3E90023 		ldrd	r2, [r3]
 669 04c2 07F62811 		addw	r1, r7, #2344
 670 04c6 D1E90001 		ldrd	r0, [r1]
 671 04ca 8446     		mov	ip, r0
 672 04cc 8CEA020C 		eor	ip, ip, r2
 673 04d0 C7F820C9 		str	ip, [r7, #2336]
 674 04d4 4B40     		eors	r3, r3, r1
 675 04d6 C7F82439 		str	r3, [r7, #2340]
 676              		.loc 1 122 13 discriminator 3
 677 04da 07F6B823 		addw	r3, r7, #2744
 678 04de D3E90023 		ldrd	r2, [r3]
 679 04e2 07F51261 		add	r1, r7, #2336
 680 04e6 D1E90001 		ldrd	r0, [r1]
 681 04ea 8446     		mov	ip, r0
 682 04ec 82EA0C0C 		eor	ip, r2, ip
 683 04f0 C7F828C5 		str	ip, [r7, #1320]
 684 04f4 4B40     		eors	r3, r3, r1
 685 04f6 C7F82C35 		str	r3, [r7, #1324]
 686 04fa 07F5A563 		add	r3, r7, #1320
 687 04fe D3E90023 		ldrd	r2, [r3]
 688 0502 07F52961 		add	r1, r7, #2704
 689 0506 C1E90023 		strd	r2, [r1]
 123:fips202.c     **** 
 124:fips202.c     ****         // thetaRhoPiChiIotaPrepareTheta(round  , A, E)
 125:fips202.c     ****         Da = BCu ^ ROL(BCe, 1);
 690              		.loc 1 125 20 discriminator 3
 691 050a D7F8A83A 		ldr	r3, [r7, #2728]
 692 050e DA0F     		lsrs	r2, r3, #31
 693 0510 D7F8AC3A 		ldr	r3, [r7, #2732]
 694 0514 5B00     		lsls	r3, r3, #1
 695 0516 1343     		orrs	r3, r3, r2
 696 0518 C7F81C39 		str	r3, [r7, #2332]
 697 051c D7F8AC3A 		ldr	r3, [r7, #2732]
 698 0520 DA0F     		lsrs	r2, r3, #31
 699 0522 D7F8A83A 		ldr	r3, [r7, #2728]
 700 0526 5B00     		lsls	r3, r3, #1
 701 0528 1343     		orrs	r3, r3, r2
 702 052a C7F81839 		str	r3, [r7, #2328]
 703              		.loc 1 125 12 discriminator 3
 704 052e 07F52963 		add	r3, r7, #2704
 705 0532 D3E90023 		ldrd	r2, [r3]
 706 0536 07F61811 		addw	r1, r7, #2328
 707 053a D1E90001 		ldrd	r0, [r1]
 708 053e 8446     		mov	ip, r0
 709 0540 82EA0C0C 		eor	ip, r2, ip
 710 0544 C7F820C5 		str	ip, [r7, #1312]
 711 0548 4B40     		eors	r3, r3, r1
 712 054a C7F82435 		str	r3, [r7, #1316]
 713 054e 07F5A463 		add	r3, r7, #1312
 714 0552 D3E90023 		ldrd	r2, [r3]
 715 0556 07F68821 		addw	r1, r7, #2696
 716 055a C1E90023 		strd	r2, [r1]
 126:fips202.c     ****         De = BCa ^ ROL(BCi, 1);
 717              		.loc 1 126 20 discriminator 3
 718 055e D7F8A03A 		ldr	r3, [r7, #2720]
 719 0562 DA0F     		lsrs	r2, r3, #31
 720 0564 D7F8A43A 		ldr	r3, [r7, #2724]
 721 0568 5B00     		lsls	r3, r3, #1
 722 056a 1343     		orrs	r3, r3, r2
 723 056c C7F81439 		str	r3, [r7, #2324]
 724 0570 D7F8A43A 		ldr	r3, [r7, #2724]
 725 0574 DA0F     		lsrs	r2, r3, #31
 726 0576 D7F8A03A 		ldr	r3, [r7, #2720]
 727 057a 5B00     		lsls	r3, r3, #1
 728 057c 1343     		orrs	r3, r3, r2
 729 057e C7F81039 		str	r3, [r7, #2320]
 730              		.loc 1 126 12 discriminator 3
 731 0582 07F52B63 		add	r3, r7, #2736
 732 0586 D3E90023 		ldrd	r2, [r3]
 733 058a 07F51161 		add	r1, r7, #2320
 734 058e D1E90001 		ldrd	r0, [r1]
 735 0592 8446     		mov	ip, r0
 736 0594 82EA0C0C 		eor	ip, r2, ip
 737 0598 C7F818C5 		str	ip, [r7, #1304]
 738 059c 4B40     		eors	r3, r3, r1
 739 059e C7F81C35 		str	r3, [r7, #1308]
 740 05a2 07F5A363 		add	r3, r7, #1304
 741 05a6 D3E90023 		ldrd	r2, [r3]
 742 05aa 07F52861 		add	r1, r7, #2688
 743 05ae C1E90023 		strd	r2, [r1]
 127:fips202.c     ****         Di = BCe ^ ROL(BCo, 1);
 744              		.loc 1 127 20 discriminator 3
 745 05b2 D7F8983A 		ldr	r3, [r7, #2712]
 746 05b6 DA0F     		lsrs	r2, r3, #31
 747 05b8 D7F89C3A 		ldr	r3, [r7, #2716]
 748 05bc 5B00     		lsls	r3, r3, #1
 749 05be 1343     		orrs	r3, r3, r2
 750 05c0 C7F80C39 		str	r3, [r7, #2316]
 751 05c4 D7F89C3A 		ldr	r3, [r7, #2716]
 752 05c8 DA0F     		lsrs	r2, r3, #31
 753 05ca D7F8983A 		ldr	r3, [r7, #2712]
 754 05ce 5B00     		lsls	r3, r3, #1
 755 05d0 1343     		orrs	r3, r3, r2
 756 05d2 C7F80839 		str	r3, [r7, #2312]
 757              		.loc 1 127 12 discriminator 3
 758 05d6 07F6A823 		addw	r3, r7, #2728
 759 05da D3E90023 		ldrd	r2, [r3]
 760 05de 07F60811 		addw	r1, r7, #2312
 761 05e2 D1E90001 		ldrd	r0, [r1]
 762 05e6 8446     		mov	ip, r0
 763 05e8 82EA0C0C 		eor	ip, r2, ip
 764 05ec C7F810C5 		str	ip, [r7, #1296]
 765 05f0 4B40     		eors	r3, r3, r1
 766 05f2 C7F81435 		str	r3, [r7, #1300]
 767 05f6 07F5A263 		add	r3, r7, #1296
 768 05fa D3E90023 		ldrd	r2, [r3]
 769 05fe 07F67821 		addw	r1, r7, #2680
 770 0602 C1E90023 		strd	r2, [r1]
 128:fips202.c     ****         Do = BCi ^ ROL(BCu, 1);
 771              		.loc 1 128 20 discriminator 3
 772 0606 D7F8903A 		ldr	r3, [r7, #2704]
 773 060a DA0F     		lsrs	r2, r3, #31
 774 060c D7F8943A 		ldr	r3, [r7, #2708]
 775 0610 5B00     		lsls	r3, r3, #1
 776 0612 1343     		orrs	r3, r3, r2
 777 0614 C7F80439 		str	r3, [r7, #2308]
 778 0618 D7F8943A 		ldr	r3, [r7, #2708]
 779 061c DA0F     		lsrs	r2, r3, #31
 780 061e D7F8903A 		ldr	r3, [r7, #2704]
 781 0622 5B00     		lsls	r3, r3, #1
 782 0624 1343     		orrs	r3, r3, r2
 783 0626 C7F80039 		str	r3, [r7, #2304]
 784              		.loc 1 128 12 discriminator 3
 785 062a 07F52A63 		add	r3, r7, #2720
 786 062e D3E90023 		ldrd	r2, [r3]
 787 0632 07F51061 		add	r1, r7, #2304
 788 0636 D1E90001 		ldrd	r0, [r1]
 789 063a 8446     		mov	ip, r0
 790 063c 82EA0C0C 		eor	ip, r2, ip
 791 0640 C7F808C5 		str	ip, [r7, #1288]
 792 0644 4B40     		eors	r3, r3, r1
 793 0646 C7F80C35 		str	r3, [r7, #1292]
 794 064a 07F5A163 		add	r3, r7, #1288
 795 064e D3E90023 		ldrd	r2, [r3]
 796 0652 07F52761 		add	r1, r7, #2672
 797 0656 C1E90023 		strd	r2, [r1]
 129:fips202.c     ****         Du = BCo ^ ROL(BCa, 1);
 798              		.loc 1 129 20 discriminator 3
 799 065a D7F8B03A 		ldr	r3, [r7, #2736]
 800 065e DA0F     		lsrs	r2, r3, #31
 801 0660 D7F8B43A 		ldr	r3, [r7, #2740]
 802 0664 5B00     		lsls	r3, r3, #1
 803 0666 1343     		orrs	r3, r3, r2
 804 0668 C7F8FC38 		str	r3, [r7, #2300]
 805 066c D7F8B43A 		ldr	r3, [r7, #2740]
 806 0670 DA0F     		lsrs	r2, r3, #31
 807 0672 D7F8B03A 		ldr	r3, [r7, #2736]
 808 0676 5B00     		lsls	r3, r3, #1
 809 0678 1343     		orrs	r3, r3, r2
 810 067a C7F8F838 		str	r3, [r7, #2296]
 811              		.loc 1 129 12 discriminator 3
 812 067e 07F69823 		addw	r3, r7, #2712
 813 0682 D3E90023 		ldrd	r2, [r3]
 814 0686 07F6F801 		addw	r1, r7, #2296
 815 068a D1E90001 		ldrd	r0, [r1]
 816 068e 8446     		mov	ip, r0
 817 0690 82EA0C0C 		eor	ip, r2, ip
 818 0694 C7F800C5 		str	ip, [r7, #1280]
 819 0698 4B40     		eors	r3, r3, r1
 820 069a C7F80435 		str	r3, [r7, #1284]
 821 069e 07F5A063 		add	r3, r7, #1280
 822 06a2 D3E90023 		ldrd	r2, [r3]
 823 06a6 07F66821 		addw	r1, r7, #2664
 824 06aa C1E90023 		strd	r2, [r1]
 130:fips202.c     **** 
 131:fips202.c     ****         Aba ^= Da;
 825              		.loc 1 131 13 discriminator 3
 826 06ae 07F67833 		addw	r3, r7, #2936
 827 06b2 D3E90001 		ldrd	r0, [r3]
 828 06b6 07F68823 		addw	r3, r7, #2696
 829 06ba D3E90023 		ldrd	r2, [r3]
 830 06be 80EA020C 		eor	ip, r0, r2
 831 06c2 C7F8F8C4 		str	ip, [r7, #1272]
 832 06c6 4B40     		eors	r3, r3, r1
 833 06c8 C7F8FC34 		str	r3, [r7, #1276]
 834 06cc 07F59F63 		add	r3, r7, #1272
 835 06d0 D3E90023 		ldrd	r2, [r3]
 836 06d4 07F67831 		addw	r1, r7, #2936
 837 06d8 C1E90023 		strd	r2, [r1]
 132:fips202.c     ****         BCa = Aba;
 838              		.loc 1 132 13 discriminator 3
 839 06dc 07F67833 		addw	r3, r7, #2936
 840 06e0 D3E90023 		ldrd	r2, [r3]
 841 06e4 07F52B61 		add	r1, r7, #2736
 842 06e8 C1E90023 		strd	r2, [r1]
 133:fips202.c     ****         Age ^= De;
 843              		.loc 1 133 13 discriminator 3
 844 06ec 07F64833 		addw	r3, r7, #2888
 845 06f0 D3E90001 		ldrd	r0, [r3]
 846 06f4 07F52863 		add	r3, r7, #2688
 847 06f8 D3E90023 		ldrd	r2, [r3]
 848 06fc 80EA020C 		eor	ip, r0, r2
 849 0700 C7F8F0C4 		str	ip, [r7, #1264]
 850 0704 4B40     		eors	r3, r3, r1
 851 0706 C7F8F434 		str	r3, [r7, #1268]
 852 070a 07F59E63 		add	r3, r7, #1264
 853 070e D3E90023 		ldrd	r2, [r3]
 854 0712 07F64831 		addw	r1, r7, #2888
 855 0716 C1E90023 		strd	r2, [r1]
 134:fips202.c     ****         BCe = ROL(Age, 44);
 856              		.loc 1 134 13 discriminator 3
 857 071a D7F84C3B 		ldr	r3, [r7, #2892]
 858 071e 1A03     		lsls	r2, r3, #12
 859 0720 D7F8483B 		ldr	r3, [r7, #2888]
 860 0724 1B0D     		lsrs	r3, r3, #20
 861 0726 1343     		orrs	r3, r3, r2
 862 0728 C7F8E834 		str	r3, [r7, #1256]
 863 072c D7F8483B 		ldr	r3, [r7, #2888]
 864 0730 1A03     		lsls	r2, r3, #12
 865 0732 D7F84C3B 		ldr	r3, [r7, #2892]
 866 0736 1B0D     		lsrs	r3, r3, #20
 867 0738 1343     		orrs	r3, r3, r2
 868 073a C7F8EC34 		str	r3, [r7, #1260]
 869 073e 07F59D63 		add	r3, r7, #1256
 870 0742 D3E90023 		ldrd	r2, [r3]
 871 0746 07F6A821 		addw	r1, r7, #2728
 872 074a C1E90023 		strd	r2, [r1]
 135:fips202.c     ****         Aki ^= Di;
 873              		.loc 1 135 13 discriminator 3
 874 074e 07F61833 		addw	r3, r7, #2840
 875 0752 D3E90001 		ldrd	r0, [r3]
 876 0756 07F67823 		addw	r3, r7, #2680
 877 075a D3E90023 		ldrd	r2, [r3]
 878 075e 80EA020C 		eor	ip, r0, r2
 879 0762 C7F8E0C4 		str	ip, [r7, #1248]
 880 0766 4B40     		eors	r3, r3, r1
 881 0768 C7F8E434 		str	r3, [r7, #1252]
 882 076c 07F59C63 		add	r3, r7, #1248
 883 0770 D3E90023 		ldrd	r2, [r3]
 884 0774 07F61831 		addw	r1, r7, #2840
 885 0778 C1E90023 		strd	r2, [r1]
 136:fips202.c     ****         BCi = ROL(Aki, 43);
 886              		.loc 1 136 13 discriminator 3
 887 077c D7F81C3B 		ldr	r3, [r7, #2844]
 888 0780 DA02     		lsls	r2, r3, #11
 889 0782 D7F8183B 		ldr	r3, [r7, #2840]
 890 0786 5B0D     		lsrs	r3, r3, #21
 891 0788 1343     		orrs	r3, r3, r2
 892 078a C7F8D834 		str	r3, [r7, #1240]
 893 078e D7F8183B 		ldr	r3, [r7, #2840]
 894 0792 DA02     		lsls	r2, r3, #11
 895 0794 D7F81C3B 		ldr	r3, [r7, #2844]
 896 0798 5B0D     		lsrs	r3, r3, #21
 897 079a 1343     		orrs	r3, r3, r2
 898 079c C7F8DC34 		str	r3, [r7, #1244]
 899 07a0 07F59B63 		add	r3, r7, #1240
 900 07a4 D3E90023 		ldrd	r2, [r3]
 901 07a8 07F52A61 		add	r1, r7, #2720
 902 07ac C1E90023 		strd	r2, [r1]
 137:fips202.c     ****         Amo ^= Do;
 903              		.loc 1 137 13 discriminator 3
 904 07b0 07F6E823 		addw	r3, r7, #2792
 905 07b4 D3E90001 		ldrd	r0, [r3]
 906 07b8 07F52763 		add	r3, r7, #2672
 907 07bc D3E90023 		ldrd	r2, [r3]
 908 07c0 80EA020C 		eor	ip, r0, r2
 909 07c4 C7F8D0C4 		str	ip, [r7, #1232]
 910 07c8 4B40     		eors	r3, r3, r1
 911 07ca C7F8D434 		str	r3, [r7, #1236]
 912 07ce 07F59A63 		add	r3, r7, #1232
 913 07d2 D3E90023 		ldrd	r2, [r3]
 914 07d6 07F6E821 		addw	r1, r7, #2792
 915 07da C1E90023 		strd	r2, [r1]
 138:fips202.c     ****         BCo = ROL(Amo, 21);
 916              		.loc 1 138 13 discriminator 3
 917 07de D7F8E83A 		ldr	r3, [r7, #2792]
 918 07e2 DA0A     		lsrs	r2, r3, #11
 919 07e4 D7F8EC3A 		ldr	r3, [r7, #2796]
 920 07e8 5B05     		lsls	r3, r3, #21
 921 07ea 1343     		orrs	r3, r3, r2
 922 07ec C7F8CC34 		str	r3, [r7, #1228]
 923 07f0 D7F8EC3A 		ldr	r3, [r7, #2796]
 924 07f4 DA0A     		lsrs	r2, r3, #11
 925 07f6 D7F8E83A 		ldr	r3, [r7, #2792]
 926 07fa 5B05     		lsls	r3, r3, #21
 927 07fc 1343     		orrs	r3, r3, r2
 928 07fe C7F8C834 		str	r3, [r7, #1224]
 929 0802 07F59963 		add	r3, r7, #1224
 930 0806 D3E90023 		ldrd	r2, [r3]
 931 080a 07F69821 		addw	r1, r7, #2712
 932 080e C1E90023 		strd	r2, [r1]
 139:fips202.c     ****         Asu ^= Du;
 933              		.loc 1 139 13 discriminator 3
 934 0812 07F6B823 		addw	r3, r7, #2744
 935 0816 D3E90001 		ldrd	r0, [r3]
 936 081a 07F66823 		addw	r3, r7, #2664
 937 081e D3E90023 		ldrd	r2, [r3]
 938 0822 80EA020C 		eor	ip, r0, r2
 939 0826 C7F8C0C4 		str	ip, [r7, #1216]
 940 082a 4B40     		eors	r3, r3, r1
 941 082c C7F8C434 		str	r3, [r7, #1220]
 942 0830 07F59863 		add	r3, r7, #1216
 943 0834 D3E90023 		ldrd	r2, [r3]
 944 0838 07F6B821 		addw	r1, r7, #2744
 945 083c C1E90023 		strd	r2, [r1]
 140:fips202.c     ****         BCu = ROL(Asu, 14);
 946              		.loc 1 140 13 discriminator 3
 947 0840 D7F8B83A 		ldr	r3, [r7, #2744]
 948 0844 9A0C     		lsrs	r2, r3, #18
 949 0846 D7F8BC3A 		ldr	r3, [r7, #2748]
 950 084a 9B03     		lsls	r3, r3, #14
 951 084c 1343     		orrs	r3, r3, r2
 952 084e C7F8BC34 		str	r3, [r7, #1212]
 953 0852 D7F8BC3A 		ldr	r3, [r7, #2748]
 954 0856 9A0C     		lsrs	r2, r3, #18
 955 0858 D7F8B83A 		ldr	r3, [r7, #2744]
 956 085c 9B03     		lsls	r3, r3, #14
 957 085e 1343     		orrs	r3, r3, r2
 958 0860 C7F8B834 		str	r3, [r7, #1208]
 959 0864 07F59763 		add	r3, r7, #1208
 960 0868 D3E90023 		ldrd	r2, [r3]
 961 086c 07F52961 		add	r1, r7, #2704
 962 0870 C1E90023 		strd	r2, [r1]
 141:fips202.c     ****         Eba = BCa ^ ((~BCe) & BCi);
 963              		.loc 1 141 23 discriminator 3
 964 0874 07F6A823 		addw	r3, r7, #2728
 965 0878 D3E90023 		ldrd	r2, [r3]
 966 087c D143     		mvns	r1, r2
 967 087e C7F8F018 		str	r1, [r7, #2288]
 968 0882 DB43     		mvns	r3, r3
 969 0884 C7F8F438 		str	r3, [r7, #2292]
 970              		.loc 1 141 29 discriminator 3
 971 0888 07F52A63 		add	r3, r7, #2720
 972 088c D3E90023 		ldrd	r2, [r3]
 973 0890 07F50F61 		add	r1, r7, #2288
 974 0894 D1E90001 		ldrd	r0, [r1]
 975 0898 8446     		mov	ip, r0
 976 089a 0CEA020C 		and	ip, ip, r2
 977 089e C7F8E8C8 		str	ip, [r7, #2280]
 978 08a2 0B40     		ands	r3, r3, r1
 979 08a4 C7F8EC38 		str	r3, [r7, #2284]
 980              		.loc 1 141 13 discriminator 3
 981 08a8 07F52B63 		add	r3, r7, #2736
 982 08ac D3E90023 		ldrd	r2, [r3]
 983 08b0 07F6E801 		addw	r1, r7, #2280
 984 08b4 D1E90001 		ldrd	r0, [r1]
 985 08b8 8446     		mov	ip, r0
 986 08ba 82EA0C0C 		eor	ip, r2, ip
 987 08be C7F8B0C4 		str	ip, [r7, #1200]
 988 08c2 4B40     		eors	r3, r3, r1
 989 08c4 C7F8B434 		str	r3, [r7, #1204]
 990 08c8 07F59663 		add	r3, r7, #1200
 991 08cc D3E90023 		ldrd	r2, [r3]
 992 08d0 07F52661 		add	r1, r7, #2656
 993 08d4 C1E90023 		strd	r2, [r1]
 142:fips202.c     ****         Eba ^= KeccakF_RoundConstants[round];
 994              		.loc 1 142 38 discriminator 3
 995 08d8 C74A     		ldr	r2, .L11
 996 08da D7F8843B 		ldr	r3, [r7, #2948]
 997 08de DB00     		lsls	r3, r3, #3
 998 08e0 1344     		add	r3, r3, r2
 999 08e2 D3E90001 		ldrd	r0, [r3]
 1000              		.loc 1 142 13 discriminator 3
 1001 08e6 07F52663 		add	r3, r7, #2656
 1002 08ea D3E90023 		ldrd	r2, [r3]
 1003 08ee 82EA000C 		eor	ip, r2, r0
 1004 08f2 C7F8A8C4 		str	ip, [r7, #1192]
 1005 08f6 4B40     		eors	r3, r3, r1
 1006 08f8 C7F8AC34 		str	r3, [r7, #1196]
 1007 08fc 07F59563 		add	r3, r7, #1192
 1008 0900 D3E90023 		ldrd	r2, [r3]
 1009 0904 07F52661 		add	r1, r7, #2656
 1010 0908 C1E90023 		strd	r2, [r1]
 143:fips202.c     ****         Ebe = BCe ^ ((~BCi) & BCo);
 1011              		.loc 1 143 23 discriminator 3
 1012 090c 07F52A63 		add	r3, r7, #2720
 1013 0910 D3E90023 		ldrd	r2, [r3]
 1014 0914 D143     		mvns	r1, r2
 1015 0916 C7F8E018 		str	r1, [r7, #2272]
 1016 091a DB43     		mvns	r3, r3
 1017 091c C7F8E438 		str	r3, [r7, #2276]
 1018              		.loc 1 143 29 discriminator 3
 1019 0920 07F69823 		addw	r3, r7, #2712
 1020 0924 D3E90023 		ldrd	r2, [r3]
 1021 0928 07F50E61 		add	r1, r7, #2272
 1022 092c D1E90001 		ldrd	r0, [r1]
 1023 0930 8446     		mov	ip, r0
 1024 0932 0CEA020C 		and	ip, ip, r2
 1025 0936 C7F8D8C8 		str	ip, [r7, #2264]
 1026 093a 0B40     		ands	r3, r3, r1
 1027 093c C7F8DC38 		str	r3, [r7, #2268]
 1028              		.loc 1 143 13 discriminator 3
 1029 0940 07F6A823 		addw	r3, r7, #2728
 1030 0944 D3E90023 		ldrd	r2, [r3]
 1031 0948 07F6D801 		addw	r1, r7, #2264
 1032 094c D1E90001 		ldrd	r0, [r1]
 1033 0950 8446     		mov	ip, r0
 1034 0952 82EA0C0C 		eor	ip, r2, ip
 1035 0956 C7F8A0C4 		str	ip, [r7, #1184]
 1036 095a 4B40     		eors	r3, r3, r1
 1037 095c C7F8A434 		str	r3, [r7, #1188]
 1038 0960 07F59463 		add	r3, r7, #1184
 1039 0964 D3E90023 		ldrd	r2, [r3]
 1040 0968 07F65821 		addw	r1, r7, #2648
 1041 096c C1E90023 		strd	r2, [r1]
 144:fips202.c     ****         Ebi = BCi ^ ((~BCo) & BCu);
 1042              		.loc 1 144 23 discriminator 3
 1043 0970 07F69823 		addw	r3, r7, #2712
 1044 0974 D3E90023 		ldrd	r2, [r3]
 1045 0978 D143     		mvns	r1, r2
 1046 097a C7F8D018 		str	r1, [r7, #2256]
 1047 097e DB43     		mvns	r3, r3
 1048 0980 C7F8D438 		str	r3, [r7, #2260]
 1049              		.loc 1 144 29 discriminator 3
 1050 0984 07F52963 		add	r3, r7, #2704
 1051 0988 D3E90023 		ldrd	r2, [r3]
 1052 098c 07F50D61 		add	r1, r7, #2256
 1053 0990 D1E90001 		ldrd	r0, [r1]
 1054 0994 8446     		mov	ip, r0
 1055 0996 0CEA020C 		and	ip, ip, r2
 1056 099a C7F8C8C8 		str	ip, [r7, #2248]
 1057 099e 0B40     		ands	r3, r3, r1
 1058 09a0 C7F8CC38 		str	r3, [r7, #2252]
 1059              		.loc 1 144 13 discriminator 3
 1060 09a4 07F52A63 		add	r3, r7, #2720
 1061 09a8 D3E90023 		ldrd	r2, [r3]
 1062 09ac 07F6C801 		addw	r1, r7, #2248
 1063 09b0 D1E90001 		ldrd	r0, [r1]
 1064 09b4 8446     		mov	ip, r0
 1065 09b6 82EA0C0C 		eor	ip, r2, ip
 1066 09ba C7F898C4 		str	ip, [r7, #1176]
 1067 09be 4B40     		eors	r3, r3, r1
 1068 09c0 C7F89C34 		str	r3, [r7, #1180]
 1069 09c4 07F59363 		add	r3, r7, #1176
 1070 09c8 D3E90023 		ldrd	r2, [r3]
 1071 09cc 07F52561 		add	r1, r7, #2640
 1072 09d0 C1E90023 		strd	r2, [r1]
 145:fips202.c     ****         Ebo = BCo ^ ((~BCu) & BCa);
 1073              		.loc 1 145 23 discriminator 3
 1074 09d4 07F52963 		add	r3, r7, #2704
 1075 09d8 D3E90023 		ldrd	r2, [r3]
 1076 09dc D143     		mvns	r1, r2
 1077 09de C7F8C018 		str	r1, [r7, #2240]
 1078 09e2 DB43     		mvns	r3, r3
 1079 09e4 C7F8C438 		str	r3, [r7, #2244]
 1080              		.loc 1 145 29 discriminator 3
 1081 09e8 07F52B63 		add	r3, r7, #2736
 1082 09ec D3E90023 		ldrd	r2, [r3]
 1083 09f0 07F50C61 		add	r1, r7, #2240
 1084 09f4 D1E90001 		ldrd	r0, [r1]
 1085 09f8 8446     		mov	ip, r0
 1086 09fa 0CEA020C 		and	ip, ip, r2
 1087 09fe C7F8B8C8 		str	ip, [r7, #2232]
 1088 0a02 0B40     		ands	r3, r3, r1
 1089 0a04 C7F8BC38 		str	r3, [r7, #2236]
 1090              		.loc 1 145 13 discriminator 3
 1091 0a08 07F69823 		addw	r3, r7, #2712
 1092 0a0c D3E90023 		ldrd	r2, [r3]
 1093 0a10 07F6B801 		addw	r1, r7, #2232
 1094 0a14 D1E90001 		ldrd	r0, [r1]
 1095 0a18 8446     		mov	ip, r0
 1096 0a1a 82EA0C0C 		eor	ip, r2, ip
 1097 0a1e C7F890C4 		str	ip, [r7, #1168]
 1098 0a22 4B40     		eors	r3, r3, r1
 1099 0a24 C7F89434 		str	r3, [r7, #1172]
 1100 0a28 07F59263 		add	r3, r7, #1168
 1101 0a2c D3E90023 		ldrd	r2, [r3]
 1102 0a30 07F64821 		addw	r1, r7, #2632
 1103 0a34 C1E90023 		strd	r2, [r1]
 146:fips202.c     ****         Ebu = BCu ^ ((~BCa) & BCe);
 1104              		.loc 1 146 23 discriminator 3
 1105 0a38 07F52B63 		add	r3, r7, #2736
 1106 0a3c D3E90023 		ldrd	r2, [r3]
 1107 0a40 D143     		mvns	r1, r2
 1108 0a42 C7F8B018 		str	r1, [r7, #2224]
 1109 0a46 DB43     		mvns	r3, r3
 1110 0a48 C7F8B438 		str	r3, [r7, #2228]
 1111              		.loc 1 146 29 discriminator 3
 1112 0a4c 07F6A823 		addw	r3, r7, #2728
 1113 0a50 D3E90023 		ldrd	r2, [r3]
 1114 0a54 07F50B61 		add	r1, r7, #2224
 1115 0a58 D1E90001 		ldrd	r0, [r1]
 1116 0a5c 8446     		mov	ip, r0
 1117 0a5e 0CEA020C 		and	ip, ip, r2
 1118 0a62 C7F8A8C8 		str	ip, [r7, #2216]
 1119 0a66 0B40     		ands	r3, r3, r1
 1120 0a68 C7F8AC38 		str	r3, [r7, #2220]
 1121              		.loc 1 146 13 discriminator 3
 1122 0a6c 07F52963 		add	r3, r7, #2704
 1123 0a70 D3E90023 		ldrd	r2, [r3]
 1124 0a74 07F6A801 		addw	r1, r7, #2216
 1125 0a78 D1E90001 		ldrd	r0, [r1]
 1126 0a7c 8446     		mov	ip, r0
 1127 0a7e 82EA0C0C 		eor	ip, r2, ip
 1128 0a82 C7F888C4 		str	ip, [r7, #1160]
 1129 0a86 4B40     		eors	r3, r3, r1
 1130 0a88 C7F88C34 		str	r3, [r7, #1164]
 1131 0a8c 07F59163 		add	r3, r7, #1160
 1132 0a90 D3E90023 		ldrd	r2, [r3]
 1133 0a94 07F52461 		add	r1, r7, #2624
 1134 0a98 C1E90023 		strd	r2, [r1]
 147:fips202.c     **** 
 148:fips202.c     ****         Abo ^= Do;
 1135              		.loc 1 148 13 discriminator 3
 1136 0a9c 07F53663 		add	r3, r7, #2912
 1137 0aa0 D3E90001 		ldrd	r0, [r3]
 1138 0aa4 07F52763 		add	r3, r7, #2672
 1139 0aa8 D3E90023 		ldrd	r2, [r3]
 1140 0aac 80EA020C 		eor	ip, r0, r2
 1141 0ab0 C7F880C4 		str	ip, [r7, #1152]
 1142 0ab4 4B40     		eors	r3, r3, r1
 1143 0ab6 C7F88434 		str	r3, [r7, #1156]
 1144 0aba 07F59063 		add	r3, r7, #1152
 1145 0abe D3E90023 		ldrd	r2, [r3]
 1146 0ac2 07F53661 		add	r1, r7, #2912
 1147 0ac6 C1E90023 		strd	r2, [r1]
 149:fips202.c     ****         BCa = ROL(Abo, 28);
 1148              		.loc 1 149 13 discriminator 3
 1149 0aca D7F8603B 		ldr	r3, [r7, #2912]
 1150 0ace 1A09     		lsrs	r2, r3, #4
 1151 0ad0 D7F8643B 		ldr	r3, [r7, #2916]
 1152 0ad4 1B07     		lsls	r3, r3, #28
 1153 0ad6 1343     		orrs	r3, r3, r2
 1154 0ad8 C7F87C34 		str	r3, [r7, #1148]
 1155 0adc D7F8643B 		ldr	r3, [r7, #2916]
 1156 0ae0 1A09     		lsrs	r2, r3, #4
 1157 0ae2 D7F8603B 		ldr	r3, [r7, #2912]
 1158 0ae6 1B07     		lsls	r3, r3, #28
 1159 0ae8 1343     		orrs	r3, r3, r2
 1160 0aea C7F87834 		str	r3, [r7, #1144]
 1161 0aee 07F58F63 		add	r3, r7, #1144
 1162 0af2 D3E90023 		ldrd	r2, [r3]
 1163 0af6 07F52B61 		add	r1, r7, #2736
 1164 0afa C1E90023 		strd	r2, [r1]
 150:fips202.c     ****         Agu ^= Du;
 1165              		.loc 1 150 13 discriminator 3
 1166 0afe 07F53363 		add	r3, r7, #2864
 1167 0b02 D3E90001 		ldrd	r0, [r3]
 1168 0b06 07F66823 		addw	r3, r7, #2664
 1169 0b0a D3E90023 		ldrd	r2, [r3]
 1170 0b0e 80EA020C 		eor	ip, r0, r2
 1171 0b12 C7F870C4 		str	ip, [r7, #1136]
 1172 0b16 4B40     		eors	r3, r3, r1
 1173 0b18 C7F87434 		str	r3, [r7, #1140]
 1174 0b1c 07F58E63 		add	r3, r7, #1136
 1175 0b20 D3E90023 		ldrd	r2, [r3]
 1176 0b24 07F53361 		add	r1, r7, #2864
 1177 0b28 C1E90023 		strd	r2, [r1]
 151:fips202.c     ****         BCe = ROL(Agu, 20);
 1178              		.loc 1 151 13 discriminator 3
 1179 0b2c D7F8303B 		ldr	r3, [r7, #2864]
 1180 0b30 1A0B     		lsrs	r2, r3, #12
 1181 0b32 D7F8343B 		ldr	r3, [r7, #2868]
 1182 0b36 1B05     		lsls	r3, r3, #20
 1183 0b38 1343     		orrs	r3, r3, r2
 1184 0b3a C7F86C34 		str	r3, [r7, #1132]
 1185 0b3e D7F8343B 		ldr	r3, [r7, #2868]
 1186 0b42 1A0B     		lsrs	r2, r3, #12
 1187 0b44 D7F8303B 		ldr	r3, [r7, #2864]
 1188 0b48 1B05     		lsls	r3, r3, #20
 1189 0b4a 1343     		orrs	r3, r3, r2
 1190 0b4c C7F86834 		str	r3, [r7, #1128]
 1191 0b50 07F58D63 		add	r3, r7, #1128
 1192 0b54 D3E90023 		ldrd	r2, [r3]
 1193 0b58 07F6A821 		addw	r1, r7, #2728
 1194 0b5c C1E90023 		strd	r2, [r1]
 152:fips202.c     ****         Aka ^= Da;
 1195              		.loc 1 152 13 discriminator 3
 1196 0b60 07F62833 		addw	r3, r7, #2856
 1197 0b64 D3E90001 		ldrd	r0, [r3]
 1198 0b68 07F68823 		addw	r3, r7, #2696
 1199 0b6c D3E90023 		ldrd	r2, [r3]
 1200 0b70 80EA020C 		eor	ip, r0, r2
 1201 0b74 C7F860C4 		str	ip, [r7, #1120]
 1202 0b78 4B40     		eors	r3, r3, r1
 1203 0b7a C7F86434 		str	r3, [r7, #1124]
 1204 0b7e 07F58C63 		add	r3, r7, #1120
 1205 0b82 D3E90023 		ldrd	r2, [r3]
 1206 0b86 07F62831 		addw	r1, r7, #2856
 1207 0b8a C1E90023 		strd	r2, [r1]
 153:fips202.c     ****         BCi = ROL(Aka, 3);
 1208              		.loc 1 153 13 discriminator 3
 1209 0b8e D7F8283B 		ldr	r3, [r7, #2856]
 1210 0b92 5A0F     		lsrs	r2, r3, #29
 1211 0b94 D7F82C3B 		ldr	r3, [r7, #2860]
 1212 0b98 DB00     		lsls	r3, r3, #3
 1213 0b9a 1343     		orrs	r3, r3, r2
 1214 0b9c C7F85C34 		str	r3, [r7, #1116]
 1215 0ba0 D7F82C3B 		ldr	r3, [r7, #2860]
 1216 0ba4 5A0F     		lsrs	r2, r3, #29
 1217 0ba6 D7F8283B 		ldr	r3, [r7, #2856]
 1218 0baa DB00     		lsls	r3, r3, #3
 1219 0bac 1343     		orrs	r3, r3, r2
 1220 0bae C7F85834 		str	r3, [r7, #1112]
 1221 0bb2 07F58B63 		add	r3, r7, #1112
 1222 0bb6 D3E90023 		ldrd	r2, [r3]
 1223 0bba 07F52A61 		add	r1, r7, #2720
 1224 0bbe C1E90023 		strd	r2, [r1]
 154:fips202.c     ****         Ame ^= De;
 1225              		.loc 1 154 13 discriminator 3
 1226 0bc2 07F6F823 		addw	r3, r7, #2808
 1227 0bc6 D3E90001 		ldrd	r0, [r3]
 1228 0bca 07F52863 		add	r3, r7, #2688
 1229 0bce D3E90023 		ldrd	r2, [r3]
 1230 0bd2 80EA020C 		eor	ip, r0, r2
 1231 0bd6 C7F850C4 		str	ip, [r7, #1104]
 1232 0bda 4B40     		eors	r3, r3, r1
 1233 0bdc C7F85434 		str	r3, [r7, #1108]
 1234 0be0 07F58A63 		add	r3, r7, #1104
 1235 0be4 D3E90023 		ldrd	r2, [r3]
 1236 0be8 07F6F821 		addw	r1, r7, #2808
 1237 0bec C1E90023 		strd	r2, [r1]
 155:fips202.c     ****         BCo = ROL(Ame, 45);
 1238              		.loc 1 155 13 discriminator 3
 1239 0bf0 D7F8FC3A 		ldr	r3, [r7, #2812]
 1240 0bf4 5A03     		lsls	r2, r3, #13
 1241 0bf6 01E0     		b	.L12
 1242              	.L13:
 1243              		.align	2
 1244              	.L11:
 1245 0bf8 00000000 		.word	KeccakF_RoundConstants
 1246              	.L12:
 1247 0bfc D7F8F83A 		ldr	r3, [r7, #2808]
 1248 0c00 DB0C     		lsrs	r3, r3, #19
 1249 0c02 1343     		orrs	r3, r3, r2
 1250 0c04 C7F84834 		str	r3, [r7, #1096]
 1251 0c08 D7F8F83A 		ldr	r3, [r7, #2808]
 1252 0c0c 5A03     		lsls	r2, r3, #13
 1253 0c0e D7F8FC3A 		ldr	r3, [r7, #2812]
 1254 0c12 DB0C     		lsrs	r3, r3, #19
 1255 0c14 1343     		orrs	r3, r3, r2
 1256 0c16 C7F84C34 		str	r3, [r7, #1100]
 1257 0c1a 07F58963 		add	r3, r7, #1096
 1258 0c1e D3E90023 		ldrd	r2, [r3]
 1259 0c22 07F69821 		addw	r1, r7, #2712
 1260 0c26 C1E90023 		strd	r2, [r1]
 156:fips202.c     ****         Asi ^= Di;
 1261              		.loc 1 156 13 discriminator 3
 1262 0c2a 07F6C823 		addw	r3, r7, #2760
 1263 0c2e D3E90001 		ldrd	r0, [r3]
 1264 0c32 07F67823 		addw	r3, r7, #2680
 1265 0c36 D3E90023 		ldrd	r2, [r3]
 1266 0c3a 80EA020C 		eor	ip, r0, r2
 1267 0c3e C7F840C4 		str	ip, [r7, #1088]
 1268 0c42 4B40     		eors	r3, r3, r1
 1269 0c44 C7F84434 		str	r3, [r7, #1092]
 1270 0c48 07F58863 		add	r3, r7, #1088
 1271 0c4c D3E90023 		ldrd	r2, [r3]
 1272 0c50 07F6C821 		addw	r1, r7, #2760
 1273 0c54 C1E90023 		strd	r2, [r1]
 157:fips202.c     ****         BCu = ROL(Asi, 61);
 1274              		.loc 1 157 13 discriminator 3
 1275 0c58 D7F8CC3A 		ldr	r3, [r7, #2764]
 1276 0c5c 5A07     		lsls	r2, r3, #29
 1277 0c5e D7F8C83A 		ldr	r3, [r7, #2760]
 1278 0c62 DB08     		lsrs	r3, r3, #3
 1279 0c64 1343     		orrs	r3, r3, r2
 1280 0c66 C7F83834 		str	r3, [r7, #1080]
 1281 0c6a D7F8C83A 		ldr	r3, [r7, #2760]
 1282 0c6e 5A07     		lsls	r2, r3, #29
 1283 0c70 D7F8CC3A 		ldr	r3, [r7, #2764]
 1284 0c74 DB08     		lsrs	r3, r3, #3
 1285 0c76 1343     		orrs	r3, r3, r2
 1286 0c78 C7F83C34 		str	r3, [r7, #1084]
 1287 0c7c 07F58763 		add	r3, r7, #1080
 1288 0c80 D3E90023 		ldrd	r2, [r3]
 1289 0c84 07F52961 		add	r1, r7, #2704
 1290 0c88 C1E90023 		strd	r2, [r1]
 158:fips202.c     ****         Ega = BCa ^ ((~BCe) & BCi);
 1291              		.loc 1 158 23 discriminator 3
 1292 0c8c 07F6A823 		addw	r3, r7, #2728
 1293 0c90 D3E90023 		ldrd	r2, [r3]
 1294 0c94 D143     		mvns	r1, r2
 1295 0c96 C7F8A018 		str	r1, [r7, #2208]
 1296 0c9a DB43     		mvns	r3, r3
 1297 0c9c C7F8A438 		str	r3, [r7, #2212]
 1298              		.loc 1 158 29 discriminator 3
 1299 0ca0 07F52A63 		add	r3, r7, #2720
 1300 0ca4 D3E90023 		ldrd	r2, [r3]
 1301 0ca8 07F50A61 		add	r1, r7, #2208
 1302 0cac D1E90001 		ldrd	r0, [r1]
 1303 0cb0 8446     		mov	ip, r0
 1304 0cb2 0CEA020C 		and	ip, ip, r2
 1305 0cb6 C7F898C8 		str	ip, [r7, #2200]
 1306 0cba 0B40     		ands	r3, r3, r1
 1307 0cbc C7F89C38 		str	r3, [r7, #2204]
 1308              		.loc 1 158 13 discriminator 3
 1309 0cc0 07F52B63 		add	r3, r7, #2736
 1310 0cc4 D3E90023 		ldrd	r2, [r3]
 1311 0cc8 07F69801 		addw	r1, r7, #2200
 1312 0ccc D1E90001 		ldrd	r0, [r1]
 1313 0cd0 8446     		mov	ip, r0
 1314 0cd2 82EA0C0C 		eor	ip, r2, ip
 1315 0cd6 C7F830C4 		str	ip, [r7, #1072]
 1316 0cda 4B40     		eors	r3, r3, r1
 1317 0cdc C7F83434 		str	r3, [r7, #1076]
 1318 0ce0 07F58663 		add	r3, r7, #1072
 1319 0ce4 D3E90023 		ldrd	r2, [r3]
 1320 0ce8 07F63821 		addw	r1, r7, #2616
 1321 0cec C1E90023 		strd	r2, [r1]
 159:fips202.c     ****         Ege = BCe ^ ((~BCi) & BCo);
 1322              		.loc 1 159 23 discriminator 3
 1323 0cf0 07F52A63 		add	r3, r7, #2720
 1324 0cf4 D3E90023 		ldrd	r2, [r3]
 1325 0cf8 D143     		mvns	r1, r2
 1326 0cfa C7F89018 		str	r1, [r7, #2192]
 1327 0cfe DB43     		mvns	r3, r3
 1328 0d00 C7F89438 		str	r3, [r7, #2196]
 1329              		.loc 1 159 29 discriminator 3
 1330 0d04 07F69823 		addw	r3, r7, #2712
 1331 0d08 D3E90023 		ldrd	r2, [r3]
 1332 0d0c 07F50961 		add	r1, r7, #2192
 1333 0d10 D1E90001 		ldrd	r0, [r1]
 1334 0d14 8446     		mov	ip, r0
 1335 0d16 0CEA020C 		and	ip, ip, r2
 1336 0d1a C7F888C8 		str	ip, [r7, #2184]
 1337 0d1e 0B40     		ands	r3, r3, r1
 1338 0d20 C7F88C38 		str	r3, [r7, #2188]
 1339              		.loc 1 159 13 discriminator 3
 1340 0d24 07F6A823 		addw	r3, r7, #2728
 1341 0d28 D3E90023 		ldrd	r2, [r3]
 1342 0d2c 07F68801 		addw	r1, r7, #2184
 1343 0d30 D1E90001 		ldrd	r0, [r1]
 1344 0d34 8446     		mov	ip, r0
 1345 0d36 82EA0C0C 		eor	ip, r2, ip
 1346 0d3a C7F828C4 		str	ip, [r7, #1064]
 1347 0d3e 4B40     		eors	r3, r3, r1
 1348 0d40 C7F82C34 		str	r3, [r7, #1068]
 1349 0d44 07F58563 		add	r3, r7, #1064
 1350 0d48 D3E90023 		ldrd	r2, [r3]
 1351 0d4c 07F52361 		add	r1, r7, #2608
 1352 0d50 C1E90023 		strd	r2, [r1]
 160:fips202.c     ****         Egi = BCi ^ ((~BCo) & BCu);
 1353              		.loc 1 160 23 discriminator 3
 1354 0d54 07F69823 		addw	r3, r7, #2712
 1355 0d58 D3E90023 		ldrd	r2, [r3]
 1356 0d5c D143     		mvns	r1, r2
 1357 0d5e C7F88018 		str	r1, [r7, #2176]
 1358 0d62 DB43     		mvns	r3, r3
 1359 0d64 C7F88438 		str	r3, [r7, #2180]
 1360              		.loc 1 160 29 discriminator 3
 1361 0d68 07F52963 		add	r3, r7, #2704
 1362 0d6c D3E90023 		ldrd	r2, [r3]
 1363 0d70 07F50861 		add	r1, r7, #2176
 1364 0d74 D1E90001 		ldrd	r0, [r1]
 1365 0d78 8446     		mov	ip, r0
 1366 0d7a 0CEA020C 		and	ip, ip, r2
 1367 0d7e C7F878C8 		str	ip, [r7, #2168]
 1368 0d82 0B40     		ands	r3, r3, r1
 1369 0d84 C7F87C38 		str	r3, [r7, #2172]
 1370              		.loc 1 160 13 discriminator 3
 1371 0d88 07F52A63 		add	r3, r7, #2720
 1372 0d8c D3E90023 		ldrd	r2, [r3]
 1373 0d90 07F67801 		addw	r1, r7, #2168
 1374 0d94 D1E90001 		ldrd	r0, [r1]
 1375 0d98 8446     		mov	ip, r0
 1376 0d9a 82EA0C0C 		eor	ip, r2, ip
 1377 0d9e C7F820C4 		str	ip, [r7, #1056]
 1378 0da2 4B40     		eors	r3, r3, r1
 1379 0da4 C7F82434 		str	r3, [r7, #1060]
 1380 0da8 07F58463 		add	r3, r7, #1056
 1381 0dac D3E90023 		ldrd	r2, [r3]
 1382 0db0 07F62821 		addw	r1, r7, #2600
 1383 0db4 C1E90023 		strd	r2, [r1]
 161:fips202.c     ****         Ego = BCo ^ ((~BCu) & BCa);
 1384              		.loc 1 161 23 discriminator 3
 1385 0db8 07F52963 		add	r3, r7, #2704
 1386 0dbc D3E90023 		ldrd	r2, [r3]
 1387 0dc0 D143     		mvns	r1, r2
 1388 0dc2 C7F87018 		str	r1, [r7, #2160]
 1389 0dc6 DB43     		mvns	r3, r3
 1390 0dc8 C7F87438 		str	r3, [r7, #2164]
 1391              		.loc 1 161 29 discriminator 3
 1392 0dcc 07F52B63 		add	r3, r7, #2736
 1393 0dd0 D3E90023 		ldrd	r2, [r3]
 1394 0dd4 07F50761 		add	r1, r7, #2160
 1395 0dd8 D1E90001 		ldrd	r0, [r1]
 1396 0ddc 8446     		mov	ip, r0
 1397 0dde 0CEA020C 		and	ip, ip, r2
 1398 0de2 C7F868C8 		str	ip, [r7, #2152]
 1399 0de6 0B40     		ands	r3, r3, r1
 1400 0de8 C7F86C38 		str	r3, [r7, #2156]
 1401              		.loc 1 161 13 discriminator 3
 1402 0dec 07F69823 		addw	r3, r7, #2712
 1403 0df0 D3E90023 		ldrd	r2, [r3]
 1404 0df4 07F66801 		addw	r1, r7, #2152
 1405 0df8 D1E90001 		ldrd	r0, [r1]
 1406 0dfc 8446     		mov	ip, r0
 1407 0dfe 82EA0C0C 		eor	ip, r2, ip
 1408 0e02 C7F818C4 		str	ip, [r7, #1048]
 1409 0e06 4B40     		eors	r3, r3, r1
 1410 0e08 C7F81C34 		str	r3, [r7, #1052]
 1411 0e0c 07F58363 		add	r3, r7, #1048
 1412 0e10 D3E90023 		ldrd	r2, [r3]
 1413 0e14 07F52261 		add	r1, r7, #2592
 1414 0e18 C1E90023 		strd	r2, [r1]
 162:fips202.c     ****         Egu = BCu ^ ((~BCa) & BCe);
 1415              		.loc 1 162 23 discriminator 3
 1416 0e1c 07F52B63 		add	r3, r7, #2736
 1417 0e20 D3E90023 		ldrd	r2, [r3]
 1418 0e24 D143     		mvns	r1, r2
 1419 0e26 C7F86018 		str	r1, [r7, #2144]
 1420 0e2a DB43     		mvns	r3, r3
 1421 0e2c C7F86438 		str	r3, [r7, #2148]
 1422              		.loc 1 162 29 discriminator 3
 1423 0e30 07F6A823 		addw	r3, r7, #2728
 1424 0e34 D3E90023 		ldrd	r2, [r3]
 1425 0e38 07F50661 		add	r1, r7, #2144
 1426 0e3c D1E90001 		ldrd	r0, [r1]
 1427 0e40 8446     		mov	ip, r0
 1428 0e42 0CEA020C 		and	ip, ip, r2
 1429 0e46 C7F858C8 		str	ip, [r7, #2136]
 1430 0e4a 0B40     		ands	r3, r3, r1
 1431 0e4c C7F85C38 		str	r3, [r7, #2140]
 1432              		.loc 1 162 13 discriminator 3
 1433 0e50 07F52963 		add	r3, r7, #2704
 1434 0e54 D3E90023 		ldrd	r2, [r3]
 1435 0e58 07F65801 		addw	r1, r7, #2136
 1436 0e5c D1E90001 		ldrd	r0, [r1]
 1437 0e60 8446     		mov	ip, r0
 1438 0e62 82EA0C0C 		eor	ip, r2, ip
 1439 0e66 C7F810C4 		str	ip, [r7, #1040]
 1440 0e6a 4B40     		eors	r3, r3, r1
 1441 0e6c C7F81434 		str	r3, [r7, #1044]
 1442 0e70 07F58263 		add	r3, r7, #1040
 1443 0e74 D3E90023 		ldrd	r2, [r3]
 1444 0e78 07F61821 		addw	r1, r7, #2584
 1445 0e7c C1E90023 		strd	r2, [r1]
 163:fips202.c     **** 
 164:fips202.c     ****         Abe ^= De;
 1446              		.loc 1 164 13 discriminator 3
 1447 0e80 07F53763 		add	r3, r7, #2928
 1448 0e84 D3E90001 		ldrd	r0, [r3]
 1449 0e88 07F52863 		add	r3, r7, #2688
 1450 0e8c D3E90023 		ldrd	r2, [r3]
 1451 0e90 80EA020C 		eor	ip, r0, r2
 1452 0e94 C7F808C4 		str	ip, [r7, #1032]
 1453 0e98 4B40     		eors	r3, r3, r1
 1454 0e9a C7F80C34 		str	r3, [r7, #1036]
 1455 0e9e 07F58163 		add	r3, r7, #1032
 1456 0ea2 D3E90023 		ldrd	r2, [r3]
 1457 0ea6 07F53761 		add	r1, r7, #2928
 1458 0eaa C1E90023 		strd	r2, [r1]
 165:fips202.c     ****         BCa = ROL(Abe, 1);
 1459              		.loc 1 165 13 discriminator 3
 1460 0eae D7F8703B 		ldr	r3, [r7, #2928]
 1461 0eb2 DA0F     		lsrs	r2, r3, #31
 1462 0eb4 D7F8743B 		ldr	r3, [r7, #2932]
 1463 0eb8 5B00     		lsls	r3, r3, #1
 1464 0eba 1343     		orrs	r3, r3, r2
 1465 0ebc C7F80434 		str	r3, [r7, #1028]
 1466 0ec0 D7F8743B 		ldr	r3, [r7, #2932]
 1467 0ec4 DA0F     		lsrs	r2, r3, #31
 1468 0ec6 D7F8703B 		ldr	r3, [r7, #2928]
 1469 0eca 5B00     		lsls	r3, r3, #1
 1470 0ecc 1343     		orrs	r3, r3, r2
 1471 0ece C7F80034 		str	r3, [r7, #1024]
 1472 0ed2 07F58063 		add	r3, r7, #1024
 1473 0ed6 D3E90023 		ldrd	r2, [r3]
 1474 0eda 07F52B61 		add	r1, r7, #2736
 1475 0ede C1E90023 		strd	r2, [r1]
 166:fips202.c     ****         Agi ^= Di;
 1476              		.loc 1 166 13 discriminator 3
 1477 0ee2 07F53463 		add	r3, r7, #2880
 1478 0ee6 D3E90001 		ldrd	r0, [r3]
 1479 0eea 07F67823 		addw	r3, r7, #2680
 1480 0eee D3E90023 		ldrd	r2, [r3]
 1481 0ef2 80EA020C 		eor	ip, r0, r2
 1482 0ef6 C7F8F8C3 		str	ip, [r7, #1016]
 1483 0efa 4B40     		eors	r3, r3, r1
 1484 0efc C7F8FC33 		str	r3, [r7, #1020]
 1485 0f00 D7E9FE23 		ldrd	r2, [r7, #1016]
 1486 0f04 07F53461 		add	r1, r7, #2880
 1487 0f08 C1E90023 		strd	r2, [r1]
 167:fips202.c     ****         BCe = ROL(Agi, 6);
 1488              		.loc 1 167 13 discriminator 3
 1489 0f0c D7F8403B 		ldr	r3, [r7, #2880]
 1490 0f10 9A0E     		lsrs	r2, r3, #26
 1491 0f12 D7F8443B 		ldr	r3, [r7, #2884]
 1492 0f16 9B01     		lsls	r3, r3, #6
 1493 0f18 1343     		orrs	r3, r3, r2
 1494 0f1a C7F8F433 		str	r3, [r7, #1012]
 1495 0f1e D7F8443B 		ldr	r3, [r7, #2884]
 1496 0f22 9A0E     		lsrs	r2, r3, #26
 1497 0f24 D7F8403B 		ldr	r3, [r7, #2880]
 1498 0f28 9B01     		lsls	r3, r3, #6
 1499 0f2a 1343     		orrs	r3, r3, r2
 1500 0f2c C7F8F033 		str	r3, [r7, #1008]
 1501 0f30 D7E9FC23 		ldrd	r2, [r7, #1008]
 1502 0f34 07F6A821 		addw	r1, r7, #2728
 1503 0f38 C1E90023 		strd	r2, [r1]
 168:fips202.c     ****         Ako ^= Do;
 1504              		.loc 1 168 13 discriminator 3
 1505 0f3c 07F53163 		add	r3, r7, #2832
 1506 0f40 D3E90001 		ldrd	r0, [r3]
 1507 0f44 07F52763 		add	r3, r7, #2672
 1508 0f48 D3E90023 		ldrd	r2, [r3]
 1509 0f4c 80EA020C 		eor	ip, r0, r2
 1510 0f50 C7F8E8C3 		str	ip, [r7, #1000]
 1511 0f54 4B40     		eors	r3, r3, r1
 1512 0f56 C7F8EC33 		str	r3, [r7, #1004]
 1513 0f5a D7E9FA23 		ldrd	r2, [r7, #1000]
 1514 0f5e 07F53161 		add	r1, r7, #2832
 1515 0f62 C1E90023 		strd	r2, [r1]
 169:fips202.c     ****         BCi = ROL(Ako, 25);
 1516              		.loc 1 169 13 discriminator 3
 1517 0f66 D7F8103B 		ldr	r3, [r7, #2832]
 1518 0f6a DA09     		lsrs	r2, r3, #7
 1519 0f6c D7F8143B 		ldr	r3, [r7, #2836]
 1520 0f70 5B06     		lsls	r3, r3, #25
 1521 0f72 1343     		orrs	r3, r3, r2
 1522 0f74 C7F8E433 		str	r3, [r7, #996]
 1523 0f78 D7F8143B 		ldr	r3, [r7, #2836]
 1524 0f7c DA09     		lsrs	r2, r3, #7
 1525 0f7e D7F8103B 		ldr	r3, [r7, #2832]
 1526 0f82 5B06     		lsls	r3, r3, #25
 1527 0f84 1343     		orrs	r3, r3, r2
 1528 0f86 C7F8E033 		str	r3, [r7, #992]
 1529 0f8a D7E9F823 		ldrd	r2, [r7, #992]
 1530 0f8e 07F52A61 		add	r1, r7, #2720
 1531 0f92 C1E90023 		strd	r2, [r1]
 170:fips202.c     ****         Amu ^= Du;
 1532              		.loc 1 170 13 discriminator 3
 1533 0f96 07F52E63 		add	r3, r7, #2784
 1534 0f9a D3E90001 		ldrd	r0, [r3]
 1535 0f9e 07F66823 		addw	r3, r7, #2664
 1536 0fa2 D3E90023 		ldrd	r2, [r3]
 1537 0fa6 80EA020C 		eor	ip, r0, r2
 1538 0faa C7F8D8C3 		str	ip, [r7, #984]
 1539 0fae 4B40     		eors	r3, r3, r1
 1540 0fb0 C7F8DC33 		str	r3, [r7, #988]
 1541 0fb4 D7E9F623 		ldrd	r2, [r7, #984]
 1542 0fb8 07F52E61 		add	r1, r7, #2784
 1543 0fbc C1E90023 		strd	r2, [r1]
 171:fips202.c     ****         BCo = ROL(Amu, 8);
 1544              		.loc 1 171 13 discriminator 3
 1545 0fc0 D7F8E03A 		ldr	r3, [r7, #2784]
 1546 0fc4 1A0E     		lsrs	r2, r3, #24
 1547 0fc6 D7F8E43A 		ldr	r3, [r7, #2788]
 1548 0fca 1B02     		lsls	r3, r3, #8
 1549 0fcc 1343     		orrs	r3, r3, r2
 1550 0fce C7F8D433 		str	r3, [r7, #980]
 1551 0fd2 D7F8E43A 		ldr	r3, [r7, #2788]
 1552 0fd6 1A0E     		lsrs	r2, r3, #24
 1553 0fd8 D7F8E03A 		ldr	r3, [r7, #2784]
 1554 0fdc 1B02     		lsls	r3, r3, #8
 1555 0fde 1343     		orrs	r3, r3, r2
 1556 0fe0 C7F8D033 		str	r3, [r7, #976]
 1557 0fe4 D7E9F423 		ldrd	r2, [r7, #976]
 1558 0fe8 07F69821 		addw	r1, r7, #2712
 1559 0fec C1E90023 		strd	r2, [r1]
 172:fips202.c     ****         Asa ^= Da;
 1560              		.loc 1 172 13 discriminator 3
 1561 0ff0 07F6D823 		addw	r3, r7, #2776
 1562 0ff4 D3E90001 		ldrd	r0, [r3]
 1563 0ff8 07F68823 		addw	r3, r7, #2696
 1564 0ffc D3E90023 		ldrd	r2, [r3]
 1565 1000 80EA020C 		eor	ip, r0, r2
 1566 1004 C7F8C8C3 		str	ip, [r7, #968]
 1567 1008 4B40     		eors	r3, r3, r1
 1568 100a C7F8CC33 		str	r3, [r7, #972]
 1569 100e D7E9F223 		ldrd	r2, [r7, #968]
 1570 1012 07F6D821 		addw	r1, r7, #2776
 1571 1016 C1E90023 		strd	r2, [r1]
 173:fips202.c     ****         BCu = ROL(Asa, 18);
 1572              		.loc 1 173 13 discriminator 3
 1573 101a D7F8D83A 		ldr	r3, [r7, #2776]
 1574 101e 9A0B     		lsrs	r2, r3, #14
 1575 1020 D7F8DC3A 		ldr	r3, [r7, #2780]
 1576 1024 9B04     		lsls	r3, r3, #18
 1577 1026 1343     		orrs	r3, r3, r2
 1578 1028 C7F8C433 		str	r3, [r7, #964]
 1579 102c D7F8DC3A 		ldr	r3, [r7, #2780]
 1580 1030 9A0B     		lsrs	r2, r3, #14
 1581 1032 D7F8D83A 		ldr	r3, [r7, #2776]
 1582 1036 9B04     		lsls	r3, r3, #18
 1583 1038 1343     		orrs	r3, r3, r2
 1584 103a C7F8C033 		str	r3, [r7, #960]
 1585 103e D7E9F023 		ldrd	r2, [r7, #960]
 1586 1042 07F52961 		add	r1, r7, #2704
 1587 1046 C1E90023 		strd	r2, [r1]
 174:fips202.c     ****         Eka = BCa ^ ((~BCe) & BCi);
 1588              		.loc 1 174 23 discriminator 3
 1589 104a 07F6A823 		addw	r3, r7, #2728
 1590 104e D3E90023 		ldrd	r2, [r3]
 1591 1052 D143     		mvns	r1, r2
 1592 1054 C7F85018 		str	r1, [r7, #2128]
 1593 1058 DB43     		mvns	r3, r3
 1594 105a C7F85438 		str	r3, [r7, #2132]
 1595              		.loc 1 174 29 discriminator 3
 1596 105e 07F52A63 		add	r3, r7, #2720
 1597 1062 D3E90023 		ldrd	r2, [r3]
 1598 1066 07F50561 		add	r1, r7, #2128
 1599 106a D1E90001 		ldrd	r0, [r1]
 1600 106e 8446     		mov	ip, r0
 1601 1070 0CEA020C 		and	ip, ip, r2
 1602 1074 C7F848C8 		str	ip, [r7, #2120]
 1603 1078 0B40     		ands	r3, r3, r1
 1604 107a C7F84C38 		str	r3, [r7, #2124]
 1605              		.loc 1 174 13 discriminator 3
 1606 107e 07F52B63 		add	r3, r7, #2736
 1607 1082 D3E90023 		ldrd	r2, [r3]
 1608 1086 07F64801 		addw	r1, r7, #2120
 1609 108a D1E90001 		ldrd	r0, [r1]
 1610 108e 8446     		mov	ip, r0
 1611 1090 82EA0C0C 		eor	ip, r2, ip
 1612 1094 C7F8B8C3 		str	ip, [r7, #952]
 1613 1098 4B40     		eors	r3, r3, r1
 1614 109a C7F8BC33 		str	r3, [r7, #956]
 1615 109e D7E9EE23 		ldrd	r2, [r7, #952]
 1616 10a2 07F52161 		add	r1, r7, #2576
 1617 10a6 C1E90023 		strd	r2, [r1]
 175:fips202.c     ****         Eke = BCe ^ ((~BCi) & BCo);
 1618              		.loc 1 175 23 discriminator 3
 1619 10aa 07F52A63 		add	r3, r7, #2720
 1620 10ae D3E90023 		ldrd	r2, [r3]
 1621 10b2 D143     		mvns	r1, r2
 1622 10b4 C7F84018 		str	r1, [r7, #2112]
 1623 10b8 DB43     		mvns	r3, r3
 1624 10ba C7F84438 		str	r3, [r7, #2116]
 1625              		.loc 1 175 29 discriminator 3
 1626 10be 07F69823 		addw	r3, r7, #2712
 1627 10c2 D3E90023 		ldrd	r2, [r3]
 1628 10c6 07F50461 		add	r1, r7, #2112
 1629 10ca D1E90001 		ldrd	r0, [r1]
 1630 10ce 8446     		mov	ip, r0
 1631 10d0 0CEA020C 		and	ip, ip, r2
 1632 10d4 C7F838C8 		str	ip, [r7, #2104]
 1633 10d8 0B40     		ands	r3, r3, r1
 1634 10da C7F83C38 		str	r3, [r7, #2108]
 1635              		.loc 1 175 13 discriminator 3
 1636 10de 07F6A823 		addw	r3, r7, #2728
 1637 10e2 D3E90023 		ldrd	r2, [r3]
 1638 10e6 07F63801 		addw	r1, r7, #2104
 1639 10ea D1E90001 		ldrd	r0, [r1]
 1640 10ee 8446     		mov	ip, r0
 1641 10f0 82EA0C0C 		eor	ip, r2, ip
 1642 10f4 C7F8B0C3 		str	ip, [r7, #944]
 1643 10f8 4B40     		eors	r3, r3, r1
 1644 10fa C7F8B433 		str	r3, [r7, #948]
 1645 10fe D7E9EC23 		ldrd	r2, [r7, #944]
 1646 1102 07F60821 		addw	r1, r7, #2568
 1647 1106 C1E90023 		strd	r2, [r1]
 176:fips202.c     ****         Eki = BCi ^ ((~BCo) & BCu);
 1648              		.loc 1 176 23 discriminator 3
 1649 110a 07F69823 		addw	r3, r7, #2712
 1650 110e D3E90023 		ldrd	r2, [r3]
 1651 1112 D143     		mvns	r1, r2
 1652 1114 C7F83018 		str	r1, [r7, #2096]
 1653 1118 DB43     		mvns	r3, r3
 1654 111a C7F83438 		str	r3, [r7, #2100]
 1655              		.loc 1 176 29 discriminator 3
 1656 111e 07F52963 		add	r3, r7, #2704
 1657 1122 D3E90023 		ldrd	r2, [r3]
 1658 1126 07F50361 		add	r1, r7, #2096
 1659 112a D1E90001 		ldrd	r0, [r1]
 1660 112e 8446     		mov	ip, r0
 1661 1130 0CEA020C 		and	ip, ip, r2
 1662 1134 C7F828C8 		str	ip, [r7, #2088]
 1663 1138 0B40     		ands	r3, r3, r1
 1664 113a C7F82C38 		str	r3, [r7, #2092]
 1665              		.loc 1 176 13 discriminator 3
 1666 113e 07F52A63 		add	r3, r7, #2720
 1667 1142 D3E90023 		ldrd	r2, [r3]
 1668 1146 07F62801 		addw	r1, r7, #2088
 1669 114a D1E90001 		ldrd	r0, [r1]
 1670 114e 8446     		mov	ip, r0
 1671 1150 82EA0C0C 		eor	ip, r2, ip
 1672 1154 C7F8A8C3 		str	ip, [r7, #936]
 1673 1158 4B40     		eors	r3, r3, r1
 1674 115a C7F8AC33 		str	r3, [r7, #940]
 1675 115e D7E9EA23 		ldrd	r2, [r7, #936]
 1676 1162 07F52061 		add	r1, r7, #2560
 1677 1166 C1E90023 		strd	r2, [r1]
 177:fips202.c     ****         Eko = BCo ^ ((~BCu) & BCa);
 1678              		.loc 1 177 23 discriminator 3
 1679 116a 07F52963 		add	r3, r7, #2704
 1680 116e D3E90023 		ldrd	r2, [r3]
 1681 1172 D143     		mvns	r1, r2
 1682 1174 C7F82018 		str	r1, [r7, #2080]
 1683 1178 DB43     		mvns	r3, r3
 1684 117a C7F82438 		str	r3, [r7, #2084]
 1685              		.loc 1 177 29 discriminator 3
 1686 117e 07F52B63 		add	r3, r7, #2736
 1687 1182 D3E90023 		ldrd	r2, [r3]
 1688 1186 07F50261 		add	r1, r7, #2080
 1689 118a D1E90001 		ldrd	r0, [r1]
 1690 118e 8446     		mov	ip, r0
 1691 1190 0CEA020C 		and	ip, ip, r2
 1692 1194 C7F818C8 		str	ip, [r7, #2072]
 1693 1198 0B40     		ands	r3, r3, r1
 1694 119a C7F81C38 		str	r3, [r7, #2076]
 1695              		.loc 1 177 13 discriminator 3
 1696 119e 07F69823 		addw	r3, r7, #2712
 1697 11a2 D3E90023 		ldrd	r2, [r3]
 1698 11a6 07F61801 		addw	r1, r7, #2072
 1699 11aa D1E90001 		ldrd	r0, [r1]
 1700 11ae 8446     		mov	ip, r0
 1701 11b0 82EA0C0C 		eor	ip, r2, ip
 1702 11b4 C7F8A0C3 		str	ip, [r7, #928]
 1703 11b8 4B40     		eors	r3, r3, r1
 1704 11ba C7F8A433 		str	r3, [r7, #932]
 1705 11be D7E9E823 		ldrd	r2, [r7, #928]
 1706 11c2 07F6F811 		addw	r1, r7, #2552
 1707 11c6 C1E90023 		strd	r2, [r1]
 178:fips202.c     ****         Eku = BCu ^ ((~BCa) & BCe);
 1708              		.loc 1 178 23 discriminator 3
 1709 11ca 07F52B63 		add	r3, r7, #2736
 1710 11ce D3E90023 		ldrd	r2, [r3]
 1711 11d2 D143     		mvns	r1, r2
 1712 11d4 C7F81018 		str	r1, [r7, #2064]
 1713 11d8 DB43     		mvns	r3, r3
 1714 11da C7F81438 		str	r3, [r7, #2068]
 1715              		.loc 1 178 29 discriminator 3
 1716 11de 07F6A823 		addw	r3, r7, #2728
 1717 11e2 D3E90023 		ldrd	r2, [r3]
 1718 11e6 07F50161 		add	r1, r7, #2064
 1719 11ea D1E90001 		ldrd	r0, [r1]
 1720 11ee 8446     		mov	ip, r0
 1721 11f0 0CEA020C 		and	ip, ip, r2
 1722 11f4 C7F808C8 		str	ip, [r7, #2056]
 1723 11f8 0B40     		ands	r3, r3, r1
 1724 11fa C7F80C38 		str	r3, [r7, #2060]
 1725              		.loc 1 178 13 discriminator 3
 1726 11fe 07F52963 		add	r3, r7, #2704
 1727 1202 D3E90023 		ldrd	r2, [r3]
 1728 1206 07F60801 		addw	r1, r7, #2056
 1729 120a D1E90001 		ldrd	r0, [r1]
 1730 120e 8446     		mov	ip, r0
 1731 1210 82EA0C0C 		eor	ip, r2, ip
 1732 1214 C7F898C3 		str	ip, [r7, #920]
 1733 1218 4B40     		eors	r3, r3, r1
 1734 121a C7F89C33 		str	r3, [r7, #924]
 1735 121e D7E9E623 		ldrd	r2, [r7, #920]
 1736 1222 07F51F61 		add	r1, r7, #2544
 1737 1226 C1E90023 		strd	r2, [r1]
 179:fips202.c     **** 
 180:fips202.c     ****         Abu ^= Du;
 1738              		.loc 1 180 13 discriminator 3
 1739 122a 07F65833 		addw	r3, r7, #2904
 1740 122e D3E90001 		ldrd	r0, [r3]
 1741 1232 07F66823 		addw	r3, r7, #2664
 1742 1236 D3E90023 		ldrd	r2, [r3]
 1743 123a 80EA020C 		eor	ip, r0, r2
 1744 123e C7F890C3 		str	ip, [r7, #912]
 1745 1242 4B40     		eors	r3, r3, r1
 1746 1244 C7F89433 		str	r3, [r7, #916]
 1747 1248 D7E9E423 		ldrd	r2, [r7, #912]
 1748 124c 07F65831 		addw	r1, r7, #2904
 1749 1250 C1E90023 		strd	r2, [r1]
 181:fips202.c     ****         BCa = ROL(Abu, 27);
 1750              		.loc 1 181 13 discriminator 3
 1751 1254 D7F8583B 		ldr	r3, [r7, #2904]
 1752 1258 5A09     		lsrs	r2, r3, #5
 1753 125a D7F85C3B 		ldr	r3, [r7, #2908]
 1754 125e DB06     		lsls	r3, r3, #27
 1755 1260 1343     		orrs	r3, r3, r2
 1756 1262 C7F88C33 		str	r3, [r7, #908]
 1757 1266 D7F85C3B 		ldr	r3, [r7, #2908]
 1758 126a 5A09     		lsrs	r2, r3, #5
 1759 126c D7F8583B 		ldr	r3, [r7, #2904]
 1760 1270 DB06     		lsls	r3, r3, #27
 1761 1272 1343     		orrs	r3, r3, r2
 1762 1274 C7F88833 		str	r3, [r7, #904]
 1763 1278 D7E9E223 		ldrd	r2, [r7, #904]
 1764 127c 07F52B61 		add	r1, r7, #2736
 1765 1280 C1E90023 		strd	r2, [r1]
 182:fips202.c     ****         Aga ^= Da;
 1766              		.loc 1 182 13 discriminator 3
 1767 1284 07F53563 		add	r3, r7, #2896
 1768 1288 D3E90001 		ldrd	r0, [r3]
 1769 128c 07F68823 		addw	r3, r7, #2696
 1770 1290 D3E90023 		ldrd	r2, [r3]
 1771 1294 80EA020C 		eor	ip, r0, r2
 1772 1298 C7F880C3 		str	ip, [r7, #896]
 1773 129c 4B40     		eors	r3, r3, r1
 1774 129e C7F88433 		str	r3, [r7, #900]
 1775 12a2 D7E9E023 		ldrd	r2, [r7, #896]
 1776 12a6 07F53561 		add	r1, r7, #2896
 1777 12aa C1E90023 		strd	r2, [r1]
 183:fips202.c     ****         BCe = ROL(Aga, 36);
 1778              		.loc 1 183 13 discriminator 3
 1779 12ae D7F8543B 		ldr	r3, [r7, #2900]
 1780 12b2 1A01     		lsls	r2, r3, #4
 1781 12b4 D7F8503B 		ldr	r3, [r7, #2896]
 1782 12b8 1B0F     		lsrs	r3, r3, #28
 1783 12ba 1343     		orrs	r3, r3, r2
 1784 12bc C7F87833 		str	r3, [r7, #888]
 1785 12c0 D7F8503B 		ldr	r3, [r7, #2896]
 1786 12c4 1A01     		lsls	r2, r3, #4
 1787 12c6 D7F8543B 		ldr	r3, [r7, #2900]
 1788 12ca 1B0F     		lsrs	r3, r3, #28
 1789 12cc 1343     		orrs	r3, r3, r2
 1790 12ce C7F87C33 		str	r3, [r7, #892]
 1791 12d2 D7E9DE23 		ldrd	r2, [r7, #888]
 1792 12d6 07F6A821 		addw	r1, r7, #2728
 1793 12da C1E90023 		strd	r2, [r1]
 184:fips202.c     ****         Ake ^= De;
 1794              		.loc 1 184 13 discriminator 3
 1795 12de 07F53263 		add	r3, r7, #2848
 1796 12e2 D3E90001 		ldrd	r0, [r3]
 1797 12e6 07F52863 		add	r3, r7, #2688
 1798 12ea D3E90023 		ldrd	r2, [r3]
 1799 12ee 80EA020C 		eor	ip, r0, r2
 1800 12f2 C7F870C3 		str	ip, [r7, #880]
 1801 12f6 4B40     		eors	r3, r3, r1
 1802 12f8 C7F87433 		str	r3, [r7, #884]
 1803 12fc D7E9DC23 		ldrd	r2, [r7, #880]
 1804 1300 07F53261 		add	r1, r7, #2848
 1805 1304 C1E90023 		strd	r2, [r1]
 185:fips202.c     ****         BCi = ROL(Ake, 10);
 1806              		.loc 1 185 13 discriminator 3
 1807 1308 D7F8203B 		ldr	r3, [r7, #2848]
 1808 130c 9A0D     		lsrs	r2, r3, #22
 1809 130e D7F8243B 		ldr	r3, [r7, #2852]
 1810 1312 9B02     		lsls	r3, r3, #10
 1811 1314 1343     		orrs	r3, r3, r2
 1812 1316 C7F86C33 		str	r3, [r7, #876]
 1813 131a D7F8243B 		ldr	r3, [r7, #2852]
 1814 131e 9A0D     		lsrs	r2, r3, #22
 1815 1320 D7F8203B 		ldr	r3, [r7, #2848]
 1816 1324 9B02     		lsls	r3, r3, #10
 1817 1326 1343     		orrs	r3, r3, r2
 1818 1328 C7F86833 		str	r3, [r7, #872]
 1819 132c D7E9DA23 		ldrd	r2, [r7, #872]
 1820 1330 07F52A61 		add	r1, r7, #2720
 1821 1334 C1E90023 		strd	r2, [r1]
 186:fips202.c     ****         Ami ^= Di;
 1822              		.loc 1 186 13 discriminator 3
 1823 1338 07F52F63 		add	r3, r7, #2800
 1824 133c D3E90001 		ldrd	r0, [r3]
 1825 1340 07F67823 		addw	r3, r7, #2680
 1826 1344 D3E90023 		ldrd	r2, [r3]
 1827 1348 80EA020C 		eor	ip, r0, r2
 1828 134c C7F860C3 		str	ip, [r7, #864]
 1829 1350 4B40     		eors	r3, r3, r1
 1830 1352 C7F86433 		str	r3, [r7, #868]
 1831 1356 D7E9D823 		ldrd	r2, [r7, #864]
 1832 135a 07F52F61 		add	r1, r7, #2800
 1833 135e C1E90023 		strd	r2, [r1]
 187:fips202.c     ****         BCo = ROL(Ami, 15);
 1834              		.loc 1 187 13 discriminator 3
 1835 1362 D7F8F03A 		ldr	r3, [r7, #2800]
 1836 1366 5A0C     		lsrs	r2, r3, #17
 1837 1368 D7F8F43A 		ldr	r3, [r7, #2804]
 1838 136c DB03     		lsls	r3, r3, #15
 1839 136e 1343     		orrs	r3, r3, r2
 1840 1370 C7F85C33 		str	r3, [r7, #860]
 1841 1374 D7F8F43A 		ldr	r3, [r7, #2804]
 1842 1378 5A0C     		lsrs	r2, r3, #17
 1843 137a D7F8F03A 		ldr	r3, [r7, #2800]
 1844 137e DB03     		lsls	r3, r3, #15
 1845 1380 1343     		orrs	r3, r3, r2
 1846 1382 C7F85833 		str	r3, [r7, #856]
 1847 1386 D7E9D623 		ldrd	r2, [r7, #856]
 1848 138a 07F69821 		addw	r1, r7, #2712
 1849 138e C1E90023 		strd	r2, [r1]
 188:fips202.c     ****         Aso ^= Do;
 1850              		.loc 1 188 13 discriminator 3
 1851 1392 07F52C63 		add	r3, r7, #2752
 1852 1396 D3E90001 		ldrd	r0, [r3]
 1853 139a 07F52763 		add	r3, r7, #2672
 1854 139e D3E90023 		ldrd	r2, [r3]
 1855 13a2 80EA020C 		eor	ip, r0, r2
 1856 13a6 C7F850C3 		str	ip, [r7, #848]
 1857 13aa 4B40     		eors	r3, r3, r1
 1858 13ac C7F85433 		str	r3, [r7, #852]
 1859 13b0 D7E9D423 		ldrd	r2, [r7, #848]
 1860 13b4 07F52C61 		add	r1, r7, #2752
 1861 13b8 C1E90023 		strd	r2, [r1]
 189:fips202.c     ****         BCu = ROL(Aso, 56);
 1862              		.loc 1 189 13 discriminator 3
 1863 13bc D7F8C43A 		ldr	r3, [r7, #2756]
 1864 13c0 1A06     		lsls	r2, r3, #24
 1865 13c2 D7F8C03A 		ldr	r3, [r7, #2752]
 1866 13c6 1B0A     		lsrs	r3, r3, #8
 1867 13c8 1343     		orrs	r3, r3, r2
 1868 13ca C7F84833 		str	r3, [r7, #840]
 1869 13ce D7F8C03A 		ldr	r3, [r7, #2752]
 1870 13d2 1A06     		lsls	r2, r3, #24
 1871 13d4 D7F8C43A 		ldr	r3, [r7, #2756]
 1872 13d8 1B0A     		lsrs	r3, r3, #8
 1873 13da 1343     		orrs	r3, r3, r2
 1874 13dc C7F84C33 		str	r3, [r7, #844]
 1875 13e0 D7E9D223 		ldrd	r2, [r7, #840]
 1876 13e4 07F52961 		add	r1, r7, #2704
 1877 13e8 C1E90023 		strd	r2, [r1]
 190:fips202.c     ****         Ema = BCa ^ ((~BCe) & BCi);
 1878              		.loc 1 190 23 discriminator 3
 1879 13ec 07F6A823 		addw	r3, r7, #2728
 1880 13f0 D3E90023 		ldrd	r2, [r3]
 1881 13f4 D143     		mvns	r1, r2
 1882 13f6 C7F80018 		str	r1, [r7, #2048]
 1883 13fa DB43     		mvns	r3, r3
 1884 13fc C7F80438 		str	r3, [r7, #2052]
 1885              		.loc 1 190 29 discriminator 3
 1886 1400 07F52A63 		add	r3, r7, #2720
 1887 1404 D3E90023 		ldrd	r2, [r3]
 1888 1408 07F50061 		add	r1, r7, #2048
 1889 140c D1E90001 		ldrd	r0, [r1]
 1890 1410 8446     		mov	ip, r0
 1891 1412 0CEA020C 		and	ip, ip, r2
 1892 1416 C7F8F8C7 		str	ip, [r7, #2040]
 1893 141a 0B40     		ands	r3, r3, r1
 1894 141c C7F8FC37 		str	r3, [r7, #2044]
 1895              		.loc 1 190 13 discriminator 3
 1896 1420 07F52B63 		add	r3, r7, #2736
 1897 1424 D3E90023 		ldrd	r2, [r3]
 1898 1428 07F5FF61 		add	r1, r7, #2040
 1899 142c D1E90001 		ldrd	r0, [r1]
 1900 1430 8446     		mov	ip, r0
 1901 1432 82EA0C0C 		eor	ip, r2, ip
 1902 1436 C7F840C3 		str	ip, [r7, #832]
 1903 143a 4B40     		eors	r3, r3, r1
 1904 143c C7F84433 		str	r3, [r7, #836]
 1905 1440 D7E9D023 		ldrd	r2, [r7, #832]
 1906 1444 07F6E811 		addw	r1, r7, #2536
 1907 1448 C1E90023 		strd	r2, [r1]
 191:fips202.c     ****         Eme = BCe ^ ((~BCi) & BCo);
 1908              		.loc 1 191 23 discriminator 3
 1909 144c 07F52A63 		add	r3, r7, #2720
 1910 1450 D3E90023 		ldrd	r2, [r3]
 1911 1454 D143     		mvns	r1, r2
 1912 1456 C7F8F017 		str	r1, [r7, #2032]
 1913 145a DB43     		mvns	r3, r3
 1914 145c C7F8F437 		str	r3, [r7, #2036]
 1915              		.loc 1 191 29 discriminator 3
 1916 1460 07F69823 		addw	r3, r7, #2712
 1917 1464 D3E90023 		ldrd	r2, [r3]
 1918 1468 07F5FE61 		add	r1, r7, #2032
 1919 146c D1E90001 		ldrd	r0, [r1]
 1920 1470 8446     		mov	ip, r0
 1921 1472 0CEA020C 		and	ip, ip, r2
 1922 1476 C7F8E8C7 		str	ip, [r7, #2024]
 1923 147a 0B40     		ands	r3, r3, r1
 1924 147c C7F8EC37 		str	r3, [r7, #2028]
 1925              		.loc 1 191 13 discriminator 3
 1926 1480 07F6A823 		addw	r3, r7, #2728
 1927 1484 D3E90023 		ldrd	r2, [r3]
 1928 1488 07F5FD61 		add	r1, r7, #2024
 1929 148c D1E90001 		ldrd	r0, [r1]
 1930 1490 8446     		mov	ip, r0
 1931 1492 82EA0C0C 		eor	ip, r2, ip
 1932 1496 C7F838C3 		str	ip, [r7, #824]
 1933 149a 4B40     		eors	r3, r3, r1
 1934 149c C7F83C33 		str	r3, [r7, #828]
 1935 14a0 D7E9CE23 		ldrd	r2, [r7, #824]
 1936 14a4 07F51E61 		add	r1, r7, #2528
 1937 14a8 C1E90023 		strd	r2, [r1]
 192:fips202.c     ****         Emi = BCi ^ ((~BCo) & BCu);
 1938              		.loc 1 192 23 discriminator 3
 1939 14ac 07F69823 		addw	r3, r7, #2712
 1940 14b0 D3E90023 		ldrd	r2, [r3]
 1941 14b4 D143     		mvns	r1, r2
 1942 14b6 C7F8E017 		str	r1, [r7, #2016]
 1943 14ba DB43     		mvns	r3, r3
 1944 14bc C7F8E437 		str	r3, [r7, #2020]
 1945              		.loc 1 192 29 discriminator 3
 1946 14c0 07F52963 		add	r3, r7, #2704
 1947 14c4 D3E90023 		ldrd	r2, [r3]
 1948 14c8 07F5FC61 		add	r1, r7, #2016
 1949 14cc D1E90001 		ldrd	r0, [r1]
 1950 14d0 8446     		mov	ip, r0
 1951 14d2 0CEA020C 		and	ip, ip, r2
 1952 14d6 C7F8D8C7 		str	ip, [r7, #2008]
 1953 14da 0B40     		ands	r3, r3, r1
 1954 14dc C7F8DC37 		str	r3, [r7, #2012]
 1955              		.loc 1 192 13 discriminator 3
 1956 14e0 07F52A63 		add	r3, r7, #2720
 1957 14e4 D3E90023 		ldrd	r2, [r3]
 1958 14e8 07F5FB61 		add	r1, r7, #2008
 1959 14ec D1E90001 		ldrd	r0, [r1]
 1960 14f0 8446     		mov	ip, r0
 1961 14f2 82EA0C0C 		eor	ip, r2, ip
 1962 14f6 C7F830C3 		str	ip, [r7, #816]
 1963 14fa 4B40     		eors	r3, r3, r1
 1964 14fc C7F83433 		str	r3, [r7, #820]
 1965 1500 D7E9CC23 		ldrd	r2, [r7, #816]
 1966 1504 07F6D811 		addw	r1, r7, #2520
 1967 1508 C1E90023 		strd	r2, [r1]
 193:fips202.c     ****         Emo = BCo ^ ((~BCu) & BCa);
 1968              		.loc 1 193 23 discriminator 3
 1969 150c 07F52963 		add	r3, r7, #2704
 1970 1510 D3E90023 		ldrd	r2, [r3]
 1971 1514 D143     		mvns	r1, r2
 1972 1516 C7F8D017 		str	r1, [r7, #2000]
 1973 151a DB43     		mvns	r3, r3
 1974 151c C7F8D437 		str	r3, [r7, #2004]
 1975              		.loc 1 193 29 discriminator 3
 1976 1520 07F52B63 		add	r3, r7, #2736
 1977 1524 D3E90023 		ldrd	r2, [r3]
 1978 1528 07F5FA61 		add	r1, r7, #2000
 1979 152c D1E90001 		ldrd	r0, [r1]
 1980 1530 8446     		mov	ip, r0
 1981 1532 0CEA020C 		and	ip, ip, r2
 1982 1536 C7F8C8C7 		str	ip, [r7, #1992]
 1983 153a 0B40     		ands	r3, r3, r1
 1984 153c C7F8CC37 		str	r3, [r7, #1996]
 1985              		.loc 1 193 13 discriminator 3
 1986 1540 07F69823 		addw	r3, r7, #2712
 1987 1544 D3E90023 		ldrd	r2, [r3]
 1988 1548 07F5F961 		add	r1, r7, #1992
 1989 154c D1E90001 		ldrd	r0, [r1]
 1990 1550 8446     		mov	ip, r0
 1991 1552 82EA0C0C 		eor	ip, r2, ip
 1992 1556 C7F828C3 		str	ip, [r7, #808]
 1993 155a 4B40     		eors	r3, r3, r1
 1994 155c C7F82C33 		str	r3, [r7, #812]
 1995 1560 D7E9CA23 		ldrd	r2, [r7, #808]
 1996 1564 07F51D61 		add	r1, r7, #2512
 1997 1568 C1E90023 		strd	r2, [r1]
 194:fips202.c     ****         Emu = BCu ^ ((~BCa) & BCe);
 1998              		.loc 1 194 23 discriminator 3
 1999 156c 07F52B63 		add	r3, r7, #2736
 2000 1570 D3E90023 		ldrd	r2, [r3]
 2001 1574 D143     		mvns	r1, r2
 2002 1576 C7F8C017 		str	r1, [r7, #1984]
 2003 157a DB43     		mvns	r3, r3
 2004 157c C7F8C437 		str	r3, [r7, #1988]
 2005              		.loc 1 194 29 discriminator 3
 2006 1580 07F6A823 		addw	r3, r7, #2728
 2007 1584 D3E90023 		ldrd	r2, [r3]
 2008 1588 07F5F861 		add	r1, r7, #1984
 2009 158c D1E90001 		ldrd	r0, [r1]
 2010 1590 8446     		mov	ip, r0
 2011 1592 0CEA020C 		and	ip, ip, r2
 2012 1596 C7F8B8C7 		str	ip, [r7, #1976]
 2013 159a 0B40     		ands	r3, r3, r1
 2014 159c C7F8BC37 		str	r3, [r7, #1980]
 2015              		.loc 1 194 13 discriminator 3
 2016 15a0 07F52963 		add	r3, r7, #2704
 2017 15a4 D3E90023 		ldrd	r2, [r3]
 2018 15a8 07F5F761 		add	r1, r7, #1976
 2019 15ac D1E90001 		ldrd	r0, [r1]
 2020 15b0 8446     		mov	ip, r0
 2021 15b2 82EA0C0C 		eor	ip, r2, ip
 2022 15b6 C7F820C3 		str	ip, [r7, #800]
 2023 15ba 4B40     		eors	r3, r3, r1
 2024 15bc C7F82433 		str	r3, [r7, #804]
 2025 15c0 D7E9C823 		ldrd	r2, [r7, #800]
 2026 15c4 07F6C811 		addw	r1, r7, #2504
 2027 15c8 C1E90023 		strd	r2, [r1]
 195:fips202.c     **** 
 196:fips202.c     ****         Abi ^= Di;
 2028              		.loc 1 196 13 discriminator 3
 2029 15cc 07F66833 		addw	r3, r7, #2920
 2030 15d0 D3E90001 		ldrd	r0, [r3]
 2031 15d4 07F67823 		addw	r3, r7, #2680
 2032 15d8 D3E90023 		ldrd	r2, [r3]
 2033 15dc 80EA020C 		eor	ip, r0, r2
 2034 15e0 C7F818C3 		str	ip, [r7, #792]
 2035 15e4 4B40     		eors	r3, r3, r1
 2036 15e6 C7F81C33 		str	r3, [r7, #796]
 2037 15ea D7E9C623 		ldrd	r2, [r7, #792]
 2038 15ee 07F66831 		addw	r1, r7, #2920
 2039 15f2 C1E90023 		strd	r2, [r1]
 197:fips202.c     ****         BCa = ROL(Abi, 62);
 2040              		.loc 1 197 13 discriminator 3
 2041 15f6 D7F86C3B 		ldr	r3, [r7, #2924]
 2042 15fa 9A07     		lsls	r2, r3, #30
 2043 15fc D7F8683B 		ldr	r3, [r7, #2920]
 2044 1600 9B08     		lsrs	r3, r3, #2
 2045 1602 1343     		orrs	r3, r3, r2
 2046 1604 C7F81033 		str	r3, [r7, #784]
 2047 1608 D7F8683B 		ldr	r3, [r7, #2920]
 2048 160c 9A07     		lsls	r2, r3, #30
 2049 160e D7F86C3B 		ldr	r3, [r7, #2924]
 2050 1612 9B08     		lsrs	r3, r3, #2
 2051 1614 1343     		orrs	r3, r3, r2
 2052 1616 C7F81433 		str	r3, [r7, #788]
 2053 161a D7E9C423 		ldrd	r2, [r7, #784]
 2054 161e 07F52B61 		add	r1, r7, #2736
 2055 1622 C1E90023 		strd	r2, [r1]
 198:fips202.c     ****         Ago ^= Do;
 2056              		.loc 1 198 13 discriminator 3
 2057 1626 07F63833 		addw	r3, r7, #2872
 2058 162a D3E90001 		ldrd	r0, [r3]
 2059 162e 07F52763 		add	r3, r7, #2672
 2060 1632 D3E90023 		ldrd	r2, [r3]
 2061 1636 80EA020C 		eor	ip, r0, r2
 2062 163a C7F808C3 		str	ip, [r7, #776]
 2063 163e 4B40     		eors	r3, r3, r1
 2064 1640 C7F80C33 		str	r3, [r7, #780]
 2065 1644 D7E9C223 		ldrd	r2, [r7, #776]
 2066 1648 07F63831 		addw	r1, r7, #2872
 2067 164c C1E90023 		strd	r2, [r1]
 199:fips202.c     ****         BCe = ROL(Ago, 55);
 2068              		.loc 1 199 13 discriminator 3
 2069 1650 D7F83C3B 		ldr	r3, [r7, #2876]
 2070 1654 DA05     		lsls	r2, r3, #23
 2071 1656 D7F8383B 		ldr	r3, [r7, #2872]
 2072 165a 5B0A     		lsrs	r3, r3, #9
 2073 165c 1343     		orrs	r3, r3, r2
 2074 165e C7F80033 		str	r3, [r7, #768]
 2075 1662 D7F8383B 		ldr	r3, [r7, #2872]
 2076 1666 DA05     		lsls	r2, r3, #23
 2077 1668 D7F83C3B 		ldr	r3, [r7, #2876]
 2078 166c 5B0A     		lsrs	r3, r3, #9
 2079 166e 1343     		orrs	r3, r3, r2
 2080 1670 C7F80433 		str	r3, [r7, #772]
 2081 1674 D7E9C023 		ldrd	r2, [r7, #768]
 2082 1678 07F6A821 		addw	r1, r7, #2728
 2083 167c C1E90023 		strd	r2, [r1]
 200:fips202.c     ****         Aku ^= Du;
 2084              		.loc 1 200 13 discriminator 3
 2085 1680 07F60833 		addw	r3, r7, #2824
 2086 1684 D3E90001 		ldrd	r0, [r3]
 2087 1688 07F66823 		addw	r3, r7, #2664
 2088 168c D3E90023 		ldrd	r2, [r3]
 2089 1690 80EA020C 		eor	ip, r0, r2
 2090 1694 C7F8F8C2 		str	ip, [r7, #760]
 2091 1698 4B40     		eors	r3, r3, r1
 2092 169a C7F8FC32 		str	r3, [r7, #764]
 2093 169e D7E9BE23 		ldrd	r2, [r7, #760]
 2094 16a2 07F60831 		addw	r1, r7, #2824
 2095 16a6 C1E90023 		strd	r2, [r1]
 201:fips202.c     ****         BCi = ROL(Aku, 39);
 2096              		.loc 1 201 13 discriminator 3
 2097 16aa D7F80C3B 		ldr	r3, [r7, #2828]
 2098 16ae DA01     		lsls	r2, r3, #7
 2099 16b0 D7F8083B 		ldr	r3, [r7, #2824]
 2100 16b4 5B0E     		lsrs	r3, r3, #25
 2101 16b6 1343     		orrs	r3, r3, r2
 2102 16b8 C7F8F032 		str	r3, [r7, #752]
 2103 16bc D7F8083B 		ldr	r3, [r7, #2824]
 2104 16c0 DA01     		lsls	r2, r3, #7
 2105 16c2 D7F80C3B 		ldr	r3, [r7, #2828]
 2106 16c6 5B0E     		lsrs	r3, r3, #25
 2107 16c8 1343     		orrs	r3, r3, r2
 2108 16ca C7F8F432 		str	r3, [r7, #756]
 2109 16ce D7E9BC23 		ldrd	r2, [r7, #752]
 2110 16d2 07F52A61 		add	r1, r7, #2720
 2111 16d6 C1E90023 		strd	r2, [r1]
 202:fips202.c     ****         Ama ^= Da;
 2112              		.loc 1 202 13 discriminator 3
 2113 16da 07F53063 		add	r3, r7, #2816
 2114 16de D3E90001 		ldrd	r0, [r3]
 2115 16e2 07F68823 		addw	r3, r7, #2696
 2116 16e6 D3E90023 		ldrd	r2, [r3]
 2117 16ea 80EA020C 		eor	ip, r0, r2
 2118 16ee C7F8E8C2 		str	ip, [r7, #744]
 2119 16f2 4B40     		eors	r3, r3, r1
 2120 16f4 C7F8EC32 		str	r3, [r7, #748]
 2121 16f8 D7E9BA23 		ldrd	r2, [r7, #744]
 2122 16fc 07F53061 		add	r1, r7, #2816
 2123 1700 C1E90023 		strd	r2, [r1]
 203:fips202.c     ****         BCo = ROL(Ama, 41);
 2124              		.loc 1 203 13 discriminator 3
 2125 1704 D7F8043B 		ldr	r3, [r7, #2820]
 2126 1708 5A02     		lsls	r2, r3, #9
 2127 170a D7F8003B 		ldr	r3, [r7, #2816]
 2128 170e DB0D     		lsrs	r3, r3, #23
 2129 1710 1343     		orrs	r3, r3, r2
 2130 1712 C7F8E032 		str	r3, [r7, #736]
 2131 1716 D7F8003B 		ldr	r3, [r7, #2816]
 2132 171a 5A02     		lsls	r2, r3, #9
 2133 171c D7F8043B 		ldr	r3, [r7, #2820]
 2134 1720 DB0D     		lsrs	r3, r3, #23
 2135 1722 1343     		orrs	r3, r3, r2
 2136 1724 C7F8E432 		str	r3, [r7, #740]
 2137 1728 D7E9B823 		ldrd	r2, [r7, #736]
 2138 172c 07F69821 		addw	r1, r7, #2712
 2139 1730 C1E90023 		strd	r2, [r1]
 204:fips202.c     ****         Ase ^= De;
 2140              		.loc 1 204 13 discriminator 3
 2141 1734 07F52D63 		add	r3, r7, #2768
 2142 1738 D3E90001 		ldrd	r0, [r3]
 2143 173c 07F52863 		add	r3, r7, #2688
 2144 1740 D3E90023 		ldrd	r2, [r3]
 2145 1744 80EA020C 		eor	ip, r0, r2
 2146 1748 C7F8D8C2 		str	ip, [r7, #728]
 2147 174c 4B40     		eors	r3, r3, r1
 2148 174e C7F8DC32 		str	r3, [r7, #732]
 2149 1752 D7E9B623 		ldrd	r2, [r7, #728]
 2150 1756 07F52D61 		add	r1, r7, #2768
 2151 175a C1E90023 		strd	r2, [r1]
 205:fips202.c     ****         BCu = ROL(Ase, 2);
 2152              		.loc 1 205 13 discriminator 3
 2153 175e D7F8D03A 		ldr	r3, [r7, #2768]
 2154 1762 9A0F     		lsrs	r2, r3, #30
 2155 1764 D7F8D43A 		ldr	r3, [r7, #2772]
 2156 1768 9B00     		lsls	r3, r3, #2
 2157 176a 1343     		orrs	r3, r3, r2
 2158 176c C7F8D432 		str	r3, [r7, #724]
 2159 1770 D7F8D43A 		ldr	r3, [r7, #2772]
 2160 1774 9A0F     		lsrs	r2, r3, #30
 2161 1776 D7F8D03A 		ldr	r3, [r7, #2768]
 2162 177a 9B00     		lsls	r3, r3, #2
 2163 177c 1343     		orrs	r3, r3, r2
 2164 177e C7F8D032 		str	r3, [r7, #720]
 2165 1782 D7E9B423 		ldrd	r2, [r7, #720]
 2166 1786 07F52961 		add	r1, r7, #2704
 2167 178a C1E90023 		strd	r2, [r1]
 206:fips202.c     ****         Esa = BCa ^ ((~BCe) & BCi);
 2168              		.loc 1 206 23 discriminator 3
 2169 178e 07F6A823 		addw	r3, r7, #2728
 2170 1792 D3E90023 		ldrd	r2, [r3]
 2171 1796 D143     		mvns	r1, r2
 2172 1798 C7F8B017 		str	r1, [r7, #1968]
 2173 179c DB43     		mvns	r3, r3
 2174 179e C7F8B437 		str	r3, [r7, #1972]
 2175              		.loc 1 206 29 discriminator 3
 2176 17a2 07F52A63 		add	r3, r7, #2720
 2177 17a6 D3E90023 		ldrd	r2, [r3]
 2178 17aa 07F5F661 		add	r1, r7, #1968
 2179 17ae D1E90001 		ldrd	r0, [r1]
 2180 17b2 8446     		mov	ip, r0
 2181 17b4 0CEA020C 		and	ip, ip, r2
 2182 17b8 C7F8A8C7 		str	ip, [r7, #1960]
 2183 17bc 0B40     		ands	r3, r3, r1
 2184 17be C7F8AC37 		str	r3, [r7, #1964]
 2185              		.loc 1 206 13 discriminator 3
 2186 17c2 07F52B63 		add	r3, r7, #2736
 2187 17c6 D3E90023 		ldrd	r2, [r3]
 2188 17ca 07F5F561 		add	r1, r7, #1960
 2189 17ce D1E90001 		ldrd	r0, [r1]
 2190 17d2 8446     		mov	ip, r0
 2191 17d4 82EA0C0C 		eor	ip, r2, ip
 2192 17d8 C7F8C8C2 		str	ip, [r7, #712]
 2193 17dc 4B40     		eors	r3, r3, r1
 2194 17de C7F8CC32 		str	r3, [r7, #716]
 2195 17e2 D7E9B223 		ldrd	r2, [r7, #712]
 2196 17e6 07F51C61 		add	r1, r7, #2496
 2197 17ea C1E90023 		strd	r2, [r1]
 207:fips202.c     ****         Ese = BCe ^ ((~BCi) & BCo);
 2198              		.loc 1 207 23 discriminator 3
 2199 17ee 07F52A63 		add	r3, r7, #2720
 2200 17f2 D3E90023 		ldrd	r2, [r3]
 2201 17f6 D143     		mvns	r1, r2
 2202 17f8 C7F8A017 		str	r1, [r7, #1952]
 2203 17fc DB43     		mvns	r3, r3
 2204 17fe C7F8A437 		str	r3, [r7, #1956]
 2205              		.loc 1 207 29 discriminator 3
 2206 1802 07F69823 		addw	r3, r7, #2712
 2207 1806 D3E90023 		ldrd	r2, [r3]
 2208 180a 07F5F461 		add	r1, r7, #1952
 2209 180e D1E90001 		ldrd	r0, [r1]
 2210 1812 8446     		mov	ip, r0
 2211 1814 0CEA020C 		and	ip, ip, r2
 2212 1818 C7F898C7 		str	ip, [r7, #1944]
 2213 181c 0B40     		ands	r3, r3, r1
 2214 181e C7F89C37 		str	r3, [r7, #1948]
 2215              		.loc 1 207 13 discriminator 3
 2216 1822 07F6A823 		addw	r3, r7, #2728
 2217 1826 D3E90023 		ldrd	r2, [r3]
 2218 182a 07F5F361 		add	r1, r7, #1944
 2219 182e D1E90001 		ldrd	r0, [r1]
 2220 1832 8446     		mov	ip, r0
 2221 1834 82EA0C0C 		eor	ip, r2, ip
 2222 1838 C7F8C0C2 		str	ip, [r7, #704]
 2223 183c 4B40     		eors	r3, r3, r1
 2224 183e C7F8C432 		str	r3, [r7, #708]
 2225 1842 D7E9B023 		ldrd	r2, [r7, #704]
 2226 1846 07F6B811 		addw	r1, r7, #2488
 2227 184a C1E90023 		strd	r2, [r1]
 208:fips202.c     ****         Esi = BCi ^ ((~BCo) & BCu);
 2228              		.loc 1 208 23 discriminator 3
 2229 184e 07F69823 		addw	r3, r7, #2712
 2230 1852 D3E90023 		ldrd	r2, [r3]
 2231 1856 D143     		mvns	r1, r2
 2232 1858 C7F89017 		str	r1, [r7, #1936]
 2233 185c DB43     		mvns	r3, r3
 2234 185e C7F89437 		str	r3, [r7, #1940]
 2235              		.loc 1 208 29 discriminator 3
 2236 1862 07F52963 		add	r3, r7, #2704
 2237 1866 D3E90023 		ldrd	r2, [r3]
 2238 186a 07F5F261 		add	r1, r7, #1936
 2239 186e D1E90001 		ldrd	r0, [r1]
 2240 1872 8446     		mov	ip, r0
 2241 1874 0CEA020C 		and	ip, ip, r2
 2242 1878 C7F888C7 		str	ip, [r7, #1928]
 2243 187c 0B40     		ands	r3, r3, r1
 2244 187e C7F88C37 		str	r3, [r7, #1932]
 2245              		.loc 1 208 13 discriminator 3
 2246 1882 07F52A63 		add	r3, r7, #2720
 2247 1886 D3E90023 		ldrd	r2, [r3]
 2248 188a 07F5F161 		add	r1, r7, #1928
 2249 188e D1E90001 		ldrd	r0, [r1]
 2250 1892 8446     		mov	ip, r0
 2251 1894 82EA0C0C 		eor	ip, r2, ip
 2252 1898 C7F8B8C2 		str	ip, [r7, #696]
 2253 189c 4B40     		eors	r3, r3, r1
 2254 189e C7F8BC32 		str	r3, [r7, #700]
 2255 18a2 D7E9AE23 		ldrd	r2, [r7, #696]
 2256 18a6 07F51B61 		add	r1, r7, #2480
 2257 18aa C1E90023 		strd	r2, [r1]
 209:fips202.c     ****         Eso = BCo ^ ((~BCu) & BCa);
 2258              		.loc 1 209 23 discriminator 3
 2259 18ae 07F52963 		add	r3, r7, #2704
 2260 18b2 D3E90023 		ldrd	r2, [r3]
 2261 18b6 D143     		mvns	r1, r2
 2262 18b8 C7F88017 		str	r1, [r7, #1920]
 2263 18bc DB43     		mvns	r3, r3
 2264 18be C7F88437 		str	r3, [r7, #1924]
 2265              		.loc 1 209 29 discriminator 3
 2266 18c2 07F52B63 		add	r3, r7, #2736
 2267 18c6 D3E90023 		ldrd	r2, [r3]
 2268 18ca 07F5F061 		add	r1, r7, #1920
 2269 18ce D1E90001 		ldrd	r0, [r1]
 2270 18d2 8446     		mov	ip, r0
 2271 18d4 0CEA020C 		and	ip, ip, r2
 2272 18d8 C7F878C7 		str	ip, [r7, #1912]
 2273 18dc 0B40     		ands	r3, r3, r1
 2274 18de C7F87C37 		str	r3, [r7, #1916]
 2275              		.loc 1 209 13 discriminator 3
 2276 18e2 07F69823 		addw	r3, r7, #2712
 2277 18e6 D3E90023 		ldrd	r2, [r3]
 2278 18ea 07F5EF61 		add	r1, r7, #1912
 2279 18ee D1E90001 		ldrd	r0, [r1]
 2280 18f2 8446     		mov	ip, r0
 2281 18f4 82EA0C0C 		eor	ip, r2, ip
 2282 18f8 C7F8B0C2 		str	ip, [r7, #688]
 2283 18fc 4B40     		eors	r3, r3, r1
 2284 18fe C7F8B432 		str	r3, [r7, #692]
 2285 1902 D7E9AC23 		ldrd	r2, [r7, #688]
 2286 1906 07F6A811 		addw	r1, r7, #2472
 2287 190a C1E90023 		strd	r2, [r1]
 210:fips202.c     ****         Esu = BCu ^ ((~BCa) & BCe);
 2288              		.loc 1 210 23 discriminator 3
 2289 190e 07F52B63 		add	r3, r7, #2736
 2290 1912 D3E90023 		ldrd	r2, [r3]
 2291 1916 D143     		mvns	r1, r2
 2292 1918 C7F87017 		str	r1, [r7, #1904]
 2293 191c DB43     		mvns	r3, r3
 2294 191e C7F87437 		str	r3, [r7, #1908]
 2295              		.loc 1 210 29 discriminator 3
 2296 1922 07F6A823 		addw	r3, r7, #2728
 2297 1926 D3E90023 		ldrd	r2, [r3]
 2298 192a 07F5EE61 		add	r1, r7, #1904
 2299 192e D1E90001 		ldrd	r0, [r1]
 2300 1932 8446     		mov	ip, r0
 2301 1934 0CEA020C 		and	ip, ip, r2
 2302 1938 C7F868C7 		str	ip, [r7, #1896]
 2303 193c 0B40     		ands	r3, r3, r1
 2304 193e C7F86C37 		str	r3, [r7, #1900]
 2305              		.loc 1 210 13 discriminator 3
 2306 1942 07F52963 		add	r3, r7, #2704
 2307 1946 D3E90023 		ldrd	r2, [r3]
 2308 194a 07F5ED61 		add	r1, r7, #1896
 2309 194e D1E90001 		ldrd	r0, [r1]
 2310 1952 8446     		mov	ip, r0
 2311 1954 82EA0C0C 		eor	ip, r2, ip
 2312 1958 C7F8A8C2 		str	ip, [r7, #680]
 2313 195c 4B40     		eors	r3, r3, r1
 2314 195e C7F8AC32 		str	r3, [r7, #684]
 2315 1962 D7E9AA23 		ldrd	r2, [r7, #680]
 2316 1966 07F51A61 		add	r1, r7, #2464
 2317 196a C1E90023 		strd	r2, [r1]
 211:fips202.c     **** 
 212:fips202.c     ****         //    prepareTheta
 213:fips202.c     ****         BCa = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
 2318              		.loc 1 213 19 discriminator 3
 2319 196e 07F52663 		add	r3, r7, #2656
 2320 1972 D3E90001 		ldrd	r0, [r3]
 2321 1976 07F63823 		addw	r3, r7, #2616
 2322 197a D3E90023 		ldrd	r2, [r3]
 2323 197e 80EA020C 		eor	ip, r0, r2
 2324 1982 C7F860C7 		str	ip, [r7, #1888]
 2325 1986 4B40     		eors	r3, r3, r1
 2326 1988 C7F86437 		str	r3, [r7, #1892]
 2327              		.loc 1 213 25 discriminator 3
 2328 198c 07F52163 		add	r3, r7, #2576
 2329 1990 D3E90023 		ldrd	r2, [r3]
 2330 1994 07F5EC61 		add	r1, r7, #1888
 2331 1998 D1E90001 		ldrd	r0, [r1]
 2332 199c 8446     		mov	ip, r0
 2333 199e 8CEA020C 		eor	ip, ip, r2
 2334 19a2 C7F858C7 		str	ip, [r7, #1880]
 2335 19a6 4B40     		eors	r3, r3, r1
 2336 19a8 C7F85C37 		str	r3, [r7, #1884]
 2337              		.loc 1 213 31 discriminator 3
 2338 19ac 07F6E813 		addw	r3, r7, #2536
 2339 19b0 D3E90023 		ldrd	r2, [r3]
 2340 19b4 07F5EB61 		add	r1, r7, #1880
 2341 19b8 D1E90001 		ldrd	r0, [r1]
 2342 19bc 8446     		mov	ip, r0
 2343 19be 8CEA020C 		eor	ip, ip, r2
 2344 19c2 C7F850C7 		str	ip, [r7, #1872]
 2345 19c6 4B40     		eors	r3, r3, r1
 2346 19c8 C7F85437 		str	r3, [r7, #1876]
 2347              		.loc 1 213 13 discriminator 3
 2348 19cc 07F51C63 		add	r3, r7, #2496
 2349 19d0 D3E90023 		ldrd	r2, [r3]
 2350 19d4 07F5EA61 		add	r1, r7, #1872
 2351 19d8 D1E90001 		ldrd	r0, [r1]
 2352 19dc 8446     		mov	ip, r0
 2353 19de 82EA0C0C 		eor	ip, r2, ip
 2354 19e2 C7F8A0C2 		str	ip, [r7, #672]
 2355 19e6 4B40     		eors	r3, r3, r1
 2356 19e8 C7F8A432 		str	r3, [r7, #676]
 2357 19ec D7E9A823 		ldrd	r2, [r7, #672]
 2358 19f0 07F52B61 		add	r1, r7, #2736
 2359 19f4 C1E90023 		strd	r2, [r1]
 214:fips202.c     ****         BCe = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
 2360              		.loc 1 214 19 discriminator 3
 2361 19f8 07F65823 		addw	r3, r7, #2648
 2362 19fc D3E90001 		ldrd	r0, [r3]
 2363 1a00 07F52363 		add	r3, r7, #2608
 2364 1a04 D3E90023 		ldrd	r2, [r3]
 2365 1a08 80EA020C 		eor	ip, r0, r2
 2366 1a0c C7F848C7 		str	ip, [r7, #1864]
 2367 1a10 4B40     		eors	r3, r3, r1
 2368 1a12 C7F84C37 		str	r3, [r7, #1868]
 2369              		.loc 1 214 25 discriminator 3
 2370 1a16 07F60823 		addw	r3, r7, #2568
 2371 1a1a D3E90023 		ldrd	r2, [r3]
 2372 1a1e 07F5E961 		add	r1, r7, #1864
 2373 1a22 D1E90001 		ldrd	r0, [r1]
 2374 1a26 8446     		mov	ip, r0
 2375 1a28 8CEA020C 		eor	ip, ip, r2
 2376 1a2c C7F840C7 		str	ip, [r7, #1856]
 2377 1a30 4B40     		eors	r3, r3, r1
 2378 1a32 C7F84437 		str	r3, [r7, #1860]
 2379              		.loc 1 214 31 discriminator 3
 2380 1a36 07F51E63 		add	r3, r7, #2528
 2381 1a3a D3E90023 		ldrd	r2, [r3]
 2382 1a3e 07F5E861 		add	r1, r7, #1856
 2383 1a42 D1E90001 		ldrd	r0, [r1]
 2384 1a46 8446     		mov	ip, r0
 2385 1a48 8CEA020C 		eor	ip, ip, r2
 2386 1a4c C7F838C7 		str	ip, [r7, #1848]
 2387 1a50 4B40     		eors	r3, r3, r1
 2388 1a52 C7F83C37 		str	r3, [r7, #1852]
 2389              		.loc 1 214 13 discriminator 3
 2390 1a56 07F6B813 		addw	r3, r7, #2488
 2391 1a5a D3E90023 		ldrd	r2, [r3]
 2392 1a5e 07F5E761 		add	r1, r7, #1848
 2393 1a62 D1E90001 		ldrd	r0, [r1]
 2394 1a66 8446     		mov	ip, r0
 2395 1a68 82EA0C0C 		eor	ip, r2, ip
 2396 1a6c C7F898C2 		str	ip, [r7, #664]
 2397 1a70 4B40     		eors	r3, r3, r1
 2398 1a72 C7F89C32 		str	r3, [r7, #668]
 2399 1a76 D7E9A623 		ldrd	r2, [r7, #664]
 2400 1a7a 07F6A821 		addw	r1, r7, #2728
 2401 1a7e C1E90023 		strd	r2, [r1]
 215:fips202.c     ****         BCi = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
 2402              		.loc 1 215 19 discriminator 3
 2403 1a82 07F52563 		add	r3, r7, #2640
 2404 1a86 D3E90001 		ldrd	r0, [r3]
 2405 1a8a 07F62823 		addw	r3, r7, #2600
 2406 1a8e D3E90023 		ldrd	r2, [r3]
 2407 1a92 80EA020C 		eor	ip, r0, r2
 2408 1a96 C7F830C7 		str	ip, [r7, #1840]
 2409 1a9a 4B40     		eors	r3, r3, r1
 2410 1a9c C7F83437 		str	r3, [r7, #1844]
 2411              		.loc 1 215 25 discriminator 3
 2412 1aa0 07F52063 		add	r3, r7, #2560
 2413 1aa4 D3E90023 		ldrd	r2, [r3]
 2414 1aa8 07F5E661 		add	r1, r7, #1840
 2415 1aac D1E90001 		ldrd	r0, [r1]
 2416 1ab0 8446     		mov	ip, r0
 2417 1ab2 8CEA020C 		eor	ip, ip, r2
 2418 1ab6 C7F828C7 		str	ip, [r7, #1832]
 2419 1aba 4B40     		eors	r3, r3, r1
 2420 1abc C7F82C37 		str	r3, [r7, #1836]
 2421              		.loc 1 215 31 discriminator 3
 2422 1ac0 07F6D813 		addw	r3, r7, #2520
 2423 1ac4 D3E90023 		ldrd	r2, [r3]
 2424 1ac8 07F5E561 		add	r1, r7, #1832
 2425 1acc D1E90001 		ldrd	r0, [r1]
 2426 1ad0 8446     		mov	ip, r0
 2427 1ad2 8CEA020C 		eor	ip, ip, r2
 2428 1ad6 C7F820C7 		str	ip, [r7, #1824]
 2429 1ada 4B40     		eors	r3, r3, r1
 2430 1adc C7F82437 		str	r3, [r7, #1828]
 2431              		.loc 1 215 13 discriminator 3
 2432 1ae0 07F51B63 		add	r3, r7, #2480
 2433 1ae4 D3E90023 		ldrd	r2, [r3]
 2434 1ae8 07F5E461 		add	r1, r7, #1824
 2435 1aec D1E90001 		ldrd	r0, [r1]
 2436 1af0 8446     		mov	ip, r0
 2437 1af2 82EA0C0C 		eor	ip, r2, ip
 2438 1af6 C7F890C2 		str	ip, [r7, #656]
 2439 1afa 4B40     		eors	r3, r3, r1
 2440 1afc C7F89432 		str	r3, [r7, #660]
 2441 1b00 D7E9A423 		ldrd	r2, [r7, #656]
 2442 1b04 07F52A61 		add	r1, r7, #2720
 2443 1b08 C1E90023 		strd	r2, [r1]
 216:fips202.c     ****         BCo = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
 2444              		.loc 1 216 19 discriminator 3
 2445 1b0c 07F64823 		addw	r3, r7, #2632
 2446 1b10 D3E90001 		ldrd	r0, [r3]
 2447 1b14 07F52263 		add	r3, r7, #2592
 2448 1b18 D3E90023 		ldrd	r2, [r3]
 2449 1b1c 80EA020C 		eor	ip, r0, r2
 2450 1b20 C7F818C7 		str	ip, [r7, #1816]
 2451 1b24 4B40     		eors	r3, r3, r1
 2452 1b26 C7F81C37 		str	r3, [r7, #1820]
 2453              		.loc 1 216 25 discriminator 3
 2454 1b2a 07F6F813 		addw	r3, r7, #2552
 2455 1b2e D3E90023 		ldrd	r2, [r3]
 2456 1b32 07F5E361 		add	r1, r7, #1816
 2457 1b36 D1E90001 		ldrd	r0, [r1]
 2458 1b3a 8446     		mov	ip, r0
 2459 1b3c 8CEA020C 		eor	ip, ip, r2
 2460 1b40 C7F810C7 		str	ip, [r7, #1808]
 2461 1b44 4B40     		eors	r3, r3, r1
 2462 1b46 C7F81437 		str	r3, [r7, #1812]
 2463              		.loc 1 216 31 discriminator 3
 2464 1b4a 07F51D63 		add	r3, r7, #2512
 2465 1b4e D3E90023 		ldrd	r2, [r3]
 2466 1b52 07F5E261 		add	r1, r7, #1808
 2467 1b56 D1E90001 		ldrd	r0, [r1]
 2468 1b5a 8446     		mov	ip, r0
 2469 1b5c 8CEA020C 		eor	ip, ip, r2
 2470 1b60 C7F808C7 		str	ip, [r7, #1800]
 2471 1b64 4B40     		eors	r3, r3, r1
 2472 1b66 C7F80C37 		str	r3, [r7, #1804]
 2473              		.loc 1 216 13 discriminator 3
 2474 1b6a 07F6A813 		addw	r3, r7, #2472
 2475 1b6e D3E90023 		ldrd	r2, [r3]
 2476 1b72 07F5E161 		add	r1, r7, #1800
 2477 1b76 D1E90001 		ldrd	r0, [r1]
 2478 1b7a 8446     		mov	ip, r0
 2479 1b7c 82EA0C0C 		eor	ip, r2, ip
 2480 1b80 C7F888C2 		str	ip, [r7, #648]
 2481 1b84 4B40     		eors	r3, r3, r1
 2482 1b86 C7F88C32 		str	r3, [r7, #652]
 2483 1b8a D7E9A223 		ldrd	r2, [r7, #648]
 2484 1b8e 07F69821 		addw	r1, r7, #2712
 2485 1b92 C1E90023 		strd	r2, [r1]
 217:fips202.c     ****         BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
 2486              		.loc 1 217 19 discriminator 3
 2487 1b96 07F52463 		add	r3, r7, #2624
 2488 1b9a D3E90001 		ldrd	r0, [r3]
 2489 1b9e 07F61823 		addw	r3, r7, #2584
 2490 1ba2 D3E90023 		ldrd	r2, [r3]
 2491 1ba6 80EA020C 		eor	ip, r0, r2
 2492 1baa C7F800C7 		str	ip, [r7, #1792]
 2493 1bae 4B40     		eors	r3, r3, r1
 2494 1bb0 C7F80437 		str	r3, [r7, #1796]
 2495              		.loc 1 217 25 discriminator 3
 2496 1bb4 07F51F63 		add	r3, r7, #2544
 2497 1bb8 D3E90023 		ldrd	r2, [r3]
 2498 1bbc 07F5E061 		add	r1, r7, #1792
 2499 1bc0 D1E90001 		ldrd	r0, [r1]
 2500 1bc4 8446     		mov	ip, r0
 2501 1bc6 8CEA020C 		eor	ip, ip, r2
 2502 1bca C7F8F8C6 		str	ip, [r7, #1784]
 2503 1bce 4B40     		eors	r3, r3, r1
 2504 1bd0 C7F8FC36 		str	r3, [r7, #1788]
 2505              		.loc 1 217 31 discriminator 3
 2506 1bd4 07F6C813 		addw	r3, r7, #2504
 2507 1bd8 D3E90023 		ldrd	r2, [r3]
 2508 1bdc 07F5DF61 		add	r1, r7, #1784
 2509 1be0 D1E90001 		ldrd	r0, [r1]
 2510 1be4 8446     		mov	ip, r0
 2511 1be6 8CEA020C 		eor	ip, ip, r2
 2512 1bea C7F8F0C6 		str	ip, [r7, #1776]
 2513 1bee 4B40     		eors	r3, r3, r1
 2514 1bf0 C7F8F436 		str	r3, [r7, #1780]
 2515              		.loc 1 217 13 discriminator 3
 2516 1bf4 07F51A63 		add	r3, r7, #2464
 2517 1bf8 D3E90023 		ldrd	r2, [r3]
 2518 1bfc 07F5DE61 		add	r1, r7, #1776
 2519 1c00 D1E90001 		ldrd	r0, [r1]
 2520 1c04 8446     		mov	ip, r0
 2521 1c06 82EA0C0C 		eor	ip, r2, ip
 2522 1c0a C7F880C2 		str	ip, [r7, #640]
 2523 1c0e 4B40     		eors	r3, r3, r1
 2524 1c10 C7F88432 		str	r3, [r7, #644]
 2525 1c14 D7E9A023 		ldrd	r2, [r7, #640]
 2526 1c18 07F52961 		add	r1, r7, #2704
 2527 1c1c C1E90023 		strd	r2, [r1]
 218:fips202.c     **** 
 219:fips202.c     ****         // thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
 220:fips202.c     ****         Da = BCu ^ ROL(BCe, 1);
 2528              		.loc 1 220 20 discriminator 3
 2529 1c20 D7F8A83A 		ldr	r3, [r7, #2728]
 2530 1c24 DA0F     		lsrs	r2, r3, #31
 2531 1c26 D7F8AC3A 		ldr	r3, [r7, #2732]
 2532 1c2a 5B00     		lsls	r3, r3, #1
 2533 1c2c 1343     		orrs	r3, r3, r2
 2534 1c2e C7F8EC36 		str	r3, [r7, #1772]
 2535 1c32 D7F8AC3A 		ldr	r3, [r7, #2732]
 2536 1c36 DA0F     		lsrs	r2, r3, #31
 2537 1c38 D7F8A83A 		ldr	r3, [r7, #2728]
 2538 1c3c 5B00     		lsls	r3, r3, #1
 2539 1c3e 1343     		orrs	r3, r3, r2
 2540 1c40 C7F8E836 		str	r3, [r7, #1768]
 2541              		.loc 1 220 12 discriminator 3
 2542 1c44 07F52963 		add	r3, r7, #2704
 2543 1c48 D3E90023 		ldrd	r2, [r3]
 2544 1c4c 07F5DD61 		add	r1, r7, #1768
 2545 1c50 D1E90001 		ldrd	r0, [r1]
 2546 1c54 8446     		mov	ip, r0
 2547 1c56 82EA0C0C 		eor	ip, r2, ip
 2548 1c5a C7F878C2 		str	ip, [r7, #632]
 2549 1c5e 4B40     		eors	r3, r3, r1
 2550 1c60 C7F87C32 		str	r3, [r7, #636]
 2551 1c64 D7E99E23 		ldrd	r2, [r7, #632]
 2552 1c68 07F68821 		addw	r1, r7, #2696
 2553 1c6c C1E90023 		strd	r2, [r1]
 221:fips202.c     ****         De = BCa ^ ROL(BCi, 1);
 2554              		.loc 1 221 20 discriminator 3
 2555 1c70 D7F8A03A 		ldr	r3, [r7, #2720]
 2556 1c74 DA0F     		lsrs	r2, r3, #31
 2557 1c76 D7F8A43A 		ldr	r3, [r7, #2724]
 2558 1c7a 5B00     		lsls	r3, r3, #1
 2559 1c7c 1343     		orrs	r3, r3, r2
 2560 1c7e C7F8E436 		str	r3, [r7, #1764]
 2561 1c82 D7F8A43A 		ldr	r3, [r7, #2724]
 2562 1c86 DA0F     		lsrs	r2, r3, #31
 2563 1c88 D7F8A03A 		ldr	r3, [r7, #2720]
 2564 1c8c 5B00     		lsls	r3, r3, #1
 2565 1c8e 1343     		orrs	r3, r3, r2
 2566 1c90 C7F8E036 		str	r3, [r7, #1760]
 2567              		.loc 1 221 12 discriminator 3
 2568 1c94 07F52B63 		add	r3, r7, #2736
 2569 1c98 D3E90023 		ldrd	r2, [r3]
 2570 1c9c 07F5DC61 		add	r1, r7, #1760
 2571 1ca0 D1E90001 		ldrd	r0, [r1]
 2572 1ca4 8446     		mov	ip, r0
 2573 1ca6 82EA0C0C 		eor	ip, r2, ip
 2574 1caa C7F870C2 		str	ip, [r7, #624]
 2575 1cae 4B40     		eors	r3, r3, r1
 2576 1cb0 C7F87432 		str	r3, [r7, #628]
 2577 1cb4 D7E99C23 		ldrd	r2, [r7, #624]
 2578 1cb8 07F52861 		add	r1, r7, #2688
 2579 1cbc C1E90023 		strd	r2, [r1]
 222:fips202.c     ****         Di = BCe ^ ROL(BCo, 1);
 2580              		.loc 1 222 20 discriminator 3
 2581 1cc0 D7F8983A 		ldr	r3, [r7, #2712]
 2582 1cc4 DA0F     		lsrs	r2, r3, #31
 2583 1cc6 D7F89C3A 		ldr	r3, [r7, #2716]
 2584 1cca 5B00     		lsls	r3, r3, #1
 2585 1ccc 1343     		orrs	r3, r3, r2
 2586 1cce C7F8DC36 		str	r3, [r7, #1756]
 2587 1cd2 D7F89C3A 		ldr	r3, [r7, #2716]
 2588 1cd6 DA0F     		lsrs	r2, r3, #31
 2589 1cd8 D7F8983A 		ldr	r3, [r7, #2712]
 2590 1cdc 5B00     		lsls	r3, r3, #1
 2591 1cde 1343     		orrs	r3, r3, r2
 2592 1ce0 C7F8D836 		str	r3, [r7, #1752]
 2593              		.loc 1 222 12 discriminator 3
 2594 1ce4 07F6A823 		addw	r3, r7, #2728
 2595 1ce8 D3E90023 		ldrd	r2, [r3]
 2596 1cec 07F5DB61 		add	r1, r7, #1752
 2597 1cf0 D1E90001 		ldrd	r0, [r1]
 2598 1cf4 8446     		mov	ip, r0
 2599 1cf6 82EA0C0C 		eor	ip, r2, ip
 2600 1cfa C7F868C2 		str	ip, [r7, #616]
 2601 1cfe 4B40     		eors	r3, r3, r1
 2602 1d00 C7F86C32 		str	r3, [r7, #620]
 2603 1d04 D7E99A23 		ldrd	r2, [r7, #616]
 2604 1d08 07F67821 		addw	r1, r7, #2680
 2605 1d0c C1E90023 		strd	r2, [r1]
 223:fips202.c     ****         Do = BCi ^ ROL(BCu, 1);
 2606              		.loc 1 223 20 discriminator 3
 2607 1d10 D7F8903A 		ldr	r3, [r7, #2704]
 2608 1d14 DA0F     		lsrs	r2, r3, #31
 2609 1d16 D7F8943A 		ldr	r3, [r7, #2708]
 2610 1d1a 5B00     		lsls	r3, r3, #1
 2611 1d1c 1343     		orrs	r3, r3, r2
 2612 1d1e C7F8D436 		str	r3, [r7, #1748]
 2613 1d22 D7F8943A 		ldr	r3, [r7, #2708]
 2614 1d26 DA0F     		lsrs	r2, r3, #31
 2615 1d28 D7F8903A 		ldr	r3, [r7, #2704]
 2616 1d2c 5B00     		lsls	r3, r3, #1
 2617 1d2e 1343     		orrs	r3, r3, r2
 2618 1d30 C7F8D036 		str	r3, [r7, #1744]
 2619              		.loc 1 223 12 discriminator 3
 2620 1d34 07F52A63 		add	r3, r7, #2720
 2621 1d38 D3E90023 		ldrd	r2, [r3]
 2622 1d3c 07F5DA61 		add	r1, r7, #1744
 2623 1d40 D1E90001 		ldrd	r0, [r1]
 2624 1d44 8446     		mov	ip, r0
 2625 1d46 82EA0C0C 		eor	ip, r2, ip
 2626 1d4a C7F860C2 		str	ip, [r7, #608]
 2627 1d4e 4B40     		eors	r3, r3, r1
 2628 1d50 C7F86432 		str	r3, [r7, #612]
 2629 1d54 D7E99823 		ldrd	r2, [r7, #608]
 2630 1d58 07F52761 		add	r1, r7, #2672
 2631 1d5c C1E90023 		strd	r2, [r1]
 224:fips202.c     ****         Du = BCo ^ ROL(BCa, 1);
 2632              		.loc 1 224 20 discriminator 3
 2633 1d60 D7F8B03A 		ldr	r3, [r7, #2736]
 2634 1d64 DA0F     		lsrs	r2, r3, #31
 2635 1d66 D7F8B43A 		ldr	r3, [r7, #2740]
 2636 1d6a 5B00     		lsls	r3, r3, #1
 2637 1d6c 1343     		orrs	r3, r3, r2
 2638 1d6e C7F8CC36 		str	r3, [r7, #1740]
 2639 1d72 D7F8B43A 		ldr	r3, [r7, #2740]
 2640 1d76 DA0F     		lsrs	r2, r3, #31
 2641 1d78 D7F8B03A 		ldr	r3, [r7, #2736]
 2642 1d7c 5B00     		lsls	r3, r3, #1
 2643 1d7e 1343     		orrs	r3, r3, r2
 2644 1d80 C7F8C836 		str	r3, [r7, #1736]
 2645              		.loc 1 224 12 discriminator 3
 2646 1d84 07F69823 		addw	r3, r7, #2712
 2647 1d88 D3E90023 		ldrd	r2, [r3]
 2648 1d8c 07F5D961 		add	r1, r7, #1736
 2649 1d90 D1E90001 		ldrd	r0, [r1]
 2650 1d94 8446     		mov	ip, r0
 2651 1d96 82EA0C0C 		eor	ip, r2, ip
 2652 1d9a C7F858C2 		str	ip, [r7, #600]
 2653 1d9e 4B40     		eors	r3, r3, r1
 2654 1da0 C7F85C32 		str	r3, [r7, #604]
 2655 1da4 D7E99623 		ldrd	r2, [r7, #600]
 2656 1da8 07F66821 		addw	r1, r7, #2664
 2657 1dac C1E90023 		strd	r2, [r1]
 225:fips202.c     **** 
 226:fips202.c     ****         Eba ^= Da;
 2658              		.loc 1 226 13 discriminator 3
 2659 1db0 07F52663 		add	r3, r7, #2656
 2660 1db4 D3E90001 		ldrd	r0, [r3]
 2661 1db8 07F68823 		addw	r3, r7, #2696
 2662 1dbc D3E90023 		ldrd	r2, [r3]
 2663 1dc0 80EA020C 		eor	ip, r0, r2
 2664 1dc4 C7F850C2 		str	ip, [r7, #592]
 2665 1dc8 4B40     		eors	r3, r3, r1
 2666 1dca C7F85432 		str	r3, [r7, #596]
 2667 1dce D7E99423 		ldrd	r2, [r7, #592]
 2668 1dd2 07F52661 		add	r1, r7, #2656
 2669 1dd6 C1E90023 		strd	r2, [r1]
 227:fips202.c     ****         BCa = Eba;
 2670              		.loc 1 227 13 discriminator 3
 2671 1dda 07F52663 		add	r3, r7, #2656
 2672 1dde D3E90023 		ldrd	r2, [r3]
 2673 1de2 07F52B61 		add	r1, r7, #2736
 2674 1de6 C1E90023 		strd	r2, [r1]
 228:fips202.c     ****         Ege ^= De;
 2675              		.loc 1 228 13 discriminator 3
 2676 1dea 07F52363 		add	r3, r7, #2608
 2677 1dee D3E90001 		ldrd	r0, [r3]
 2678 1df2 07F52863 		add	r3, r7, #2688
 2679 1df6 D3E90023 		ldrd	r2, [r3]
 2680 1dfa 80EA020C 		eor	ip, r0, r2
 2681 1dfe C7F848C2 		str	ip, [r7, #584]
 2682 1e02 4B40     		eors	r3, r3, r1
 2683 1e04 C7F84C32 		str	r3, [r7, #588]
 2684 1e08 D7E99223 		ldrd	r2, [r7, #584]
 2685 1e0c 07F52361 		add	r1, r7, #2608
 2686 1e10 C1E90023 		strd	r2, [r1]
 229:fips202.c     ****         BCe = ROL(Ege, 44);
 2687              		.loc 1 229 13 discriminator 3
 2688 1e14 07F68833 		addw	r3, r7, #2952
 2689 1e18 A3F5AA70 		sub	r0, r3, #340
 2690 1e1c 07F68833 		addw	r3, r7, #2952
 2691 1e20 A3F5AC71 		sub	r1, r3, #344
 2692 1e24 0368     		ldr	r3, [r0]
 2693 1e26 1A03     		lsls	r2, r3, #12
 2694 1e28 0B68     		ldr	r3, [r1]
 2695 1e2a 1B0D     		lsrs	r3, r3, #20
 2696 1e2c 1343     		orrs	r3, r3, r2
 2697 1e2e C7F84032 		str	r3, [r7, #576]
 2698 1e32 0B68     		ldr	r3, [r1]
 2699 1e34 1A03     		lsls	r2, r3, #12
 2700 1e36 0368     		ldr	r3, [r0]
 2701 1e38 1B0D     		lsrs	r3, r3, #20
 2702 1e3a 1343     		orrs	r3, r3, r2
 2703 1e3c C7F84432 		str	r3, [r7, #580]
 2704 1e40 D7E99023 		ldrd	r2, [r7, #576]
 2705 1e44 07F6A821 		addw	r1, r7, #2728
 2706 1e48 C1E90023 		strd	r2, [r1]
 230:fips202.c     ****         Eki ^= Di;
 2707              		.loc 1 230 13 discriminator 3
 2708 1e4c 07F52063 		add	r3, r7, #2560
 2709 1e50 D3E90001 		ldrd	r0, [r3]
 2710 1e54 07F67823 		addw	r3, r7, #2680
 2711 1e58 D3E90023 		ldrd	r2, [r3]
 2712 1e5c 80EA020C 		eor	ip, r0, r2
 2713 1e60 C7F838C2 		str	ip, [r7, #568]
 2714 1e64 4B40     		eors	r3, r3, r1
 2715 1e66 C7F83C32 		str	r3, [r7, #572]
 2716 1e6a D7E98E23 		ldrd	r2, [r7, #568]
 2717 1e6e 07F52061 		add	r1, r7, #2560
 2718 1e72 C1E90023 		strd	r2, [r1]
 231:fips202.c     ****         BCi = ROL(Eki, 43);
 2719              		.loc 1 231 13 discriminator 3
 2720 1e76 07F68833 		addw	r3, r7, #2952
 2721 1e7a A3F5C270 		sub	r0, r3, #388
 2722 1e7e 07F68833 		addw	r3, r7, #2952
 2723 1e82 A3F5C471 		sub	r1, r3, #392
 2724 1e86 0368     		ldr	r3, [r0]
 2725 1e88 DA02     		lsls	r2, r3, #11
 2726 1e8a 0B68     		ldr	r3, [r1]
 2727 1e8c 5B0D     		lsrs	r3, r3, #21
 2728 1e8e 1343     		orrs	r3, r3, r2
 2729 1e90 C7F83032 		str	r3, [r7, #560]
 2730 1e94 0B68     		ldr	r3, [r1]
 2731 1e96 DA02     		lsls	r2, r3, #11
 2732 1e98 0368     		ldr	r3, [r0]
 2733 1e9a 5B0D     		lsrs	r3, r3, #21
 2734 1e9c 1343     		orrs	r3, r3, r2
 2735 1e9e C7F83432 		str	r3, [r7, #564]
 2736 1ea2 D7E98C23 		ldrd	r2, [r7, #560]
 2737 1ea6 07F52A61 		add	r1, r7, #2720
 2738 1eaa C1E90023 		strd	r2, [r1]
 232:fips202.c     ****         Emo ^= Do;
 2739              		.loc 1 232 13 discriminator 3
 2740 1eae 07F51D63 		add	r3, r7, #2512
 2741 1eb2 D3E90001 		ldrd	r0, [r3]
 2742 1eb6 07F52763 		add	r3, r7, #2672
 2743 1eba D3E90023 		ldrd	r2, [r3]
 2744 1ebe 80EA020C 		eor	ip, r0, r2
 2745 1ec2 C7F828C2 		str	ip, [r7, #552]
 2746 1ec6 4B40     		eors	r3, r3, r1
 2747 1ec8 C7F82C32 		str	r3, [r7, #556]
 2748 1ecc D7E98A23 		ldrd	r2, [r7, #552]
 2749 1ed0 07F51D61 		add	r1, r7, #2512
 2750 1ed4 C1E90023 		strd	r2, [r1]
 233:fips202.c     ****         BCo = ROL(Emo, 21);
 2751              		.loc 1 233 13 discriminator 3
 2752 1ed8 07F68833 		addw	r3, r7, #2952
 2753 1edc A3F5DC70 		sub	r0, r3, #440
 2754 1ee0 07F68833 		addw	r3, r7, #2952
 2755 1ee4 A3F5DA71 		sub	r1, r3, #436
 2756 1ee8 0368     		ldr	r3, [r0]
 2757 1eea DA0A     		lsrs	r2, r3, #11
 2758 1eec 0B68     		ldr	r3, [r1]
 2759 1eee 5B05     		lsls	r3, r3, #21
 2760 1ef0 1343     		orrs	r3, r3, r2
 2761 1ef2 C7F82432 		str	r3, [r7, #548]
 2762 1ef6 0B68     		ldr	r3, [r1]
 2763 1ef8 DA0A     		lsrs	r2, r3, #11
 2764 1efa 0368     		ldr	r3, [r0]
 2765 1efc 5B05     		lsls	r3, r3, #21
 2766 1efe 1343     		orrs	r3, r3, r2
 2767 1f00 C7F82032 		str	r3, [r7, #544]
 2768 1f04 D7E98823 		ldrd	r2, [r7, #544]
 2769 1f08 07F69821 		addw	r1, r7, #2712
 2770 1f0c C1E90023 		strd	r2, [r1]
 234:fips202.c     ****         Esu ^= Du;
 2771              		.loc 1 234 13 discriminator 3
 2772 1f10 07F51A63 		add	r3, r7, #2464
 2773 1f14 D3E90001 		ldrd	r0, [r3]
 2774 1f18 07F66823 		addw	r3, r7, #2664
 2775 1f1c D3E90023 		ldrd	r2, [r3]
 2776 1f20 80EA020C 		eor	ip, r0, r2
 2777 1f24 C7F818C2 		str	ip, [r7, #536]
 2778 1f28 4B40     		eors	r3, r3, r1
 2779 1f2a C7F81C32 		str	r3, [r7, #540]
 2780 1f2e D7E98623 		ldrd	r2, [r7, #536]
 2781 1f32 07F51A61 		add	r1, r7, #2464
 2782 1f36 C1E90023 		strd	r2, [r1]
 235:fips202.c     ****         BCu = ROL(Esu, 14);
 2783              		.loc 1 235 13 discriminator 3
 2784 1f3a 07F68833 		addw	r3, r7, #2952
 2785 1f3e A3F5F470 		sub	r0, r3, #488
 2786 1f42 07F68833 		addw	r3, r7, #2952
 2787 1f46 A3F5F271 		sub	r1, r3, #484
 2788 1f4a 0368     		ldr	r3, [r0]
 2789 1f4c 9A0C     		lsrs	r2, r3, #18
 2790 1f4e 0B68     		ldr	r3, [r1]
 2791 1f50 9B03     		lsls	r3, r3, #14
 2792 1f52 1343     		orrs	r3, r3, r2
 2793 1f54 C7F81432 		str	r3, [r7, #532]
 2794 1f58 0B68     		ldr	r3, [r1]
 2795 1f5a 9A0C     		lsrs	r2, r3, #18
 2796 1f5c 0368     		ldr	r3, [r0]
 2797 1f5e 9B03     		lsls	r3, r3, #14
 2798 1f60 1343     		orrs	r3, r3, r2
 2799 1f62 C7F81032 		str	r3, [r7, #528]
 2800 1f66 D7E98423 		ldrd	r2, [r7, #528]
 2801 1f6a 07F52961 		add	r1, r7, #2704
 2802 1f6e C1E90023 		strd	r2, [r1]
 236:fips202.c     ****         Aba = BCa ^ ((~BCe) & BCi);
 2803              		.loc 1 236 23 discriminator 3
 2804 1f72 07F6A823 		addw	r3, r7, #2728
 2805 1f76 D3E90023 		ldrd	r2, [r3]
 2806 1f7a D143     		mvns	r1, r2
 2807 1f7c C7F8C016 		str	r1, [r7, #1728]
 2808 1f80 DB43     		mvns	r3, r3
 2809 1f82 C7F8C436 		str	r3, [r7, #1732]
 2810              		.loc 1 236 29 discriminator 3
 2811 1f86 07F52A63 		add	r3, r7, #2720
 2812 1f8a D3E90023 		ldrd	r2, [r3]
 2813 1f8e 07F5D861 		add	r1, r7, #1728
 2814 1f92 D1E90001 		ldrd	r0, [r1]
 2815 1f96 8446     		mov	ip, r0
 2816 1f98 0CEA020C 		and	ip, ip, r2
 2817 1f9c C7F8B8C6 		str	ip, [r7, #1720]
 2818 1fa0 0B40     		ands	r3, r3, r1
 2819 1fa2 C7F8BC36 		str	r3, [r7, #1724]
 2820              		.loc 1 236 13 discriminator 3
 2821 1fa6 07F52B63 		add	r3, r7, #2736
 2822 1faa D3E90023 		ldrd	r2, [r3]
 2823 1fae 07F5D761 		add	r1, r7, #1720
 2824 1fb2 D1E90001 		ldrd	r0, [r1]
 2825 1fb6 8446     		mov	ip, r0
 2826 1fb8 82EA0C0C 		eor	ip, r2, ip
 2827 1fbc C7F808C2 		str	ip, [r7, #520]
 2828 1fc0 4B40     		eors	r3, r3, r1
 2829 1fc2 C7F80C32 		str	r3, [r7, #524]
 2830 1fc6 D7E98223 		ldrd	r2, [r7, #520]
 2831 1fca 07F67831 		addw	r1, r7, #2936
 2832 1fce C1E90023 		strd	r2, [r1]
 237:fips202.c     ****         Aba ^= KeccakF_RoundConstants[round + 1];
 2833              		.loc 1 237 45 discriminator 3
 2834 1fd2 D7F8843B 		ldr	r3, [r7, #2948]
 2835 1fd6 0133     		adds	r3, r3, #1
 2836              		.loc 1 237 38 discriminator 3
 2837 1fd8 C14A     		ldr	r2, .L14
 2838 1fda DB00     		lsls	r3, r3, #3
 2839 1fdc 1344     		add	r3, r3, r2
 2840 1fde D3E90001 		ldrd	r0, [r3]
 2841              		.loc 1 237 13 discriminator 3
 2842 1fe2 07F67833 		addw	r3, r7, #2936
 2843 1fe6 D3E90023 		ldrd	r2, [r3]
 2844 1fea 82EA000C 		eor	ip, r2, r0
 2845 1fee C7F800C2 		str	ip, [r7, #512]
 2846 1ff2 4B40     		eors	r3, r3, r1
 2847 1ff4 C7F80432 		str	r3, [r7, #516]
 2848 1ff8 D7E98023 		ldrd	r2, [r7, #512]
 2849 1ffc 07F67831 		addw	r1, r7, #2936
 2850 2000 C1E90023 		strd	r2, [r1]
 238:fips202.c     ****         Abe = BCe ^ ((~BCi) & BCo);
 2851              		.loc 1 238 23 discriminator 3
 2852 2004 07F52A63 		add	r3, r7, #2720
 2853 2008 D3E90023 		ldrd	r2, [r3]
 2854 200c D143     		mvns	r1, r2
 2855 200e C7F8B016 		str	r1, [r7, #1712]
 2856 2012 DB43     		mvns	r3, r3
 2857 2014 C7F8B436 		str	r3, [r7, #1716]
 2858              		.loc 1 238 29 discriminator 3
 2859 2018 07F69823 		addw	r3, r7, #2712
 2860 201c D3E90023 		ldrd	r2, [r3]
 2861 2020 07F5D661 		add	r1, r7, #1712
 2862 2024 D1E90001 		ldrd	r0, [r1]
 2863 2028 8446     		mov	ip, r0
 2864 202a 0CEA020C 		and	ip, ip, r2
 2865 202e C7F8A8C6 		str	ip, [r7, #1704]
 2866 2032 0B40     		ands	r3, r3, r1
 2867 2034 C7F8AC36 		str	r3, [r7, #1708]
 2868              		.loc 1 238 13 discriminator 3
 2869 2038 07F6A823 		addw	r3, r7, #2728
 2870 203c D3E90023 		ldrd	r2, [r3]
 2871 2040 07F5D561 		add	r1, r7, #1704
 2872 2044 D1E90001 		ldrd	r0, [r1]
 2873 2048 8446     		mov	ip, r0
 2874 204a 82EA0C0C 		eor	ip, r2, ip
 2875 204e C7F8F8C1 		str	ip, [r7, #504]
 2876 2052 4B40     		eors	r3, r3, r1
 2877 2054 C7F8FC31 		str	r3, [r7, #508]
 2878 2058 D7E97E23 		ldrd	r2, [r7, #504]
 2879 205c 07F53761 		add	r1, r7, #2928
 2880 2060 C1E90023 		strd	r2, [r1]
 239:fips202.c     ****         Abi = BCi ^ ((~BCo) & BCu);
 2881              		.loc 1 239 23 discriminator 3
 2882 2064 07F69823 		addw	r3, r7, #2712
 2883 2068 D3E90023 		ldrd	r2, [r3]
 2884 206c D143     		mvns	r1, r2
 2885 206e C7F8A016 		str	r1, [r7, #1696]
 2886 2072 DB43     		mvns	r3, r3
 2887 2074 C7F8A436 		str	r3, [r7, #1700]
 2888              		.loc 1 239 29 discriminator 3
 2889 2078 07F52963 		add	r3, r7, #2704
 2890 207c D3E90023 		ldrd	r2, [r3]
 2891 2080 07F5D461 		add	r1, r7, #1696
 2892 2084 D1E90001 		ldrd	r0, [r1]
 2893 2088 8446     		mov	ip, r0
 2894 208a 0CEA020C 		and	ip, ip, r2
 2895 208e C7F898C6 		str	ip, [r7, #1688]
 2896 2092 0B40     		ands	r3, r3, r1
 2897 2094 C7F89C36 		str	r3, [r7, #1692]
 2898              		.loc 1 239 13 discriminator 3
 2899 2098 07F52A63 		add	r3, r7, #2720
 2900 209c D3E90023 		ldrd	r2, [r3]
 2901 20a0 07F5D361 		add	r1, r7, #1688
 2902 20a4 D1E90001 		ldrd	r0, [r1]
 2903 20a8 8446     		mov	ip, r0
 2904 20aa 82EA0C0C 		eor	ip, r2, ip
 2905 20ae C7F8F0C1 		str	ip, [r7, #496]
 2906 20b2 4B40     		eors	r3, r3, r1
 2907 20b4 C7F8F431 		str	r3, [r7, #500]
 2908 20b8 D7E97C23 		ldrd	r2, [r7, #496]
 2909 20bc 07F66831 		addw	r1, r7, #2920
 2910 20c0 C1E90023 		strd	r2, [r1]
 240:fips202.c     ****         Abo = BCo ^ ((~BCu) & BCa);
 2911              		.loc 1 240 23 discriminator 3
 2912 20c4 07F52963 		add	r3, r7, #2704
 2913 20c8 D3E90023 		ldrd	r2, [r3]
 2914 20cc D143     		mvns	r1, r2
 2915 20ce C7F89016 		str	r1, [r7, #1680]
 2916 20d2 DB43     		mvns	r3, r3
 2917 20d4 C7F89436 		str	r3, [r7, #1684]
 2918              		.loc 1 240 29 discriminator 3
 2919 20d8 07F52B63 		add	r3, r7, #2736
 2920 20dc D3E90023 		ldrd	r2, [r3]
 2921 20e0 07F5D261 		add	r1, r7, #1680
 2922 20e4 D1E90001 		ldrd	r0, [r1]
 2923 20e8 8446     		mov	ip, r0
 2924 20ea 0CEA020C 		and	ip, ip, r2
 2925 20ee C7F888C6 		str	ip, [r7, #1672]
 2926 20f2 0B40     		ands	r3, r3, r1
 2927 20f4 C7F88C36 		str	r3, [r7, #1676]
 2928              		.loc 1 240 13 discriminator 3
 2929 20f8 07F69823 		addw	r3, r7, #2712
 2930 20fc D3E90023 		ldrd	r2, [r3]
 2931 2100 07F5D161 		add	r1, r7, #1672
 2932 2104 D1E90001 		ldrd	r0, [r1]
 2933 2108 8446     		mov	ip, r0
 2934 210a 82EA0C0C 		eor	ip, r2, ip
 2935 210e C7F8E8C1 		str	ip, [r7, #488]
 2936 2112 4B40     		eors	r3, r3, r1
 2937 2114 C7F8EC31 		str	r3, [r7, #492]
 2938 2118 D7E97A23 		ldrd	r2, [r7, #488]
 2939 211c 07F53661 		add	r1, r7, #2912
 2940 2120 C1E90023 		strd	r2, [r1]
 241:fips202.c     ****         Abu = BCu ^ ((~BCa) & BCe);
 2941              		.loc 1 241 23 discriminator 3
 2942 2124 07F52B63 		add	r3, r7, #2736
 2943 2128 D3E90023 		ldrd	r2, [r3]
 2944 212c D143     		mvns	r1, r2
 2945 212e C7F88016 		str	r1, [r7, #1664]
 2946 2132 DB43     		mvns	r3, r3
 2947 2134 C7F88436 		str	r3, [r7, #1668]
 2948              		.loc 1 241 29 discriminator 3
 2949 2138 07F6A823 		addw	r3, r7, #2728
 2950 213c D3E90023 		ldrd	r2, [r3]
 2951 2140 07F5D061 		add	r1, r7, #1664
 2952 2144 D1E90001 		ldrd	r0, [r1]
 2953 2148 8446     		mov	ip, r0
 2954 214a 0CEA020C 		and	ip, ip, r2
 2955 214e C7F878C6 		str	ip, [r7, #1656]
 2956 2152 0B40     		ands	r3, r3, r1
 2957 2154 C7F87C36 		str	r3, [r7, #1660]
 2958              		.loc 1 241 13 discriminator 3
 2959 2158 07F52963 		add	r3, r7, #2704
 2960 215c D3E90023 		ldrd	r2, [r3]
 2961 2160 07F5CF61 		add	r1, r7, #1656
 2962 2164 D1E90001 		ldrd	r0, [r1]
 2963 2168 8446     		mov	ip, r0
 2964 216a 82EA0C0C 		eor	ip, r2, ip
 2965 216e C7F8E0C1 		str	ip, [r7, #480]
 2966 2172 4B40     		eors	r3, r3, r1
 2967 2174 C7F8E431 		str	r3, [r7, #484]
 2968 2178 D7E97823 		ldrd	r2, [r7, #480]
 2969 217c 07F65831 		addw	r1, r7, #2904
 2970 2180 C1E90023 		strd	r2, [r1]
 242:fips202.c     **** 
 243:fips202.c     ****         Ebo ^= Do;
 2971              		.loc 1 243 13 discriminator 3
 2972 2184 07F64823 		addw	r3, r7, #2632
 2973 2188 D3E90001 		ldrd	r0, [r3]
 2974 218c 07F52763 		add	r3, r7, #2672
 2975 2190 D3E90023 		ldrd	r2, [r3]
 2976 2194 80EA020C 		eor	ip, r0, r2
 2977 2198 C7F8D8C1 		str	ip, [r7, #472]
 2978 219c 4B40     		eors	r3, r3, r1
 2979 219e C7F8DC31 		str	r3, [r7, #476]
 2980 21a2 D7E97623 		ldrd	r2, [r7, #472]
 2981 21a6 07F64821 		addw	r1, r7, #2632
 2982 21aa C1E90023 		strd	r2, [r1]
 244:fips202.c     ****         BCa = ROL(Ebo, 28);
 2983              		.loc 1 244 13 discriminator 3
 2984 21ae 07F68833 		addw	r3, r7, #2952
 2985 21b2 A3F5A070 		sub	r0, r3, #320
 2986 21b6 07F68833 		addw	r3, r7, #2952
 2987 21ba A3F59E71 		sub	r1, r3, #316
 2988 21be 0368     		ldr	r3, [r0]
 2989 21c0 1A09     		lsrs	r2, r3, #4
 2990 21c2 0B68     		ldr	r3, [r1]
 2991 21c4 1B07     		lsls	r3, r3, #28
 2992 21c6 1343     		orrs	r3, r3, r2
 2993 21c8 C7F8D431 		str	r3, [r7, #468]
 2994 21cc 0B68     		ldr	r3, [r1]
 2995 21ce 1A09     		lsrs	r2, r3, #4
 2996 21d0 0368     		ldr	r3, [r0]
 2997 21d2 1B07     		lsls	r3, r3, #28
 2998 21d4 1343     		orrs	r3, r3, r2
 2999 21d6 C7F8D031 		str	r3, [r7, #464]
 3000 21da D7E97423 		ldrd	r2, [r7, #464]
 3001 21de 07F52B61 		add	r1, r7, #2736
 3002 21e2 C1E90023 		strd	r2, [r1]
 245:fips202.c     ****         Egu ^= Du;
 3003              		.loc 1 245 13 discriminator 3
 3004 21e6 07F61823 		addw	r3, r7, #2584
 3005 21ea D3E90001 		ldrd	r0, [r3]
 3006 21ee 07F66823 		addw	r3, r7, #2664
 3007 21f2 D3E90023 		ldrd	r2, [r3]
 3008 21f6 80EA020C 		eor	ip, r0, r2
 3009 21fa C7F8C8C1 		str	ip, [r7, #456]
 3010 21fe 4B40     		eors	r3, r3, r1
 3011 2200 C7F8CC31 		str	r3, [r7, #460]
 3012 2204 D7E97223 		ldrd	r2, [r7, #456]
 3013 2208 07F61821 		addw	r1, r7, #2584
 3014 220c C1E90023 		strd	r2, [r1]
 246:fips202.c     ****         BCe = ROL(Egu, 20);
 3015              		.loc 1 246 13 discriminator 3
 3016 2210 07F68833 		addw	r3, r7, #2952
 3017 2214 A3F5B870 		sub	r0, r3, #368
 3018 2218 07F68833 		addw	r3, r7, #2952
 3019 221c A3F5B671 		sub	r1, r3, #364
 3020 2220 0368     		ldr	r3, [r0]
 3021 2222 1A0B     		lsrs	r2, r3, #12
 3022 2224 0B68     		ldr	r3, [r1]
 3023 2226 1B05     		lsls	r3, r3, #20
 3024 2228 1343     		orrs	r3, r3, r2
 3025 222a C7F8C431 		str	r3, [r7, #452]
 3026 222e 0B68     		ldr	r3, [r1]
 3027 2230 1A0B     		lsrs	r2, r3, #12
 3028 2232 0368     		ldr	r3, [r0]
 3029 2234 1B05     		lsls	r3, r3, #20
 3030 2236 1343     		orrs	r3, r3, r2
 3031 2238 C7F8C031 		str	r3, [r7, #448]
 3032 223c D7E97023 		ldrd	r2, [r7, #448]
 3033 2240 07F6A821 		addw	r1, r7, #2728
 3034 2244 C1E90023 		strd	r2, [r1]
 247:fips202.c     ****         Eka ^= Da;
 3035              		.loc 1 247 13 discriminator 3
 3036 2248 07F52163 		add	r3, r7, #2576
 3037 224c D3E90001 		ldrd	r0, [r3]
 3038 2250 07F68823 		addw	r3, r7, #2696
 3039 2254 D3E90023 		ldrd	r2, [r3]
 3040 2258 80EA020C 		eor	ip, r0, r2
 3041 225c C7F8B8C1 		str	ip, [r7, #440]
 3042 2260 4B40     		eors	r3, r3, r1
 3043 2262 C7F8BC31 		str	r3, [r7, #444]
 3044 2266 D7E96E23 		ldrd	r2, [r7, #440]
 3045 226a 07F52161 		add	r1, r7, #2576
 3046 226e C1E90023 		strd	r2, [r1]
 248:fips202.c     ****         BCi = ROL(Eka, 3);
 3047              		.loc 1 248 13 discriminator 3
 3048 2272 07F68833 		addw	r3, r7, #2952
 3049 2276 A3F5BC70 		sub	r0, r3, #376
 3050 227a 07F68833 		addw	r3, r7, #2952
 3051 227e A3F5BA71 		sub	r1, r3, #372
 3052 2282 0368     		ldr	r3, [r0]
 3053 2284 5A0F     		lsrs	r2, r3, #29
 3054 2286 0B68     		ldr	r3, [r1]
 3055 2288 DB00     		lsls	r3, r3, #3
 3056 228a 1343     		orrs	r3, r3, r2
 3057 228c C7F8B431 		str	r3, [r7, #436]
 3058 2290 0B68     		ldr	r3, [r1]
 3059 2292 5A0F     		lsrs	r2, r3, #29
 3060 2294 0368     		ldr	r3, [r0]
 3061 2296 DB00     		lsls	r3, r3, #3
 3062 2298 1343     		orrs	r3, r3, r2
 3063 229a C7F8B031 		str	r3, [r7, #432]
 3064 229e D7E96C23 		ldrd	r2, [r7, #432]
 3065 22a2 07F52A61 		add	r1, r7, #2720
 3066 22a6 C1E90023 		strd	r2, [r1]
 249:fips202.c     ****         Eme ^= De;
 3067              		.loc 1 249 13 discriminator 3
 3068 22aa 07F51E63 		add	r3, r7, #2528
 3069 22ae D3E90001 		ldrd	r0, [r3]
 3070 22b2 07F52863 		add	r3, r7, #2688
 3071 22b6 D3E90023 		ldrd	r2, [r3]
 3072 22ba 80EA020C 		eor	ip, r0, r2
 3073 22be C7F8A8C1 		str	ip, [r7, #424]
 3074 22c2 4B40     		eors	r3, r3, r1
 3075 22c4 C7F8AC31 		str	r3, [r7, #428]
 3076 22c8 D7E96A23 		ldrd	r2, [r7, #424]
 3077 22cc 07F51E61 		add	r1, r7, #2528
 3078 22d0 C1E90023 		strd	r2, [r1]
 250:fips202.c     ****         BCo = ROL(Eme, 45);
 3079              		.loc 1 250 13 discriminator 3
 3080 22d4 07F68833 		addw	r3, r7, #2952
 3081 22d8 A3F5D270 		sub	r0, r3, #420
 3082 22dc 02E0     		b	.L15
 3083              	.L16:
 3084 22de 00BF     		.align	2
 3085              	.L14:
 3086 22e0 00000000 		.word	KeccakF_RoundConstants
 3087              	.L15:
 3088 22e4 07F68833 		addw	r3, r7, #2952
 3089 22e8 A3F5D471 		sub	r1, r3, #424
 3090 22ec 0368     		ldr	r3, [r0]
 3091 22ee 5A03     		lsls	r2, r3, #13
 3092 22f0 0B68     		ldr	r3, [r1]
 3093 22f2 DB0C     		lsrs	r3, r3, #19
 3094 22f4 1343     		orrs	r3, r3, r2
 3095 22f6 C7F8A031 		str	r3, [r7, #416]
 3096 22fa 0B68     		ldr	r3, [r1]
 3097 22fc 5A03     		lsls	r2, r3, #13
 3098 22fe 0368     		ldr	r3, [r0]
 3099 2300 DB0C     		lsrs	r3, r3, #19
 3100 2302 1343     		orrs	r3, r3, r2
 3101 2304 C7F8A431 		str	r3, [r7, #420]
 3102 2308 D7E96823 		ldrd	r2, [r7, #416]
 3103 230c 07F69821 		addw	r1, r7, #2712
 3104 2310 C1E90023 		strd	r2, [r1]
 251:fips202.c     ****         Esi ^= Di;
 3105              		.loc 1 251 13 discriminator 3
 3106 2314 07F51B63 		add	r3, r7, #2480
 3107 2318 D3E90001 		ldrd	r0, [r3]
 3108 231c 07F67823 		addw	r3, r7, #2680
 3109 2320 D3E90023 		ldrd	r2, [r3]
 3110 2324 80EA020C 		eor	ip, r0, r2
 3111 2328 C7F898C1 		str	ip, [r7, #408]
 3112 232c 4B40     		eors	r3, r3, r1
 3113 232e C7F89C31 		str	r3, [r7, #412]
 3114 2332 D7E96623 		ldrd	r2, [r7, #408]
 3115 2336 07F51B61 		add	r1, r7, #2480
 3116 233a C1E90023 		strd	r2, [r1]
 252:fips202.c     ****         BCu = ROL(Esi, 61);
 3117              		.loc 1 252 13 discriminator 3
 3118 233e 07F68833 		addw	r3, r7, #2952
 3119 2342 A3F5EA70 		sub	r0, r3, #468
 3120 2346 07F68833 		addw	r3, r7, #2952
 3121 234a A3F5EC71 		sub	r1, r3, #472
 3122 234e 0368     		ldr	r3, [r0]
 3123 2350 5A07     		lsls	r2, r3, #29
 3124 2352 0B68     		ldr	r3, [r1]
 3125 2354 DB08     		lsrs	r3, r3, #3
 3126 2356 1343     		orrs	r3, r3, r2
 3127 2358 C7F89031 		str	r3, [r7, #400]
 3128 235c 0B68     		ldr	r3, [r1]
 3129 235e 5A07     		lsls	r2, r3, #29
 3130 2360 0368     		ldr	r3, [r0]
 3131 2362 DB08     		lsrs	r3, r3, #3
 3132 2364 1343     		orrs	r3, r3, r2
 3133 2366 C7F89431 		str	r3, [r7, #404]
 3134 236a D7E96423 		ldrd	r2, [r7, #400]
 3135 236e 07F52961 		add	r1, r7, #2704
 3136 2372 C1E90023 		strd	r2, [r1]
 253:fips202.c     ****         Aga = BCa ^ ((~BCe) & BCi);
 3137              		.loc 1 253 23 discriminator 3
 3138 2376 07F6A823 		addw	r3, r7, #2728
 3139 237a D3E90023 		ldrd	r2, [r3]
 3140 237e D143     		mvns	r1, r2
 3141 2380 C7F87016 		str	r1, [r7, #1648]
 3142 2384 DB43     		mvns	r3, r3
 3143 2386 C7F87436 		str	r3, [r7, #1652]
 3144              		.loc 1 253 29 discriminator 3
 3145 238a 07F52A63 		add	r3, r7, #2720
 3146 238e D3E90023 		ldrd	r2, [r3]
 3147 2392 07F5CE61 		add	r1, r7, #1648
 3148 2396 D1E90001 		ldrd	r0, [r1]
 3149 239a 8446     		mov	ip, r0
 3150 239c 0CEA020C 		and	ip, ip, r2
 3151 23a0 C7F868C6 		str	ip, [r7, #1640]
 3152 23a4 0B40     		ands	r3, r3, r1
 3153 23a6 C7F86C36 		str	r3, [r7, #1644]
 3154              		.loc 1 253 13 discriminator 3
 3155 23aa 07F52B63 		add	r3, r7, #2736
 3156 23ae D3E90023 		ldrd	r2, [r3]
 3157 23b2 07F5CD61 		add	r1, r7, #1640
 3158 23b6 D1E90001 		ldrd	r0, [r1]
 3159 23ba 8446     		mov	ip, r0
 3160 23bc 82EA0C0C 		eor	ip, r2, ip
 3161 23c0 C7F888C1 		str	ip, [r7, #392]
 3162 23c4 4B40     		eors	r3, r3, r1
 3163 23c6 C7F88C31 		str	r3, [r7, #396]
 3164 23ca D7E96223 		ldrd	r2, [r7, #392]
 3165 23ce 07F53561 		add	r1, r7, #2896
 3166 23d2 C1E90023 		strd	r2, [r1]
 254:fips202.c     ****         Age = BCe ^ ((~BCi) & BCo);
 3167              		.loc 1 254 23 discriminator 3
 3168 23d6 07F52A63 		add	r3, r7, #2720
 3169 23da D3E90023 		ldrd	r2, [r3]
 3170 23de D143     		mvns	r1, r2
 3171 23e0 C7F86016 		str	r1, [r7, #1632]
 3172 23e4 DB43     		mvns	r3, r3
 3173 23e6 C7F86436 		str	r3, [r7, #1636]
 3174              		.loc 1 254 29 discriminator 3
 3175 23ea 07F69823 		addw	r3, r7, #2712
 3176 23ee D3E90023 		ldrd	r2, [r3]
 3177 23f2 07F5CC61 		add	r1, r7, #1632
 3178 23f6 D1E90001 		ldrd	r0, [r1]
 3179 23fa 8446     		mov	ip, r0
 3180 23fc 0CEA020C 		and	ip, ip, r2
 3181 2400 C7F858C6 		str	ip, [r7, #1624]
 3182 2404 0B40     		ands	r3, r3, r1
 3183 2406 C7F85C36 		str	r3, [r7, #1628]
 3184              		.loc 1 254 13 discriminator 3
 3185 240a 07F6A823 		addw	r3, r7, #2728
 3186 240e D3E90023 		ldrd	r2, [r3]
 3187 2412 07F5CB61 		add	r1, r7, #1624
 3188 2416 D1E90001 		ldrd	r0, [r1]
 3189 241a 8446     		mov	ip, r0
 3190 241c 82EA0C0C 		eor	ip, r2, ip
 3191 2420 C7F880C1 		str	ip, [r7, #384]
 3192 2424 4B40     		eors	r3, r3, r1
 3193 2426 C7F88431 		str	r3, [r7, #388]
 3194 242a D7E96023 		ldrd	r2, [r7, #384]
 3195 242e 07F64831 		addw	r1, r7, #2888
 3196 2432 C1E90023 		strd	r2, [r1]
 255:fips202.c     ****         Agi = BCi ^ ((~BCo) & BCu);
 3197              		.loc 1 255 23 discriminator 3
 3198 2436 07F69823 		addw	r3, r7, #2712
 3199 243a D3E90023 		ldrd	r2, [r3]
 3200 243e D143     		mvns	r1, r2
 3201 2440 C7F85016 		str	r1, [r7, #1616]
 3202 2444 DB43     		mvns	r3, r3
 3203 2446 C7F85436 		str	r3, [r7, #1620]
 3204              		.loc 1 255 29 discriminator 3
 3205 244a 07F52963 		add	r3, r7, #2704
 3206 244e D3E90023 		ldrd	r2, [r3]
 3207 2452 07F5CA61 		add	r1, r7, #1616
 3208 2456 D1E90001 		ldrd	r0, [r1]
 3209 245a 8446     		mov	ip, r0
 3210 245c 0CEA020C 		and	ip, ip, r2
 3211 2460 C7F848C6 		str	ip, [r7, #1608]
 3212 2464 0B40     		ands	r3, r3, r1
 3213 2466 C7F84C36 		str	r3, [r7, #1612]
 3214              		.loc 1 255 13 discriminator 3
 3215 246a 07F52A63 		add	r3, r7, #2720
 3216 246e D3E90023 		ldrd	r2, [r3]
 3217 2472 07F5C961 		add	r1, r7, #1608
 3218 2476 D1E90001 		ldrd	r0, [r1]
 3219 247a 8446     		mov	ip, r0
 3220 247c 82EA0C0C 		eor	ip, r2, ip
 3221 2480 C7F878C1 		str	ip, [r7, #376]
 3222 2484 4B40     		eors	r3, r3, r1
 3223 2486 C7F87C31 		str	r3, [r7, #380]
 3224 248a D7E95E23 		ldrd	r2, [r7, #376]
 3225 248e 07F53461 		add	r1, r7, #2880
 3226 2492 C1E90023 		strd	r2, [r1]
 256:fips202.c     ****         Ago = BCo ^ ((~BCu) & BCa);
 3227              		.loc 1 256 23 discriminator 3
 3228 2496 07F52963 		add	r3, r7, #2704
 3229 249a D3E90023 		ldrd	r2, [r3]
 3230 249e D143     		mvns	r1, r2
 3231 24a0 C7F84016 		str	r1, [r7, #1600]
 3232 24a4 DB43     		mvns	r3, r3
 3233 24a6 C7F84436 		str	r3, [r7, #1604]
 3234              		.loc 1 256 29 discriminator 3
 3235 24aa 07F52B63 		add	r3, r7, #2736
 3236 24ae D3E90023 		ldrd	r2, [r3]
 3237 24b2 07F5C861 		add	r1, r7, #1600
 3238 24b6 D1E90001 		ldrd	r0, [r1]
 3239 24ba 8446     		mov	ip, r0
 3240 24bc 0CEA020C 		and	ip, ip, r2
 3241 24c0 C7F838C6 		str	ip, [r7, #1592]
 3242 24c4 0B40     		ands	r3, r3, r1
 3243 24c6 C7F83C36 		str	r3, [r7, #1596]
 3244              		.loc 1 256 13 discriminator 3
 3245 24ca 07F69823 		addw	r3, r7, #2712
 3246 24ce D3E90023 		ldrd	r2, [r3]
 3247 24d2 07F5C761 		add	r1, r7, #1592
 3248 24d6 D1E90001 		ldrd	r0, [r1]
 3249 24da 8446     		mov	ip, r0
 3250 24dc 82EA0C0C 		eor	ip, r2, ip
 3251 24e0 C7F870C1 		str	ip, [r7, #368]
 3252 24e4 4B40     		eors	r3, r3, r1
 3253 24e6 C7F87431 		str	r3, [r7, #372]
 3254 24ea D7E95C23 		ldrd	r2, [r7, #368]
 3255 24ee 07F63831 		addw	r1, r7, #2872
 3256 24f2 C1E90023 		strd	r2, [r1]
 257:fips202.c     ****         Agu = BCu ^ ((~BCa) & BCe);
 3257              		.loc 1 257 23 discriminator 3
 3258 24f6 07F52B63 		add	r3, r7, #2736
 3259 24fa D3E90023 		ldrd	r2, [r3]
 3260 24fe D143     		mvns	r1, r2
 3261 2500 C7F83016 		str	r1, [r7, #1584]
 3262 2504 DB43     		mvns	r3, r3
 3263 2506 C7F83436 		str	r3, [r7, #1588]
 3264              		.loc 1 257 29 discriminator 3
 3265 250a 07F6A823 		addw	r3, r7, #2728
 3266 250e D3E90023 		ldrd	r2, [r3]
 3267 2512 07F5C661 		add	r1, r7, #1584
 3268 2516 D1E90001 		ldrd	r0, [r1]
 3269 251a 8446     		mov	ip, r0
 3270 251c 0CEA020C 		and	ip, ip, r2
 3271 2520 C7F828C6 		str	ip, [r7, #1576]
 3272 2524 0B40     		ands	r3, r3, r1
 3273 2526 C7F82C36 		str	r3, [r7, #1580]
 3274              		.loc 1 257 13 discriminator 3
 3275 252a 07F52963 		add	r3, r7, #2704
 3276 252e D3E90023 		ldrd	r2, [r3]
 3277 2532 07F5C561 		add	r1, r7, #1576
 3278 2536 D1E90001 		ldrd	r0, [r1]
 3279 253a 8446     		mov	ip, r0
 3280 253c 82EA0C0C 		eor	ip, r2, ip
 3281 2540 C7F868C1 		str	ip, [r7, #360]
 3282 2544 4B40     		eors	r3, r3, r1
 3283 2546 C7F86C31 		str	r3, [r7, #364]
 3284 254a D7E95A23 		ldrd	r2, [r7, #360]
 3285 254e 07F53361 		add	r1, r7, #2864
 3286 2552 C1E90023 		strd	r2, [r1]
 258:fips202.c     **** 
 259:fips202.c     ****         Ebe ^= De;
 3287              		.loc 1 259 13 discriminator 3
 3288 2556 07F65823 		addw	r3, r7, #2648
 3289 255a D3E90001 		ldrd	r0, [r3]
 3290 255e 07F52863 		add	r3, r7, #2688
 3291 2562 D3E90023 		ldrd	r2, [r3]
 3292 2566 80EA020C 		eor	ip, r0, r2
 3293 256a C7F860C1 		str	ip, [r7, #352]
 3294 256e 4B40     		eors	r3, r3, r1
 3295 2570 C7F86431 		str	r3, [r7, #356]
 3296 2574 D7E95823 		ldrd	r2, [r7, #352]
 3297 2578 07F65821 		addw	r1, r7, #2648
 3298 257c C1E90023 		strd	r2, [r1]
 260:fips202.c     ****         BCa = ROL(Ebe, 1);
 3299              		.loc 1 260 13 discriminator 3
 3300 2580 07F68833 		addw	r3, r7, #2952
 3301 2584 A3F59870 		sub	r0, r3, #304
 3302 2588 07F68833 		addw	r3, r7, #2952
 3303 258c A3F59671 		sub	r1, r3, #300
 3304 2590 0368     		ldr	r3, [r0]
 3305 2592 DA0F     		lsrs	r2, r3, #31
 3306 2594 0B68     		ldr	r3, [r1]
 3307 2596 5B00     		lsls	r3, r3, #1
 3308 2598 1343     		orrs	r3, r3, r2
 3309 259a C7F85C31 		str	r3, [r7, #348]
 3310 259e 0B68     		ldr	r3, [r1]
 3311 25a0 DA0F     		lsrs	r2, r3, #31
 3312 25a2 0368     		ldr	r3, [r0]
 3313 25a4 5B00     		lsls	r3, r3, #1
 3314 25a6 1343     		orrs	r3, r3, r2
 3315 25a8 C7F85831 		str	r3, [r7, #344]
 3316 25ac D7E95623 		ldrd	r2, [r7, #344]
 3317 25b0 07F52B61 		add	r1, r7, #2736
 3318 25b4 C1E90023 		strd	r2, [r1]
 261:fips202.c     ****         Egi ^= Di;
 3319              		.loc 1 261 13 discriminator 3
 3320 25b8 07F62823 		addw	r3, r7, #2600
 3321 25bc D3E90001 		ldrd	r0, [r3]
 3322 25c0 07F67823 		addw	r3, r7, #2680
 3323 25c4 D3E90023 		ldrd	r2, [r3]
 3324 25c8 80EA020C 		eor	ip, r0, r2
 3325 25cc C7F850C1 		str	ip, [r7, #336]
 3326 25d0 4B40     		eors	r3, r3, r1
 3327 25d2 C7F85431 		str	r3, [r7, #340]
 3328 25d6 D7E95423 		ldrd	r2, [r7, #336]
 3329 25da 07F62821 		addw	r1, r7, #2600
 3330 25de C1E90023 		strd	r2, [r1]
 262:fips202.c     ****         BCe = ROL(Egi, 6);
 3331              		.loc 1 262 13 discriminator 3
 3332 25e2 07F68833 		addw	r3, r7, #2952
 3333 25e6 A3F5B070 		sub	r0, r3, #352
 3334 25ea 07F68833 		addw	r3, r7, #2952
 3335 25ee A3F5AE71 		sub	r1, r3, #348
 3336 25f2 0368     		ldr	r3, [r0]
 3337 25f4 9A0E     		lsrs	r2, r3, #26
 3338 25f6 0B68     		ldr	r3, [r1]
 3339 25f8 9B01     		lsls	r3, r3, #6
 3340 25fa 1343     		orrs	r3, r3, r2
 3341 25fc C7F84C31 		str	r3, [r7, #332]
 3342 2600 0B68     		ldr	r3, [r1]
 3343 2602 9A0E     		lsrs	r2, r3, #26
 3344 2604 0368     		ldr	r3, [r0]
 3345 2606 9B01     		lsls	r3, r3, #6
 3346 2608 1343     		orrs	r3, r3, r2
 3347 260a C7F84831 		str	r3, [r7, #328]
 3348 260e D7E95223 		ldrd	r2, [r7, #328]
 3349 2612 07F6A821 		addw	r1, r7, #2728
 3350 2616 C1E90023 		strd	r2, [r1]
 263:fips202.c     ****         Eko ^= Do;
 3351              		.loc 1 263 13 discriminator 3
 3352 261a 07F6F813 		addw	r3, r7, #2552
 3353 261e D3E90001 		ldrd	r0, [r3]
 3354 2622 07F52763 		add	r3, r7, #2672
 3355 2626 D3E90023 		ldrd	r2, [r3]
 3356 262a 80EA020C 		eor	ip, r0, r2
 3357 262e C7F840C1 		str	ip, [r7, #320]
 3358 2632 4B40     		eors	r3, r3, r1
 3359 2634 C7F84431 		str	r3, [r7, #324]
 3360 2638 D7E95023 		ldrd	r2, [r7, #320]
 3361 263c 07F6F811 		addw	r1, r7, #2552
 3362 2640 C1E90023 		strd	r2, [r1]
 264:fips202.c     ****         BCi = ROL(Eko, 25);
 3363              		.loc 1 264 13 discriminator 3
 3364 2644 07F68833 		addw	r3, r7, #2952
 3365 2648 A3F5C870 		sub	r0, r3, #400
 3366 264c 07F68833 		addw	r3, r7, #2952
 3367 2650 A3F5C671 		sub	r1, r3, #396
 3368 2654 0368     		ldr	r3, [r0]
 3369 2656 DA09     		lsrs	r2, r3, #7
 3370 2658 0B68     		ldr	r3, [r1]
 3371 265a 5B06     		lsls	r3, r3, #25
 3372 265c 1343     		orrs	r3, r3, r2
 3373 265e C7F83C31 		str	r3, [r7, #316]
 3374 2662 0B68     		ldr	r3, [r1]
 3375 2664 DA09     		lsrs	r2, r3, #7
 3376 2666 0368     		ldr	r3, [r0]
 3377 2668 5B06     		lsls	r3, r3, #25
 3378 266a 1343     		orrs	r3, r3, r2
 3379 266c C7F83831 		str	r3, [r7, #312]
 3380 2670 D7E94E23 		ldrd	r2, [r7, #312]
 3381 2674 07F52A61 		add	r1, r7, #2720
 3382 2678 C1E90023 		strd	r2, [r1]
 265:fips202.c     ****         Emu ^= Du;
 3383              		.loc 1 265 13 discriminator 3
 3384 267c 07F6C813 		addw	r3, r7, #2504
 3385 2680 D3E90001 		ldrd	r0, [r3]
 3386 2684 07F66823 		addw	r3, r7, #2664
 3387 2688 D3E90023 		ldrd	r2, [r3]
 3388 268c 80EA020C 		eor	ip, r0, r2
 3389 2690 C7F830C1 		str	ip, [r7, #304]
 3390 2694 4B40     		eors	r3, r3, r1
 3391 2696 C7F83431 		str	r3, [r7, #308]
 3392 269a D7E94C23 		ldrd	r2, [r7, #304]
 3393 269e 07F6C811 		addw	r1, r7, #2504
 3394 26a2 C1E90023 		strd	r2, [r1]
 266:fips202.c     ****         BCo = ROL(Emu, 8);
 3395              		.loc 1 266 13 discriminator 3
 3396 26a6 07F68833 		addw	r3, r7, #2952
 3397 26aa A3F5E070 		sub	r0, r3, #448
 3398 26ae 07F68833 		addw	r3, r7, #2952
 3399 26b2 A3F5DE71 		sub	r1, r3, #444
 3400 26b6 0368     		ldr	r3, [r0]
 3401 26b8 1A0E     		lsrs	r2, r3, #24
 3402 26ba 0B68     		ldr	r3, [r1]
 3403 26bc 1B02     		lsls	r3, r3, #8
 3404 26be 1343     		orrs	r3, r3, r2
 3405 26c0 C7F82C31 		str	r3, [r7, #300]
 3406 26c4 0B68     		ldr	r3, [r1]
 3407 26c6 1A0E     		lsrs	r2, r3, #24
 3408 26c8 0368     		ldr	r3, [r0]
 3409 26ca 1B02     		lsls	r3, r3, #8
 3410 26cc 1343     		orrs	r3, r3, r2
 3411 26ce C7F82831 		str	r3, [r7, #296]
 3412 26d2 D7E94A23 		ldrd	r2, [r7, #296]
 3413 26d6 07F69821 		addw	r1, r7, #2712
 3414 26da C1E90023 		strd	r2, [r1]
 267:fips202.c     ****         Esa ^= Da;
 3415              		.loc 1 267 13 discriminator 3
 3416 26de 07F51C63 		add	r3, r7, #2496
 3417 26e2 D3E90001 		ldrd	r0, [r3]
 3418 26e6 07F68823 		addw	r3, r7, #2696
 3419 26ea D3E90023 		ldrd	r2, [r3]
 3420 26ee 80EA020C 		eor	ip, r0, r2
 3421 26f2 C7F820C1 		str	ip, [r7, #288]
 3422 26f6 4B40     		eors	r3, r3, r1
 3423 26f8 C7F82431 		str	r3, [r7, #292]
 3424 26fc D7E94823 		ldrd	r2, [r7, #288]
 3425 2700 07F51C61 		add	r1, r7, #2496
 3426 2704 C1E90023 		strd	r2, [r1]
 268:fips202.c     ****         BCu = ROL(Esa, 18);
 3427              		.loc 1 268 13 discriminator 3
 3428 2708 07F68833 		addw	r3, r7, #2952
 3429 270c A3F5E470 		sub	r0, r3, #456
 3430 2710 07F68833 		addw	r3, r7, #2952
 3431 2714 A3F5E271 		sub	r1, r3, #452
 3432 2718 0368     		ldr	r3, [r0]
 3433 271a 9A0B     		lsrs	r2, r3, #14
 3434 271c 0B68     		ldr	r3, [r1]
 3435 271e 9B04     		lsls	r3, r3, #18
 3436 2720 1343     		orrs	r3, r3, r2
 3437 2722 C7F81C31 		str	r3, [r7, #284]
 3438 2726 0B68     		ldr	r3, [r1]
 3439 2728 9A0B     		lsrs	r2, r3, #14
 3440 272a 0368     		ldr	r3, [r0]
 3441 272c 9B04     		lsls	r3, r3, #18
 3442 272e 1343     		orrs	r3, r3, r2
 3443 2730 C7F81831 		str	r3, [r7, #280]
 3444 2734 D7E94623 		ldrd	r2, [r7, #280]
 3445 2738 07F52961 		add	r1, r7, #2704
 3446 273c C1E90023 		strd	r2, [r1]
 269:fips202.c     ****         Aka = BCa ^ ((~BCe) & BCi);
 3447              		.loc 1 269 23 discriminator 3
 3448 2740 07F6A823 		addw	r3, r7, #2728
 3449 2744 D3E90023 		ldrd	r2, [r3]
 3450 2748 D143     		mvns	r1, r2
 3451 274a C7F82016 		str	r1, [r7, #1568]
 3452 274e DB43     		mvns	r3, r3
 3453 2750 C7F82436 		str	r3, [r7, #1572]
 3454              		.loc 1 269 29 discriminator 3
 3455 2754 07F52A63 		add	r3, r7, #2720
 3456 2758 D3E90023 		ldrd	r2, [r3]
 3457 275c 07F5C461 		add	r1, r7, #1568
 3458 2760 D1E90001 		ldrd	r0, [r1]
 3459 2764 8446     		mov	ip, r0
 3460 2766 0CEA020C 		and	ip, ip, r2
 3461 276a C7F818C6 		str	ip, [r7, #1560]
 3462 276e 0B40     		ands	r3, r3, r1
 3463 2770 C7F81C36 		str	r3, [r7, #1564]
 3464              		.loc 1 269 13 discriminator 3
 3465 2774 07F52B63 		add	r3, r7, #2736
 3466 2778 D3E90023 		ldrd	r2, [r3]
 3467 277c 07F5C361 		add	r1, r7, #1560
 3468 2780 D1E90001 		ldrd	r0, [r1]
 3469 2784 8446     		mov	ip, r0
 3470 2786 82EA0C0C 		eor	ip, r2, ip
 3471 278a C7F810C1 		str	ip, [r7, #272]
 3472 278e 4B40     		eors	r3, r3, r1
 3473 2790 C7F81431 		str	r3, [r7, #276]
 3474 2794 D7E94423 		ldrd	r2, [r7, #272]
 3475 2798 07F62831 		addw	r1, r7, #2856
 3476 279c C1E90023 		strd	r2, [r1]
 270:fips202.c     ****         Ake = BCe ^ ((~BCi) & BCo);
 3477              		.loc 1 270 23 discriminator 3
 3478 27a0 07F52A63 		add	r3, r7, #2720
 3479 27a4 D3E90023 		ldrd	r2, [r3]
 3480 27a8 D143     		mvns	r1, r2
 3481 27aa C7F81016 		str	r1, [r7, #1552]
 3482 27ae DB43     		mvns	r3, r3
 3483 27b0 C7F81436 		str	r3, [r7, #1556]
 3484              		.loc 1 270 29 discriminator 3
 3485 27b4 07F69823 		addw	r3, r7, #2712
 3486 27b8 D3E90023 		ldrd	r2, [r3]
 3487 27bc 07F5C261 		add	r1, r7, #1552
 3488 27c0 D1E90001 		ldrd	r0, [r1]
 3489 27c4 8446     		mov	ip, r0
 3490 27c6 0CEA020C 		and	ip, ip, r2
 3491 27ca C7F808C6 		str	ip, [r7, #1544]
 3492 27ce 0B40     		ands	r3, r3, r1
 3493 27d0 C7F80C36 		str	r3, [r7, #1548]
 3494              		.loc 1 270 13 discriminator 3
 3495 27d4 07F6A823 		addw	r3, r7, #2728
 3496 27d8 D3E90023 		ldrd	r2, [r3]
 3497 27dc 07F5C161 		add	r1, r7, #1544
 3498 27e0 D1E90001 		ldrd	r0, [r1]
 3499 27e4 8446     		mov	ip, r0
 3500 27e6 82EA0C0C 		eor	ip, r2, ip
 3501 27ea C7F808C1 		str	ip, [r7, #264]
 3502 27ee 4B40     		eors	r3, r3, r1
 3503 27f0 C7F80C31 		str	r3, [r7, #268]
 3504 27f4 D7E94223 		ldrd	r2, [r7, #264]
 3505 27f8 07F53261 		add	r1, r7, #2848
 3506 27fc C1E90023 		strd	r2, [r1]
 271:fips202.c     ****         Aki = BCi ^ ((~BCo) & BCu);
 3507              		.loc 1 271 23 discriminator 3
 3508 2800 07F69823 		addw	r3, r7, #2712
 3509 2804 D3E90023 		ldrd	r2, [r3]
 3510 2808 D143     		mvns	r1, r2
 3511 280a C7F80016 		str	r1, [r7, #1536]
 3512 280e DB43     		mvns	r3, r3
 3513 2810 C7F80436 		str	r3, [r7, #1540]
 3514              		.loc 1 271 29 discriminator 3
 3515 2814 07F52963 		add	r3, r7, #2704
 3516 2818 D3E90023 		ldrd	r2, [r3]
 3517 281c 07F5C061 		add	r1, r7, #1536
 3518 2820 D1E90001 		ldrd	r0, [r1]
 3519 2824 8446     		mov	ip, r0
 3520 2826 0CEA020C 		and	ip, ip, r2
 3521 282a C7F8F8C5 		str	ip, [r7, #1528]
 3522 282e 0B40     		ands	r3, r3, r1
 3523 2830 C7F8FC35 		str	r3, [r7, #1532]
 3524              		.loc 1 271 13 discriminator 3
 3525 2834 07F52A63 		add	r3, r7, #2720
 3526 2838 D3E90023 		ldrd	r2, [r3]
 3527 283c 07F5BF61 		add	r1, r7, #1528
 3528 2840 D1E90001 		ldrd	r0, [r1]
 3529 2844 8446     		mov	ip, r0
 3530 2846 82EA0C0C 		eor	ip, r2, ip
 3531 284a C7F800C1 		str	ip, [r7, #256]
 3532 284e 4B40     		eors	r3, r3, r1
 3533 2850 C7F80431 		str	r3, [r7, #260]
 3534 2854 D7E94023 		ldrd	r2, [r7, #256]
 3535 2858 07F61831 		addw	r1, r7, #2840
 3536 285c C1E90023 		strd	r2, [r1]
 272:fips202.c     ****         Ako = BCo ^ ((~BCu) & BCa);
 3537              		.loc 1 272 23 discriminator 3
 3538 2860 07F52963 		add	r3, r7, #2704
 3539 2864 D3E90023 		ldrd	r2, [r3]
 3540 2868 D143     		mvns	r1, r2
 3541 286a C7F8F015 		str	r1, [r7, #1520]
 3542 286e DB43     		mvns	r3, r3
 3543 2870 C7F8F435 		str	r3, [r7, #1524]
 3544              		.loc 1 272 29 discriminator 3
 3545 2874 07F52B63 		add	r3, r7, #2736
 3546 2878 D3E90023 		ldrd	r2, [r3]
 3547 287c 07F5BE61 		add	r1, r7, #1520
 3548 2880 D1E90001 		ldrd	r0, [r1]
 3549 2884 8446     		mov	ip, r0
 3550 2886 0CEA020C 		and	ip, ip, r2
 3551 288a C7F8E8C5 		str	ip, [r7, #1512]
 3552 288e 0B40     		ands	r3, r3, r1
 3553 2890 C7F8EC35 		str	r3, [r7, #1516]
 3554              		.loc 1 272 13 discriminator 3
 3555 2894 07F69823 		addw	r3, r7, #2712
 3556 2898 D3E90023 		ldrd	r2, [r3]
 3557 289c 07F5BD61 		add	r1, r7, #1512
 3558 28a0 D1E90001 		ldrd	r0, [r1]
 3559 28a4 8446     		mov	ip, r0
 3560 28a6 82EA0C0C 		eor	ip, r2, ip
 3561 28aa C7F8F8C0 		str	ip, [r7, #248]
 3562 28ae 4B40     		eors	r3, r3, r1
 3563 28b0 C7F8FC30 		str	r3, [r7, #252]
 3564 28b4 D7E93E23 		ldrd	r2, [r7, #248]
 3565 28b8 07F53161 		add	r1, r7, #2832
 3566 28bc C1E90023 		strd	r2, [r1]
 273:fips202.c     ****         Aku = BCu ^ ((~BCa) & BCe);
 3567              		.loc 1 273 23 discriminator 3
 3568 28c0 07F52B63 		add	r3, r7, #2736
 3569 28c4 D3E90023 		ldrd	r2, [r3]
 3570 28c8 D143     		mvns	r1, r2
 3571 28ca C7F8E015 		str	r1, [r7, #1504]
 3572 28ce DB43     		mvns	r3, r3
 3573 28d0 C7F8E435 		str	r3, [r7, #1508]
 3574              		.loc 1 273 29 discriminator 3
 3575 28d4 07F6A823 		addw	r3, r7, #2728
 3576 28d8 D3E90023 		ldrd	r2, [r3]
 3577 28dc 07F5BC61 		add	r1, r7, #1504
 3578 28e0 D1E90001 		ldrd	r0, [r1]
 3579 28e4 8446     		mov	ip, r0
 3580 28e6 0CEA020C 		and	ip, ip, r2
 3581 28ea C7F8D8C5 		str	ip, [r7, #1496]
 3582 28ee 0B40     		ands	r3, r3, r1
 3583 28f0 C7F8DC35 		str	r3, [r7, #1500]
 3584              		.loc 1 273 13 discriminator 3
 3585 28f4 07F52963 		add	r3, r7, #2704
 3586 28f8 D3E90023 		ldrd	r2, [r3]
 3587 28fc 07F5BB61 		add	r1, r7, #1496
 3588 2900 D1E90001 		ldrd	r0, [r1]
 3589 2904 8446     		mov	ip, r0
 3590 2906 82EA0C0C 		eor	ip, r2, ip
 3591 290a C7F8F0C0 		str	ip, [r7, #240]
 3592 290e 4B40     		eors	r3, r3, r1
 3593 2910 C7F8F430 		str	r3, [r7, #244]
 3594 2914 D7E93C23 		ldrd	r2, [r7, #240]
 3595 2918 07F60831 		addw	r1, r7, #2824
 3596 291c C1E90023 		strd	r2, [r1]
 274:fips202.c     **** 
 275:fips202.c     ****         Ebu ^= Du;
 3597              		.loc 1 275 13 discriminator 3
 3598 2920 07F52463 		add	r3, r7, #2624
 3599 2924 D3E90001 		ldrd	r0, [r3]
 3600 2928 07F66823 		addw	r3, r7, #2664
 3601 292c D3E90023 		ldrd	r2, [r3]
 3602 2930 80EA020C 		eor	ip, r0, r2
 3603 2934 C7F8E8C0 		str	ip, [r7, #232]
 3604 2938 4B40     		eors	r3, r3, r1
 3605 293a C7F8EC30 		str	r3, [r7, #236]
 3606 293e D7E93A23 		ldrd	r2, [r7, #232]
 3607 2942 07F52461 		add	r1, r7, #2624
 3608 2946 C1E90023 		strd	r2, [r1]
 276:fips202.c     ****         BCa = ROL(Ebu, 27);
 3609              		.loc 1 276 13 discriminator 3
 3610 294a 07F68833 		addw	r3, r7, #2952
 3611 294e A3F5A470 		sub	r0, r3, #328
 3612 2952 07F68833 		addw	r3, r7, #2952
 3613 2956 A3F5A271 		sub	r1, r3, #324
 3614 295a 0368     		ldr	r3, [r0]
 3615 295c 5A09     		lsrs	r2, r3, #5
 3616 295e 0B68     		ldr	r3, [r1]
 3617 2960 DB06     		lsls	r3, r3, #27
 3618 2962 1343     		orrs	r3, r3, r2
 3619 2964 C7F8E430 		str	r3, [r7, #228]
 3620 2968 0B68     		ldr	r3, [r1]
 3621 296a 5A09     		lsrs	r2, r3, #5
 3622 296c 0368     		ldr	r3, [r0]
 3623 296e DB06     		lsls	r3, r3, #27
 3624 2970 1343     		orrs	r3, r3, r2
 3625 2972 C7F8E030 		str	r3, [r7, #224]
 3626 2976 D7E93823 		ldrd	r2, [r7, #224]
 3627 297a 07F52B61 		add	r1, r7, #2736
 3628 297e C1E90023 		strd	r2, [r1]
 277:fips202.c     ****         Ega ^= Da;
 3629              		.loc 1 277 13 discriminator 3
 3630 2982 07F63823 		addw	r3, r7, #2616
 3631 2986 D3E90001 		ldrd	r0, [r3]
 3632 298a 07F68823 		addw	r3, r7, #2696
 3633 298e D3E90023 		ldrd	r2, [r3]
 3634 2992 80EA020C 		eor	ip, r0, r2
 3635 2996 C7F8D8C0 		str	ip, [r7, #216]
 3636 299a 4B40     		eors	r3, r3, r1
 3637 299c C7F8DC30 		str	r3, [r7, #220]
 3638 29a0 D7E93623 		ldrd	r2, [r7, #216]
 3639 29a4 07F63821 		addw	r1, r7, #2616
 3640 29a8 C1E90023 		strd	r2, [r1]
 278:fips202.c     ****         BCe = ROL(Ega, 36);
 3641              		.loc 1 278 13 discriminator 3
 3642 29ac 07F68833 		addw	r3, r7, #2952
 3643 29b0 A3F5A670 		sub	r0, r3, #332
 3644 29b4 07F68833 		addw	r3, r7, #2952
 3645 29b8 A3F5A871 		sub	r1, r3, #336
 3646 29bc 0368     		ldr	r3, [r0]
 3647 29be 1A01     		lsls	r2, r3, #4
 3648 29c0 0B68     		ldr	r3, [r1]
 3649 29c2 1B0F     		lsrs	r3, r3, #28
 3650 29c4 1343     		orrs	r3, r3, r2
 3651 29c6 C7F8D030 		str	r3, [r7, #208]
 3652 29ca 0B68     		ldr	r3, [r1]
 3653 29cc 1A01     		lsls	r2, r3, #4
 3654 29ce 0368     		ldr	r3, [r0]
 3655 29d0 1B0F     		lsrs	r3, r3, #28
 3656 29d2 1343     		orrs	r3, r3, r2
 3657 29d4 C7F8D430 		str	r3, [r7, #212]
 3658 29d8 D7E93423 		ldrd	r2, [r7, #208]
 3659 29dc 07F6A821 		addw	r1, r7, #2728
 3660 29e0 C1E90023 		strd	r2, [r1]
 279:fips202.c     ****         Eke ^= De;
 3661              		.loc 1 279 13 discriminator 3
 3662 29e4 07F60823 		addw	r3, r7, #2568
 3663 29e8 D3E90001 		ldrd	r0, [r3]
 3664 29ec 07F52863 		add	r3, r7, #2688
 3665 29f0 D3E90023 		ldrd	r2, [r3]
 3666 29f4 80EA020C 		eor	ip, r0, r2
 3667 29f8 C7F8C8C0 		str	ip, [r7, #200]
 3668 29fc 4B40     		eors	r3, r3, r1
 3669 29fe C7F8CC30 		str	r3, [r7, #204]
 3670 2a02 D7E93223 		ldrd	r2, [r7, #200]
 3671 2a06 07F60821 		addw	r1, r7, #2568
 3672 2a0a C1E90023 		strd	r2, [r1]
 280:fips202.c     ****         BCi = ROL(Eke, 10);
 3673              		.loc 1 280 13 discriminator 3
 3674 2a0e 07F68833 		addw	r3, r7, #2952
 3675 2a12 A3F5C070 		sub	r0, r3, #384
 3676 2a16 07F68833 		addw	r3, r7, #2952
 3677 2a1a A3F5BE71 		sub	r1, r3, #380
 3678 2a1e 0368     		ldr	r3, [r0]
 3679 2a20 9A0D     		lsrs	r2, r3, #22
 3680 2a22 0B68     		ldr	r3, [r1]
 3681 2a24 9B02     		lsls	r3, r3, #10
 3682 2a26 1343     		orrs	r3, r3, r2
 3683 2a28 C7F8C430 		str	r3, [r7, #196]
 3684 2a2c 0B68     		ldr	r3, [r1]
 3685 2a2e 9A0D     		lsrs	r2, r3, #22
 3686 2a30 0368     		ldr	r3, [r0]
 3687 2a32 9B02     		lsls	r3, r3, #10
 3688 2a34 1343     		orrs	r3, r3, r2
 3689 2a36 C7F8C030 		str	r3, [r7, #192]
 3690 2a3a D7E93023 		ldrd	r2, [r7, #192]
 3691 2a3e 07F52A61 		add	r1, r7, #2720
 3692 2a42 C1E90023 		strd	r2, [r1]
 281:fips202.c     ****         Emi ^= Di;
 3693              		.loc 1 281 13 discriminator 3
 3694 2a46 07F6D813 		addw	r3, r7, #2520
 3695 2a4a D3E90001 		ldrd	r0, [r3]
 3696 2a4e 07F67823 		addw	r3, r7, #2680
 3697 2a52 D3E90023 		ldrd	r2, [r3]
 3698 2a56 80EA020C 		eor	ip, r0, r2
 3699 2a5a C7F8B8C0 		str	ip, [r7, #184]
 3700 2a5e 4B40     		eors	r3, r3, r1
 3701 2a60 C7F8BC30 		str	r3, [r7, #188]
 3702 2a64 D7E92E23 		ldrd	r2, [r7, #184]
 3703 2a68 07F6D811 		addw	r1, r7, #2520
 3704 2a6c C1E90023 		strd	r2, [r1]
 282:fips202.c     ****         BCo = ROL(Emi, 15);
 3705              		.loc 1 282 13 discriminator 3
 3706 2a70 07F68833 		addw	r3, r7, #2952
 3707 2a74 A3F5D870 		sub	r0, r3, #432
 3708 2a78 07F68833 		addw	r3, r7, #2952
 3709 2a7c A3F5D671 		sub	r1, r3, #428
 3710 2a80 0368     		ldr	r3, [r0]
 3711 2a82 5A0C     		lsrs	r2, r3, #17
 3712 2a84 0B68     		ldr	r3, [r1]
 3713 2a86 DB03     		lsls	r3, r3, #15
 3714 2a88 1343     		orrs	r3, r3, r2
 3715 2a8a C7F8B430 		str	r3, [r7, #180]
 3716 2a8e 0B68     		ldr	r3, [r1]
 3717 2a90 5A0C     		lsrs	r2, r3, #17
 3718 2a92 0368     		ldr	r3, [r0]
 3719 2a94 DB03     		lsls	r3, r3, #15
 3720 2a96 1343     		orrs	r3, r3, r2
 3721 2a98 C7F8B030 		str	r3, [r7, #176]
 3722 2a9c D7E92C23 		ldrd	r2, [r7, #176]
 3723 2aa0 07F69821 		addw	r1, r7, #2712
 3724 2aa4 C1E90023 		strd	r2, [r1]
 283:fips202.c     ****         Eso ^= Do;
 3725              		.loc 1 283 13 discriminator 3
 3726 2aa8 07F6A813 		addw	r3, r7, #2472
 3727 2aac D3E90001 		ldrd	r0, [r3]
 3728 2ab0 07F52763 		add	r3, r7, #2672
 3729 2ab4 D3E90023 		ldrd	r2, [r3]
 3730 2ab8 80EA020C 		eor	ip, r0, r2
 3731 2abc C7F8A8C0 		str	ip, [r7, #168]
 3732 2ac0 4B40     		eors	r3, r3, r1
 3733 2ac2 C7F8AC30 		str	r3, [r7, #172]
 3734 2ac6 D7E92A23 		ldrd	r2, [r7, #168]
 3735 2aca 07F6A811 		addw	r1, r7, #2472
 3736 2ace C1E90023 		strd	r2, [r1]
 284:fips202.c     ****         BCu = ROL(Eso, 56);
 3737              		.loc 1 284 13 discriminator 3
 3738 2ad2 07F68833 		addw	r3, r7, #2952
 3739 2ad6 A3F5EE70 		sub	r0, r3, #476
 3740 2ada 07F68833 		addw	r3, r7, #2952
 3741 2ade A3F5F071 		sub	r1, r3, #480
 3742 2ae2 0368     		ldr	r3, [r0]
 3743 2ae4 1A06     		lsls	r2, r3, #24
 3744 2ae6 0B68     		ldr	r3, [r1]
 3745 2ae8 1B0A     		lsrs	r3, r3, #8
 3746 2aea 1343     		orrs	r3, r3, r2
 3747 2aec C7F8A030 		str	r3, [r7, #160]
 3748 2af0 0B68     		ldr	r3, [r1]
 3749 2af2 1A06     		lsls	r2, r3, #24
 3750 2af4 0368     		ldr	r3, [r0]
 3751 2af6 1B0A     		lsrs	r3, r3, #8
 3752 2af8 1343     		orrs	r3, r3, r2
 3753 2afa C7F8A430 		str	r3, [r7, #164]
 3754 2afe D7E92823 		ldrd	r2, [r7, #160]
 3755 2b02 07F52961 		add	r1, r7, #2704
 3756 2b06 C1E90023 		strd	r2, [r1]
 285:fips202.c     ****         Ama = BCa ^ ((~BCe) & BCi);
 3757              		.loc 1 285 23 discriminator 3
 3758 2b0a 07F6A823 		addw	r3, r7, #2728
 3759 2b0e D3E90023 		ldrd	r2, [r3]
 3760 2b12 D143     		mvns	r1, r2
 3761 2b14 C7F8D015 		str	r1, [r7, #1488]
 3762 2b18 DB43     		mvns	r3, r3
 3763 2b1a C7F8D435 		str	r3, [r7, #1492]
 3764              		.loc 1 285 29 discriminator 3
 3765 2b1e 07F52A63 		add	r3, r7, #2720
 3766 2b22 D3E90023 		ldrd	r2, [r3]
 3767 2b26 07F5BA61 		add	r1, r7, #1488
 3768 2b2a D1E90001 		ldrd	r0, [r1]
 3769 2b2e 8446     		mov	ip, r0
 3770 2b30 0CEA020C 		and	ip, ip, r2
 3771 2b34 C7F8C8C5 		str	ip, [r7, #1480]
 3772 2b38 0B40     		ands	r3, r3, r1
 3773 2b3a C7F8CC35 		str	r3, [r7, #1484]
 3774              		.loc 1 285 13 discriminator 3
 3775 2b3e 07F52B63 		add	r3, r7, #2736
 3776 2b42 D3E90023 		ldrd	r2, [r3]
 3777 2b46 07F5B961 		add	r1, r7, #1480
 3778 2b4a D1E90001 		ldrd	r0, [r1]
 3779 2b4e 8446     		mov	ip, r0
 3780 2b50 82EA0C0C 		eor	ip, r2, ip
 3781 2b54 C7F898C0 		str	ip, [r7, #152]
 3782 2b58 4B40     		eors	r3, r3, r1
 3783 2b5a C7F89C30 		str	r3, [r7, #156]
 3784 2b5e D7E92623 		ldrd	r2, [r7, #152]
 3785 2b62 07F53061 		add	r1, r7, #2816
 3786 2b66 C1E90023 		strd	r2, [r1]
 286:fips202.c     ****         Ame = BCe ^ ((~BCi) & BCo);
 3787              		.loc 1 286 23 discriminator 3
 3788 2b6a 07F52A63 		add	r3, r7, #2720
 3789 2b6e D3E90023 		ldrd	r2, [r3]
 3790 2b72 D143     		mvns	r1, r2
 3791 2b74 C7F8C015 		str	r1, [r7, #1472]
 3792 2b78 DB43     		mvns	r3, r3
 3793 2b7a C7F8C435 		str	r3, [r7, #1476]
 3794              		.loc 1 286 29 discriminator 3
 3795 2b7e 07F69823 		addw	r3, r7, #2712
 3796 2b82 D3E90023 		ldrd	r2, [r3]
 3797 2b86 07F5B861 		add	r1, r7, #1472
 3798 2b8a D1E90001 		ldrd	r0, [r1]
 3799 2b8e 8446     		mov	ip, r0
 3800 2b90 0CEA020C 		and	ip, ip, r2
 3801 2b94 C7F8B8C5 		str	ip, [r7, #1464]
 3802 2b98 0B40     		ands	r3, r3, r1
 3803 2b9a C7F8BC35 		str	r3, [r7, #1468]
 3804              		.loc 1 286 13 discriminator 3
 3805 2b9e 07F6A823 		addw	r3, r7, #2728
 3806 2ba2 D3E90023 		ldrd	r2, [r3]
 3807 2ba6 07F5B761 		add	r1, r7, #1464
 3808 2baa D1E90001 		ldrd	r0, [r1]
 3809 2bae 8446     		mov	ip, r0
 3810 2bb0 82EA0C0C 		eor	ip, r2, ip
 3811 2bb4 C7F890C0 		str	ip, [r7, #144]
 3812 2bb8 4B40     		eors	r3, r3, r1
 3813 2bba C7F89430 		str	r3, [r7, #148]
 3814 2bbe D7E92423 		ldrd	r2, [r7, #144]
 3815 2bc2 07F6F821 		addw	r1, r7, #2808
 3816 2bc6 C1E90023 		strd	r2, [r1]
 287:fips202.c     ****         Ami = BCi ^ ((~BCo) & BCu);
 3817              		.loc 1 287 23 discriminator 3
 3818 2bca 07F69823 		addw	r3, r7, #2712
 3819 2bce D3E90023 		ldrd	r2, [r3]
 3820 2bd2 D143     		mvns	r1, r2
 3821 2bd4 C7F8B015 		str	r1, [r7, #1456]
 3822 2bd8 DB43     		mvns	r3, r3
 3823 2bda C7F8B435 		str	r3, [r7, #1460]
 3824              		.loc 1 287 29 discriminator 3
 3825 2bde 07F52963 		add	r3, r7, #2704
 3826 2be2 D3E90023 		ldrd	r2, [r3]
 3827 2be6 07F5B661 		add	r1, r7, #1456
 3828 2bea D1E90001 		ldrd	r0, [r1]
 3829 2bee 8446     		mov	ip, r0
 3830 2bf0 0CEA020C 		and	ip, ip, r2
 3831 2bf4 C7F8A8C5 		str	ip, [r7, #1448]
 3832 2bf8 0B40     		ands	r3, r3, r1
 3833 2bfa C7F8AC35 		str	r3, [r7, #1452]
 3834              		.loc 1 287 13 discriminator 3
 3835 2bfe 07F52A63 		add	r3, r7, #2720
 3836 2c02 D3E90023 		ldrd	r2, [r3]
 3837 2c06 07F5B561 		add	r1, r7, #1448
 3838 2c0a D1E90001 		ldrd	r0, [r1]
 3839 2c0e 8446     		mov	ip, r0
 3840 2c10 82EA0C0C 		eor	ip, r2, ip
 3841 2c14 C7F888C0 		str	ip, [r7, #136]
 3842 2c18 4B40     		eors	r3, r3, r1
 3843 2c1a C7F88C30 		str	r3, [r7, #140]
 3844 2c1e D7E92223 		ldrd	r2, [r7, #136]
 3845 2c22 07F52F61 		add	r1, r7, #2800
 3846 2c26 C1E90023 		strd	r2, [r1]
 288:fips202.c     ****         Amo = BCo ^ ((~BCu) & BCa);
 3847              		.loc 1 288 23 discriminator 3
 3848 2c2a 07F52963 		add	r3, r7, #2704
 3849 2c2e D3E90023 		ldrd	r2, [r3]
 3850 2c32 D143     		mvns	r1, r2
 3851 2c34 C7F8A015 		str	r1, [r7, #1440]
 3852 2c38 DB43     		mvns	r3, r3
 3853 2c3a C7F8A435 		str	r3, [r7, #1444]
 3854              		.loc 1 288 29 discriminator 3
 3855 2c3e 07F52B63 		add	r3, r7, #2736
 3856 2c42 D3E90023 		ldrd	r2, [r3]
 3857 2c46 07F5B461 		add	r1, r7, #1440
 3858 2c4a D1E90001 		ldrd	r0, [r1]
 3859 2c4e 8446     		mov	ip, r0
 3860 2c50 0CEA020C 		and	ip, ip, r2
 3861 2c54 C7F898C5 		str	ip, [r7, #1432]
 3862 2c58 0B40     		ands	r3, r3, r1
 3863 2c5a C7F89C35 		str	r3, [r7, #1436]
 3864              		.loc 1 288 13 discriminator 3
 3865 2c5e 07F69823 		addw	r3, r7, #2712
 3866 2c62 D3E90023 		ldrd	r2, [r3]
 3867 2c66 07F5B361 		add	r1, r7, #1432
 3868 2c6a D1E90001 		ldrd	r0, [r1]
 3869 2c6e 8446     		mov	ip, r0
 3870 2c70 82EA0C0C 		eor	ip, r2, ip
 3871 2c74 C7F880C0 		str	ip, [r7, #128]
 3872 2c78 4B40     		eors	r3, r3, r1
 3873 2c7a C7F88430 		str	r3, [r7, #132]
 3874 2c7e D7E92023 		ldrd	r2, [r7, #128]
 3875 2c82 07F6E821 		addw	r1, r7, #2792
 3876 2c86 C1E90023 		strd	r2, [r1]
 289:fips202.c     ****         Amu = BCu ^ ((~BCa) & BCe);
 3877              		.loc 1 289 23 discriminator 3
 3878 2c8a 07F52B63 		add	r3, r7, #2736
 3879 2c8e D3E90023 		ldrd	r2, [r3]
 3880 2c92 D143     		mvns	r1, r2
 3881 2c94 C7F89015 		str	r1, [r7, #1424]
 3882 2c98 DB43     		mvns	r3, r3
 3883 2c9a C7F89435 		str	r3, [r7, #1428]
 3884              		.loc 1 289 29 discriminator 3
 3885 2c9e 07F6A823 		addw	r3, r7, #2728
 3886 2ca2 D3E90023 		ldrd	r2, [r3]
 3887 2ca6 07F5B261 		add	r1, r7, #1424
 3888 2caa D1E90001 		ldrd	r0, [r1]
 3889 2cae 8446     		mov	ip, r0
 3890 2cb0 0CEA020C 		and	ip, ip, r2
 3891 2cb4 C7F888C5 		str	ip, [r7, #1416]
 3892 2cb8 0B40     		ands	r3, r3, r1
 3893 2cba C7F88C35 		str	r3, [r7, #1420]
 3894              		.loc 1 289 13 discriminator 3
 3895 2cbe 07F52963 		add	r3, r7, #2704
 3896 2cc2 D3E90023 		ldrd	r2, [r3]
 3897 2cc6 07F5B161 		add	r1, r7, #1416
 3898 2cca D1E90001 		ldrd	r0, [r1]
 3899 2cce 8446     		mov	ip, r0
 3900 2cd0 82EA0C0C 		eor	ip, r2, ip
 3901 2cd4 C7F878C0 		str	ip, [r7, #120]
 3902 2cd8 4B40     		eors	r3, r3, r1
 3903 2cda FB67     		str	r3, [r7, #124]
 3904 2cdc D7E91E23 		ldrd	r2, [r7, #120]
 3905 2ce0 07F52E61 		add	r1, r7, #2784
 3906 2ce4 C1E90023 		strd	r2, [r1]
 290:fips202.c     **** 
 291:fips202.c     ****         Ebi ^= Di;
 3907              		.loc 1 291 13 discriminator 3
 3908 2ce8 07F52563 		add	r3, r7, #2640
 3909 2cec D3E90001 		ldrd	r0, [r3]
 3910 2cf0 07F67823 		addw	r3, r7, #2680
 3911 2cf4 D3E90023 		ldrd	r2, [r3]
 3912 2cf8 80EA020C 		eor	ip, r0, r2
 3913 2cfc C7F870C0 		str	ip, [r7, #112]
 3914 2d00 4B40     		eors	r3, r3, r1
 3915 2d02 7B67     		str	r3, [r7, #116]
 3916 2d04 D7E91C23 		ldrd	r2, [r7, #112]
 3917 2d08 07F52561 		add	r1, r7, #2640
 3918 2d0c C1E90023 		strd	r2, [r1]
 292:fips202.c     ****         BCa = ROL(Ebi, 62);
 3919              		.loc 1 292 13 discriminator 3
 3920 2d10 07F68833 		addw	r3, r7, #2952
 3921 2d14 A3F59A70 		sub	r0, r3, #308
 3922 2d18 07F68833 		addw	r3, r7, #2952
 3923 2d1c A3F59C71 		sub	r1, r3, #312
 3924 2d20 0368     		ldr	r3, [r0]
 3925 2d22 9A07     		lsls	r2, r3, #30
 3926 2d24 0B68     		ldr	r3, [r1]
 3927 2d26 9B08     		lsrs	r3, r3, #2
 3928 2d28 1343     		orrs	r3, r3, r2
 3929 2d2a BB66     		str	r3, [r7, #104]
 3930 2d2c 0B68     		ldr	r3, [r1]
 3931 2d2e 9A07     		lsls	r2, r3, #30
 3932 2d30 0368     		ldr	r3, [r0]
 3933 2d32 9B08     		lsrs	r3, r3, #2
 3934 2d34 1343     		orrs	r3, r3, r2
 3935 2d36 FB66     		str	r3, [r7, #108]
 3936 2d38 D7E91A23 		ldrd	r2, [r7, #104]
 3937 2d3c 07F52B61 		add	r1, r7, #2736
 3938 2d40 C1E90023 		strd	r2, [r1]
 293:fips202.c     ****         Ego ^= Do;
 3939              		.loc 1 293 13 discriminator 3
 3940 2d44 07F52263 		add	r3, r7, #2592
 3941 2d48 D3E90001 		ldrd	r0, [r3]
 3942 2d4c 07F52763 		add	r3, r7, #2672
 3943 2d50 D3E90023 		ldrd	r2, [r3]
 3944 2d54 80EA020C 		eor	ip, r0, r2
 3945 2d58 C7F860C0 		str	ip, [r7, #96]
 3946 2d5c 4B40     		eors	r3, r3, r1
 3947 2d5e 7B66     		str	r3, [r7, #100]
 3948 2d60 D7E91823 		ldrd	r2, [r7, #96]
 3949 2d64 07F52261 		add	r1, r7, #2592
 3950 2d68 C1E90023 		strd	r2, [r1]
 294:fips202.c     ****         BCe = ROL(Ego, 55);
 3951              		.loc 1 294 13 discriminator 3
 3952 2d6c 07F68833 		addw	r3, r7, #2952
 3953 2d70 A3F5B270 		sub	r0, r3, #356
 3954 2d74 07F68833 		addw	r3, r7, #2952
 3955 2d78 A3F5B471 		sub	r1, r3, #360
 3956 2d7c 0368     		ldr	r3, [r0]
 3957 2d7e DA05     		lsls	r2, r3, #23
 3958 2d80 0B68     		ldr	r3, [r1]
 3959 2d82 5B0A     		lsrs	r3, r3, #9
 3960 2d84 1343     		orrs	r3, r3, r2
 3961 2d86 BB65     		str	r3, [r7, #88]
 3962 2d88 0B68     		ldr	r3, [r1]
 3963 2d8a DA05     		lsls	r2, r3, #23
 3964 2d8c 0368     		ldr	r3, [r0]
 3965 2d8e 5B0A     		lsrs	r3, r3, #9
 3966 2d90 1343     		orrs	r3, r3, r2
 3967 2d92 FB65     		str	r3, [r7, #92]
 3968 2d94 D7E91623 		ldrd	r2, [r7, #88]
 3969 2d98 07F6A821 		addw	r1, r7, #2728
 3970 2d9c C1E90023 		strd	r2, [r1]
 295:fips202.c     ****         Eku ^= Du;
 3971              		.loc 1 295 13 discriminator 3
 3972 2da0 07F51F63 		add	r3, r7, #2544
 3973 2da4 D3E90001 		ldrd	r0, [r3]
 3974 2da8 07F66823 		addw	r3, r7, #2664
 3975 2dac D3E90023 		ldrd	r2, [r3]
 3976 2db0 80EA020C 		eor	ip, r0, r2
 3977 2db4 C7F850C0 		str	ip, [r7, #80]
 3978 2db8 4B40     		eors	r3, r3, r1
 3979 2dba 7B65     		str	r3, [r7, #84]
 3980 2dbc D7E91423 		ldrd	r2, [r7, #80]
 3981 2dc0 07F51F61 		add	r1, r7, #2544
 3982 2dc4 C1E90023 		strd	r2, [r1]
 296:fips202.c     ****         BCi = ROL(Eku, 39);
 3983              		.loc 1 296 13 discriminator 3
 3984 2dc8 07F68833 		addw	r3, r7, #2952
 3985 2dcc A3F5CA70 		sub	r0, r3, #404
 3986 2dd0 07F68833 		addw	r3, r7, #2952
 3987 2dd4 A3F5CC71 		sub	r1, r3, #408
 3988 2dd8 0368     		ldr	r3, [r0]
 3989 2dda DA01     		lsls	r2, r3, #7
 3990 2ddc 0B68     		ldr	r3, [r1]
 3991 2dde 5B0E     		lsrs	r3, r3, #25
 3992 2de0 1343     		orrs	r3, r3, r2
 3993 2de2 BB64     		str	r3, [r7, #72]
 3994 2de4 0B68     		ldr	r3, [r1]
 3995 2de6 DA01     		lsls	r2, r3, #7
 3996 2de8 0368     		ldr	r3, [r0]
 3997 2dea 5B0E     		lsrs	r3, r3, #25
 3998 2dec 1343     		orrs	r3, r3, r2
 3999 2dee FB64     		str	r3, [r7, #76]
 4000 2df0 D7E91223 		ldrd	r2, [r7, #72]
 4001 2df4 07F52A61 		add	r1, r7, #2720
 4002 2df8 C1E90023 		strd	r2, [r1]
 297:fips202.c     ****         Ema ^= Da;
 4003              		.loc 1 297 13 discriminator 3
 4004 2dfc 07F6E813 		addw	r3, r7, #2536
 4005 2e00 D3E90001 		ldrd	r0, [r3]
 4006 2e04 07F68823 		addw	r3, r7, #2696
 4007 2e08 D3E90023 		ldrd	r2, [r3]
 4008 2e0c 80EA020C 		eor	ip, r0, r2
 4009 2e10 C7F840C0 		str	ip, [r7, #64]
 4010 2e14 4B40     		eors	r3, r3, r1
 4011 2e16 7B64     		str	r3, [r7, #68]
 4012 2e18 D7E91023 		ldrd	r2, [r7, #64]
 4013 2e1c 07F6E811 		addw	r1, r7, #2536
 4014 2e20 C1E90023 		strd	r2, [r1]
 298:fips202.c     ****         BCo = ROL(Ema, 41);
 4015              		.loc 1 298 13 discriminator 3
 4016 2e24 07F68833 		addw	r3, r7, #2952
 4017 2e28 A3F5CE70 		sub	r0, r3, #412
 4018 2e2c 07F68833 		addw	r3, r7, #2952
 4019 2e30 A3F5D071 		sub	r1, r3, #416
 4020 2e34 0368     		ldr	r3, [r0]
 4021 2e36 5A02     		lsls	r2, r3, #9
 4022 2e38 0B68     		ldr	r3, [r1]
 4023 2e3a DB0D     		lsrs	r3, r3, #23
 4024 2e3c 1343     		orrs	r3, r3, r2
 4025 2e3e BB63     		str	r3, [r7, #56]
 4026 2e40 0B68     		ldr	r3, [r1]
 4027 2e42 5A02     		lsls	r2, r3, #9
 4028 2e44 0368     		ldr	r3, [r0]
 4029 2e46 DB0D     		lsrs	r3, r3, #23
 4030 2e48 1343     		orrs	r3, r3, r2
 4031 2e4a FB63     		str	r3, [r7, #60]
 4032 2e4c D7E90E23 		ldrd	r2, [r7, #56]
 4033 2e50 07F69821 		addw	r1, r7, #2712
 4034 2e54 C1E90023 		strd	r2, [r1]
 299:fips202.c     ****         Ese ^= De;
 4035              		.loc 1 299 13 discriminator 3
 4036 2e58 07F6B813 		addw	r3, r7, #2488
 4037 2e5c D3E90001 		ldrd	r0, [r3]
 4038 2e60 07F52863 		add	r3, r7, #2688
 4039 2e64 D3E90023 		ldrd	r2, [r3]
 4040 2e68 80EA020C 		eor	ip, r0, r2
 4041 2e6c C7F830C0 		str	ip, [r7, #48]
 4042 2e70 4B40     		eors	r3, r3, r1
 4043 2e72 7B63     		str	r3, [r7, #52]
 4044 2e74 D7E90C23 		ldrd	r2, [r7, #48]
 4045 2e78 07F6B811 		addw	r1, r7, #2488
 4046 2e7c C1E90023 		strd	r2, [r1]
 300:fips202.c     ****         BCu = ROL(Ese, 2);
 4047              		.loc 1 300 13 discriminator 3
 4048 2e80 07F68833 		addw	r3, r7, #2952
 4049 2e84 A3F5E870 		sub	r0, r3, #464
 4050 2e88 07F68833 		addw	r3, r7, #2952
 4051 2e8c A3F5E671 		sub	r1, r3, #460
 4052 2e90 0368     		ldr	r3, [r0]
 4053 2e92 9A0F     		lsrs	r2, r3, #30
 4054 2e94 0B68     		ldr	r3, [r1]
 4055 2e96 9B00     		lsls	r3, r3, #2
 4056 2e98 1343     		orrs	r3, r3, r2
 4057 2e9a FB62     		str	r3, [r7, #44]
 4058 2e9c 0B68     		ldr	r3, [r1]
 4059 2e9e 9A0F     		lsrs	r2, r3, #30
 4060 2ea0 0368     		ldr	r3, [r0]
 4061 2ea2 9B00     		lsls	r3, r3, #2
 4062 2ea4 1343     		orrs	r3, r3, r2
 4063 2ea6 BB62     		str	r3, [r7, #40]
 4064 2ea8 D7E90A23 		ldrd	r2, [r7, #40]
 4065 2eac 07F52961 		add	r1, r7, #2704
 4066 2eb0 C1E90023 		strd	r2, [r1]
 301:fips202.c     ****         Asa = BCa ^ ((~BCe) & BCi);
 4067              		.loc 1 301 23 discriminator 3
 4068 2eb4 07F6A823 		addw	r3, r7, #2728
 4069 2eb8 D3E90023 		ldrd	r2, [r3]
 4070 2ebc D143     		mvns	r1, r2
 4071 2ebe C7F88015 		str	r1, [r7, #1408]
 4072 2ec2 DB43     		mvns	r3, r3
 4073 2ec4 C7F88435 		str	r3, [r7, #1412]
 4074              		.loc 1 301 29 discriminator 3
 4075 2ec8 07F52A63 		add	r3, r7, #2720
 4076 2ecc D3E90023 		ldrd	r2, [r3]
 4077 2ed0 07F5B061 		add	r1, r7, #1408
 4078 2ed4 D1E90001 		ldrd	r0, [r1]
 4079 2ed8 8446     		mov	ip, r0
 4080 2eda 0CEA020C 		and	ip, ip, r2
 4081 2ede C7F878C5 		str	ip, [r7, #1400]
 4082 2ee2 0B40     		ands	r3, r3, r1
 4083 2ee4 C7F87C35 		str	r3, [r7, #1404]
 4084              		.loc 1 301 13 discriminator 3
 4085 2ee8 07F52B63 		add	r3, r7, #2736
 4086 2eec D3E90023 		ldrd	r2, [r3]
 4087 2ef0 07F5AF61 		add	r1, r7, #1400
 4088 2ef4 D1E90001 		ldrd	r0, [r1]
 4089 2ef8 8446     		mov	ip, r0
 4090 2efa 82EA0C0C 		eor	ip, r2, ip
 4091 2efe C7F820C0 		str	ip, [r7, #32]
 4092 2f02 4B40     		eors	r3, r3, r1
 4093 2f04 7B62     		str	r3, [r7, #36]
 4094 2f06 D7E90823 		ldrd	r2, [r7, #32]
 4095 2f0a 07F6D821 		addw	r1, r7, #2776
 4096 2f0e C1E90023 		strd	r2, [r1]
 302:fips202.c     ****         Ase = BCe ^ ((~BCi) & BCo);
 4097              		.loc 1 302 23 discriminator 3
 4098 2f12 07F52A63 		add	r3, r7, #2720
 4099 2f16 D3E90023 		ldrd	r2, [r3]
 4100 2f1a D143     		mvns	r1, r2
 4101 2f1c C7F87015 		str	r1, [r7, #1392]
 4102 2f20 DB43     		mvns	r3, r3
 4103 2f22 C7F87435 		str	r3, [r7, #1396]
 4104              		.loc 1 302 29 discriminator 3
 4105 2f26 07F69823 		addw	r3, r7, #2712
 4106 2f2a D3E90023 		ldrd	r2, [r3]
 4107 2f2e 07F5AE61 		add	r1, r7, #1392
 4108 2f32 D1E90001 		ldrd	r0, [r1]
 4109 2f36 8446     		mov	ip, r0
 4110 2f38 0CEA020C 		and	ip, ip, r2
 4111 2f3c C7F868C5 		str	ip, [r7, #1384]
 4112 2f40 0B40     		ands	r3, r3, r1
 4113 2f42 C7F86C35 		str	r3, [r7, #1388]
 4114              		.loc 1 302 13 discriminator 3
 4115 2f46 07F6A823 		addw	r3, r7, #2728
 4116 2f4a D3E90023 		ldrd	r2, [r3]
 4117 2f4e 07F5AD61 		add	r1, r7, #1384
 4118 2f52 D1E90001 		ldrd	r0, [r1]
 4119 2f56 8446     		mov	ip, r0
 4120 2f58 82EA0C0C 		eor	ip, r2, ip
 4121 2f5c C7F818C0 		str	ip, [r7, #24]
 4122 2f60 4B40     		eors	r3, r3, r1
 4123 2f62 FB61     		str	r3, [r7, #28]
 4124 2f64 D7E90623 		ldrd	r2, [r7, #24]
 4125 2f68 07F52D61 		add	r1, r7, #2768
 4126 2f6c C1E90023 		strd	r2, [r1]
 303:fips202.c     ****         Asi = BCi ^ ((~BCo) & BCu);
 4127              		.loc 1 303 23 discriminator 3
 4128 2f70 07F69823 		addw	r3, r7, #2712
 4129 2f74 D3E90023 		ldrd	r2, [r3]
 4130 2f78 D143     		mvns	r1, r2
 4131 2f7a C7F86015 		str	r1, [r7, #1376]
 4132 2f7e DB43     		mvns	r3, r3
 4133 2f80 C7F86435 		str	r3, [r7, #1380]
 4134              		.loc 1 303 29 discriminator 3
 4135 2f84 07F52963 		add	r3, r7, #2704
 4136 2f88 D3E90023 		ldrd	r2, [r3]
 4137 2f8c 07F5AC61 		add	r1, r7, #1376
 4138 2f90 D1E90001 		ldrd	r0, [r1]
 4139 2f94 8446     		mov	ip, r0
 4140 2f96 0CEA020C 		and	ip, ip, r2
 4141 2f9a C7F858C5 		str	ip, [r7, #1368]
 4142 2f9e 0B40     		ands	r3, r3, r1
 4143 2fa0 C7F85C35 		str	r3, [r7, #1372]
 4144              		.loc 1 303 13 discriminator 3
 4145 2fa4 07F52A63 		add	r3, r7, #2720
 4146 2fa8 D3E90023 		ldrd	r2, [r3]
 4147 2fac 07F5AB61 		add	r1, r7, #1368
 4148 2fb0 D1E90001 		ldrd	r0, [r1]
 4149 2fb4 8446     		mov	ip, r0
 4150 2fb6 82EA0C0C 		eor	ip, r2, ip
 4151 2fba C7F810C0 		str	ip, [r7, #16]
 4152 2fbe 4B40     		eors	r3, r3, r1
 4153 2fc0 7B61     		str	r3, [r7, #20]
 4154 2fc2 D7E90423 		ldrd	r2, [r7, #16]
 4155 2fc6 07F6C821 		addw	r1, r7, #2760
 4156 2fca C1E90023 		strd	r2, [r1]
 304:fips202.c     ****         Aso = BCo ^ ((~BCu) & BCa);
 4157              		.loc 1 304 23 discriminator 3
 4158 2fce 07F52963 		add	r3, r7, #2704
 4159 2fd2 D3E90023 		ldrd	r2, [r3]
 4160 2fd6 D143     		mvns	r1, r2
 4161 2fd8 C7F85015 		str	r1, [r7, #1360]
 4162 2fdc DB43     		mvns	r3, r3
 4163 2fde C7F85435 		str	r3, [r7, #1364]
 4164              		.loc 1 304 29 discriminator 3
 4165 2fe2 07F52B63 		add	r3, r7, #2736
 4166 2fe6 D3E90023 		ldrd	r2, [r3]
 4167 2fea 07F5AA61 		add	r1, r7, #1360
 4168 2fee D1E90001 		ldrd	r0, [r1]
 4169 2ff2 8446     		mov	ip, r0
 4170 2ff4 0CEA020A 		and	r10, ip, r2
 4171 2ff8 01EA030B 		and	fp, r1, r3
 4172              		.loc 1 304 13 discriminator 3
 4173 2ffc 07F69823 		addw	r3, r7, #2712
 4174 3000 D3E90023 		ldrd	r2, [r3]
 4175 3004 82EA0A01 		eor	r1, r2, r10
 4176 3008 B960     		str	r1, [r7, #8]
 4177 300a 83EA0B03 		eor	r3, r3, fp
 4178 300e FB60     		str	r3, [r7, #12]
 4179 3010 D7E90223 		ldrd	r2, [r7, #8]
 4180 3014 07F52C61 		add	r1, r7, #2752
 4181 3018 C1E90023 		strd	r2, [r1]
 305:fips202.c     ****         Asu = BCu ^ ((~BCa) & BCe);
 4182              		.loc 1 305 23 discriminator 3
 4183 301c 07F52B63 		add	r3, r7, #2736
 4184 3020 D3E90023 		ldrd	r2, [r3]
 4185 3024 6FEA0208 		mvn	r8, r2
 4186 3028 6FEA0309 		mvn	r9, r3
 4187              		.loc 1 305 29 discriminator 3
 4188 302c 07F6A823 		addw	r3, r7, #2728
 4189 3030 D3E90023 		ldrd	r2, [r3]
 4190 3034 08EA0204 		and	r4, r8, r2
 4191 3038 09EA0305 		and	r5, r9, r3
 4192              		.loc 1 305 13 discriminator 3
 4193 303c 07F52963 		add	r3, r7, #2704
 4194 3040 D3E90023 		ldrd	r2, [r3]
 4195 3044 82EA0401 		eor	r1, r2, r4
 4196 3048 3960     		str	r1, [r7]
 4197 304a 6B40     		eors	r3, r3, r5
 4198 304c 7B60     		str	r3, [r7, #4]
 4199 304e D7E90023 		ldrd	r2, [r7]
 4200 3052 07F6B821 		addw	r1, r7, #2744
 4201 3056 C1E90023 		strd	r2, [r1]
 116:fips202.c     ****         //    prepareTheta
 4202              		.loc 1 116 44 discriminator 3
 4203 305a D7F8843B 		ldr	r3, [r7, #2948]
 4204 305e 0233     		adds	r3, r3, #2
 4205 3060 C7F8843B 		str	r3, [r7, #2948]
 4206              	.L9:
 116:fips202.c     ****         //    prepareTheta
 4207              		.loc 1 116 5 discriminator 1
 4208 3064 D7F8843B 		ldr	r3, [r7, #2948]
 4209 3068 172B     		cmp	r3, #23
 4210 306a 7DF7EBA8 		ble	.L10
 306:fips202.c     ****     }
 307:fips202.c     **** 
 308:fips202.c     ****     // copyToState(state, A)
 309:fips202.c     ****     state[0] = Aba;
 4211              		.loc 1 309 14
 4212 306e 07F68833 		addw	r3, r7, #2952
 4213 3072 A3F5F673 		sub	r3, r3, #492
 4214 3076 1968     		ldr	r1, [r3]
 4215 3078 07F67833 		addw	r3, r7, #2936
 4216 307c D3E90023 		ldrd	r2, [r3]
 4217 3080 C1E90023 		strd	r2, [r1]
 310:fips202.c     ****     state[1] = Abe;
 4218              		.loc 1 310 10
 4219 3084 07F68833 		addw	r3, r7, #2952
 4220 3088 A3F5F673 		sub	r3, r3, #492
 4221 308c 1B68     		ldr	r3, [r3]
 4222 308e 03F10801 		add	r1, r3, #8
 4223              		.loc 1 310 14
 4224 3092 07F53763 		add	r3, r7, #2928
 4225 3096 D3E90023 		ldrd	r2, [r3]
 4226 309a C1E90023 		strd	r2, [r1]
 311:fips202.c     ****     state[2] = Abi;
 4227              		.loc 1 311 10
 4228 309e 07F68833 		addw	r3, r7, #2952
 4229 30a2 A3F5F673 		sub	r3, r3, #492
 4230 30a6 1B68     		ldr	r3, [r3]
 4231 30a8 03F11001 		add	r1, r3, #16
 4232              		.loc 1 311 14
 4233 30ac 07F66833 		addw	r3, r7, #2920
 4234 30b0 D3E90023 		ldrd	r2, [r3]
 4235 30b4 C1E90023 		strd	r2, [r1]
 312:fips202.c     ****     state[3] = Abo;
 4236              		.loc 1 312 10
 4237 30b8 07F68833 		addw	r3, r7, #2952
 4238 30bc A3F5F673 		sub	r3, r3, #492
 4239 30c0 1B68     		ldr	r3, [r3]
 4240 30c2 03F11801 		add	r1, r3, #24
 4241              		.loc 1 312 14
 4242 30c6 07F53663 		add	r3, r7, #2912
 4243 30ca D3E90023 		ldrd	r2, [r3]
 4244 30ce C1E90023 		strd	r2, [r1]
 313:fips202.c     ****     state[4] = Abu;
 4245              		.loc 1 313 10
 4246 30d2 07F68833 		addw	r3, r7, #2952
 4247 30d6 A3F5F673 		sub	r3, r3, #492
 4248 30da 1B68     		ldr	r3, [r3]
 4249 30dc 03F12001 		add	r1, r3, #32
 4250              		.loc 1 313 14
 4251 30e0 07F65833 		addw	r3, r7, #2904
 4252 30e4 D3E90023 		ldrd	r2, [r3]
 4253 30e8 C1E90023 		strd	r2, [r1]
 314:fips202.c     ****     state[5] = Aga;
 4254              		.loc 1 314 10
 4255 30ec 07F68833 		addw	r3, r7, #2952
 4256 30f0 A3F5F673 		sub	r3, r3, #492
 4257 30f4 1B68     		ldr	r3, [r3]
 4258 30f6 03F12801 		add	r1, r3, #40
 4259              		.loc 1 314 14
 4260 30fa 07F53563 		add	r3, r7, #2896
 4261 30fe D3E90023 		ldrd	r2, [r3]
 4262 3102 C1E90023 		strd	r2, [r1]
 315:fips202.c     ****     state[6] = Age;
 4263              		.loc 1 315 10
 4264 3106 07F68833 		addw	r3, r7, #2952
 4265 310a A3F5F673 		sub	r3, r3, #492
 4266 310e 1B68     		ldr	r3, [r3]
 4267 3110 03F13001 		add	r1, r3, #48
 4268              		.loc 1 315 14
 4269 3114 07F64833 		addw	r3, r7, #2888
 4270 3118 D3E90023 		ldrd	r2, [r3]
 4271 311c C1E90023 		strd	r2, [r1]
 316:fips202.c     ****     state[7] = Agi;
 4272              		.loc 1 316 10
 4273 3120 07F68833 		addw	r3, r7, #2952
 4274 3124 A3F5F673 		sub	r3, r3, #492
 4275 3128 1B68     		ldr	r3, [r3]
 4276 312a 03F13801 		add	r1, r3, #56
 4277              		.loc 1 316 14
 4278 312e 07F53463 		add	r3, r7, #2880
 4279 3132 D3E90023 		ldrd	r2, [r3]
 4280 3136 C1E90023 		strd	r2, [r1]
 317:fips202.c     ****     state[8] = Ago;
 4281              		.loc 1 317 10
 4282 313a 07F68833 		addw	r3, r7, #2952
 4283 313e A3F5F673 		sub	r3, r3, #492
 4284 3142 1B68     		ldr	r3, [r3]
 4285 3144 03F14001 		add	r1, r3, #64
 4286              		.loc 1 317 14
 4287 3148 07F63833 		addw	r3, r7, #2872
 4288 314c D3E90023 		ldrd	r2, [r3]
 4289 3150 C1E90023 		strd	r2, [r1]
 318:fips202.c     ****     state[9] = Agu;
 4290              		.loc 1 318 10
 4291 3154 07F68833 		addw	r3, r7, #2952
 4292 3158 A3F5F673 		sub	r3, r3, #492
 4293 315c 1B68     		ldr	r3, [r3]
 4294 315e 03F14801 		add	r1, r3, #72
 4295              		.loc 1 318 14
 4296 3162 07F53363 		add	r3, r7, #2864
 4297 3166 D3E90023 		ldrd	r2, [r3]
 4298 316a C1E90023 		strd	r2, [r1]
 319:fips202.c     ****     state[10] = Aka;
 4299              		.loc 1 319 10
 4300 316e 07F68833 		addw	r3, r7, #2952
 4301 3172 A3F5F673 		sub	r3, r3, #492
 4302 3176 1B68     		ldr	r3, [r3]
 4303 3178 03F15001 		add	r1, r3, #80
 4304              		.loc 1 319 15
 4305 317c 07F62833 		addw	r3, r7, #2856
 4306 3180 D3E90023 		ldrd	r2, [r3]
 4307 3184 C1E90023 		strd	r2, [r1]
 320:fips202.c     ****     state[11] = Ake;
 4308              		.loc 1 320 10
 4309 3188 07F68833 		addw	r3, r7, #2952
 4310 318c A3F5F673 		sub	r3, r3, #492
 4311 3190 1B68     		ldr	r3, [r3]
 4312 3192 03F15801 		add	r1, r3, #88
 4313              		.loc 1 320 15
 4314 3196 07F53263 		add	r3, r7, #2848
 4315 319a D3E90023 		ldrd	r2, [r3]
 4316 319e C1E90023 		strd	r2, [r1]
 321:fips202.c     ****     state[12] = Aki;
 4317              		.loc 1 321 10
 4318 31a2 07F68833 		addw	r3, r7, #2952
 4319 31a6 A3F5F673 		sub	r3, r3, #492
 4320 31aa 1B68     		ldr	r3, [r3]
 4321 31ac 03F16001 		add	r1, r3, #96
 4322              		.loc 1 321 15
 4323 31b0 07F61833 		addw	r3, r7, #2840
 4324 31b4 D3E90023 		ldrd	r2, [r3]
 4325 31b8 C1E90023 		strd	r2, [r1]
 322:fips202.c     ****     state[13] = Ako;
 4326              		.loc 1 322 10
 4327 31bc 07F68833 		addw	r3, r7, #2952
 4328 31c0 A3F5F673 		sub	r3, r3, #492
 4329 31c4 1B68     		ldr	r3, [r3]
 4330 31c6 03F16801 		add	r1, r3, #104
 4331              		.loc 1 322 15
 4332 31ca 07F53163 		add	r3, r7, #2832
 4333 31ce D3E90023 		ldrd	r2, [r3]
 4334 31d2 C1E90023 		strd	r2, [r1]
 323:fips202.c     ****     state[14] = Aku;
 4335              		.loc 1 323 10
 4336 31d6 07F68833 		addw	r3, r7, #2952
 4337 31da A3F5F673 		sub	r3, r3, #492
 4338 31de 1B68     		ldr	r3, [r3]
 4339 31e0 03F17001 		add	r1, r3, #112
 4340              		.loc 1 323 15
 4341 31e4 07F60833 		addw	r3, r7, #2824
 4342 31e8 D3E90023 		ldrd	r2, [r3]
 4343 31ec C1E90023 		strd	r2, [r1]
 324:fips202.c     ****     state[15] = Ama;
 4344              		.loc 1 324 10
 4345 31f0 07F68833 		addw	r3, r7, #2952
 4346 31f4 A3F5F673 		sub	r3, r3, #492
 4347 31f8 1B68     		ldr	r3, [r3]
 4348 31fa 03F17801 		add	r1, r3, #120
 4349              		.loc 1 324 15
 4350 31fe 07F53063 		add	r3, r7, #2816
 4351 3202 D3E90023 		ldrd	r2, [r3]
 4352 3206 C1E90023 		strd	r2, [r1]
 325:fips202.c     ****     state[16] = Ame;
 4353              		.loc 1 325 10
 4354 320a 07F68833 		addw	r3, r7, #2952
 4355 320e A3F5F673 		sub	r3, r3, #492
 4356 3212 1B68     		ldr	r3, [r3]
 4357 3214 03F18001 		add	r1, r3, #128
 4358              		.loc 1 325 15
 4359 3218 07F6F823 		addw	r3, r7, #2808
 4360 321c D3E90023 		ldrd	r2, [r3]
 4361 3220 C1E90023 		strd	r2, [r1]
 326:fips202.c     ****     state[17] = Ami;
 4362              		.loc 1 326 10
 4363 3224 07F68833 		addw	r3, r7, #2952
 4364 3228 A3F5F673 		sub	r3, r3, #492
 4365 322c 1B68     		ldr	r3, [r3]
 4366 322e 03F18801 		add	r1, r3, #136
 4367              		.loc 1 326 15
 4368 3232 07F52F63 		add	r3, r7, #2800
 4369 3236 D3E90023 		ldrd	r2, [r3]
 4370 323a C1E90023 		strd	r2, [r1]
 327:fips202.c     ****     state[18] = Amo;
 4371              		.loc 1 327 10
 4372 323e 07F68833 		addw	r3, r7, #2952
 4373 3242 A3F5F673 		sub	r3, r3, #492
 4374 3246 1B68     		ldr	r3, [r3]
 4375 3248 03F19001 		add	r1, r3, #144
 4376              		.loc 1 327 15
 4377 324c 07F6E823 		addw	r3, r7, #2792
 4378 3250 D3E90023 		ldrd	r2, [r3]
 4379 3254 C1E90023 		strd	r2, [r1]
 328:fips202.c     ****     state[19] = Amu;
 4380              		.loc 1 328 10
 4381 3258 07F68833 		addw	r3, r7, #2952
 4382 325c A3F5F673 		sub	r3, r3, #492
 4383 3260 1B68     		ldr	r3, [r3]
 4384 3262 03F19801 		add	r1, r3, #152
 4385              		.loc 1 328 15
 4386 3266 07F52E63 		add	r3, r7, #2784
 4387 326a D3E90023 		ldrd	r2, [r3]
 4388 326e C1E90023 		strd	r2, [r1]
 329:fips202.c     ****     state[20] = Asa;
 4389              		.loc 1 329 10
 4390 3272 07F68833 		addw	r3, r7, #2952
 4391 3276 A3F5F673 		sub	r3, r3, #492
 4392 327a 1B68     		ldr	r3, [r3]
 4393 327c 03F1A001 		add	r1, r3, #160
 4394              		.loc 1 329 15
 4395 3280 07F6D823 		addw	r3, r7, #2776
 4396 3284 D3E90023 		ldrd	r2, [r3]
 4397 3288 C1E90023 		strd	r2, [r1]
 330:fips202.c     ****     state[21] = Ase;
 4398              		.loc 1 330 10
 4399 328c 07F68833 		addw	r3, r7, #2952
 4400 3290 A3F5F673 		sub	r3, r3, #492
 4401 3294 1B68     		ldr	r3, [r3]
 4402 3296 03F1A801 		add	r1, r3, #168
 4403              		.loc 1 330 15
 4404 329a 07F52D63 		add	r3, r7, #2768
 4405 329e D3E90023 		ldrd	r2, [r3]
 4406 32a2 C1E90023 		strd	r2, [r1]
 331:fips202.c     ****     state[22] = Asi;
 4407              		.loc 1 331 10
 4408 32a6 07F68833 		addw	r3, r7, #2952
 4409 32aa A3F5F673 		sub	r3, r3, #492
 4410 32ae 1B68     		ldr	r3, [r3]
 4411 32b0 03F1B001 		add	r1, r3, #176
 4412              		.loc 1 331 15
 4413 32b4 07F6C823 		addw	r3, r7, #2760
 4414 32b8 D3E90023 		ldrd	r2, [r3]
 4415 32bc C1E90023 		strd	r2, [r1]
 332:fips202.c     ****     state[23] = Aso;
 4416              		.loc 1 332 10
 4417 32c0 07F68833 		addw	r3, r7, #2952
 4418 32c4 A3F5F673 		sub	r3, r3, #492
 4419 32c8 1B68     		ldr	r3, [r3]
 4420 32ca 03F1B801 		add	r1, r3, #184
 4421              		.loc 1 332 15
 4422 32ce 07F52C63 		add	r3, r7, #2752
 4423 32d2 D3E90023 		ldrd	r2, [r3]
 4424 32d6 C1E90023 		strd	r2, [r1]
 333:fips202.c     ****     state[24] = Asu;
 4425              		.loc 1 333 10
 4426 32da 07F68833 		addw	r3, r7, #2952
 4427 32de A3F5F673 		sub	r3, r3, #492
 4428 32e2 1B68     		ldr	r3, [r3]
 4429 32e4 03F1C001 		add	r1, r3, #192
 4430              		.loc 1 333 15
 4431 32e8 07F6B823 		addw	r3, r7, #2744
 4432 32ec D3E90023 		ldrd	r2, [r3]
 4433 32f0 C1E90023 		strd	r2, [r1]
 334:fips202.c     **** }
 4434              		.loc 1 334 1
 4435 32f4 00BF     		nop
 4436 32f6 07F68C37 		addw	r7, r7, #2956
 4437              	.LCFI15:
 4438              		.cfi_def_cfa_offset 28
 4439 32fa BD46     		mov	sp, r7
 4440              	.LCFI16:
 4441              		.cfi_def_cfa_register 13
 4442              		@ sp needed
 4443 32fc BDE8B00F 		pop	{r4, r5, r7, r8, r9, r10, fp}
 4444              	.LCFI17:
 4445              		.cfi_restore 11
 4446              		.cfi_restore 10
 4447              		.cfi_restore 9
 4448              		.cfi_restore 8
 4449              		.cfi_restore 7
 4450              		.cfi_restore 5
 4451              		.cfi_restore 4
 4452              		.cfi_def_cfa_offset 0
 4453 3300 7047     		bx	lr
 4454              		.cfi_endproc
 4455              	.LFE2:
 4457 3302 00BF     		.section	.text.keccak_absorb,"ax",%progbits
 4458              		.align	1
 4459              		.syntax unified
 4460              		.thumb
 4461              		.thumb_func
 4462              		.fpu softvfp
 4464              	keccak_absorb:
 4465              	.LFB3:
 335:fips202.c     **** 
 336:fips202.c     **** /*************************************************
 337:fips202.c     ****  * Name:        keccak_absorb
 338:fips202.c     ****  *
 339:fips202.c     ****  * Description: Absorb step of Keccak;
 340:fips202.c     ****  *              non-incremental, starts by zeroeing the state.
 341:fips202.c     ****  *
 342:fips202.c     ****  * Arguments:   - uint64_t *s: pointer to (uninitialized) output Keccak state
 343:fips202.c     ****  *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 344:fips202.c     ****  *              - const uint8_t *m: pointer to input to be absorbed into s
 345:fips202.c     ****  *              - size_t mlen: length of input in bytes
 346:fips202.c     ****  *              - uint8_t p: domain-separation byte for different
 347:fips202.c     ****  *                                 Keccak-derived functions
 348:fips202.c     ****  **************************************************/
 349:fips202.c     **** static void keccak_absorb(uint64_t *s, uint32_t r, const uint8_t *m,
 350:fips202.c     ****                           size_t mlen, uint8_t p) {
 4466              		.loc 1 350 51
 4467              		.cfi_startproc
 4468              		@ args = 4, pretend = 0, frame = 224
 4469              		@ frame_needed = 1, uses_anonymous_args = 0
 4470 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4471              	.LCFI18:
 4472              		.cfi_def_cfa_offset 28
 4473              		.cfi_offset 4, -28
 4474              		.cfi_offset 5, -24
 4475              		.cfi_offset 6, -20
 4476              		.cfi_offset 7, -16
 4477              		.cfi_offset 8, -12
 4478              		.cfi_offset 9, -8
 4479              		.cfi_offset 14, -4
 4480 0004 B9B0     		sub	sp, sp, #228
 4481              	.LCFI19:
 4482              		.cfi_def_cfa_offset 256
 4483 0006 00AF     		add	r7, sp, #0
 4484              	.LCFI20:
 4485              		.cfi_def_cfa_register 7
 4486 0008 F860     		str	r0, [r7, #12]
 4487 000a B960     		str	r1, [r7, #8]
 4488 000c 7A60     		str	r2, [r7, #4]
 4489 000e 3B60     		str	r3, [r7]
 351:fips202.c     ****     size_t i;
 352:fips202.c     ****     uint8_t t[200];
 353:fips202.c     **** 
 354:fips202.c     ****     /* Zero state */
 355:fips202.c     ****     for (i = 0; i < 25; ++i) {
 4490              		.loc 1 355 12
 4491 0010 0023     		movs	r3, #0
 4492 0012 C7F8DC30 		str	r3, [r7, #220]
 4493              		.loc 1 355 5
 4494 0016 0FE0     		b	.L18
 4495              	.L19:
 356:fips202.c     ****         s[i] = 0;
 4496              		.loc 1 356 10 discriminator 3
 4497 0018 D7F8DC30 		ldr	r3, [r7, #220]
 4498 001c DB00     		lsls	r3, r3, #3
 4499 001e FA68     		ldr	r2, [r7, #12]
 4500 0020 D118     		adds	r1, r2, r3
 4501              		.loc 1 356 14 discriminator 3
 4502 0022 4FF00002 		mov	r2, #0
 4503 0026 4FF00003 		mov	r3, #0
 4504 002a C1E90023 		strd	r2, [r1]
 355:fips202.c     ****         s[i] = 0;
 4505              		.loc 1 355 25 discriminator 3
 4506 002e D7F8DC30 		ldr	r3, [r7, #220]
 4507 0032 0133     		adds	r3, r3, #1
 4508 0034 C7F8DC30 		str	r3, [r7, #220]
 4509              	.L18:
 355:fips202.c     ****         s[i] = 0;
 4510              		.loc 1 355 5 discriminator 1
 4511 0038 D7F8DC30 		ldr	r3, [r7, #220]
 4512 003c 182B     		cmp	r3, #24
 4513 003e EBD9     		bls	.L19
 357:fips202.c     ****     }
 358:fips202.c     **** 
 359:fips202.c     ****     while (mlen >= r) {
 4514              		.loc 1 359 11
 4515 0040 34E0     		b	.L20
 4516              	.L23:
 360:fips202.c     ****         for (i = 0; i < r / 8; ++i) {
 4517              		.loc 1 360 16
 4518 0042 0023     		movs	r3, #0
 4519 0044 C7F8DC30 		str	r3, [r7, #220]
 4520              		.loc 1 360 9
 4521 0048 1FE0     		b	.L21
 4522              	.L22:
 361:fips202.c     ****             s[i] ^= load64(m + 8 * i);
 4523              		.loc 1 361 34 discriminator 3
 4524 004a D7F8DC30 		ldr	r3, [r7, #220]
 4525 004e DB00     		lsls	r3, r3, #3
 4526              		.loc 1 361 21 discriminator 3
 4527 0050 7A68     		ldr	r2, [r7, #4]
 4528 0052 1344     		add	r3, r3, r2
 4529 0054 1846     		mov	r0, r3
 4530 0056 FFF7FEFF 		bl	load64
 4531              		.loc 1 361 18 discriminator 3
 4532 005a D7F8DC30 		ldr	r3, [r7, #220]
 4533 005e DB00     		lsls	r3, r3, #3
 4534 0060 FA68     		ldr	r2, [r7, #12]
 4535 0062 1344     		add	r3, r3, r2
 4536 0064 D3E90023 		ldrd	r2, [r3]
 4537 0068 D7F8DC60 		ldr	r6, [r7, #220]
 4538 006c F600     		lsls	r6, r6, #3
 4539 006e D7F80CC0 		ldr	ip, [r7, #12]
 4540 0072 6644     		add	r6, r6, ip
 4541 0074 80EA0208 		eor	r8, r0, r2
 4542 0078 81EA0309 		eor	r9, r1, r3
 4543 007c C6E90089 		strd	r8, [r6]
 360:fips202.c     ****         for (i = 0; i < r / 8; ++i) {
 4544              		.loc 1 360 32 discriminator 3
 4545 0080 D7F8DC30 		ldr	r3, [r7, #220]
 4546 0084 0133     		adds	r3, r3, #1
 4547 0086 C7F8DC30 		str	r3, [r7, #220]
 4548              	.L21:
 360:fips202.c     ****         for (i = 0; i < r / 8; ++i) {
 4549              		.loc 1 360 27 discriminator 1
 4550 008a BB68     		ldr	r3, [r7, #8]
 4551 008c DB08     		lsrs	r3, r3, #3
 360:fips202.c     ****         for (i = 0; i < r / 8; ++i) {
 4552              		.loc 1 360 9 discriminator 1
 4553 008e D7F8DC20 		ldr	r2, [r7, #220]
 4554 0092 9A42     		cmp	r2, r3
 4555 0094 D9D3     		bcc	.L22
 362:fips202.c     ****         }
 363:fips202.c     **** 
 364:fips202.c     ****         KeccakF1600_StatePermute(s);
 4556              		.loc 1 364 9
 4557 0096 F868     		ldr	r0, [r7, #12]
 4558 0098 FFF7FEFF 		bl	KeccakF1600_StatePermute
 365:fips202.c     ****         mlen -= r;
 4559              		.loc 1 365 14
 4560 009c 3A68     		ldr	r2, [r7]
 4561 009e BB68     		ldr	r3, [r7, #8]
 4562 00a0 D31A     		subs	r3, r2, r3
 4563 00a2 3B60     		str	r3, [r7]
 366:fips202.c     ****         m += r;
 4564              		.loc 1 366 11
 4565 00a4 7A68     		ldr	r2, [r7, #4]
 4566 00a6 BB68     		ldr	r3, [r7, #8]
 4567 00a8 1344     		add	r3, r3, r2
 4568 00aa 7B60     		str	r3, [r7, #4]
 4569              	.L20:
 359:fips202.c     ****         for (i = 0; i < r / 8; ++i) {
 4570              		.loc 1 359 11
 4571 00ac 3A68     		ldr	r2, [r7]
 4572 00ae BB68     		ldr	r3, [r7, #8]
 4573 00b0 9A42     		cmp	r2, r3
 4574 00b2 C6D2     		bcs	.L23
 367:fips202.c     ****     }
 368:fips202.c     **** 
 369:fips202.c     ****     for (i = 0; i < r; ++i) {
 4575              		.loc 1 369 12
 4576 00b4 0023     		movs	r3, #0
 4577 00b6 C7F8DC30 		str	r3, [r7, #220]
 4578              		.loc 1 369 5
 4579 00ba 0BE0     		b	.L24
 4580              	.L25:
 370:fips202.c     ****         t[i] = 0;
 4581              		.loc 1 370 14 discriminator 3
 4582 00bc 07F11402 		add	r2, r7, #20
 4583 00c0 D7F8DC30 		ldr	r3, [r7, #220]
 4584 00c4 1344     		add	r3, r3, r2
 4585 00c6 0022     		movs	r2, #0
 4586 00c8 1A70     		strb	r2, [r3]
 369:fips202.c     ****         t[i] = 0;
 4587              		.loc 1 369 24 discriminator 3
 4588 00ca D7F8DC30 		ldr	r3, [r7, #220]
 4589 00ce 0133     		adds	r3, r3, #1
 4590 00d0 C7F8DC30 		str	r3, [r7, #220]
 4591              	.L24:
 369:fips202.c     ****         t[i] = 0;
 4592              		.loc 1 369 5 discriminator 1
 4593 00d4 D7F8DC20 		ldr	r2, [r7, #220]
 4594 00d8 BB68     		ldr	r3, [r7, #8]
 4595 00da 9A42     		cmp	r2, r3
 4596 00dc EED3     		bcc	.L25
 371:fips202.c     ****     }
 372:fips202.c     ****     for (i = 0; i < mlen; ++i) {
 4597              		.loc 1 372 12
 4598 00de 0023     		movs	r3, #0
 4599 00e0 C7F8DC30 		str	r3, [r7, #220]
 4600              		.loc 1 372 5
 4601 00e4 10E0     		b	.L26
 4602              	.L27:
 373:fips202.c     ****         t[i] = m[i];
 4603              		.loc 1 373 17 discriminator 3
 4604 00e6 7A68     		ldr	r2, [r7, #4]
 4605 00e8 D7F8DC30 		ldr	r3, [r7, #220]
 4606 00ec 1344     		add	r3, r3, r2
 4607 00ee 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4608              		.loc 1 373 14 discriminator 3
 4609 00f0 07F11402 		add	r2, r7, #20
 4610 00f4 D7F8DC30 		ldr	r3, [r7, #220]
 4611 00f8 1344     		add	r3, r3, r2
 4612 00fa 0A46     		mov	r2, r1
 4613 00fc 1A70     		strb	r2, [r3]
 372:fips202.c     ****         t[i] = m[i];
 4614              		.loc 1 372 27 discriminator 3
 4615 00fe D7F8DC30 		ldr	r3, [r7, #220]
 4616 0102 0133     		adds	r3, r3, #1
 4617 0104 C7F8DC30 		str	r3, [r7, #220]
 4618              	.L26:
 372:fips202.c     ****         t[i] = m[i];
 4619              		.loc 1 372 5 discriminator 1
 4620 0108 D7F8DC20 		ldr	r2, [r7, #220]
 4621 010c 3B68     		ldr	r3, [r7]
 4622 010e 9A42     		cmp	r2, r3
 4623 0110 E9D3     		bcc	.L27
 374:fips202.c     ****     }
 375:fips202.c     ****     t[i] = p;
 4624              		.loc 1 375 10
 4625 0112 07F11402 		add	r2, r7, #20
 4626 0116 D7F8DC30 		ldr	r3, [r7, #220]
 4627 011a 1344     		add	r3, r3, r2
 4628 011c 97F80021 		ldrb	r2, [r7, #256]
 4629 0120 1A70     		strb	r2, [r3]
 376:fips202.c     ****     t[r - 1] |= 128;
 4630              		.loc 1 376 14
 4631 0122 BB68     		ldr	r3, [r7, #8]
 4632 0124 013B     		subs	r3, r3, #1
 4633 0126 E033     		adds	r3, r3, #224
 4634 0128 3B44     		add	r3, r3, r7
 4635 012a 13F8CC2C 		ldrb	r2, [r3, #-204]	@ zero_extendqisi2
 4636 012e BB68     		ldr	r3, [r7, #8]
 4637 0130 013B     		subs	r3, r3, #1
 4638 0132 62F07F02 		orn	r2, r2, #127
 4639 0136 D2B2     		uxtb	r2, r2
 4640 0138 E033     		adds	r3, r3, #224
 4641 013a 3B44     		add	r3, r3, r7
 4642 013c 03F8CC2C 		strb	r2, [r3, #-204]
 377:fips202.c     ****     for (i = 0; i < r / 8; ++i) {
 4643              		.loc 1 377 12
 4644 0140 0023     		movs	r3, #0
 4645 0142 C7F8DC30 		str	r3, [r7, #220]
 4646              		.loc 1 377 5
 4647 0146 20E0     		b	.L28
 4648              	.L29:
 378:fips202.c     ****         s[i] ^= load64(t + 8 * i);
 4649              		.loc 1 378 30 discriminator 3
 4650 0148 D7F8DC30 		ldr	r3, [r7, #220]
 4651 014c DB00     		lsls	r3, r3, #3
 4652              		.loc 1 378 17 discriminator 3
 4653 014e 07F11402 		add	r2, r7, #20
 4654 0152 1344     		add	r3, r3, r2
 4655 0154 1846     		mov	r0, r3
 4656 0156 FFF7FEFF 		bl	load64
 4657              		.loc 1 378 14 discriminator 3
 4658 015a D7F8DC30 		ldr	r3, [r7, #220]
 4659 015e DB00     		lsls	r3, r3, #3
 4660 0160 FA68     		ldr	r2, [r7, #12]
 4661 0162 1344     		add	r3, r3, r2
 4662 0164 D3E90023 		ldrd	r2, [r3]
 4663 0168 D7F8DC60 		ldr	r6, [r7, #220]
 4664 016c F600     		lsls	r6, r6, #3
 4665 016e D7F80CC0 		ldr	ip, [r7, #12]
 4666 0172 6644     		add	r6, r6, ip
 4667 0174 80EA0204 		eor	r4, r0, r2
 4668 0178 81EA0305 		eor	r5, r1, r3
 4669 017c C6E90045 		strd	r4, [r6]
 377:fips202.c     ****     for (i = 0; i < r / 8; ++i) {
 4670              		.loc 1 377 28 discriminator 3
 4671 0180 D7F8DC30 		ldr	r3, [r7, #220]
 4672 0184 0133     		adds	r3, r3, #1
 4673 0186 C7F8DC30 		str	r3, [r7, #220]
 4674              	.L28:
 377:fips202.c     ****     for (i = 0; i < r / 8; ++i) {
 4675              		.loc 1 377 23 discriminator 1
 4676 018a BB68     		ldr	r3, [r7, #8]
 4677 018c DB08     		lsrs	r3, r3, #3
 377:fips202.c     ****     for (i = 0; i < r / 8; ++i) {
 4678              		.loc 1 377 5 discriminator 1
 4679 018e D7F8DC20 		ldr	r2, [r7, #220]
 4680 0192 9A42     		cmp	r2, r3
 4681 0194 D8D3     		bcc	.L29
 379:fips202.c     ****     }
 380:fips202.c     **** }
 4682              		.loc 1 380 1
 4683 0196 00BF     		nop
 4684 0198 00BF     		nop
 4685 019a E437     		adds	r7, r7, #228
 4686              	.LCFI21:
 4687              		.cfi_def_cfa_offset 28
 4688 019c BD46     		mov	sp, r7
 4689              	.LCFI22:
 4690              		.cfi_def_cfa_register 13
 4691              		@ sp needed
 4692 019e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4693              		.cfi_endproc
 4694              	.LFE3:
 4696              		.section	.text.keccak_squeezeblocks,"ax",%progbits
 4697              		.align	1
 4698              		.syntax unified
 4699              		.thumb
 4700              		.thumb_func
 4701              		.fpu softvfp
 4703              	keccak_squeezeblocks:
 4704              	.LFB4:
 381:fips202.c     **** 
 382:fips202.c     **** /*************************************************
 383:fips202.c     ****  * Name:        keccak_squeezeblocks
 384:fips202.c     ****  *
 385:fips202.c     ****  * Description: Squeeze step of Keccak. Squeezes full blocks of r bytes each.
 386:fips202.c     ****  *              Modifies the state. Can be called multiple times to keep
 387:fips202.c     ****  *              squeezing, i.e., is incremental.
 388:fips202.c     ****  *
 389:fips202.c     ****  * Arguments:   - uint8_t *h: pointer to output blocks
 390:fips202.c     ****  *              - size_t nblocks: number of blocks to be
 391:fips202.c     ****  *                                                squeezed (written to h)
 392:fips202.c     ****  *              - uint64_t *s: pointer to input/output Keccak state
 393:fips202.c     ****  *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 394:fips202.c     ****  **************************************************/
 395:fips202.c     **** static void keccak_squeezeblocks(uint8_t *h, size_t nblocks,
 396:fips202.c     ****                                  uint64_t *s, uint32_t r) {
 4705              		.loc 1 396 59
 4706              		.cfi_startproc
 4707              		@ args = 0, pretend = 0, frame = 24
 4708              		@ frame_needed = 1, uses_anonymous_args = 0
 4709 0000 80B5     		push	{r7, lr}
 4710              	.LCFI23:
 4711              		.cfi_def_cfa_offset 8
 4712              		.cfi_offset 7, -8
 4713              		.cfi_offset 14, -4
 4714 0002 86B0     		sub	sp, sp, #24
 4715              	.LCFI24:
 4716              		.cfi_def_cfa_offset 32
 4717 0004 00AF     		add	r7, sp, #0
 4718              	.LCFI25:
 4719              		.cfi_def_cfa_register 7
 4720 0006 F860     		str	r0, [r7, #12]
 4721 0008 B960     		str	r1, [r7, #8]
 4722 000a 7A60     		str	r2, [r7, #4]
 4723 000c 3B60     		str	r3, [r7]
 397:fips202.c     ****     while (nblocks > 0) {
 4724              		.loc 1 397 11
 4725 000e 21E0     		b	.L31
 4726              	.L34:
 398:fips202.c     ****         KeccakF1600_StatePermute(s);
 4727              		.loc 1 398 9
 4728 0010 7868     		ldr	r0, [r7, #4]
 4729 0012 FFF7FEFF 		bl	KeccakF1600_StatePermute
 4730              	.LBB4:
 399:fips202.c     ****         for (size_t i = 0; i < (r >> 3); i++) {
 4731              		.loc 1 399 21
 4732 0016 0023     		movs	r3, #0
 4733 0018 7B61     		str	r3, [r7, #20]
 4734              		.loc 1 399 9
 4735 001a 0FE0     		b	.L32
 4736              	.L33:
 400:fips202.c     ****             store64(h + 8 * i, s[i]);
 4737              		.loc 1 400 27 discriminator 3
 4738 001c 7B69     		ldr	r3, [r7, #20]
 4739 001e DB00     		lsls	r3, r3, #3
 4740              		.loc 1 400 13 discriminator 3
 4741 0020 FA68     		ldr	r2, [r7, #12]
 4742 0022 D118     		adds	r1, r2, r3
 4743              		.loc 1 400 33 discriminator 3
 4744 0024 7B69     		ldr	r3, [r7, #20]
 4745 0026 DB00     		lsls	r3, r3, #3
 4746 0028 7A68     		ldr	r2, [r7, #4]
 4747 002a 1344     		add	r3, r3, r2
 4748              		.loc 1 400 13 discriminator 3
 4749 002c D3E90023 		ldrd	r2, [r3]
 4750 0030 0846     		mov	r0, r1
 4751 0032 FFF7FEFF 		bl	store64
 399:fips202.c     ****         for (size_t i = 0; i < (r >> 3); i++) {
 4752              		.loc 1 399 43 discriminator 3
 4753 0036 7B69     		ldr	r3, [r7, #20]
 4754 0038 0133     		adds	r3, r3, #1
 4755 003a 7B61     		str	r3, [r7, #20]
 4756              	.L32:
 399:fips202.c     ****         for (size_t i = 0; i < (r >> 3); i++) {
 4757              		.loc 1 399 35 discriminator 1
 4758 003c 3B68     		ldr	r3, [r7]
 4759 003e DB08     		lsrs	r3, r3, #3
 399:fips202.c     ****         for (size_t i = 0; i < (r >> 3); i++) {
 4760              		.loc 1 399 9 discriminator 1
 4761 0040 7A69     		ldr	r2, [r7, #20]
 4762 0042 9A42     		cmp	r2, r3
 4763 0044 EAD3     		bcc	.L33
 4764              	.LBE4:
 401:fips202.c     ****         }
 402:fips202.c     ****         h += r;
 4765              		.loc 1 402 11
 4766 0046 FA68     		ldr	r2, [r7, #12]
 4767 0048 3B68     		ldr	r3, [r7]
 4768 004a 1344     		add	r3, r3, r2
 4769 004c FB60     		str	r3, [r7, #12]
 403:fips202.c     ****         nblocks--;
 4770              		.loc 1 403 16
 4771 004e BB68     		ldr	r3, [r7, #8]
 4772 0050 013B     		subs	r3, r3, #1
 4773 0052 BB60     		str	r3, [r7, #8]
 4774              	.L31:
 397:fips202.c     ****         KeccakF1600_StatePermute(s);
 4775              		.loc 1 397 11
 4776 0054 BB68     		ldr	r3, [r7, #8]
 4777 0056 002B     		cmp	r3, #0
 4778 0058 DAD1     		bne	.L34
 404:fips202.c     ****     }
 405:fips202.c     **** }
 4779              		.loc 1 405 1
 4780 005a 00BF     		nop
 4781 005c 00BF     		nop
 4782 005e 1837     		adds	r7, r7, #24
 4783              	.LCFI26:
 4784              		.cfi_def_cfa_offset 8
 4785 0060 BD46     		mov	sp, r7
 4786              	.LCFI27:
 4787              		.cfi_def_cfa_register 13
 4788              		@ sp needed
 4789 0062 80BD     		pop	{r7, pc}
 4790              		.cfi_endproc
 4791              	.LFE4:
 4793              		.section	.text.keccak_inc_init,"ax",%progbits
 4794              		.align	1
 4795              		.syntax unified
 4796              		.thumb
 4797              		.thumb_func
 4798              		.fpu softvfp
 4800              	keccak_inc_init:
 4801              	.LFB5:
 406:fips202.c     **** 
 407:fips202.c     **** /*************************************************
 408:fips202.c     ****  * Name:        keccak_inc_init
 409:fips202.c     ****  *
 410:fips202.c     ****  * Description: Initializes the incremental Keccak state to zero.
 411:fips202.c     ****  *
 412:fips202.c     ****  * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 413:fips202.c     ****  *                First 25 values represent Keccak state.
 414:fips202.c     ****  *                26th value represents either the number of absorbed bytes
 415:fips202.c     ****  *                that have not been permuted, or not-yet-squeezed bytes.
 416:fips202.c     ****  **************************************************/
 417:fips202.c     **** static void keccak_inc_init(uint64_t *s_inc) {
 4802              		.loc 1 417 46
 4803              		.cfi_startproc
 4804              		@ args = 0, pretend = 0, frame = 16
 4805              		@ frame_needed = 1, uses_anonymous_args = 0
 4806              		@ link register save eliminated.
 4807 0000 80B4     		push	{r7}
 4808              	.LCFI28:
 4809              		.cfi_def_cfa_offset 4
 4810              		.cfi_offset 7, -4
 4811 0002 85B0     		sub	sp, sp, #20
 4812              	.LCFI29:
 4813              		.cfi_def_cfa_offset 24
 4814 0004 00AF     		add	r7, sp, #0
 4815              	.LCFI30:
 4816              		.cfi_def_cfa_register 7
 4817 0006 7860     		str	r0, [r7, #4]
 418:fips202.c     ****     size_t i;
 419:fips202.c     **** 
 420:fips202.c     ****     for (i = 0; i < 25; ++i) {
 4818              		.loc 1 420 12
 4819 0008 0023     		movs	r3, #0
 4820 000a FB60     		str	r3, [r7, #12]
 4821              		.loc 1 420 5
 4822 000c 0CE0     		b	.L36
 4823              	.L37:
 421:fips202.c     ****         s_inc[i] = 0;
 4824              		.loc 1 421 14 discriminator 3
 4825 000e FB68     		ldr	r3, [r7, #12]
 4826 0010 DB00     		lsls	r3, r3, #3
 4827 0012 7A68     		ldr	r2, [r7, #4]
 4828 0014 D118     		adds	r1, r2, r3
 4829              		.loc 1 421 18 discriminator 3
 4830 0016 4FF00002 		mov	r2, #0
 4831 001a 4FF00003 		mov	r3, #0
 4832 001e C1E90023 		strd	r2, [r1]
 420:fips202.c     ****         s_inc[i] = 0;
 4833              		.loc 1 420 25 discriminator 3
 4834 0022 FB68     		ldr	r3, [r7, #12]
 4835 0024 0133     		adds	r3, r3, #1
 4836 0026 FB60     		str	r3, [r7, #12]
 4837              	.L36:
 420:fips202.c     ****         s_inc[i] = 0;
 4838              		.loc 1 420 5 discriminator 1
 4839 0028 FB68     		ldr	r3, [r7, #12]
 4840 002a 182B     		cmp	r3, #24
 4841 002c EFD9     		bls	.L37
 422:fips202.c     ****     }
 423:fips202.c     ****     s_inc[25] = 0;
 4842              		.loc 1 423 10
 4843 002e 7B68     		ldr	r3, [r7, #4]
 4844 0030 03F1C801 		add	r1, r3, #200
 4845              		.loc 1 423 15
 4846 0034 4FF00002 		mov	r2, #0
 4847 0038 4FF00003 		mov	r3, #0
 4848 003c C1E90023 		strd	r2, [r1]
 424:fips202.c     **** }
 4849              		.loc 1 424 1
 4850 0040 00BF     		nop
 4851 0042 1437     		adds	r7, r7, #20
 4852              	.LCFI31:
 4853              		.cfi_def_cfa_offset 4
 4854 0044 BD46     		mov	sp, r7
 4855              	.LCFI32:
 4856              		.cfi_def_cfa_register 13
 4857              		@ sp needed
 4858 0046 80BC     		pop	{r7}
 4859              	.LCFI33:
 4860              		.cfi_restore 7
 4861              		.cfi_def_cfa_offset 0
 4862 0048 7047     		bx	lr
 4863              		.cfi_endproc
 4864              	.LFE5:
 4866              		.section	.text.keccak_inc_absorb,"ax",%progbits
 4867              		.align	1
 4868              		.syntax unified
 4869              		.thumb
 4870              		.thumb_func
 4871              		.fpu softvfp
 4873              	keccak_inc_absorb:
 4874              	.LFB6:
 425:fips202.c     **** 
 426:fips202.c     **** /*************************************************
 427:fips202.c     ****  * Name:        keccak_inc_absorb
 428:fips202.c     ****  *
 429:fips202.c     ****  * Description: Incremental keccak absorb
 430:fips202.c     ****  *              Preceded by keccak_inc_init, succeeded by keccak_inc_finalize
 431:fips202.c     ****  *
 432:fips202.c     ****  * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 433:fips202.c     ****  *                First 25 values represent Keccak state.
 434:fips202.c     ****  *                26th value represents either the number of absorbed bytes
 435:fips202.c     ****  *                that have not been permuted, or not-yet-squeezed bytes.
 436:fips202.c     ****  *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 437:fips202.c     ****  *              - const uint8_t *m: pointer to input to be absorbed into s
 438:fips202.c     ****  *              - size_t mlen: length of input in bytes
 439:fips202.c     ****  **************************************************/
 440:fips202.c     **** static void keccak_inc_absorb(uint64_t *s_inc, uint32_t r, const uint8_t *m,
 441:fips202.c     ****                               size_t mlen) {
 4875              		.loc 1 441 44
 4876              		.cfi_startproc
 4877              		@ args = 0, pretend = 0, frame = 192
 4878              		@ frame_needed = 1, uses_anonymous_args = 0
 4879 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 4880              	.LCFI34:
 4881              		.cfi_def_cfa_offset 32
 4882              		.cfi_offset 4, -32
 4883              		.cfi_offset 5, -28
 4884              		.cfi_offset 7, -24
 4885              		.cfi_offset 8, -20
 4886              		.cfi_offset 9, -16
 4887              		.cfi_offset 10, -12
 4888              		.cfi_offset 11, -8
 4889              		.cfi_offset 14, -4
 4890 0004 B0B0     		sub	sp, sp, #192
 4891              	.LCFI35:
 4892              		.cfi_def_cfa_offset 224
 4893 0006 00AF     		add	r7, sp, #0
 4894              	.LCFI36:
 4895              		.cfi_def_cfa_register 7
 4896 0008 C7F8B400 		str	r0, [r7, #180]
 4897 000c C7F8B010 		str	r1, [r7, #176]
 4898 0010 C7F8AC20 		str	r2, [r7, #172]
 4899 0014 C7F8A830 		str	r3, [r7, #168]
 442:fips202.c     ****     size_t i;
 443:fips202.c     **** 
 444:fips202.c     ****     /* Recall that s_inc[25] is the non-absorbed bytes xored into the state */
 445:fips202.c     ****     while (mlen + s_inc[25] >= r) {
 4900              		.loc 1 445 11
 4901 0018 D1E0     		b	.L39
 4902              	.L42:
 446:fips202.c     ****         for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 4903              		.loc 1 446 16
 4904 001a 0023     		movs	r3, #0
 4905 001c C7F8BC30 		str	r3, [r7, #188]
 4906              		.loc 1 446 9
 4907 0020 98E0     		b	.L40
 4908              	.L41:
 447:fips202.c     ****             /* Take the i'th byte from message
 448:fips202.c     ****                xor with the s_inc[25] + i'th byte of the state; little-endian */
 449:fips202.c     ****             s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 4909              		.loc 1 449 25 discriminator 3
 4910 0022 D7F8B430 		ldr	r3, [r7, #180]
 4911 0026 C833     		adds	r3, r3, #200
 4912 0028 D3E90023 		ldrd	r2, [r3]
 4913              		.loc 1 449 41 discriminator 3
 4914 002c D7F8BC10 		ldr	r1, [r7, #188]
 4915 0030 0020     		movs	r0, #0
 4916 0032 C7F88010 		str	r1, [r7, #128]
 4917 0036 C7F88400 		str	r0, [r7, #132]
 4918 003a D7E92089 		ldrd	r8, [r7, #128]
 4919 003e 4146     		mov	r1, r8
 4920 0040 5118     		adds	r1, r2, r1
 4921 0042 B967     		str	r1, [r7, #120]
 4922 0044 4946     		mov	r1, r9
 4923 0046 4B41     		adcs	r3, r3, r1
 4924 0048 FB67     		str	r3, [r7, #124]
 4925 004a 4FF00002 		mov	r2, #0
 4926 004e 4FF00003 		mov	r3, #0
 4927 0052 D7E91E89 		ldrd	r8, [r7, #120]
 4928 0056 4146     		mov	r1, r8
 4929 0058 CA08     		lsrs	r2, r1, #3
 4930 005a CC46     		mov	ip, r9
 4931 005c 42EA4C72 		orr	r2, r2, ip, lsl #29
 4932 0060 4946     		mov	r1, r9
 4933 0062 CB08     		lsrs	r3, r1, #3
 4934 0064 1346     		mov	r3, r2
 4935 0066 DA00     		lsls	r2, r3, #3
 4936 0068 D7F8B430 		ldr	r3, [r7, #180]
 4937 006c 1344     		add	r3, r3, r2
 4938 006e D3E90089 		ldrd	r8, [r3]
 4939              		.loc 1 449 55 discriminator 3
 4940 0072 D7F8AC20 		ldr	r2, [r7, #172]
 4941 0076 D7F8BC30 		ldr	r3, [r7, #188]
 4942 007a 1344     		add	r3, r3, r2
 4943 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4944              		.loc 1 449 44 discriminator 3
 4945 007e DBB2     		uxtb	r3, r3
 4946 0080 0022     		movs	r2, #0
 4947 0082 C7F8A030 		str	r3, [r7, #160]
 4948 0086 C7F8A420 		str	r2, [r7, #164]
 4949              		.loc 1 449 74 discriminator 3
 4950 008a D7F8B430 		ldr	r3, [r7, #180]
 4951 008e C833     		adds	r3, r3, #200
 4952 0090 D3E90023 		ldrd	r2, [r3]
 4953              		.loc 1 449 79 discriminator 3
 4954 0094 D7F8BC10 		ldr	r1, [r7, #188]
 4955 0098 0020     		movs	r0, #0
 4956 009a C7F89810 		str	r1, [r7, #152]
 4957 009e C7F89C00 		str	r0, [r7, #156]
 4958 00a2 D7F89810 		ldr	r1, [r7, #152]
 4959 00a6 5118     		adds	r1, r2, r1
 4960 00a8 3967     		str	r1, [r7, #112]
 4961 00aa D7F89C10 		ldr	r1, [r7, #156]
 4962 00ae 4B41     		adcs	r3, r3, r1
 4963 00b0 7B67     		str	r3, [r7, #116]
 4964              		.loc 1 449 59 discriminator 3
 4965 00b2 3B6F     		ldr	r3, [r7, #112]
 4966 00b4 03F00703 		and	r3, r3, #7
 4967 00b8 D900     		lsls	r1, r3, #3
 4968 00ba A1F12003 		sub	r3, r1, #32
 4969 00be C1F12002 		rsb	r2, r1, #32
 4970 00c2 D7F8A400 		ldr	r0, [r7, #164]
 4971 00c6 00FA01F5 		lsl	r5, r0, r1
 4972 00ca D7F8A000 		ldr	r0, [r7, #160]
 4973 00ce 00FA03F3 		lsl	r3, r0, r3
 4974 00d2 1D43     		orrs	r5, r5, r3
 4975 00d4 D7F8A030 		ldr	r3, [r7, #160]
 4976 00d8 23FA02F2 		lsr	r2, r3, r2
 4977 00dc 1543     		orrs	r5, r5, r2
 4978 00de D7F8A030 		ldr	r3, [r7, #160]
 4979 00e2 03FA01F4 		lsl	r4, r3, r1
 4980              		.loc 1 449 25 discriminator 3
 4981 00e6 D7F8B430 		ldr	r3, [r7, #180]
 4982 00ea C833     		adds	r3, r3, #200
 4983 00ec D3E90023 		ldrd	r2, [r3]
 4984              		.loc 1 449 41 discriminator 3
 4985 00f0 D7F8BC10 		ldr	r1, [r7, #188]
 4986 00f4 0020     		movs	r0, #0
 4987 00f6 C7F89010 		str	r1, [r7, #144]
 4988 00fa C7F89400 		str	r0, [r7, #148]
 4989 00fe D7F89010 		ldr	r1, [r7, #144]
 4990 0102 5118     		adds	r1, r2, r1
 4991 0104 C7F88810 		str	r1, [r7, #136]
 4992 0108 D7F89410 		ldr	r1, [r7, #148]
 4993 010c 4B41     		adcs	r3, r3, r1
 4994 010e C7F88C30 		str	r3, [r7, #140]
 4995 0112 4FF00002 		mov	r2, #0
 4996 0116 4FF00003 		mov	r3, #0
 4997 011a D7F88810 		ldr	r1, [r7, #136]
 4998 011e CA08     		lsrs	r2, r1, #3
 4999 0120 D7E92201 		ldrd	r0, [r7, #136]
 5000 0124 8C46     		mov	ip, r1
 5001 0126 42EA4C72 		orr	r2, r2, ip, lsl #29
 5002 012a CB08     		lsrs	r3, r1, #3
 5003 012c 1346     		mov	r3, r2
 5004 012e DA00     		lsls	r2, r3, #3
 5005 0130 D7F8B430 		ldr	r3, [r7, #180]
 5006 0134 1344     		add	r3, r3, r2
 5007 0136 88EA0402 		eor	r2, r8, r4
 5008 013a BA66     		str	r2, [r7, #104]
 5009 013c 89EA0502 		eor	r2, r9, r5
 5010 0140 FA66     		str	r2, [r7, #108]
 5011 0142 D7E91A12 		ldrd	r1, [r7, #104]
 5012 0146 C3E90012 		strd	r1, [r3]
 446:fips202.c     ****         for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 5013              		.loc 1 446 51 discriminator 3
 5014 014a D7F8BC30 		ldr	r3, [r7, #188]
 5015 014e 0133     		adds	r3, r3, #1
 5016 0150 C7F8BC30 		str	r3, [r7, #188]
 5017              	.L40:
 446:fips202.c     ****         for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 5018              		.loc 1 446 44 discriminator 1
 5019 0154 D7F8B430 		ldr	r3, [r7, #180]
 5020 0158 C833     		adds	r3, r3, #200
 5021 015a D3E90023 		ldrd	r2, [r3]
 446:fips202.c     ****         for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 5022              		.loc 1 446 27 discriminator 1
 5023 015e D7F8B030 		ldr	r3, [r7, #176]
 5024 0162 9A1A     		subs	r2, r3, r2
 446:fips202.c     ****         for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 5025              		.loc 1 446 9 discriminator 1
 5026 0164 D7F8BC30 		ldr	r3, [r7, #188]
 5027 0168 9342     		cmp	r3, r2
 5028 016a FFF45AAF 		bcc	.L41
 450:fips202.c     ****         }
 451:fips202.c     ****         mlen -= (size_t)(r - s_inc[25]);
 5029              		.loc 1 451 35
 5030 016e D7F8B430 		ldr	r3, [r7, #180]
 5031 0172 C833     		adds	r3, r3, #200
 5032 0174 D3E90023 		ldrd	r2, [r3]
 5033              		.loc 1 451 17
 5034 0178 D7F8B030 		ldr	r3, [r7, #176]
 5035 017c D21A     		subs	r2, r2, r3
 5036              		.loc 1 451 14
 5037 017e D7F8A830 		ldr	r3, [r7, #168]
 5038 0182 1344     		add	r3, r3, r2
 5039 0184 C7F8A830 		str	r3, [r7, #168]
 452:fips202.c     ****         m += r - s_inc[25];
 5040              		.loc 1 452 23
 5041 0188 D7F8B430 		ldr	r3, [r7, #180]
 5042 018c C833     		adds	r3, r3, #200
 5043 018e D3E90023 		ldrd	r2, [r3]
 5044              		.loc 1 452 16
 5045 0192 D7F8B030 		ldr	r3, [r7, #176]
 5046 0196 9A1A     		subs	r2, r3, r2
 5047              		.loc 1 452 11
 5048 0198 D7F8AC30 		ldr	r3, [r7, #172]
 5049 019c 1344     		add	r3, r3, r2
 5050 019e C7F8AC30 		str	r3, [r7, #172]
 453:fips202.c     ****         s_inc[25] = 0;
 5051              		.loc 1 453 14
 5052 01a2 D7F8B430 		ldr	r3, [r7, #180]
 5053 01a6 03F1C801 		add	r1, r3, #200
 5054              		.loc 1 453 19
 5055 01aa 4FF00002 		mov	r2, #0
 5056 01ae 4FF00003 		mov	r3, #0
 5057 01b2 C1E90023 		strd	r2, [r1]
 454:fips202.c     **** 
 455:fips202.c     ****         KeccakF1600_StatePermute(s_inc);
 5058              		.loc 1 455 9
 5059 01b6 D7F8B400 		ldr	r0, [r7, #180]
 5060 01ba FFF7FEFF 		bl	KeccakF1600_StatePermute
 5061              	.L39:
 445:fips202.c     ****         for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 5062              		.loc 1 445 17
 5063 01be D7F8A830 		ldr	r3, [r7, #168]
 5064 01c2 0022     		movs	r2, #0
 5065 01c4 3B66     		str	r3, [r7, #96]
 5066 01c6 7A66     		str	r2, [r7, #100]
 445:fips202.c     ****         for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 5067              		.loc 1 445 24
 5068 01c8 D7F8B430 		ldr	r3, [r7, #180]
 5069 01cc C833     		adds	r3, r3, #200
 5070 01ce D3E90023 		ldrd	r2, [r3]
 445:fips202.c     ****         for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 5071              		.loc 1 445 17
 5072 01d2 D7E91889 		ldrd	r8, [r7, #96]
 5073 01d6 4146     		mov	r1, r8
 5074 01d8 8918     		adds	r1, r1, r2
 5075 01da B965     		str	r1, [r7, #88]
 5076 01dc 4946     		mov	r1, r9
 5077 01de 41EB0303 		adc	r3, r1, r3
 5078 01e2 FB65     		str	r3, [r7, #92]
 445:fips202.c     ****         for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 5079              		.loc 1 445 29
 5080 01e4 D7F8B030 		ldr	r3, [r7, #176]
 5081 01e8 0022     		movs	r2, #0
 5082 01ea 3B65     		str	r3, [r7, #80]
 5083 01ec 7A65     		str	r2, [r7, #84]
 445:fips202.c     ****         for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 5084              		.loc 1 445 11
 5085 01ee D7E91601 		ldrd	r0, [r7, #88]
 5086 01f2 8446     		mov	ip, r0
 5087 01f4 D7E91423 		ldrd	r2, [r7, #80]
 5088 01f8 9646     		mov	lr, r2
 5089 01fa F445     		cmp	ip, lr
 5090 01fc 71EB0303 		sbcs	r3, r1, r3
 5091 0200 BFF40BAF 		bcs	.L42
 456:fips202.c     ****     }
 457:fips202.c     **** 
 458:fips202.c     ****     for (i = 0; i < mlen; i++) {
 5092              		.loc 1 458 12
 5093 0204 0023     		movs	r3, #0
 5094 0206 C7F8BC30 		str	r3, [r7, #188]
 5095              		.loc 1 458 5
 5096 020a 8FE0     		b	.L43
 5097              	.L44:
 459:fips202.c     ****         s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 5098              		.loc 1 459 21 discriminator 3
 5099 020c D7F8B430 		ldr	r3, [r7, #180]
 5100 0210 C833     		adds	r3, r3, #200
 5101 0212 D3E90023 		ldrd	r2, [r3]
 5102              		.loc 1 459 37 discriminator 3
 5103 0216 D7F8BC10 		ldr	r1, [r7, #188]
 5104 021a 0020     		movs	r0, #0
 5105 021c B964     		str	r1, [r7, #72]
 5106 021e F864     		str	r0, [r7, #76]
 5107 0220 D7E91245 		ldrd	r4, [r7, #72]
 5108 0224 2146     		mov	r1, r4
 5109 0226 5118     		adds	r1, r2, r1
 5110 0228 3964     		str	r1, [r7, #64]
 5111 022a 2946     		mov	r1, r5
 5112 022c 4B41     		adcs	r3, r3, r1
 5113 022e 7B64     		str	r3, [r7, #68]
 5114 0230 4FF00002 		mov	r2, #0
 5115 0234 4FF00003 		mov	r3, #0
 5116 0238 D7E91045 		ldrd	r4, [r7, #64]
 5117 023c 2146     		mov	r1, r4
 5118 023e CA08     		lsrs	r2, r1, #3
 5119 0240 2046     		mov	r0, r4
 5120 0242 2946     		mov	r1, r5
 5121 0244 0C46     		mov	r4, r1
 5122 0246 42EA4472 		orr	r2, r2, r4, lsl #29
 5123 024a CB08     		lsrs	r3, r1, #3
 5124 024c 1346     		mov	r3, r2
 5125 024e DA00     		lsls	r2, r3, #3
 5126 0250 D7F8B430 		ldr	r3, [r7, #180]
 5127 0254 1344     		add	r3, r3, r2
 5128 0256 D3E90045 		ldrd	r4, [r3]
 5129              		.loc 1 459 51 discriminator 3
 5130 025a D7F8AC20 		ldr	r2, [r7, #172]
 5131 025e D7F8BC30 		ldr	r3, [r7, #188]
 5132 0262 1344     		add	r3, r3, r2
 5133 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5134              		.loc 1 459 40 discriminator 3
 5135 0266 DBB2     		uxtb	r3, r3
 5136 0268 0022     		movs	r2, #0
 5137 026a BB63     		str	r3, [r7, #56]
 5138 026c FA63     		str	r2, [r7, #60]
 5139              		.loc 1 459 70 discriminator 3
 5140 026e D7F8B430 		ldr	r3, [r7, #180]
 5141 0272 C833     		adds	r3, r3, #200
 5142 0274 D3E90023 		ldrd	r2, [r3]
 5143              		.loc 1 459 75 discriminator 3
 5144 0278 D7F8BC10 		ldr	r1, [r7, #188]
 5145 027c 0020     		movs	r0, #0
 5146 027e 3963     		str	r1, [r7, #48]
 5147 0280 7863     		str	r0, [r7, #52]
 5148 0282 D7E90C89 		ldrd	r8, [r7, #48]
 5149 0286 4146     		mov	r1, r8
 5150 0288 5118     		adds	r1, r2, r1
 5151 028a B962     		str	r1, [r7, #40]
 5152 028c 4946     		mov	r1, r9
 5153 028e 4B41     		adcs	r3, r3, r1
 5154 0290 FB62     		str	r3, [r7, #44]
 5155              		.loc 1 459 55 discriminator 3
 5156 0292 BB6A     		ldr	r3, [r7, #40]
 5157 0294 03F00703 		and	r3, r3, #7
 5158 0298 D900     		lsls	r1, r3, #3
 5159 029a A1F12003 		sub	r3, r1, #32
 5160 029e C1F12002 		rsb	r2, r1, #32
 5161 02a2 D7E90E89 		ldrd	r8, [r7, #56]
 5162 02a6 4846     		mov	r0, r9
 5163 02a8 00FA01FB 		lsl	fp, r0, r1
 5164 02ac 4046     		mov	r0, r8
 5165 02ae 00FA03F3 		lsl	r3, r0, r3
 5166 02b2 4BEA030B 		orr	fp, fp, r3
 5167 02b6 4346     		mov	r3, r8
 5168 02b8 23FA02F2 		lsr	r2, r3, r2
 5169 02bc 4BEA020B 		orr	fp, fp, r2
 5170 02c0 4346     		mov	r3, r8
 5171 02c2 03FA01FA 		lsl	r10, r3, r1
 5172              		.loc 1 459 21 discriminator 3
 5173 02c6 D7F8B430 		ldr	r3, [r7, #180]
 5174 02ca C833     		adds	r3, r3, #200
 5175 02cc D3E90023 		ldrd	r2, [r3]
 5176              		.loc 1 459 37 discriminator 3
 5177 02d0 D7F8BC10 		ldr	r1, [r7, #188]
 5178 02d4 0020     		movs	r0, #0
 5179 02d6 3962     		str	r1, [r7, #32]
 5180 02d8 7862     		str	r0, [r7, #36]
 5181 02da D7E90889 		ldrd	r8, [r7, #32]
 5182 02de 4146     		mov	r1, r8
 5183 02e0 5118     		adds	r1, r2, r1
 5184 02e2 B961     		str	r1, [r7, #24]
 5185 02e4 4946     		mov	r1, r9
 5186 02e6 4B41     		adcs	r3, r3, r1
 5187 02e8 FB61     		str	r3, [r7, #28]
 5188 02ea 4FF00002 		mov	r2, #0
 5189 02ee 4FF00003 		mov	r3, #0
 5190 02f2 D7E90689 		ldrd	r8, [r7, #24]
 5191 02f6 4146     		mov	r1, r8
 5192 02f8 CA08     		lsrs	r2, r1, #3
 5193 02fa CC46     		mov	ip, r9
 5194 02fc 42EA4C72 		orr	r2, r2, ip, lsl #29
 5195 0300 4946     		mov	r1, r9
 5196 0302 CB08     		lsrs	r3, r1, #3
 5197 0304 1346     		mov	r3, r2
 5198 0306 DA00     		lsls	r2, r3, #3
 5199 0308 D7F8B430 		ldr	r3, [r7, #180]
 5200 030c 1344     		add	r3, r3, r2
 5201 030e 84EA0A02 		eor	r2, r4, r10
 5202 0312 3A61     		str	r2, [r7, #16]
 5203 0314 85EA0B02 		eor	r2, r5, fp
 5204 0318 7A61     		str	r2, [r7, #20]
 5205 031a D7E90412 		ldrd	r1, [r7, #16]
 5206 031e C3E90012 		strd	r1, [r3]
 458:fips202.c     ****         s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 5207              		.loc 1 458 28 discriminator 3
 5208 0322 D7F8BC30 		ldr	r3, [r7, #188]
 5209 0326 0133     		adds	r3, r3, #1
 5210 0328 C7F8BC30 		str	r3, [r7, #188]
 5211              	.L43:
 458:fips202.c     ****         s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 5212              		.loc 1 458 5 discriminator 1
 5213 032c D7F8BC20 		ldr	r2, [r7, #188]
 5214 0330 D7F8A830 		ldr	r3, [r7, #168]
 5215 0334 9A42     		cmp	r2, r3
 5216 0336 FFF469AF 		bcc	.L44
 460:fips202.c     ****     }
 461:fips202.c     ****     s_inc[25] += mlen;
 5217              		.loc 1 461 15
 5218 033a D7F8B430 		ldr	r3, [r7, #180]
 5219 033e C833     		adds	r3, r3, #200
 5220 0340 D3E90023 		ldrd	r2, [r3]
 5221 0344 D7F8A810 		ldr	r1, [r7, #168]
 5222 0348 0020     		movs	r0, #0
 5223 034a B960     		str	r1, [r7, #8]
 5224 034c F860     		str	r0, [r7, #12]
 5225 034e D7F8B410 		ldr	r1, [r7, #180]
 5226 0352 C831     		adds	r1, r1, #200
 5227 0354 D7E90245 		ldrd	r4, [r7, #8]
 5228 0358 2046     		mov	r0, r4
 5229 035a 1018     		adds	r0, r2, r0
 5230 035c 3860     		str	r0, [r7]
 5231 035e 2846     		mov	r0, r5
 5232 0360 43EB0000 		adc	r0, r3, r0
 5233 0364 7860     		str	r0, [r7, #4]
 5234 0366 D7E90034 		ldrd	r3, [r7]
 5235 036a C1E90034 		strd	r3, [r1]
 462:fips202.c     **** }
 5236              		.loc 1 462 1
 5237 036e 00BF     		nop
 5238 0370 C037     		adds	r7, r7, #192
 5239              	.LCFI37:
 5240              		.cfi_def_cfa_offset 32
 5241 0372 BD46     		mov	sp, r7
 5242              	.LCFI38:
 5243              		.cfi_def_cfa_register 13
 5244              		@ sp needed
 5245 0374 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 5246              		.cfi_endproc
 5247              	.LFE6:
 5249              		.section	.text.keccak_inc_finalize,"ax",%progbits
 5250              		.align	1
 5251              		.syntax unified
 5252              		.thumb
 5253              		.thumb_func
 5254              		.fpu softvfp
 5256              	keccak_inc_finalize:
 5257              	.LFB7:
 463:fips202.c     **** 
 464:fips202.c     **** /*************************************************
 465:fips202.c     ****  * Name:        keccak_inc_finalize
 466:fips202.c     ****  *
 467:fips202.c     ****  * Description: Finalizes Keccak absorb phase, prepares for squeezing
 468:fips202.c     ****  *
 469:fips202.c     ****  * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 470:fips202.c     ****  *                First 25 values represent Keccak state.
 471:fips202.c     ****  *                26th value represents either the number of absorbed bytes
 472:fips202.c     ****  *                that have not been permuted, or not-yet-squeezed bytes.
 473:fips202.c     ****  *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 474:fips202.c     ****  *              - uint8_t p: domain-separation byte for different
 475:fips202.c     ****  *                                 Keccak-derived functions
 476:fips202.c     ****  **************************************************/
 477:fips202.c     **** static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 5258              		.loc 1 477 73
 5259              		.cfi_startproc
 5260              		@ args = 0, pretend = 0, frame = 40
 5261              		@ frame_needed = 1, uses_anonymous_args = 0
 5262              		@ link register save eliminated.
 5263 0000 2DE9F00F 		push	{r4, r5, r6, r7, r8, r9, r10, fp}
 5264              	.LCFI39:
 5265              		.cfi_def_cfa_offset 32
 5266              		.cfi_offset 4, -32
 5267              		.cfi_offset 5, -28
 5268              		.cfi_offset 6, -24
 5269              		.cfi_offset 7, -20
 5270              		.cfi_offset 8, -16
 5271              		.cfi_offset 9, -12
 5272              		.cfi_offset 10, -8
 5273              		.cfi_offset 11, -4
 5274 0004 8AB0     		sub	sp, sp, #40
 5275              	.LCFI40:
 5276              		.cfi_def_cfa_offset 72
 5277 0006 00AF     		add	r7, sp, #0
 5278              	.LCFI41:
 5279              		.cfi_def_cfa_register 7
 5280 0008 7862     		str	r0, [r7, #36]
 5281 000a 3962     		str	r1, [r7, #32]
 5282 000c 1346     		mov	r3, r2
 5283 000e FB77     		strb	r3, [r7, #31]
 478:fips202.c     ****     /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
 479:fips202.c     ****        so we can always use one more byte for p in the current state. */
 480:fips202.c     ****     s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
 5284              		.loc 1 480 16
 5285 0010 7B6A     		ldr	r3, [r7, #36]
 5286 0012 C833     		adds	r3, r3, #200
 5287 0014 D3E90001 		ldrd	r0, [r3]
 5288              		.loc 1 480 27
 5289 0018 4FF00002 		mov	r2, #0
 5290 001c 4FF00003 		mov	r3, #0
 5291 0020 C208     		lsrs	r2, r0, #3
 5292 0022 42EA4172 		orr	r2, r2, r1, lsl #29
 5293 0026 CB08     		lsrs	r3, r1, #3
 5294 0028 1346     		mov	r3, r2
 5295 002a DB00     		lsls	r3, r3, #3
 5296 002c 7A6A     		ldr	r2, [r7, #36]
 5297 002e 1344     		add	r3, r3, r2
 5298 0030 D3E90012 		ldrd	r1, [r3]
 5299 0034 C7E90012 		strd	r1, [r7]
 5300              		.loc 1 480 30
 5301 0038 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5302 003a 0022     		movs	r2, #0
 5303 003c 9A46     		mov	r10, r3
 5304 003e 9346     		mov	fp, r2
 5305              		.loc 1 480 56
 5306 0040 7B6A     		ldr	r3, [r7, #36]
 5307 0042 C833     		adds	r3, r3, #200
 5308 0044 D3E90023 		ldrd	r2, [r3]
 5309              		.loc 1 480 42
 5310 0048 1346     		mov	r3, r2
 5311 004a 03F00703 		and	r3, r3, #7
 5312 004e DA00     		lsls	r2, r3, #3
 5313 0050 A2F12001 		sub	r1, r2, #32
 5314 0054 C2F12003 		rsb	r3, r2, #32
 5315 0058 0BFA02F5 		lsl	r5, fp, r2
 5316 005c 0AFA01F1 		lsl	r1, r10, r1
 5317 0060 0D43     		orrs	r5, r5, r1
 5318 0062 2AFA03F3 		lsr	r3, r10, r3
 5319 0066 1D43     		orrs	r5, r5, r3
 5320 0068 0AFA02F4 		lsl	r4, r10, r2
 5321              		.loc 1 480 16
 5322 006c 7B6A     		ldr	r3, [r7, #36]
 5323 006e C833     		adds	r3, r3, #200
 5324 0070 D3E90001 		ldrd	r0, [r3]
 5325              		.loc 1 480 27
 5326 0074 4FF00002 		mov	r2, #0
 5327 0078 4FF00003 		mov	r3, #0
 5328 007c C208     		lsrs	r2, r0, #3
 5329 007e 42EA4172 		orr	r2, r2, r1, lsl #29
 5330 0082 CB08     		lsrs	r3, r1, #3
 5331 0084 1346     		mov	r3, r2
 5332 0086 DB00     		lsls	r3, r3, #3
 5333 0088 7A6A     		ldr	r2, [r7, #36]
 5334 008a 1344     		add	r3, r3, r2
 5335 008c D7E90012 		ldrd	r1, [r7]
 5336 0090 0846     		mov	r0, r1
 5337 0092 6040     		eors	r0, r0, r4
 5338 0094 3861     		str	r0, [r7, #16]
 5339 0096 6A40     		eors	r2, r2, r5
 5340 0098 7A61     		str	r2, [r7, #20]
 5341 009a D7E90412 		ldrd	r1, [r7, #16]
 5342 009e C3E90012 		strd	r1, [r3]
 481:fips202.c     ****     s_inc[(r - 1) >> 3] ^= (uint64_t)128 << (8 * ((r - 1) & 0x07));
 5343              		.loc 1 481 25
 5344 00a2 3B6A     		ldr	r3, [r7, #32]
 5345 00a4 013B     		subs	r3, r3, #1
 5346 00a6 DB08     		lsrs	r3, r3, #3
 5347 00a8 DB00     		lsls	r3, r3, #3
 5348 00aa 7A6A     		ldr	r2, [r7, #36]
 5349 00ac 1344     		add	r3, r3, r2
 5350 00ae D3E90045 		ldrd	r4, [r3]
 5351              		.loc 1 481 54
 5352 00b2 3B6A     		ldr	r3, [r7, #32]
 5353 00b4 013B     		subs	r3, r3, #1
 5354              		.loc 1 481 59
 5355 00b6 03F00703 		and	r3, r3, #7
 5356              		.loc 1 481 48
 5357 00ba D900     		lsls	r1, r3, #3
 5358              		.loc 1 481 42
 5359 00bc 4FF08002 		mov	r2, #128
 5360 00c0 4FF00003 		mov	r3, #0
 5361 00c4 A1F12006 		sub	r6, r1, #32
 5362 00c8 C1F12000 		rsb	r0, r1, #32
 5363 00cc 03FA01F9 		lsl	r9, r3, r1
 5364 00d0 02FA06F6 		lsl	r6, r2, r6
 5365 00d4 49EA0609 		orr	r9, r9, r6
 5366 00d8 22FA00F0 		lsr	r0, r2, r0
 5367 00dc 49EA0009 		orr	r9, r9, r0
 5368 00e0 02FA01F8 		lsl	r8, r2, r1
 5369              		.loc 1 481 25
 5370 00e4 3B6A     		ldr	r3, [r7, #32]
 5371 00e6 013B     		subs	r3, r3, #1
 5372 00e8 DB08     		lsrs	r3, r3, #3
 5373 00ea DB00     		lsls	r3, r3, #3
 5374 00ec 7A6A     		ldr	r2, [r7, #36]
 5375 00ee 1344     		add	r3, r3, r2
 5376 00f0 84EA0802 		eor	r2, r4, r8
 5377 00f4 BA60     		str	r2, [r7, #8]
 5378 00f6 85EA0902 		eor	r2, r5, r9
 5379 00fa FA60     		str	r2, [r7, #12]
 5380 00fc D7E90212 		ldrd	r1, [r7, #8]
 5381 0100 C3E90012 		strd	r1, [r3]
 482:fips202.c     ****     s_inc[25] = 0;
 5382              		.loc 1 482 10
 5383 0104 7B6A     		ldr	r3, [r7, #36]
 5384 0106 03F1C801 		add	r1, r3, #200
 5385              		.loc 1 482 15
 5386 010a 4FF00002 		mov	r2, #0
 5387 010e 4FF00003 		mov	r3, #0
 5388 0112 C1E90023 		strd	r2, [r1]
 483:fips202.c     **** }
 5389              		.loc 1 483 1
 5390 0116 00BF     		nop
 5391 0118 2837     		adds	r7, r7, #40
 5392              	.LCFI42:
 5393              		.cfi_def_cfa_offset 32
 5394 011a BD46     		mov	sp, r7
 5395              	.LCFI43:
 5396              		.cfi_def_cfa_register 13
 5397              		@ sp needed
 5398 011c BDE8F00F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp}
 5399              	.LCFI44:
 5400              		.cfi_restore 11
 5401              		.cfi_restore 10
 5402              		.cfi_restore 9
 5403              		.cfi_restore 8
 5404              		.cfi_restore 7
 5405              		.cfi_restore 6
 5406              		.cfi_restore 5
 5407              		.cfi_restore 4
 5408              		.cfi_def_cfa_offset 0
 5409 0120 7047     		bx	lr
 5410              		.cfi_endproc
 5411              	.LFE7:
 5413              		.section	.text.keccak_inc_squeeze,"ax",%progbits
 5414              		.align	1
 5415              		.syntax unified
 5416              		.thumb
 5417              		.thumb_func
 5418              		.fpu softvfp
 5420              	keccak_inc_squeeze:
 5421              	.LFB8:
 484:fips202.c     **** 
 485:fips202.c     **** /*************************************************
 486:fips202.c     ****  * Name:        keccak_inc_squeeze
 487:fips202.c     ****  *
 488:fips202.c     ****  * Description: Incremental Keccak squeeze; can be called on byte-level
 489:fips202.c     ****  *
 490:fips202.c     ****  * Arguments:   - uint8_t *h: pointer to output bytes
 491:fips202.c     ****  *              - size_t outlen: number of bytes to be squeezed
 492:fips202.c     ****  *              - uint64_t *s_inc: pointer to input/output incremental state
 493:fips202.c     ****  *                First 25 values represent Keccak state.
 494:fips202.c     ****  *                26th value represents either the number of absorbed bytes
 495:fips202.c     ****  *                that have not been permuted, or not-yet-squeezed bytes.
 496:fips202.c     ****  *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 497:fips202.c     ****  **************************************************/
 498:fips202.c     **** static void keccak_inc_squeeze(uint8_t *h, size_t outlen,
 499:fips202.c     ****                                uint64_t *s_inc, uint32_t r) {
 5422              		.loc 1 499 61
 5423              		.cfi_startproc
 5424              		@ args = 0, pretend = 0, frame = 120
 5425              		@ frame_needed = 1, uses_anonymous_args = 0
 5426 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 5427              	.LCFI45:
 5428              		.cfi_def_cfa_offset 32
 5429              		.cfi_offset 4, -32
 5430              		.cfi_offset 5, -28
 5431              		.cfi_offset 7, -24
 5432              		.cfi_offset 8, -20
 5433              		.cfi_offset 9, -16
 5434              		.cfi_offset 10, -12
 5435              		.cfi_offset 11, -8
 5436              		.cfi_offset 14, -4
 5437 0004 9EB0     		sub	sp, sp, #120
 5438              	.LCFI46:
 5439              		.cfi_def_cfa_offset 152
 5440 0006 00AF     		add	r7, sp, #0
 5441              	.LCFI47:
 5442              		.cfi_def_cfa_register 7
 5443 0008 F866     		str	r0, [r7, #108]
 5444 000a B966     		str	r1, [r7, #104]
 5445 000c 7A66     		str	r2, [r7, #100]
 5446 000e 3B66     		str	r3, [r7, #96]
 500:fips202.c     ****     size_t i;
 501:fips202.c     **** 
 502:fips202.c     ****     /* First consume any bytes we still have sitting around */
 503:fips202.c     ****     for (i = 0; i < outlen && i < s_inc[25]; i++) {
 5447              		.loc 1 503 12
 5448 0010 0023     		movs	r3, #0
 5449 0012 7B67     		str	r3, [r7, #116]
 5450              		.loc 1 503 5
 5451 0014 70E0     		b	.L47
 5452              	.L49:
 504:fips202.c     ****         /* There are s_inc[25] bytes left, so r - s_inc[25] is the first
 505:fips202.c     ****            available byte. We consume from there, i.e., up to r. */
 506:fips202.c     ****         h[i] = (uint8_t)(s_inc[(r - s_inc[25] + i) >> 3] >> (8 * ((r - s_inc[25] + i) & 0x07)));
 5453              		.loc 1 506 35 discriminator 4
 5454 0016 3B6E     		ldr	r3, [r7, #96]
 5455 0018 0022     		movs	r2, #0
 5456 001a 3B65     		str	r3, [r7, #80]
 5457 001c 7A65     		str	r2, [r7, #84]
 5458              		.loc 1 506 42 discriminator 4
 5459 001e 7B6E     		ldr	r3, [r7, #100]
 5460 0020 C833     		adds	r3, r3, #200
 5461 0022 D3E90023 		ldrd	r2, [r3]
 5462              		.loc 1 506 35 discriminator 4
 5463 0026 D7E91401 		ldrd	r0, [r7, #80]
 5464 002a 0446     		mov	r4, r0
 5465 002c A41A     		subs	r4, r4, r2
 5466 002e BC64     		str	r4, [r7, #72]
 5467 0030 61EB0303 		sbc	r3, r1, r3
 5468 0034 FB64     		str	r3, [r7, #76]
 5469              		.loc 1 506 47 discriminator 4
 5470 0036 7B6F     		ldr	r3, [r7, #116]
 5471 0038 0022     		movs	r2, #0
 5472 003a 3B64     		str	r3, [r7, #64]
 5473 003c 7A64     		str	r2, [r7, #68]
 5474 003e D7E91245 		ldrd	r4, [r7, #72]
 5475 0042 2346     		mov	r3, r4
 5476 0044 D7E91001 		ldrd	r0, [r7, #64]
 5477 0048 0246     		mov	r2, r0
 5478 004a 9B18     		adds	r3, r3, r2
 5479 004c BB63     		str	r3, [r7, #56]
 5480 004e 2B46     		mov	r3, r5
 5481 0050 0A46     		mov	r2, r1
 5482 0052 5341     		adcs	r3, r3, r2
 5483 0054 FB63     		str	r3, [r7, #60]
 5484              		.loc 1 506 52 discriminator 4
 5485 0056 4FF00002 		mov	r2, #0
 5486 005a 4FF00003 		mov	r3, #0
 5487 005e D7E90E45 		ldrd	r4, [r7, #56]
 5488 0062 2146     		mov	r1, r4
 5489 0064 CA08     		lsrs	r2, r1, #3
 5490 0066 2046     		mov	r0, r4
 5491 0068 2946     		mov	r1, r5
 5492 006a 0C46     		mov	r4, r1
 5493 006c 42EA4472 		orr	r2, r2, r4, lsl #29
 5494 0070 CB08     		lsrs	r3, r1, #3
 5495              		.loc 1 506 31 discriminator 4
 5496 0072 1346     		mov	r3, r2
 5497 0074 DA00     		lsls	r2, r3, #3
 5498 0076 7B6E     		ldr	r3, [r7, #100]
 5499 0078 1344     		add	r3, r3, r2
 5500 007a D3E90045 		ldrd	r4, [r3]
 5501              		.loc 1 506 70 discriminator 4
 5502 007e 3B6E     		ldr	r3, [r7, #96]
 5503 0080 0022     		movs	r2, #0
 5504 0082 3B63     		str	r3, [r7, #48]
 5505 0084 7A63     		str	r2, [r7, #52]
 5506              		.loc 1 506 77 discriminator 4
 5507 0086 7B6E     		ldr	r3, [r7, #100]
 5508 0088 C833     		adds	r3, r3, #200
 5509 008a D3E90023 		ldrd	r2, [r3]
 5510              		.loc 1 506 70 discriminator 4
 5511 008e D7E90C01 		ldrd	r0, [r7, #48]
 5512 0092 8446     		mov	ip, r0
 5513 0094 BCEB020C 		subs	ip, ip, r2
 5514 0098 C7F858C0 		str	ip, [r7, #88]
 5515 009c 61EB0303 		sbc	r3, r1, r3
 5516 00a0 FB65     		str	r3, [r7, #92]
 5517              		.loc 1 506 82 discriminator 4
 5518 00a2 7B6F     		ldr	r3, [r7, #116]
 5519 00a4 0022     		movs	r2, #0
 5520 00a6 BB62     		str	r3, [r7, #40]
 5521 00a8 FA62     		str	r2, [r7, #44]
 5522 00aa BB6D     		ldr	r3, [r7, #88]
 5523 00ac D7E90A01 		ldrd	r0, [r7, #40]
 5524 00b0 0246     		mov	r2, r0
 5525 00b2 9B18     		adds	r3, r3, r2
 5526 00b4 3B62     		str	r3, [r7, #32]
 5527 00b6 FB6D     		ldr	r3, [r7, #92]
 5528 00b8 0A46     		mov	r2, r1
 5529 00ba 5341     		adcs	r3, r3, r2
 5530 00bc 7B62     		str	r3, [r7, #36]
 5531              		.loc 1 506 58 discriminator 4
 5532 00be 3B6A     		ldr	r3, [r7, #32]
 5533 00c0 03F00703 		and	r3, r3, #7
 5534 00c4 D900     		lsls	r1, r3, #3
 5535 00c6 C1F12003 		rsb	r3, r1, #32
 5536 00ca A1F12002 		sub	r2, r1, #32
 5537 00ce 24FA01FA 		lsr	r10, r4, r1
 5538 00d2 05FA03F3 		lsl	r3, r5, r3
 5539 00d6 4AEA030A 		orr	r10, r10, r3
 5540 00da 25FA02F2 		lsr	r2, r5, r2
 5541 00de 4AEA020A 		orr	r10, r10, r2
 5542 00e2 25FA01FB 		lsr	fp, r5, r1
 5543              		.loc 1 506 10 discriminator 4
 5544 00e6 FA6E     		ldr	r2, [r7, #108]
 5545 00e8 7B6F     		ldr	r3, [r7, #116]
 5546 00ea 1A44     		add	r2, r2, r3
 5547              		.loc 1 506 16 discriminator 4
 5548 00ec 5FFA8AF3 		uxtb	r3, r10
 5549              		.loc 1 506 14 discriminator 4
 5550 00f0 1370     		strb	r3, [r2]
 503:fips202.c     ****         /* There are s_inc[25] bytes left, so r - s_inc[25] is the first
 5551              		.loc 1 503 47 discriminator 4
 5552 00f2 7B6F     		ldr	r3, [r7, #116]
 5553 00f4 0133     		adds	r3, r3, #1
 5554 00f6 7B67     		str	r3, [r7, #116]
 5555              	.L47:
 503:fips202.c     ****         /* There are s_inc[25] bytes left, so r - s_inc[25] is the first
 5556              		.loc 1 503 5 discriminator 1
 5557 00f8 7A6F     		ldr	r2, [r7, #116]
 5558 00fa BB6E     		ldr	r3, [r7, #104]
 5559 00fc 9A42     		cmp	r2, r3
 5560 00fe 0FD2     		bcs	.L48
 503:fips202.c     ****         /* There are s_inc[25] bytes left, so r - s_inc[25] is the first
 5561              		.loc 1 503 33 discriminator 3
 5562 0100 7B6F     		ldr	r3, [r7, #116]
 5563 0102 0022     		movs	r2, #0
 5564 0104 BB61     		str	r3, [r7, #24]
 5565 0106 FA61     		str	r2, [r7, #28]
 503:fips202.c     ****         /* There are s_inc[25] bytes left, so r - s_inc[25] is the first
 5566              		.loc 1 503 40 discriminator 3
 5567 0108 7B6E     		ldr	r3, [r7, #100]
 5568 010a C833     		adds	r3, r3, #200
 5569 010c D3E90023 		ldrd	r2, [r3]
 503:fips202.c     ****         /* There are s_inc[25] bytes left, so r - s_inc[25] is the first
 5570              		.loc 1 503 28 discriminator 3
 5571 0110 D7E90601 		ldrd	r0, [r7, #24]
 5572 0114 0446     		mov	r4, r0
 5573 0116 9442     		cmp	r4, r2
 5574 0118 71EB0303 		sbcs	r3, r1, r3
 5575 011c FFF47BAF 		bcc	.L49
 5576              	.L48:
 507:fips202.c     ****     }
 508:fips202.c     ****     h += i;
 5577              		.loc 1 508 7
 5578 0120 FA6E     		ldr	r2, [r7, #108]
 5579 0122 7B6F     		ldr	r3, [r7, #116]
 5580 0124 1344     		add	r3, r3, r2
 5581 0126 FB66     		str	r3, [r7, #108]
 509:fips202.c     ****     outlen -= i;
 5582              		.loc 1 509 12
 5583 0128 BA6E     		ldr	r2, [r7, #104]
 5584 012a 7B6F     		ldr	r3, [r7, #116]
 5585 012c D31A     		subs	r3, r2, r3
 5586 012e BB66     		str	r3, [r7, #104]
 510:fips202.c     ****     s_inc[25] -= i;
 5587              		.loc 1 510 15
 5588 0130 7B6E     		ldr	r3, [r7, #100]
 5589 0132 C833     		adds	r3, r3, #200
 5590 0134 D3E90023 		ldrd	r2, [r3]
 5591 0138 796F     		ldr	r1, [r7, #116]
 5592 013a 0020     		movs	r0, #0
 5593 013c 3961     		str	r1, [r7, #16]
 5594 013e 7861     		str	r0, [r7, #20]
 5595 0140 796E     		ldr	r1, [r7, #100]
 5596 0142 C831     		adds	r1, r1, #200
 5597 0144 D7E90445 		ldrd	r4, [r7, #16]
 5598 0148 2046     		mov	r0, r4
 5599 014a 101A     		subs	r0, r2, r0
 5600 014c B860     		str	r0, [r7, #8]
 5601 014e 2846     		mov	r0, r5
 5602 0150 63EB0003 		sbc	r3, r3, r0
 5603 0154 FB60     		str	r3, [r7, #12]
 5604 0156 D7E90234 		ldrd	r3, [r7, #8]
 5605 015a C1E90034 		strd	r3, [r1]
 511:fips202.c     **** 
 512:fips202.c     ****     /* Then squeeze the remaining necessary blocks */
 513:fips202.c     ****     while (outlen > 0) {
 5606              		.loc 1 513 11
 5607 015e 45E0     		b	.L50
 5608              	.L54:
 514:fips202.c     ****         KeccakF1600_StatePermute(s_inc);
 5609              		.loc 1 514 9
 5610 0160 786E     		ldr	r0, [r7, #100]
 5611 0162 FFF7FEFF 		bl	KeccakF1600_StatePermute
 515:fips202.c     **** 
 516:fips202.c     ****         for (i = 0; i < outlen && i < r; i++) {
 5612              		.loc 1 516 16
 5613 0166 0023     		movs	r3, #0
 5614 0168 7B67     		str	r3, [r7, #116]
 5615              		.loc 1 516 9
 5616 016a 23E0     		b	.L51
 5617              	.L53:
 517:fips202.c     ****             h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
 5618              		.loc 1 517 38 discriminator 4
 5619 016c 7B6F     		ldr	r3, [r7, #116]
 5620 016e DB08     		lsrs	r3, r3, #3
 5621              		.loc 1 517 35 discriminator 4
 5622 0170 DB00     		lsls	r3, r3, #3
 5623 0172 7A6E     		ldr	r2, [r7, #100]
 5624 0174 1344     		add	r3, r3, r2
 5625 0176 D3E90023 		ldrd	r2, [r3]
 5626              		.loc 1 517 55 discriminator 4
 5627 017a 796F     		ldr	r1, [r7, #116]
 5628 017c 01F00701 		and	r1, r1, #7
 5629              		.loc 1 517 50 discriminator 4
 5630 0180 C900     		lsls	r1, r1, #3
 5631              		.loc 1 517 44 discriminator 4
 5632 0182 C1F12004 		rsb	r4, r1, #32
 5633 0186 A1F12000 		sub	r0, r1, #32
 5634 018a 22FA01F8 		lsr	r8, r2, r1
 5635 018e 03FA04F4 		lsl	r4, r3, r4
 5636 0192 48EA0408 		orr	r8, r8, r4
 5637 0196 23FA00F0 		lsr	r0, r3, r0
 5638 019a 48EA0008 		orr	r8, r8, r0
 5639 019e 23FA01F9 		lsr	r9, r3, r1
 5640              		.loc 1 517 14 discriminator 4
 5641 01a2 FA6E     		ldr	r2, [r7, #108]
 5642 01a4 7B6F     		ldr	r3, [r7, #116]
 5643 01a6 1344     		add	r3, r3, r2
 5644              		.loc 1 517 20 discriminator 4
 5645 01a8 5FFA88F2 		uxtb	r2, r8
 5646              		.loc 1 517 18 discriminator 4
 5647 01ac 1A70     		strb	r2, [r3]
 516:fips202.c     ****             h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
 5648              		.loc 1 516 43 discriminator 4
 5649 01ae 7B6F     		ldr	r3, [r7, #116]
 5650 01b0 0133     		adds	r3, r3, #1
 5651 01b2 7B67     		str	r3, [r7, #116]
 5652              	.L51:
 516:fips202.c     ****             h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
 5653              		.loc 1 516 9 discriminator 1
 5654 01b4 7A6F     		ldr	r2, [r7, #116]
 5655 01b6 BB6E     		ldr	r3, [r7, #104]
 5656 01b8 9A42     		cmp	r2, r3
 5657 01ba 03D2     		bcs	.L52
 516:fips202.c     ****             h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
 5658              		.loc 1 516 32 discriminator 3
 5659 01bc 7A6F     		ldr	r2, [r7, #116]
 5660 01be 3B6E     		ldr	r3, [r7, #96]
 5661 01c0 9A42     		cmp	r2, r3
 5662 01c2 D3D3     		bcc	.L53
 5663              	.L52:
 518:fips202.c     ****         }
 519:fips202.c     ****         h += i;
 5664              		.loc 1 519 11
 5665 01c4 FA6E     		ldr	r2, [r7, #108]
 5666 01c6 7B6F     		ldr	r3, [r7, #116]
 5667 01c8 1344     		add	r3, r3, r2
 5668 01ca FB66     		str	r3, [r7, #108]
 520:fips202.c     ****         outlen -= i;
 5669              		.loc 1 520 16
 5670 01cc BA6E     		ldr	r2, [r7, #104]
 5671 01ce 7B6F     		ldr	r3, [r7, #116]
 5672 01d0 D31A     		subs	r3, r2, r3
 5673 01d2 BB66     		str	r3, [r7, #104]
 521:fips202.c     ****         s_inc[25] = r - i;
 5674              		.loc 1 521 23
 5675 01d4 3A6E     		ldr	r2, [r7, #96]
 5676 01d6 7B6F     		ldr	r3, [r7, #116]
 5677 01d8 D21A     		subs	r2, r2, r3
 5678              		.loc 1 521 14
 5679 01da 7B6E     		ldr	r3, [r7, #100]
 5680 01dc C833     		adds	r3, r3, #200
 5681              		.loc 1 521 23
 5682 01de 0021     		movs	r1, #0
 5683 01e0 3A60     		str	r2, [r7]
 5684 01e2 7960     		str	r1, [r7, #4]
 5685              		.loc 1 521 19
 5686 01e4 D7E90012 		ldrd	r1, [r7]
 5687 01e8 C3E90012 		strd	r1, [r3]
 5688              	.L50:
 513:fips202.c     ****         KeccakF1600_StatePermute(s_inc);
 5689              		.loc 1 513 11
 5690 01ec BB6E     		ldr	r3, [r7, #104]
 5691 01ee 002B     		cmp	r3, #0
 5692 01f0 B6D1     		bne	.L54
 522:fips202.c     ****     }
 523:fips202.c     **** }
 5693              		.loc 1 523 1
 5694 01f2 00BF     		nop
 5695 01f4 00BF     		nop
 5696 01f6 7837     		adds	r7, r7, #120
 5697              	.LCFI48:
 5698              		.cfi_def_cfa_offset 32
 5699 01f8 BD46     		mov	sp, r7
 5700              	.LCFI49:
 5701              		.cfi_def_cfa_register 13
 5702              		@ sp needed
 5703 01fa BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 5704              		.cfi_endproc
 5705              	.LFE8:
 5707              		.section	.text.shake128_inc_init,"ax",%progbits
 5708              		.align	1
 5709              		.global	shake128_inc_init
 5710              		.syntax unified
 5711              		.thumb
 5712              		.thumb_func
 5713              		.fpu softvfp
 5715              	shake128_inc_init:
 5716              	.LFB9:
 524:fips202.c     **** 
 525:fips202.c     **** void shake128_inc_init(shake128incctx *state) {
 5717              		.loc 1 525 47
 5718              		.cfi_startproc
 5719              		@ args = 0, pretend = 0, frame = 8
 5720              		@ frame_needed = 1, uses_anonymous_args = 0
 5721 0000 80B5     		push	{r7, lr}
 5722              	.LCFI50:
 5723              		.cfi_def_cfa_offset 8
 5724              		.cfi_offset 7, -8
 5725              		.cfi_offset 14, -4
 5726 0002 82B0     		sub	sp, sp, #8
 5727              	.LCFI51:
 5728              		.cfi_def_cfa_offset 16
 5729 0004 00AF     		add	r7, sp, #0
 5730              	.LCFI52:
 5731              		.cfi_def_cfa_register 7
 5732 0006 7860     		str	r0, [r7, #4]
 526:fips202.c     ****     state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 5733              		.loc 1 526 18
 5734 0008 D020     		movs	r0, #208
 5735 000a FFF7FEFF 		bl	malloc
 5736 000e 0346     		mov	r3, r0
 5737 0010 1A46     		mov	r2, r3
 5738              		.loc 1 526 16
 5739 0012 7B68     		ldr	r3, [r7, #4]
 5740 0014 1A60     		str	r2, [r3]
 527:fips202.c     ****     if (state->ctx == NULL) {
 5741              		.loc 1 527 14
 5742 0016 7B68     		ldr	r3, [r7, #4]
 5743 0018 1B68     		ldr	r3, [r3]
 5744              		.loc 1 527 8
 5745 001a 002B     		cmp	r3, #0
 5746 001c 02D1     		bne	.L56
 528:fips202.c     ****         exit(111);
 5747              		.loc 1 528 9
 5748 001e 6F20     		movs	r0, #111
 5749 0020 FFF7FEFF 		bl	exit
 5750              	.L56:
 529:fips202.c     ****     }
 530:fips202.c     ****     keccak_inc_init(state->ctx);
 5751              		.loc 1 530 5
 5752 0024 7B68     		ldr	r3, [r7, #4]
 5753 0026 1B68     		ldr	r3, [r3]
 5754 0028 1846     		mov	r0, r3
 5755 002a FFF7FEFF 		bl	keccak_inc_init
 531:fips202.c     **** }
 5756              		.loc 1 531 1
 5757 002e 00BF     		nop
 5758 0030 0837     		adds	r7, r7, #8
 5759              	.LCFI53:
 5760              		.cfi_def_cfa_offset 8
 5761 0032 BD46     		mov	sp, r7
 5762              	.LCFI54:
 5763              		.cfi_def_cfa_register 13
 5764              		@ sp needed
 5765 0034 80BD     		pop	{r7, pc}
 5766              		.cfi_endproc
 5767              	.LFE9:
 5769              		.section	.text.shake128_inc_absorb,"ax",%progbits
 5770              		.align	1
 5771              		.global	shake128_inc_absorb
 5772              		.syntax unified
 5773              		.thumb
 5774              		.thumb_func
 5775              		.fpu softvfp
 5777              	shake128_inc_absorb:
 5778              	.LFB10:
 532:fips202.c     **** 
 533:fips202.c     **** void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 5779              		.loc 1 533 85
 5780              		.cfi_startproc
 5781              		@ args = 0, pretend = 0, frame = 16
 5782              		@ frame_needed = 1, uses_anonymous_args = 0
 5783 0000 80B5     		push	{r7, lr}
 5784              	.LCFI55:
 5785              		.cfi_def_cfa_offset 8
 5786              		.cfi_offset 7, -8
 5787              		.cfi_offset 14, -4
 5788 0002 84B0     		sub	sp, sp, #16
 5789              	.LCFI56:
 5790              		.cfi_def_cfa_offset 24
 5791 0004 00AF     		add	r7, sp, #0
 5792              	.LCFI57:
 5793              		.cfi_def_cfa_register 7
 5794 0006 F860     		str	r0, [r7, #12]
 5795 0008 B960     		str	r1, [r7, #8]
 5796 000a 7A60     		str	r2, [r7, #4]
 534:fips202.c     ****     keccak_inc_absorb(state->ctx, SHAKE128_RATE, input, inlen);
 5797              		.loc 1 534 5
 5798 000c FB68     		ldr	r3, [r7, #12]
 5799 000e 1868     		ldr	r0, [r3]
 5800 0010 7B68     		ldr	r3, [r7, #4]
 5801 0012 BA68     		ldr	r2, [r7, #8]
 5802 0014 A821     		movs	r1, #168
 5803 0016 FFF7FEFF 		bl	keccak_inc_absorb
 535:fips202.c     **** }
 5804              		.loc 1 535 1
 5805 001a 00BF     		nop
 5806 001c 1037     		adds	r7, r7, #16
 5807              	.LCFI58:
 5808              		.cfi_def_cfa_offset 8
 5809 001e BD46     		mov	sp, r7
 5810              	.LCFI59:
 5811              		.cfi_def_cfa_register 13
 5812              		@ sp needed
 5813 0020 80BD     		pop	{r7, pc}
 5814              		.cfi_endproc
 5815              	.LFE10:
 5817              		.section	.text.shake128_inc_finalize,"ax",%progbits
 5818              		.align	1
 5819              		.global	shake128_inc_finalize
 5820              		.syntax unified
 5821              		.thumb
 5822              		.thumb_func
 5823              		.fpu softvfp
 5825              	shake128_inc_finalize:
 5826              	.LFB11:
 536:fips202.c     **** 
 537:fips202.c     **** void shake128_inc_finalize(shake128incctx *state) {
 5827              		.loc 1 537 51
 5828              		.cfi_startproc
 5829              		@ args = 0, pretend = 0, frame = 8
 5830              		@ frame_needed = 1, uses_anonymous_args = 0
 5831 0000 80B5     		push	{r7, lr}
 5832              	.LCFI60:
 5833              		.cfi_def_cfa_offset 8
 5834              		.cfi_offset 7, -8
 5835              		.cfi_offset 14, -4
 5836 0002 82B0     		sub	sp, sp, #8
 5837              	.LCFI61:
 5838              		.cfi_def_cfa_offset 16
 5839 0004 00AF     		add	r7, sp, #0
 5840              	.LCFI62:
 5841              		.cfi_def_cfa_register 7
 5842 0006 7860     		str	r0, [r7, #4]
 538:fips202.c     ****     keccak_inc_finalize(state->ctx, SHAKE128_RATE, 0x1F);
 5843              		.loc 1 538 5
 5844 0008 7B68     		ldr	r3, [r7, #4]
 5845 000a 1B68     		ldr	r3, [r3]
 5846 000c 1F22     		movs	r2, #31
 5847 000e A821     		movs	r1, #168
 5848 0010 1846     		mov	r0, r3
 5849 0012 FFF7FEFF 		bl	keccak_inc_finalize
 539:fips202.c     **** }
 5850              		.loc 1 539 1
 5851 0016 00BF     		nop
 5852 0018 0837     		adds	r7, r7, #8
 5853              	.LCFI63:
 5854              		.cfi_def_cfa_offset 8
 5855 001a BD46     		mov	sp, r7
 5856              	.LCFI64:
 5857              		.cfi_def_cfa_register 13
 5858              		@ sp needed
 5859 001c 80BD     		pop	{r7, pc}
 5860              		.cfi_endproc
 5861              	.LFE11:
 5863              		.section	.text.shake128_inc_squeeze,"ax",%progbits
 5864              		.align	1
 5865              		.global	shake128_inc_squeeze
 5866              		.syntax unified
 5867              		.thumb
 5868              		.thumb_func
 5869              		.fpu softvfp
 5871              	shake128_inc_squeeze:
 5872              	.LFB12:
 540:fips202.c     **** 
 541:fips202.c     **** void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
 5873              		.loc 1 541 82
 5874              		.cfi_startproc
 5875              		@ args = 0, pretend = 0, frame = 16
 5876              		@ frame_needed = 1, uses_anonymous_args = 0
 5877 0000 80B5     		push	{r7, lr}
 5878              	.LCFI65:
 5879              		.cfi_def_cfa_offset 8
 5880              		.cfi_offset 7, -8
 5881              		.cfi_offset 14, -4
 5882 0002 84B0     		sub	sp, sp, #16
 5883              	.LCFI66:
 5884              		.cfi_def_cfa_offset 24
 5885 0004 00AF     		add	r7, sp, #0
 5886              	.LCFI67:
 5887              		.cfi_def_cfa_register 7
 5888 0006 F860     		str	r0, [r7, #12]
 5889 0008 B960     		str	r1, [r7, #8]
 5890 000a 7A60     		str	r2, [r7, #4]
 542:fips202.c     ****     keccak_inc_squeeze(output, outlen, state->ctx, SHAKE128_RATE);
 5891              		.loc 1 542 5
 5892 000c 7B68     		ldr	r3, [r7, #4]
 5893 000e 1A68     		ldr	r2, [r3]
 5894 0010 A823     		movs	r3, #168
 5895 0012 B968     		ldr	r1, [r7, #8]
 5896 0014 F868     		ldr	r0, [r7, #12]
 5897 0016 FFF7FEFF 		bl	keccak_inc_squeeze
 543:fips202.c     **** }
 5898              		.loc 1 543 1
 5899 001a 00BF     		nop
 5900 001c 1037     		adds	r7, r7, #16
 5901              	.LCFI68:
 5902              		.cfi_def_cfa_offset 8
 5903 001e BD46     		mov	sp, r7
 5904              	.LCFI69:
 5905              		.cfi_def_cfa_register 13
 5906              		@ sp needed
 5907 0020 80BD     		pop	{r7, pc}
 5908              		.cfi_endproc
 5909              	.LFE12:
 5911              		.section	.text.shake128_inc_ctx_clone,"ax",%progbits
 5912              		.align	1
 5913              		.global	shake128_inc_ctx_clone
 5914              		.syntax unified
 5915              		.thumb
 5916              		.thumb_func
 5917              		.fpu softvfp
 5919              	shake128_inc_ctx_clone:
 5920              	.LFB13:
 544:fips202.c     **** 
 545:fips202.c     **** void shake128_inc_ctx_clone(shake128incctx *dest, const shake128incctx *src) {
 5921              		.loc 1 545 78
 5922              		.cfi_startproc
 5923              		@ args = 0, pretend = 0, frame = 8
 5924              		@ frame_needed = 1, uses_anonymous_args = 0
 5925 0000 80B5     		push	{r7, lr}
 5926              	.LCFI70:
 5927              		.cfi_def_cfa_offset 8
 5928              		.cfi_offset 7, -8
 5929              		.cfi_offset 14, -4
 5930 0002 82B0     		sub	sp, sp, #8
 5931              	.LCFI71:
 5932              		.cfi_def_cfa_offset 16
 5933 0004 00AF     		add	r7, sp, #0
 5934              	.LCFI72:
 5935              		.cfi_def_cfa_register 7
 5936 0006 7860     		str	r0, [r7, #4]
 5937 0008 3960     		str	r1, [r7]
 546:fips202.c     ****     dest->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 5938              		.loc 1 546 17
 5939 000a D020     		movs	r0, #208
 5940 000c FFF7FEFF 		bl	malloc
 5941 0010 0346     		mov	r3, r0
 5942 0012 1A46     		mov	r2, r3
 5943              		.loc 1 546 15
 5944 0014 7B68     		ldr	r3, [r7, #4]
 5945 0016 1A60     		str	r2, [r3]
 547:fips202.c     ****     if (dest->ctx == NULL) {
 5946              		.loc 1 547 13
 5947 0018 7B68     		ldr	r3, [r7, #4]
 5948 001a 1B68     		ldr	r3, [r3]
 5949              		.loc 1 547 8
 5950 001c 002B     		cmp	r3, #0
 5951 001e 02D1     		bne	.L61
 548:fips202.c     ****         exit(111);
 5952              		.loc 1 548 9
 5953 0020 6F20     		movs	r0, #111
 5954 0022 FFF7FEFF 		bl	exit
 5955              	.L61:
 549:fips202.c     ****     }
 550:fips202.c     ****     memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
 5956              		.loc 1 550 16
 5957 0026 7B68     		ldr	r3, [r7, #4]
 5958 0028 1868     		ldr	r0, [r3]
 5959              		.loc 1 550 26
 5960 002a 3B68     		ldr	r3, [r7]
 5961 002c 1B68     		ldr	r3, [r3]
 5962              		.loc 1 550 5
 5963 002e D022     		movs	r2, #208
 5964 0030 1946     		mov	r1, r3
 5965 0032 FFF7FEFF 		bl	memcpy
 551:fips202.c     **** }
 5966              		.loc 1 551 1
 5967 0036 00BF     		nop
 5968 0038 0837     		adds	r7, r7, #8
 5969              	.LCFI73:
 5970              		.cfi_def_cfa_offset 8
 5971 003a BD46     		mov	sp, r7
 5972              	.LCFI74:
 5973              		.cfi_def_cfa_register 13
 5974              		@ sp needed
 5975 003c 80BD     		pop	{r7, pc}
 5976              		.cfi_endproc
 5977              	.LFE13:
 5979              		.section	.text.shake128_inc_ctx_release,"ax",%progbits
 5980              		.align	1
 5981              		.global	shake128_inc_ctx_release
 5982              		.syntax unified
 5983              		.thumb
 5984              		.thumb_func
 5985              		.fpu softvfp
 5987              	shake128_inc_ctx_release:
 5988              	.LFB14:
 552:fips202.c     **** 
 553:fips202.c     **** void shake128_inc_ctx_release(shake128incctx *state) {
 5989              		.loc 1 553 54
 5990              		.cfi_startproc
 5991              		@ args = 0, pretend = 0, frame = 8
 5992              		@ frame_needed = 1, uses_anonymous_args = 0
 5993 0000 80B5     		push	{r7, lr}
 5994              	.LCFI75:
 5995              		.cfi_def_cfa_offset 8
 5996              		.cfi_offset 7, -8
 5997              		.cfi_offset 14, -4
 5998 0002 82B0     		sub	sp, sp, #8
 5999              	.LCFI76:
 6000              		.cfi_def_cfa_offset 16
 6001 0004 00AF     		add	r7, sp, #0
 6002              	.LCFI77:
 6003              		.cfi_def_cfa_register 7
 6004 0006 7860     		str	r0, [r7, #4]
 554:fips202.c     ****     free(state->ctx);
 6005              		.loc 1 554 15
 6006 0008 7B68     		ldr	r3, [r7, #4]
 6007 000a 1B68     		ldr	r3, [r3]
 6008              		.loc 1 554 5
 6009 000c 1846     		mov	r0, r3
 6010 000e FFF7FEFF 		bl	free
 555:fips202.c     **** }
 6011              		.loc 1 555 1
 6012 0012 00BF     		nop
 6013 0014 0837     		adds	r7, r7, #8
 6014              	.LCFI78:
 6015              		.cfi_def_cfa_offset 8
 6016 0016 BD46     		mov	sp, r7
 6017              	.LCFI79:
 6018              		.cfi_def_cfa_register 13
 6019              		@ sp needed
 6020 0018 80BD     		pop	{r7, pc}
 6021              		.cfi_endproc
 6022              	.LFE14:
 6024              		.section	.text.shake256_inc_init,"ax",%progbits
 6025              		.align	1
 6026              		.global	shake256_inc_init
 6027              		.syntax unified
 6028              		.thumb
 6029              		.thumb_func
 6030              		.fpu softvfp
 6032              	shake256_inc_init:
 6033              	.LFB15:
 556:fips202.c     **** 
 557:fips202.c     **** void shake256_inc_init(shake256incctx *state) {
 6034              		.loc 1 557 47
 6035              		.cfi_startproc
 6036              		@ args = 0, pretend = 0, frame = 8
 6037              		@ frame_needed = 1, uses_anonymous_args = 0
 6038 0000 80B5     		push	{r7, lr}
 6039              	.LCFI80:
 6040              		.cfi_def_cfa_offset 8
 6041              		.cfi_offset 7, -8
 6042              		.cfi_offset 14, -4
 6043 0002 82B0     		sub	sp, sp, #8
 6044              	.LCFI81:
 6045              		.cfi_def_cfa_offset 16
 6046 0004 00AF     		add	r7, sp, #0
 6047              	.LCFI82:
 6048              		.cfi_def_cfa_register 7
 6049 0006 7860     		str	r0, [r7, #4]
 558:fips202.c     ****     state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 6050              		.loc 1 558 18
 6051 0008 D020     		movs	r0, #208
 6052 000a FFF7FEFF 		bl	malloc
 6053 000e 0346     		mov	r3, r0
 6054 0010 1A46     		mov	r2, r3
 6055              		.loc 1 558 16
 6056 0012 7B68     		ldr	r3, [r7, #4]
 6057 0014 1A60     		str	r2, [r3]
 559:fips202.c     ****     if (state->ctx == NULL) {
 6058              		.loc 1 559 14
 6059 0016 7B68     		ldr	r3, [r7, #4]
 6060 0018 1B68     		ldr	r3, [r3]
 6061              		.loc 1 559 8
 6062 001a 002B     		cmp	r3, #0
 6063 001c 02D1     		bne	.L64
 560:fips202.c     ****         exit(111);
 6064              		.loc 1 560 9
 6065 001e 6F20     		movs	r0, #111
 6066 0020 FFF7FEFF 		bl	exit
 6067              	.L64:
 561:fips202.c     ****     }
 562:fips202.c     ****     keccak_inc_init(state->ctx);
 6068              		.loc 1 562 5
 6069 0024 7B68     		ldr	r3, [r7, #4]
 6070 0026 1B68     		ldr	r3, [r3]
 6071 0028 1846     		mov	r0, r3
 6072 002a FFF7FEFF 		bl	keccak_inc_init
 563:fips202.c     **** }
 6073              		.loc 1 563 1
 6074 002e 00BF     		nop
 6075 0030 0837     		adds	r7, r7, #8
 6076              	.LCFI83:
 6077              		.cfi_def_cfa_offset 8
 6078 0032 BD46     		mov	sp, r7
 6079              	.LCFI84:
 6080              		.cfi_def_cfa_register 13
 6081              		@ sp needed
 6082 0034 80BD     		pop	{r7, pc}
 6083              		.cfi_endproc
 6084              	.LFE15:
 6086              		.section	.text.shake256_inc_absorb,"ax",%progbits
 6087              		.align	1
 6088              		.global	shake256_inc_absorb
 6089              		.syntax unified
 6090              		.thumb
 6091              		.thumb_func
 6092              		.fpu softvfp
 6094              	shake256_inc_absorb:
 6095              	.LFB16:
 564:fips202.c     **** 
 565:fips202.c     **** void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 6096              		.loc 1 565 85
 6097              		.cfi_startproc
 6098              		@ args = 0, pretend = 0, frame = 16
 6099              		@ frame_needed = 1, uses_anonymous_args = 0
 6100 0000 80B5     		push	{r7, lr}
 6101              	.LCFI85:
 6102              		.cfi_def_cfa_offset 8
 6103              		.cfi_offset 7, -8
 6104              		.cfi_offset 14, -4
 6105 0002 84B0     		sub	sp, sp, #16
 6106              	.LCFI86:
 6107              		.cfi_def_cfa_offset 24
 6108 0004 00AF     		add	r7, sp, #0
 6109              	.LCFI87:
 6110              		.cfi_def_cfa_register 7
 6111 0006 F860     		str	r0, [r7, #12]
 6112 0008 B960     		str	r1, [r7, #8]
 6113 000a 7A60     		str	r2, [r7, #4]
 566:fips202.c     ****     keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
 6114              		.loc 1 566 5
 6115 000c FB68     		ldr	r3, [r7, #12]
 6116 000e 1868     		ldr	r0, [r3]
 6117 0010 7B68     		ldr	r3, [r7, #4]
 6118 0012 BA68     		ldr	r2, [r7, #8]
 6119 0014 8821     		movs	r1, #136
 6120 0016 FFF7FEFF 		bl	keccak_inc_absorb
 567:fips202.c     **** }
 6121              		.loc 1 567 1
 6122 001a 00BF     		nop
 6123 001c 1037     		adds	r7, r7, #16
 6124              	.LCFI88:
 6125              		.cfi_def_cfa_offset 8
 6126 001e BD46     		mov	sp, r7
 6127              	.LCFI89:
 6128              		.cfi_def_cfa_register 13
 6129              		@ sp needed
 6130 0020 80BD     		pop	{r7, pc}
 6131              		.cfi_endproc
 6132              	.LFE16:
 6134              		.section	.text.shake256_inc_finalize,"ax",%progbits
 6135              		.align	1
 6136              		.global	shake256_inc_finalize
 6137              		.syntax unified
 6138              		.thumb
 6139              		.thumb_func
 6140              		.fpu softvfp
 6142              	shake256_inc_finalize:
 6143              	.LFB17:
 568:fips202.c     **** 
 569:fips202.c     **** void shake256_inc_finalize(shake256incctx *state) {
 6144              		.loc 1 569 51
 6145              		.cfi_startproc
 6146              		@ args = 0, pretend = 0, frame = 8
 6147              		@ frame_needed = 1, uses_anonymous_args = 0
 6148 0000 80B5     		push	{r7, lr}
 6149              	.LCFI90:
 6150              		.cfi_def_cfa_offset 8
 6151              		.cfi_offset 7, -8
 6152              		.cfi_offset 14, -4
 6153 0002 82B0     		sub	sp, sp, #8
 6154              	.LCFI91:
 6155              		.cfi_def_cfa_offset 16
 6156 0004 00AF     		add	r7, sp, #0
 6157              	.LCFI92:
 6158              		.cfi_def_cfa_register 7
 6159 0006 7860     		str	r0, [r7, #4]
 570:fips202.c     ****     keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
 6160              		.loc 1 570 5
 6161 0008 7B68     		ldr	r3, [r7, #4]
 6162 000a 1B68     		ldr	r3, [r3]
 6163 000c 1F22     		movs	r2, #31
 6164 000e 8821     		movs	r1, #136
 6165 0010 1846     		mov	r0, r3
 6166 0012 FFF7FEFF 		bl	keccak_inc_finalize
 571:fips202.c     **** }
 6167              		.loc 1 571 1
 6168 0016 00BF     		nop
 6169 0018 0837     		adds	r7, r7, #8
 6170              	.LCFI93:
 6171              		.cfi_def_cfa_offset 8
 6172 001a BD46     		mov	sp, r7
 6173              	.LCFI94:
 6174              		.cfi_def_cfa_register 13
 6175              		@ sp needed
 6176 001c 80BD     		pop	{r7, pc}
 6177              		.cfi_endproc
 6178              	.LFE17:
 6180              		.section	.text.shake256_inc_squeeze,"ax",%progbits
 6181              		.align	1
 6182              		.global	shake256_inc_squeeze
 6183              		.syntax unified
 6184              		.thumb
 6185              		.thumb_func
 6186              		.fpu softvfp
 6188              	shake256_inc_squeeze:
 6189              	.LFB18:
 572:fips202.c     **** 
 573:fips202.c     **** void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 6190              		.loc 1 573 82
 6191              		.cfi_startproc
 6192              		@ args = 0, pretend = 0, frame = 16
 6193              		@ frame_needed = 1, uses_anonymous_args = 0
 6194 0000 80B5     		push	{r7, lr}
 6195              	.LCFI95:
 6196              		.cfi_def_cfa_offset 8
 6197              		.cfi_offset 7, -8
 6198              		.cfi_offset 14, -4
 6199 0002 84B0     		sub	sp, sp, #16
 6200              	.LCFI96:
 6201              		.cfi_def_cfa_offset 24
 6202 0004 00AF     		add	r7, sp, #0
 6203              	.LCFI97:
 6204              		.cfi_def_cfa_register 7
 6205 0006 F860     		str	r0, [r7, #12]
 6206 0008 B960     		str	r1, [r7, #8]
 6207 000a 7A60     		str	r2, [r7, #4]
 574:fips202.c     ****     keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
 6208              		.loc 1 574 5
 6209 000c 7B68     		ldr	r3, [r7, #4]
 6210 000e 1A68     		ldr	r2, [r3]
 6211 0010 8823     		movs	r3, #136
 6212 0012 B968     		ldr	r1, [r7, #8]
 6213 0014 F868     		ldr	r0, [r7, #12]
 6214 0016 FFF7FEFF 		bl	keccak_inc_squeeze
 575:fips202.c     **** }
 6215              		.loc 1 575 1
 6216 001a 00BF     		nop
 6217 001c 1037     		adds	r7, r7, #16
 6218              	.LCFI98:
 6219              		.cfi_def_cfa_offset 8
 6220 001e BD46     		mov	sp, r7
 6221              	.LCFI99:
 6222              		.cfi_def_cfa_register 13
 6223              		@ sp needed
 6224 0020 80BD     		pop	{r7, pc}
 6225              		.cfi_endproc
 6226              	.LFE18:
 6228              		.section	.text.shake256_inc_ctx_clone,"ax",%progbits
 6229              		.align	1
 6230              		.global	shake256_inc_ctx_clone
 6231              		.syntax unified
 6232              		.thumb
 6233              		.thumb_func
 6234              		.fpu softvfp
 6236              	shake256_inc_ctx_clone:
 6237              	.LFB19:
 576:fips202.c     **** 
 577:fips202.c     **** void shake256_inc_ctx_clone(shake256incctx *dest, const shake256incctx *src) {
 6238              		.loc 1 577 78
 6239              		.cfi_startproc
 6240              		@ args = 0, pretend = 0, frame = 8
 6241              		@ frame_needed = 1, uses_anonymous_args = 0
 6242 0000 80B5     		push	{r7, lr}
 6243              	.LCFI100:
 6244              		.cfi_def_cfa_offset 8
 6245              		.cfi_offset 7, -8
 6246              		.cfi_offset 14, -4
 6247 0002 82B0     		sub	sp, sp, #8
 6248              	.LCFI101:
 6249              		.cfi_def_cfa_offset 16
 6250 0004 00AF     		add	r7, sp, #0
 6251              	.LCFI102:
 6252              		.cfi_def_cfa_register 7
 6253 0006 7860     		str	r0, [r7, #4]
 6254 0008 3960     		str	r1, [r7]
 578:fips202.c     ****     dest->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 6255              		.loc 1 578 17
 6256 000a D020     		movs	r0, #208
 6257 000c FFF7FEFF 		bl	malloc
 6258 0010 0346     		mov	r3, r0
 6259 0012 1A46     		mov	r2, r3
 6260              		.loc 1 578 15
 6261 0014 7B68     		ldr	r3, [r7, #4]
 6262 0016 1A60     		str	r2, [r3]
 579:fips202.c     ****     if (dest->ctx == NULL) {
 6263              		.loc 1 579 13
 6264 0018 7B68     		ldr	r3, [r7, #4]
 6265 001a 1B68     		ldr	r3, [r3]
 6266              		.loc 1 579 8
 6267 001c 002B     		cmp	r3, #0
 6268 001e 02D1     		bne	.L69
 580:fips202.c     ****         exit(111);
 6269              		.loc 1 580 9
 6270 0020 6F20     		movs	r0, #111
 6271 0022 FFF7FEFF 		bl	exit
 6272              	.L69:
 581:fips202.c     ****     }
 582:fips202.c     ****     memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
 6273              		.loc 1 582 16
 6274 0026 7B68     		ldr	r3, [r7, #4]
 6275 0028 1868     		ldr	r0, [r3]
 6276              		.loc 1 582 26
 6277 002a 3B68     		ldr	r3, [r7]
 6278 002c 1B68     		ldr	r3, [r3]
 6279              		.loc 1 582 5
 6280 002e D022     		movs	r2, #208
 6281 0030 1946     		mov	r1, r3
 6282 0032 FFF7FEFF 		bl	memcpy
 583:fips202.c     **** }
 6283              		.loc 1 583 1
 6284 0036 00BF     		nop
 6285 0038 0837     		adds	r7, r7, #8
 6286              	.LCFI103:
 6287              		.cfi_def_cfa_offset 8
 6288 003a BD46     		mov	sp, r7
 6289              	.LCFI104:
 6290              		.cfi_def_cfa_register 13
 6291              		@ sp needed
 6292 003c 80BD     		pop	{r7, pc}
 6293              		.cfi_endproc
 6294              	.LFE19:
 6296              		.section	.text.shake256_inc_ctx_release,"ax",%progbits
 6297              		.align	1
 6298              		.global	shake256_inc_ctx_release
 6299              		.syntax unified
 6300              		.thumb
 6301              		.thumb_func
 6302              		.fpu softvfp
 6304              	shake256_inc_ctx_release:
 6305              	.LFB20:
 584:fips202.c     **** 
 585:fips202.c     **** void shake256_inc_ctx_release(shake256incctx *state) {
 6306              		.loc 1 585 54
 6307              		.cfi_startproc
 6308              		@ args = 0, pretend = 0, frame = 8
 6309              		@ frame_needed = 1, uses_anonymous_args = 0
 6310 0000 80B5     		push	{r7, lr}
 6311              	.LCFI105:
 6312              		.cfi_def_cfa_offset 8
 6313              		.cfi_offset 7, -8
 6314              		.cfi_offset 14, -4
 6315 0002 82B0     		sub	sp, sp, #8
 6316              	.LCFI106:
 6317              		.cfi_def_cfa_offset 16
 6318 0004 00AF     		add	r7, sp, #0
 6319              	.LCFI107:
 6320              		.cfi_def_cfa_register 7
 6321 0006 7860     		str	r0, [r7, #4]
 586:fips202.c     ****     free(state->ctx);
 6322              		.loc 1 586 15
 6323 0008 7B68     		ldr	r3, [r7, #4]
 6324 000a 1B68     		ldr	r3, [r3]
 6325              		.loc 1 586 5
 6326 000c 1846     		mov	r0, r3
 6327 000e FFF7FEFF 		bl	free
 587:fips202.c     **** }
 6328              		.loc 1 587 1
 6329 0012 00BF     		nop
 6330 0014 0837     		adds	r7, r7, #8
 6331              	.LCFI108:
 6332              		.cfi_def_cfa_offset 8
 6333 0016 BD46     		mov	sp, r7
 6334              	.LCFI109:
 6335              		.cfi_def_cfa_register 13
 6336              		@ sp needed
 6337 0018 80BD     		pop	{r7, pc}
 6338              		.cfi_endproc
 6339              	.LFE20:
 6341              		.section	.text.shake128_absorb,"ax",%progbits
 6342              		.align	1
 6343              		.global	shake128_absorb
 6344              		.syntax unified
 6345              		.thumb
 6346              		.thumb_func
 6347              		.fpu softvfp
 6349              	shake128_absorb:
 6350              	.LFB21:
 588:fips202.c     **** 
 589:fips202.c     **** /*************************************************
 590:fips202.c     ****  * Name:        shake128_absorb
 591:fips202.c     ****  *
 592:fips202.c     ****  * Description: Absorb step of the SHAKE128 XOF.
 593:fips202.c     ****  *              non-incremental, starts by zeroeing the state.
 594:fips202.c     ****  *
 595:fips202.c     ****  * Arguments:   - uint64_t *s: pointer to (uninitialized) output Keccak state
 596:fips202.c     ****  *              - const uint8_t *input: pointer to input to be absorbed
 597:fips202.c     ****  *                                            into s
 598:fips202.c     ****  *              - size_t inlen: length of input in bytes
 599:fips202.c     ****  **************************************************/
 600:fips202.c     **** void shake128_absorb(shake128ctx *state, const uint8_t *input, size_t inlen) {
 6351              		.loc 1 600 78
 6352              		.cfi_startproc
 6353              		@ args = 0, pretend = 0, frame = 16
 6354              		@ frame_needed = 1, uses_anonymous_args = 0
 6355 0000 80B5     		push	{r7, lr}
 6356              	.LCFI110:
 6357              		.cfi_def_cfa_offset 8
 6358              		.cfi_offset 7, -8
 6359              		.cfi_offset 14, -4
 6360 0002 86B0     		sub	sp, sp, #24
 6361              	.LCFI111:
 6362              		.cfi_def_cfa_offset 32
 6363 0004 02AF     		add	r7, sp, #8
 6364              	.LCFI112:
 6365              		.cfi_def_cfa 7, 24
 6366 0006 F860     		str	r0, [r7, #12]
 6367 0008 B960     		str	r1, [r7, #8]
 6368 000a 7A60     		str	r2, [r7, #4]
 601:fips202.c     ****     state->ctx = malloc(PQC_SHAKECTX_BYTES);
 6369              		.loc 1 601 18
 6370 000c C820     		movs	r0, #200
 6371 000e FFF7FEFF 		bl	malloc
 6372 0012 0346     		mov	r3, r0
 6373 0014 1A46     		mov	r2, r3
 6374              		.loc 1 601 16
 6375 0016 FB68     		ldr	r3, [r7, #12]
 6376 0018 1A60     		str	r2, [r3]
 602:fips202.c     ****     if (state->ctx == NULL) {
 6377              		.loc 1 602 14
 6378 001a FB68     		ldr	r3, [r7, #12]
 6379 001c 1B68     		ldr	r3, [r3]
 6380              		.loc 1 602 8
 6381 001e 002B     		cmp	r3, #0
 6382 0020 02D1     		bne	.L72
 603:fips202.c     ****         exit(111);
 6383              		.loc 1 603 9
 6384 0022 6F20     		movs	r0, #111
 6385 0024 FFF7FEFF 		bl	exit
 6386              	.L72:
 604:fips202.c     ****     }
 605:fips202.c     ****     keccak_absorb(state->ctx, SHAKE128_RATE, input, inlen, 0x1F);
 6387              		.loc 1 605 5
 6388 0028 FB68     		ldr	r3, [r7, #12]
 6389 002a 1868     		ldr	r0, [r3]
 6390 002c 1F23     		movs	r3, #31
 6391 002e 0093     		str	r3, [sp]
 6392 0030 7B68     		ldr	r3, [r7, #4]
 6393 0032 BA68     		ldr	r2, [r7, #8]
 6394 0034 A821     		movs	r1, #168
 6395 0036 FFF7FEFF 		bl	keccak_absorb
 606:fips202.c     **** }
 6396              		.loc 1 606 1
 6397 003a 00BF     		nop
 6398 003c 1037     		adds	r7, r7, #16
 6399              	.LCFI113:
 6400              		.cfi_def_cfa_offset 8
 6401 003e BD46     		mov	sp, r7
 6402              	.LCFI114:
 6403              		.cfi_def_cfa_register 13
 6404              		@ sp needed
 6405 0040 80BD     		pop	{r7, pc}
 6406              		.cfi_endproc
 6407              	.LFE21:
 6409              		.section	.text.shake128_squeezeblocks,"ax",%progbits
 6410              		.align	1
 6411              		.global	shake128_squeezeblocks
 6412              		.syntax unified
 6413              		.thumb
 6414              		.thumb_func
 6415              		.fpu softvfp
 6417              	shake128_squeezeblocks:
 6418              	.LFB22:
 607:fips202.c     **** 
 608:fips202.c     **** /*************************************************
 609:fips202.c     ****  * Name:        shake128_squeezeblocks
 610:fips202.c     ****  *
 611:fips202.c     ****  * Description: Squeeze step of SHAKE128 XOF. Squeezes full blocks of
 612:fips202.c     ****  *              SHAKE128_RATE bytes each. Modifies the state. Can be called
 613:fips202.c     ****  *              multiple times to keep squeezing, i.e., is incremental.
 614:fips202.c     ****  *
 615:fips202.c     ****  * Arguments:   - uint8_t *output: pointer to output blocks
 616:fips202.c     ****  *              - size_t nblocks: number of blocks to be squeezed
 617:fips202.c     ****  *                                            (written to output)
 618:fips202.c     ****  *              - shake128ctx *state: pointer to input/output Keccak state
 619:fips202.c     ****  **************************************************/
 620:fips202.c     **** void shake128_squeezeblocks(uint8_t *output, size_t nblocks, shake128ctx *state) {
 6419              		.loc 1 620 82
 6420              		.cfi_startproc
 6421              		@ args = 0, pretend = 0, frame = 16
 6422              		@ frame_needed = 1, uses_anonymous_args = 0
 6423 0000 80B5     		push	{r7, lr}
 6424              	.LCFI115:
 6425              		.cfi_def_cfa_offset 8
 6426              		.cfi_offset 7, -8
 6427              		.cfi_offset 14, -4
 6428 0002 84B0     		sub	sp, sp, #16
 6429              	.LCFI116:
 6430              		.cfi_def_cfa_offset 24
 6431 0004 00AF     		add	r7, sp, #0
 6432              	.LCFI117:
 6433              		.cfi_def_cfa_register 7
 6434 0006 F860     		str	r0, [r7, #12]
 6435 0008 B960     		str	r1, [r7, #8]
 6436 000a 7A60     		str	r2, [r7, #4]
 621:fips202.c     ****     keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE128_RATE);
 6437              		.loc 1 621 5
 6438 000c 7B68     		ldr	r3, [r7, #4]
 6439 000e 1A68     		ldr	r2, [r3]
 6440 0010 A823     		movs	r3, #168
 6441 0012 B968     		ldr	r1, [r7, #8]
 6442 0014 F868     		ldr	r0, [r7, #12]
 6443 0016 FFF7FEFF 		bl	keccak_squeezeblocks
 622:fips202.c     **** }
 6444              		.loc 1 622 1
 6445 001a 00BF     		nop
 6446 001c 1037     		adds	r7, r7, #16
 6447              	.LCFI118:
 6448              		.cfi_def_cfa_offset 8
 6449 001e BD46     		mov	sp, r7
 6450              	.LCFI119:
 6451              		.cfi_def_cfa_register 13
 6452              		@ sp needed
 6453 0020 80BD     		pop	{r7, pc}
 6454              		.cfi_endproc
 6455              	.LFE22:
 6457              		.section	.text.shake128_ctx_clone,"ax",%progbits
 6458              		.align	1
 6459              		.global	shake128_ctx_clone
 6460              		.syntax unified
 6461              		.thumb
 6462              		.thumb_func
 6463              		.fpu softvfp
 6465              	shake128_ctx_clone:
 6466              	.LFB23:
 623:fips202.c     **** 
 624:fips202.c     **** void shake128_ctx_clone(shake128ctx *dest, const shake128ctx *src) {
 6467              		.loc 1 624 68
 6468              		.cfi_startproc
 6469              		@ args = 0, pretend = 0, frame = 8
 6470              		@ frame_needed = 1, uses_anonymous_args = 0
 6471 0000 80B5     		push	{r7, lr}
 6472              	.LCFI120:
 6473              		.cfi_def_cfa_offset 8
 6474              		.cfi_offset 7, -8
 6475              		.cfi_offset 14, -4
 6476 0002 82B0     		sub	sp, sp, #8
 6477              	.LCFI121:
 6478              		.cfi_def_cfa_offset 16
 6479 0004 00AF     		add	r7, sp, #0
 6480              	.LCFI122:
 6481              		.cfi_def_cfa_register 7
 6482 0006 7860     		str	r0, [r7, #4]
 6483 0008 3960     		str	r1, [r7]
 625:fips202.c     ****     dest->ctx = malloc(PQC_SHAKECTX_BYTES);
 6484              		.loc 1 625 17
 6485 000a C820     		movs	r0, #200
 6486 000c FFF7FEFF 		bl	malloc
 6487 0010 0346     		mov	r3, r0
 6488 0012 1A46     		mov	r2, r3
 6489              		.loc 1 625 15
 6490 0014 7B68     		ldr	r3, [r7, #4]
 6491 0016 1A60     		str	r2, [r3]
 626:fips202.c     ****     if (dest->ctx == NULL) {
 6492              		.loc 1 626 13
 6493 0018 7B68     		ldr	r3, [r7, #4]
 6494 001a 1B68     		ldr	r3, [r3]
 6495              		.loc 1 626 8
 6496 001c 002B     		cmp	r3, #0
 6497 001e 02D1     		bne	.L75
 627:fips202.c     ****         exit(111);
 6498              		.loc 1 627 9
 6499 0020 6F20     		movs	r0, #111
 6500 0022 FFF7FEFF 		bl	exit
 6501              	.L75:
 628:fips202.c     ****     }
 629:fips202.c     ****     memcpy(dest->ctx, src->ctx, PQC_SHAKECTX_BYTES);
 6502              		.loc 1 629 16
 6503 0026 7B68     		ldr	r3, [r7, #4]
 6504 0028 1868     		ldr	r0, [r3]
 6505              		.loc 1 629 26
 6506 002a 3B68     		ldr	r3, [r7]
 6507 002c 1B68     		ldr	r3, [r3]
 6508              		.loc 1 629 5
 6509 002e C822     		movs	r2, #200
 6510 0030 1946     		mov	r1, r3
 6511 0032 FFF7FEFF 		bl	memcpy
 630:fips202.c     **** }
 6512              		.loc 1 630 1
 6513 0036 00BF     		nop
 6514 0038 0837     		adds	r7, r7, #8
 6515              	.LCFI123:
 6516              		.cfi_def_cfa_offset 8
 6517 003a BD46     		mov	sp, r7
 6518              	.LCFI124:
 6519              		.cfi_def_cfa_register 13
 6520              		@ sp needed
 6521 003c 80BD     		pop	{r7, pc}
 6522              		.cfi_endproc
 6523              	.LFE23:
 6525              		.section	.text.shake128_ctx_release,"ax",%progbits
 6526              		.align	1
 6527              		.global	shake128_ctx_release
 6528              		.syntax unified
 6529              		.thumb
 6530              		.thumb_func
 6531              		.fpu softvfp
 6533              	shake128_ctx_release:
 6534              	.LFB24:
 631:fips202.c     **** 
 632:fips202.c     **** /** Release the allocated state. Call only once. */
 633:fips202.c     **** void shake128_ctx_release(shake128ctx *state) {
 6535              		.loc 1 633 47
 6536              		.cfi_startproc
 6537              		@ args = 0, pretend = 0, frame = 8
 6538              		@ frame_needed = 1, uses_anonymous_args = 0
 6539 0000 80B5     		push	{r7, lr}
 6540              	.LCFI125:
 6541              		.cfi_def_cfa_offset 8
 6542              		.cfi_offset 7, -8
 6543              		.cfi_offset 14, -4
 6544 0002 82B0     		sub	sp, sp, #8
 6545              	.LCFI126:
 6546              		.cfi_def_cfa_offset 16
 6547 0004 00AF     		add	r7, sp, #0
 6548              	.LCFI127:
 6549              		.cfi_def_cfa_register 7
 6550 0006 7860     		str	r0, [r7, #4]
 634:fips202.c     ****     free(state->ctx);
 6551              		.loc 1 634 15
 6552 0008 7B68     		ldr	r3, [r7, #4]
 6553 000a 1B68     		ldr	r3, [r3]
 6554              		.loc 1 634 5
 6555 000c 1846     		mov	r0, r3
 6556 000e FFF7FEFF 		bl	free
 635:fips202.c     **** }
 6557              		.loc 1 635 1
 6558 0012 00BF     		nop
 6559 0014 0837     		adds	r7, r7, #8
 6560              	.LCFI128:
 6561              		.cfi_def_cfa_offset 8
 6562 0016 BD46     		mov	sp, r7
 6563              	.LCFI129:
 6564              		.cfi_def_cfa_register 13
 6565              		@ sp needed
 6566 0018 80BD     		pop	{r7, pc}
 6567              		.cfi_endproc
 6568              	.LFE24:
 6570              		.section	.text.shake256_absorb,"ax",%progbits
 6571              		.align	1
 6572              		.global	shake256_absorb
 6573              		.syntax unified
 6574              		.thumb
 6575              		.thumb_func
 6576              		.fpu softvfp
 6578              	shake256_absorb:
 6579              	.LFB25:
 636:fips202.c     **** 
 637:fips202.c     **** /*************************************************
 638:fips202.c     ****  * Name:        shake256_absorb
 639:fips202.c     ****  *
 640:fips202.c     ****  * Description: Absorb step of the SHAKE256 XOF.
 641:fips202.c     ****  *              non-incremental, starts by zeroeing the state.
 642:fips202.c     ****  *
 643:fips202.c     ****  * Arguments:   - shake256ctx *state: pointer to (uninitialized) output Keccak state
 644:fips202.c     ****  *              - const uint8_t *input: pointer to input to be absorbed
 645:fips202.c     ****  *                                            into s
 646:fips202.c     ****  *              - size_t inlen: length of input in bytes
 647:fips202.c     ****  **************************************************/
 648:fips202.c     **** void shake256_absorb(shake256ctx *state, const uint8_t *input, size_t inlen) {
 6580              		.loc 1 648 78
 6581              		.cfi_startproc
 6582              		@ args = 0, pretend = 0, frame = 16
 6583              		@ frame_needed = 1, uses_anonymous_args = 0
 6584 0000 80B5     		push	{r7, lr}
 6585              	.LCFI130:
 6586              		.cfi_def_cfa_offset 8
 6587              		.cfi_offset 7, -8
 6588              		.cfi_offset 14, -4
 6589 0002 86B0     		sub	sp, sp, #24
 6590              	.LCFI131:
 6591              		.cfi_def_cfa_offset 32
 6592 0004 02AF     		add	r7, sp, #8
 6593              	.LCFI132:
 6594              		.cfi_def_cfa 7, 24
 6595 0006 F860     		str	r0, [r7, #12]
 6596 0008 B960     		str	r1, [r7, #8]
 6597 000a 7A60     		str	r2, [r7, #4]
 649:fips202.c     ****     state->ctx = malloc(PQC_SHAKECTX_BYTES);
 6598              		.loc 1 649 18
 6599 000c C820     		movs	r0, #200
 6600 000e FFF7FEFF 		bl	malloc
 6601 0012 0346     		mov	r3, r0
 6602 0014 1A46     		mov	r2, r3
 6603              		.loc 1 649 16
 6604 0016 FB68     		ldr	r3, [r7, #12]
 6605 0018 1A60     		str	r2, [r3]
 650:fips202.c     ****     if (state->ctx == NULL) {
 6606              		.loc 1 650 14
 6607 001a FB68     		ldr	r3, [r7, #12]
 6608 001c 1B68     		ldr	r3, [r3]
 6609              		.loc 1 650 8
 6610 001e 002B     		cmp	r3, #0
 6611 0020 02D1     		bne	.L78
 651:fips202.c     ****         exit(111);
 6612              		.loc 1 651 9
 6613 0022 6F20     		movs	r0, #111
 6614 0024 FFF7FEFF 		bl	exit
 6615              	.L78:
 652:fips202.c     ****     }
 653:fips202.c     ****     keccak_absorb(state->ctx, SHAKE256_RATE, input, inlen, 0x1F);
 6616              		.loc 1 653 5
 6617 0028 FB68     		ldr	r3, [r7, #12]
 6618 002a 1868     		ldr	r0, [r3]
 6619 002c 1F23     		movs	r3, #31
 6620 002e 0093     		str	r3, [sp]
 6621 0030 7B68     		ldr	r3, [r7, #4]
 6622 0032 BA68     		ldr	r2, [r7, #8]
 6623 0034 8821     		movs	r1, #136
 6624 0036 FFF7FEFF 		bl	keccak_absorb
 654:fips202.c     **** }
 6625              		.loc 1 654 1
 6626 003a 00BF     		nop
 6627 003c 1037     		adds	r7, r7, #16
 6628              	.LCFI133:
 6629              		.cfi_def_cfa_offset 8
 6630 003e BD46     		mov	sp, r7
 6631              	.LCFI134:
 6632              		.cfi_def_cfa_register 13
 6633              		@ sp needed
 6634 0040 80BD     		pop	{r7, pc}
 6635              		.cfi_endproc
 6636              	.LFE25:
 6638              		.section	.text.shake256_squeezeblocks,"ax",%progbits
 6639              		.align	1
 6640              		.global	shake256_squeezeblocks
 6641              		.syntax unified
 6642              		.thumb
 6643              		.thumb_func
 6644              		.fpu softvfp
 6646              	shake256_squeezeblocks:
 6647              	.LFB26:
 655:fips202.c     **** 
 656:fips202.c     **** /*************************************************
 657:fips202.c     ****  * Name:        shake256_squeezeblocks
 658:fips202.c     ****  *
 659:fips202.c     ****  * Description: Squeeze step of SHAKE256 XOF. Squeezes full blocks of
 660:fips202.c     ****  *              SHAKE256_RATE bytes each. Modifies the state. Can be called
 661:fips202.c     ****  *              multiple times to keep squeezing, i.e., is incremental.
 662:fips202.c     ****  *
 663:fips202.c     ****  * Arguments:   - uint8_t *output: pointer to output blocks
 664:fips202.c     ****  *              - size_t nblocks: number of blocks to be squeezed
 665:fips202.c     ****  *                                (written to output)
 666:fips202.c     ****  *              - shake256ctx *state: pointer to input/output Keccak state
 667:fips202.c     ****  **************************************************/
 668:fips202.c     **** void shake256_squeezeblocks(uint8_t *output, size_t nblocks, shake256ctx *state) {
 6648              		.loc 1 668 82
 6649              		.cfi_startproc
 6650              		@ args = 0, pretend = 0, frame = 16
 6651              		@ frame_needed = 1, uses_anonymous_args = 0
 6652 0000 80B5     		push	{r7, lr}
 6653              	.LCFI135:
 6654              		.cfi_def_cfa_offset 8
 6655              		.cfi_offset 7, -8
 6656              		.cfi_offset 14, -4
 6657 0002 84B0     		sub	sp, sp, #16
 6658              	.LCFI136:
 6659              		.cfi_def_cfa_offset 24
 6660 0004 00AF     		add	r7, sp, #0
 6661              	.LCFI137:
 6662              		.cfi_def_cfa_register 7
 6663 0006 F860     		str	r0, [r7, #12]
 6664 0008 B960     		str	r1, [r7, #8]
 6665 000a 7A60     		str	r2, [r7, #4]
 669:fips202.c     ****     keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE256_RATE);
 6666              		.loc 1 669 5
 6667 000c 7B68     		ldr	r3, [r7, #4]
 6668 000e 1A68     		ldr	r2, [r3]
 6669 0010 8823     		movs	r3, #136
 6670 0012 B968     		ldr	r1, [r7, #8]
 6671 0014 F868     		ldr	r0, [r7, #12]
 6672 0016 FFF7FEFF 		bl	keccak_squeezeblocks
 670:fips202.c     **** }
 6673              		.loc 1 670 1
 6674 001a 00BF     		nop
 6675 001c 1037     		adds	r7, r7, #16
 6676              	.LCFI138:
 6677              		.cfi_def_cfa_offset 8
 6678 001e BD46     		mov	sp, r7
 6679              	.LCFI139:
 6680              		.cfi_def_cfa_register 13
 6681              		@ sp needed
 6682 0020 80BD     		pop	{r7, pc}
 6683              		.cfi_endproc
 6684              	.LFE26:
 6686              		.section	.text.shake256_ctx_clone,"ax",%progbits
 6687              		.align	1
 6688              		.global	shake256_ctx_clone
 6689              		.syntax unified
 6690              		.thumb
 6691              		.thumb_func
 6692              		.fpu softvfp
 6694              	shake256_ctx_clone:
 6695              	.LFB27:
 671:fips202.c     **** 
 672:fips202.c     **** void shake256_ctx_clone(shake256ctx *dest, const shake256ctx *src) {
 6696              		.loc 1 672 68
 6697              		.cfi_startproc
 6698              		@ args = 0, pretend = 0, frame = 8
 6699              		@ frame_needed = 1, uses_anonymous_args = 0
 6700 0000 80B5     		push	{r7, lr}
 6701              	.LCFI140:
 6702              		.cfi_def_cfa_offset 8
 6703              		.cfi_offset 7, -8
 6704              		.cfi_offset 14, -4
 6705 0002 82B0     		sub	sp, sp, #8
 6706              	.LCFI141:
 6707              		.cfi_def_cfa_offset 16
 6708 0004 00AF     		add	r7, sp, #0
 6709              	.LCFI142:
 6710              		.cfi_def_cfa_register 7
 6711 0006 7860     		str	r0, [r7, #4]
 6712 0008 3960     		str	r1, [r7]
 673:fips202.c     ****     dest->ctx = malloc(PQC_SHAKECTX_BYTES);
 6713              		.loc 1 673 17
 6714 000a C820     		movs	r0, #200
 6715 000c FFF7FEFF 		bl	malloc
 6716 0010 0346     		mov	r3, r0
 6717 0012 1A46     		mov	r2, r3
 6718              		.loc 1 673 15
 6719 0014 7B68     		ldr	r3, [r7, #4]
 6720 0016 1A60     		str	r2, [r3]
 674:fips202.c     ****     if (dest->ctx == NULL) {
 6721              		.loc 1 674 13
 6722 0018 7B68     		ldr	r3, [r7, #4]
 6723 001a 1B68     		ldr	r3, [r3]
 6724              		.loc 1 674 8
 6725 001c 002B     		cmp	r3, #0
 6726 001e 02D1     		bne	.L81
 675:fips202.c     ****         exit(111);
 6727              		.loc 1 675 9
 6728 0020 6F20     		movs	r0, #111
 6729 0022 FFF7FEFF 		bl	exit
 6730              	.L81:
 676:fips202.c     ****     }
 677:fips202.c     ****     memcpy(dest->ctx, src->ctx, PQC_SHAKECTX_BYTES);
 6731              		.loc 1 677 16
 6732 0026 7B68     		ldr	r3, [r7, #4]
 6733 0028 1868     		ldr	r0, [r3]
 6734              		.loc 1 677 26
 6735 002a 3B68     		ldr	r3, [r7]
 6736 002c 1B68     		ldr	r3, [r3]
 6737              		.loc 1 677 5
 6738 002e C822     		movs	r2, #200
 6739 0030 1946     		mov	r1, r3
 6740 0032 FFF7FEFF 		bl	memcpy
 678:fips202.c     **** }
 6741              		.loc 1 678 1
 6742 0036 00BF     		nop
 6743 0038 0837     		adds	r7, r7, #8
 6744              	.LCFI143:
 6745              		.cfi_def_cfa_offset 8
 6746 003a BD46     		mov	sp, r7
 6747              	.LCFI144:
 6748              		.cfi_def_cfa_register 13
 6749              		@ sp needed
 6750 003c 80BD     		pop	{r7, pc}
 6751              		.cfi_endproc
 6752              	.LFE27:
 6754              		.section	.text.shake256_ctx_release,"ax",%progbits
 6755              		.align	1
 6756              		.global	shake256_ctx_release
 6757              		.syntax unified
 6758              		.thumb
 6759              		.thumb_func
 6760              		.fpu softvfp
 6762              	shake256_ctx_release:
 6763              	.LFB28:
 679:fips202.c     **** 
 680:fips202.c     **** /** Release the allocated state. Call only once. */
 681:fips202.c     **** void shake256_ctx_release(shake256ctx *state) {
 6764              		.loc 1 681 47
 6765              		.cfi_startproc
 6766              		@ args = 0, pretend = 0, frame = 8
 6767              		@ frame_needed = 1, uses_anonymous_args = 0
 6768 0000 80B5     		push	{r7, lr}
 6769              	.LCFI145:
 6770              		.cfi_def_cfa_offset 8
 6771              		.cfi_offset 7, -8
 6772              		.cfi_offset 14, -4
 6773 0002 82B0     		sub	sp, sp, #8
 6774              	.LCFI146:
 6775              		.cfi_def_cfa_offset 16
 6776 0004 00AF     		add	r7, sp, #0
 6777              	.LCFI147:
 6778              		.cfi_def_cfa_register 7
 6779 0006 7860     		str	r0, [r7, #4]
 682:fips202.c     ****     free(state->ctx);
 6780              		.loc 1 682 15
 6781 0008 7B68     		ldr	r3, [r7, #4]
 6782 000a 1B68     		ldr	r3, [r3]
 6783              		.loc 1 682 5
 6784 000c 1846     		mov	r0, r3
 6785 000e FFF7FEFF 		bl	free
 683:fips202.c     **** }
 6786              		.loc 1 683 1
 6787 0012 00BF     		nop
 6788 0014 0837     		adds	r7, r7, #8
 6789              	.LCFI148:
 6790              		.cfi_def_cfa_offset 8
 6791 0016 BD46     		mov	sp, r7
 6792              	.LCFI149:
 6793              		.cfi_def_cfa_register 13
 6794              		@ sp needed
 6795 0018 80BD     		pop	{r7, pc}
 6796              		.cfi_endproc
 6797              	.LFE28:
 6799              		.section	.text.shake128,"ax",%progbits
 6800              		.align	1
 6801              		.global	shake128
 6802              		.syntax unified
 6803              		.thumb
 6804              		.thumb_func
 6805              		.fpu softvfp
 6807              	shake128:
 6808              	.LFB29:
 684:fips202.c     **** 
 685:fips202.c     **** /*************************************************
 686:fips202.c     ****  * Name:        shake128
 687:fips202.c     ****  *
 688:fips202.c     ****  * Description: SHAKE128 XOF with non-incremental API
 689:fips202.c     ****  *
 690:fips202.c     ****  * Arguments:   - uint8_t *output: pointer to output
 691:fips202.c     ****  *              - size_t outlen: requested output length in bytes
 692:fips202.c     ****  *              - const uint8_t *input: pointer to input
 693:fips202.c     ****  *              - size_t inlen: length of input in bytes
 694:fips202.c     ****  **************************************************/
 695:fips202.c     **** void shake128(uint8_t *output, size_t outlen,
 696:fips202.c     ****               const uint8_t *input, size_t inlen) {
 6809              		.loc 1 696 51
 6810              		.cfi_startproc
 6811              		@ args = 0, pretend = 0, frame = 200
 6812              		@ frame_needed = 1, uses_anonymous_args = 0
 6813 0000 80B5     		push	{r7, lr}
 6814              	.LCFI150:
 6815              		.cfi_def_cfa_offset 8
 6816              		.cfi_offset 7, -8
 6817              		.cfi_offset 14, -4
 6818 0002 B2B0     		sub	sp, sp, #200
 6819              	.LCFI151:
 6820              		.cfi_def_cfa_offset 208
 6821 0004 00AF     		add	r7, sp, #0
 6822              	.LCFI152:
 6823              		.cfi_def_cfa_register 7
 6824 0006 F860     		str	r0, [r7, #12]
 6825 0008 B960     		str	r1, [r7, #8]
 6826 000a 7A60     		str	r2, [r7, #4]
 6827 000c 3B60     		str	r3, [r7]
 697:fips202.c     ****     size_t nblocks = outlen / SHAKE128_RATE;
 6828              		.loc 1 697 12
 6829 000e BB68     		ldr	r3, [r7, #8]
 6830 0010 DB08     		lsrs	r3, r3, #3
 6831 0012 294A     		ldr	r2, .L87
 6832 0014 A2FB0323 		umull	r2, r3, r2, r3
 6833 0018 5B08     		lsrs	r3, r3, #1
 6834 001a C7F8C030 		str	r3, [r7, #192]
 698:fips202.c     ****     uint8_t t[SHAKE128_RATE];
 699:fips202.c     ****     shake128ctx s;
 700:fips202.c     **** 
 701:fips202.c     ****     shake128_absorb(&s, input, inlen);
 6835              		.loc 1 701 5
 6836 001e 07F11403 		add	r3, r7, #20
 6837 0022 3A68     		ldr	r2, [r7]
 6838 0024 7968     		ldr	r1, [r7, #4]
 6839 0026 1846     		mov	r0, r3
 6840 0028 FFF7FEFF 		bl	shake128_absorb
 702:fips202.c     ****     shake128_squeezeblocks(output, nblocks, &s);
 6841              		.loc 1 702 5
 6842 002c 07F11403 		add	r3, r7, #20
 6843 0030 1A46     		mov	r2, r3
 6844 0032 D7F8C010 		ldr	r1, [r7, #192]
 6845 0036 F868     		ldr	r0, [r7, #12]
 6846 0038 FFF7FEFF 		bl	shake128_squeezeblocks
 703:fips202.c     **** 
 704:fips202.c     ****     output += nblocks * SHAKE128_RATE;
 6847              		.loc 1 704 23
 6848 003c D7F8C030 		ldr	r3, [r7, #192]
 6849 0040 A822     		movs	r2, #168
 6850 0042 02FB03F3 		mul	r3, r2, r3
 6851              		.loc 1 704 12
 6852 0046 FA68     		ldr	r2, [r7, #12]
 6853 0048 1344     		add	r3, r3, r2
 6854 004a FB60     		str	r3, [r7, #12]
 705:fips202.c     ****     outlen -= nblocks * SHAKE128_RATE;
 6855              		.loc 1 705 23
 6856 004c D7F8C030 		ldr	r3, [r7, #192]
 6857 0050 A822     		movs	r2, #168
 6858 0052 02FB03F3 		mul	r3, r2, r3
 6859              		.loc 1 705 12
 6860 0056 BA68     		ldr	r2, [r7, #8]
 6861 0058 D31A     		subs	r3, r2, r3
 6862 005a BB60     		str	r3, [r7, #8]
 706:fips202.c     **** 
 707:fips202.c     ****     if (outlen) {
 6863              		.loc 1 707 8
 6864 005c BB68     		ldr	r3, [r7, #8]
 6865 005e 002B     		cmp	r3, #0
 6866 0060 20D0     		beq	.L84
 708:fips202.c     ****         shake128_squeezeblocks(t, 1, &s);
 6867              		.loc 1 708 9
 6868 0062 07F11402 		add	r2, r7, #20
 6869 0066 07F11803 		add	r3, r7, #24
 6870 006a 0121     		movs	r1, #1
 6871 006c 1846     		mov	r0, r3
 6872 006e FFF7FEFF 		bl	shake128_squeezeblocks
 6873              	.LBB5:
 709:fips202.c     ****         for (size_t i = 0; i < outlen; ++i) {
 6874              		.loc 1 709 21
 6875 0072 0023     		movs	r3, #0
 6876 0074 C7F8C430 		str	r3, [r7, #196]
 6877              		.loc 1 709 9
 6878 0078 0FE0     		b	.L85
 6879              	.L86:
 710:fips202.c     ****             output[i] = t[i];
 6880              		.loc 1 710 19 discriminator 3
 6881 007a FA68     		ldr	r2, [r7, #12]
 6882 007c D7F8C430 		ldr	r3, [r7, #196]
 6883 0080 1344     		add	r3, r3, r2
 6884              		.loc 1 710 26 discriminator 3
 6885 0082 07F11801 		add	r1, r7, #24
 6886 0086 D7F8C420 		ldr	r2, [r7, #196]
 6887 008a 0A44     		add	r2, r2, r1
 6888 008c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 6889              		.loc 1 710 23 discriminator 3
 6890 008e 1A70     		strb	r2, [r3]
 709:fips202.c     ****         for (size_t i = 0; i < outlen; ++i) {
 6891              		.loc 1 709 40 discriminator 3
 6892 0090 D7F8C430 		ldr	r3, [r7, #196]
 6893 0094 0133     		adds	r3, r3, #1
 6894 0096 C7F8C430 		str	r3, [r7, #196]
 6895              	.L85:
 709:fips202.c     ****         for (size_t i = 0; i < outlen; ++i) {
 6896              		.loc 1 709 9 discriminator 1
 6897 009a D7F8C420 		ldr	r2, [r7, #196]
 6898 009e BB68     		ldr	r3, [r7, #8]
 6899 00a0 9A42     		cmp	r2, r3
 6900 00a2 EAD3     		bcc	.L86
 6901              	.L84:
 6902              	.LBE5:
 711:fips202.c     ****         }
 712:fips202.c     ****     }
 713:fips202.c     ****     shake128_ctx_release(&s);
 6903              		.loc 1 713 5
 6904 00a4 07F11403 		add	r3, r7, #20
 6905 00a8 1846     		mov	r0, r3
 6906 00aa FFF7FEFF 		bl	shake128_ctx_release
 714:fips202.c     **** }
 6907              		.loc 1 714 1
 6908 00ae 00BF     		nop
 6909 00b0 C837     		adds	r7, r7, #200
 6910              	.LCFI153:
 6911              		.cfi_def_cfa_offset 8
 6912 00b2 BD46     		mov	sp, r7
 6913              	.LCFI154:
 6914              		.cfi_def_cfa_register 13
 6915              		@ sp needed
 6916 00b4 80BD     		pop	{r7, pc}
 6917              	.L88:
 6918 00b6 00BF     		.align	2
 6919              	.L87:
 6920 00b8 19866118 		.word	409044505
 6921              		.cfi_endproc
 6922              	.LFE29:
 6924              		.section	.text.shake256,"ax",%progbits
 6925              		.align	1
 6926              		.global	shake256
 6927              		.syntax unified
 6928              		.thumb
 6929              		.thumb_func
 6930              		.fpu softvfp
 6932              	shake256:
 6933              	.LFB30:
 715:fips202.c     **** 
 716:fips202.c     **** /*************************************************
 717:fips202.c     ****  * Name:        shake256
 718:fips202.c     ****  *
 719:fips202.c     ****  * Description: SHAKE256 XOF with non-incremental API
 720:fips202.c     ****  *
 721:fips202.c     ****  * Arguments:   - uint8_t *output: pointer to output
 722:fips202.c     ****  *              - size_t outlen: requested output length in bytes
 723:fips202.c     ****  *              - const uint8_t *input: pointer to input
 724:fips202.c     ****  *              - size_t inlen: length of input in bytes
 725:fips202.c     ****  **************************************************/
 726:fips202.c     **** void shake256(uint8_t *output, size_t outlen,
 727:fips202.c     ****               const uint8_t *input, size_t inlen) {
 6934              		.loc 1 727 51
 6935              		.cfi_startproc
 6936              		@ args = 0, pretend = 0, frame = 168
 6937              		@ frame_needed = 1, uses_anonymous_args = 0
 6938 0000 80B5     		push	{r7, lr}
 6939              	.LCFI155:
 6940              		.cfi_def_cfa_offset 8
 6941              		.cfi_offset 7, -8
 6942              		.cfi_offset 14, -4
 6943 0002 AAB0     		sub	sp, sp, #168
 6944              	.LCFI156:
 6945              		.cfi_def_cfa_offset 176
 6946 0004 00AF     		add	r7, sp, #0
 6947              	.LCFI157:
 6948              		.cfi_def_cfa_register 7
 6949 0006 F860     		str	r0, [r7, #12]
 6950 0008 B960     		str	r1, [r7, #8]
 6951 000a 7A60     		str	r2, [r7, #4]
 6952 000c 3B60     		str	r3, [r7]
 728:fips202.c     ****     size_t nblocks = outlen / SHAKE256_RATE;
 6953              		.loc 1 728 12
 6954 000e BB68     		ldr	r3, [r7, #8]
 6955 0010 2A4A     		ldr	r2, .L93
 6956 0012 A2FB0323 		umull	r2, r3, r2, r3
 6957 0016 DB09     		lsrs	r3, r3, #7
 6958 0018 C7F8A030 		str	r3, [r7, #160]
 729:fips202.c     ****     uint8_t t[SHAKE256_RATE];
 730:fips202.c     ****     shake256ctx s;
 731:fips202.c     **** 
 732:fips202.c     ****     shake256_absorb(&s, input, inlen);
 6959              		.loc 1 732 5
 6960 001c 07F11403 		add	r3, r7, #20
 6961 0020 3A68     		ldr	r2, [r7]
 6962 0022 7968     		ldr	r1, [r7, #4]
 6963 0024 1846     		mov	r0, r3
 6964 0026 FFF7FEFF 		bl	shake256_absorb
 733:fips202.c     ****     shake256_squeezeblocks(output, nblocks, &s);
 6965              		.loc 1 733 5
 6966 002a 07F11403 		add	r3, r7, #20
 6967 002e 1A46     		mov	r2, r3
 6968 0030 D7F8A010 		ldr	r1, [r7, #160]
 6969 0034 F868     		ldr	r0, [r7, #12]
 6970 0036 FFF7FEFF 		bl	shake256_squeezeblocks
 734:fips202.c     **** 
 735:fips202.c     ****     output += nblocks * SHAKE256_RATE;
 6971              		.loc 1 735 23
 6972 003a D7F8A020 		ldr	r2, [r7, #160]
 6973 003e 1346     		mov	r3, r2
 6974 0040 1B01     		lsls	r3, r3, #4
 6975 0042 1344     		add	r3, r3, r2
 6976 0044 DB00     		lsls	r3, r3, #3
 6977 0046 1A46     		mov	r2, r3
 6978              		.loc 1 735 12
 6979 0048 FB68     		ldr	r3, [r7, #12]
 6980 004a 1344     		add	r3, r3, r2
 6981 004c FB60     		str	r3, [r7, #12]
 736:fips202.c     ****     outlen -= nblocks * SHAKE256_RATE;
 6982              		.loc 1 736 23
 6983 004e D7F8A020 		ldr	r2, [r7, #160]
 6984 0052 1346     		mov	r3, r2
 6985 0054 1B01     		lsls	r3, r3, #4
 6986 0056 1344     		add	r3, r3, r2
 6987 0058 DB00     		lsls	r3, r3, #3
 6988 005a 1A46     		mov	r2, r3
 6989              		.loc 1 736 12
 6990 005c BB68     		ldr	r3, [r7, #8]
 6991 005e 9B1A     		subs	r3, r3, r2
 6992 0060 BB60     		str	r3, [r7, #8]
 737:fips202.c     **** 
 738:fips202.c     ****     if (outlen) {
 6993              		.loc 1 738 8
 6994 0062 BB68     		ldr	r3, [r7, #8]
 6995 0064 002B     		cmp	r3, #0
 6996 0066 20D0     		beq	.L90
 739:fips202.c     ****         shake256_squeezeblocks(t, 1, &s);
 6997              		.loc 1 739 9
 6998 0068 07F11402 		add	r2, r7, #20
 6999 006c 07F11803 		add	r3, r7, #24
 7000 0070 0121     		movs	r1, #1
 7001 0072 1846     		mov	r0, r3
 7002 0074 FFF7FEFF 		bl	shake256_squeezeblocks
 7003              	.LBB6:
 740:fips202.c     ****         for (size_t i = 0; i < outlen; ++i) {
 7004              		.loc 1 740 21
 7005 0078 0023     		movs	r3, #0
 7006 007a C7F8A430 		str	r3, [r7, #164]
 7007              		.loc 1 740 9
 7008 007e 0FE0     		b	.L91
 7009              	.L92:
 741:fips202.c     ****             output[i] = t[i];
 7010              		.loc 1 741 19 discriminator 3
 7011 0080 FA68     		ldr	r2, [r7, #12]
 7012 0082 D7F8A430 		ldr	r3, [r7, #164]
 7013 0086 1344     		add	r3, r3, r2
 7014              		.loc 1 741 26 discriminator 3
 7015 0088 07F11801 		add	r1, r7, #24
 7016 008c D7F8A420 		ldr	r2, [r7, #164]
 7017 0090 0A44     		add	r2, r2, r1
 7018 0092 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7019              		.loc 1 741 23 discriminator 3
 7020 0094 1A70     		strb	r2, [r3]
 740:fips202.c     ****         for (size_t i = 0; i < outlen; ++i) {
 7021              		.loc 1 740 40 discriminator 3
 7022 0096 D7F8A430 		ldr	r3, [r7, #164]
 7023 009a 0133     		adds	r3, r3, #1
 7024 009c C7F8A430 		str	r3, [r7, #164]
 7025              	.L91:
 740:fips202.c     ****         for (size_t i = 0; i < outlen; ++i) {
 7026              		.loc 1 740 9 discriminator 1
 7027 00a0 D7F8A420 		ldr	r2, [r7, #164]
 7028 00a4 BB68     		ldr	r3, [r7, #8]
 7029 00a6 9A42     		cmp	r2, r3
 7030 00a8 EAD3     		bcc	.L92
 7031              	.L90:
 7032              	.LBE6:
 742:fips202.c     ****         }
 743:fips202.c     ****     }
 744:fips202.c     ****     shake256_ctx_release(&s);
 7033              		.loc 1 744 5
 7034 00aa 07F11403 		add	r3, r7, #20
 7035 00ae 1846     		mov	r0, r3
 7036 00b0 FFF7FEFF 		bl	shake256_ctx_release
 745:fips202.c     **** }
 7037              		.loc 1 745 1
 7038 00b4 00BF     		nop
 7039 00b6 A837     		adds	r7, r7, #168
 7040              	.LCFI158:
 7041              		.cfi_def_cfa_offset 8
 7042 00b8 BD46     		mov	sp, r7
 7043              	.LCFI159:
 7044              		.cfi_def_cfa_register 13
 7045              		@ sp needed
 7046 00ba 80BD     		pop	{r7, pc}
 7047              	.L94:
 7048              		.align	2
 7049              	.L93:
 7050 00bc F1F0F0F0 		.word	-252645135
 7051              		.cfi_endproc
 7052              	.LFE30:
 7054              		.section	.text.sha3_256_inc_init,"ax",%progbits
 7055              		.align	1
 7056              		.global	sha3_256_inc_init
 7057              		.syntax unified
 7058              		.thumb
 7059              		.thumb_func
 7060              		.fpu softvfp
 7062              	sha3_256_inc_init:
 7063              	.LFB31:
 746:fips202.c     **** 
 747:fips202.c     **** void sha3_256_inc_init(sha3_256incctx *state) {
 7064              		.loc 1 747 47
 7065              		.cfi_startproc
 7066              		@ args = 0, pretend = 0, frame = 8
 7067              		@ frame_needed = 1, uses_anonymous_args = 0
 7068 0000 80B5     		push	{r7, lr}
 7069              	.LCFI160:
 7070              		.cfi_def_cfa_offset 8
 7071              		.cfi_offset 7, -8
 7072              		.cfi_offset 14, -4
 7073 0002 82B0     		sub	sp, sp, #8
 7074              	.LCFI161:
 7075              		.cfi_def_cfa_offset 16
 7076 0004 00AF     		add	r7, sp, #0
 7077              	.LCFI162:
 7078              		.cfi_def_cfa_register 7
 7079 0006 7860     		str	r0, [r7, #4]
 748:fips202.c     ****     state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 7080              		.loc 1 748 18
 7081 0008 D020     		movs	r0, #208
 7082 000a FFF7FEFF 		bl	malloc
 7083 000e 0346     		mov	r3, r0
 7084 0010 1A46     		mov	r2, r3
 7085              		.loc 1 748 16
 7086 0012 7B68     		ldr	r3, [r7, #4]
 7087 0014 1A60     		str	r2, [r3]
 749:fips202.c     ****     if (state->ctx == NULL) {
 7088              		.loc 1 749 14
 7089 0016 7B68     		ldr	r3, [r7, #4]
 7090 0018 1B68     		ldr	r3, [r3]
 7091              		.loc 1 749 8
 7092 001a 002B     		cmp	r3, #0
 7093 001c 02D1     		bne	.L96
 750:fips202.c     ****         exit(111);
 7094              		.loc 1 750 9
 7095 001e 6F20     		movs	r0, #111
 7096 0020 FFF7FEFF 		bl	exit
 7097              	.L96:
 751:fips202.c     ****     }
 752:fips202.c     ****     keccak_inc_init(state->ctx);
 7098              		.loc 1 752 5
 7099 0024 7B68     		ldr	r3, [r7, #4]
 7100 0026 1B68     		ldr	r3, [r3]
 7101 0028 1846     		mov	r0, r3
 7102 002a FFF7FEFF 		bl	keccak_inc_init
 753:fips202.c     **** }
 7103              		.loc 1 753 1
 7104 002e 00BF     		nop
 7105 0030 0837     		adds	r7, r7, #8
 7106              	.LCFI163:
 7107              		.cfi_def_cfa_offset 8
 7108 0032 BD46     		mov	sp, r7
 7109              	.LCFI164:
 7110              		.cfi_def_cfa_register 13
 7111              		@ sp needed
 7112 0034 80BD     		pop	{r7, pc}
 7113              		.cfi_endproc
 7114              	.LFE31:
 7116              		.section	.text.sha3_256_inc_ctx_clone,"ax",%progbits
 7117              		.align	1
 7118              		.global	sha3_256_inc_ctx_clone
 7119              		.syntax unified
 7120              		.thumb
 7121              		.thumb_func
 7122              		.fpu softvfp
 7124              	sha3_256_inc_ctx_clone:
 7125              	.LFB32:
 754:fips202.c     **** 
 755:fips202.c     **** void sha3_256_inc_ctx_clone(sha3_256incctx *dest, const sha3_256incctx *src) {
 7126              		.loc 1 755 78
 7127              		.cfi_startproc
 7128              		@ args = 0, pretend = 0, frame = 8
 7129              		@ frame_needed = 1, uses_anonymous_args = 0
 7130 0000 80B5     		push	{r7, lr}
 7131              	.LCFI165:
 7132              		.cfi_def_cfa_offset 8
 7133              		.cfi_offset 7, -8
 7134              		.cfi_offset 14, -4
 7135 0002 82B0     		sub	sp, sp, #8
 7136              	.LCFI166:
 7137              		.cfi_def_cfa_offset 16
 7138 0004 00AF     		add	r7, sp, #0
 7139              	.LCFI167:
 7140              		.cfi_def_cfa_register 7
 7141 0006 7860     		str	r0, [r7, #4]
 7142 0008 3960     		str	r1, [r7]
 756:fips202.c     ****     dest->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 7143              		.loc 1 756 17
 7144 000a D020     		movs	r0, #208
 7145 000c FFF7FEFF 		bl	malloc
 7146 0010 0346     		mov	r3, r0
 7147 0012 1A46     		mov	r2, r3
 7148              		.loc 1 756 15
 7149 0014 7B68     		ldr	r3, [r7, #4]
 7150 0016 1A60     		str	r2, [r3]
 757:fips202.c     ****     if (dest->ctx == NULL) {
 7151              		.loc 1 757 13
 7152 0018 7B68     		ldr	r3, [r7, #4]
 7153 001a 1B68     		ldr	r3, [r3]
 7154              		.loc 1 757 8
 7155 001c 002B     		cmp	r3, #0
 7156 001e 02D1     		bne	.L98
 758:fips202.c     ****         exit(111);
 7157              		.loc 1 758 9
 7158 0020 6F20     		movs	r0, #111
 7159 0022 FFF7FEFF 		bl	exit
 7160              	.L98:
 759:fips202.c     ****     }
 760:fips202.c     ****     memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
 7161              		.loc 1 760 16
 7162 0026 7B68     		ldr	r3, [r7, #4]
 7163 0028 1868     		ldr	r0, [r3]
 7164              		.loc 1 760 26
 7165 002a 3B68     		ldr	r3, [r7]
 7166 002c 1B68     		ldr	r3, [r3]
 7167              		.loc 1 760 5
 7168 002e D022     		movs	r2, #208
 7169 0030 1946     		mov	r1, r3
 7170 0032 FFF7FEFF 		bl	memcpy
 761:fips202.c     **** }
 7171              		.loc 1 761 1
 7172 0036 00BF     		nop
 7173 0038 0837     		adds	r7, r7, #8
 7174              	.LCFI168:
 7175              		.cfi_def_cfa_offset 8
 7176 003a BD46     		mov	sp, r7
 7177              	.LCFI169:
 7178              		.cfi_def_cfa_register 13
 7179              		@ sp needed
 7180 003c 80BD     		pop	{r7, pc}
 7181              		.cfi_endproc
 7182              	.LFE32:
 7184              		.section	.text.sha3_256_inc_ctx_release,"ax",%progbits
 7185              		.align	1
 7186              		.global	sha3_256_inc_ctx_release
 7187              		.syntax unified
 7188              		.thumb
 7189              		.thumb_func
 7190              		.fpu softvfp
 7192              	sha3_256_inc_ctx_release:
 7193              	.LFB33:
 762:fips202.c     **** 
 763:fips202.c     **** void sha3_256_inc_ctx_release(sha3_256incctx *state) {
 7194              		.loc 1 763 54
 7195              		.cfi_startproc
 7196              		@ args = 0, pretend = 0, frame = 8
 7197              		@ frame_needed = 1, uses_anonymous_args = 0
 7198 0000 80B5     		push	{r7, lr}
 7199              	.LCFI170:
 7200              		.cfi_def_cfa_offset 8
 7201              		.cfi_offset 7, -8
 7202              		.cfi_offset 14, -4
 7203 0002 82B0     		sub	sp, sp, #8
 7204              	.LCFI171:
 7205              		.cfi_def_cfa_offset 16
 7206 0004 00AF     		add	r7, sp, #0
 7207              	.LCFI172:
 7208              		.cfi_def_cfa_register 7
 7209 0006 7860     		str	r0, [r7, #4]
 764:fips202.c     ****     free(state->ctx);
 7210              		.loc 1 764 15
 7211 0008 7B68     		ldr	r3, [r7, #4]
 7212 000a 1B68     		ldr	r3, [r3]
 7213              		.loc 1 764 5
 7214 000c 1846     		mov	r0, r3
 7215 000e FFF7FEFF 		bl	free
 765:fips202.c     **** }
 7216              		.loc 1 765 1
 7217 0012 00BF     		nop
 7218 0014 0837     		adds	r7, r7, #8
 7219              	.LCFI173:
 7220              		.cfi_def_cfa_offset 8
 7221 0016 BD46     		mov	sp, r7
 7222              	.LCFI174:
 7223              		.cfi_def_cfa_register 13
 7224              		@ sp needed
 7225 0018 80BD     		pop	{r7, pc}
 7226              		.cfi_endproc
 7227              	.LFE33:
 7229              		.section	.text.sha3_256_inc_absorb,"ax",%progbits
 7230              		.align	1
 7231              		.global	sha3_256_inc_absorb
 7232              		.syntax unified
 7233              		.thumb
 7234              		.thumb_func
 7235              		.fpu softvfp
 7237              	sha3_256_inc_absorb:
 7238              	.LFB34:
 766:fips202.c     **** 
 767:fips202.c     **** void sha3_256_inc_absorb(sha3_256incctx *state, const uint8_t *input, size_t inlen) {
 7239              		.loc 1 767 85
 7240              		.cfi_startproc
 7241              		@ args = 0, pretend = 0, frame = 16
 7242              		@ frame_needed = 1, uses_anonymous_args = 0
 7243 0000 80B5     		push	{r7, lr}
 7244              	.LCFI175:
 7245              		.cfi_def_cfa_offset 8
 7246              		.cfi_offset 7, -8
 7247              		.cfi_offset 14, -4
 7248 0002 84B0     		sub	sp, sp, #16
 7249              	.LCFI176:
 7250              		.cfi_def_cfa_offset 24
 7251 0004 00AF     		add	r7, sp, #0
 7252              	.LCFI177:
 7253              		.cfi_def_cfa_register 7
 7254 0006 F860     		str	r0, [r7, #12]
 7255 0008 B960     		str	r1, [r7, #8]
 7256 000a 7A60     		str	r2, [r7, #4]
 768:fips202.c     ****     keccak_inc_absorb(state->ctx, SHA3_256_RATE, input, inlen);
 7257              		.loc 1 768 5
 7258 000c FB68     		ldr	r3, [r7, #12]
 7259 000e 1868     		ldr	r0, [r3]
 7260 0010 7B68     		ldr	r3, [r7, #4]
 7261 0012 BA68     		ldr	r2, [r7, #8]
 7262 0014 8821     		movs	r1, #136
 7263 0016 FFF7FEFF 		bl	keccak_inc_absorb
 769:fips202.c     **** }
 7264              		.loc 1 769 1
 7265 001a 00BF     		nop
 7266 001c 1037     		adds	r7, r7, #16
 7267              	.LCFI178:
 7268              		.cfi_def_cfa_offset 8
 7269 001e BD46     		mov	sp, r7
 7270              	.LCFI179:
 7271              		.cfi_def_cfa_register 13
 7272              		@ sp needed
 7273 0020 80BD     		pop	{r7, pc}
 7274              		.cfi_endproc
 7275              	.LFE34:
 7277              		.section	.text.sha3_256_inc_finalize,"ax",%progbits
 7278              		.align	1
 7279              		.global	sha3_256_inc_finalize
 7280              		.syntax unified
 7281              		.thumb
 7282              		.thumb_func
 7283              		.fpu softvfp
 7285              	sha3_256_inc_finalize:
 7286              	.LFB35:
 770:fips202.c     **** 
 771:fips202.c     **** void sha3_256_inc_finalize(uint8_t *output, sha3_256incctx *state) {
 7287              		.loc 1 771 68
 7288              		.cfi_startproc
 7289              		@ args = 0, pretend = 0, frame = 152
 7290              		@ frame_needed = 1, uses_anonymous_args = 0
 7291 0000 80B5     		push	{r7, lr}
 7292              	.LCFI180:
 7293              		.cfi_def_cfa_offset 8
 7294              		.cfi_offset 7, -8
 7295              		.cfi_offset 14, -4
 7296 0002 A6B0     		sub	sp, sp, #152
 7297              	.LCFI181:
 7298              		.cfi_def_cfa_offset 160
 7299 0004 00AF     		add	r7, sp, #0
 7300              	.LCFI182:
 7301              		.cfi_def_cfa_register 7
 7302 0006 7860     		str	r0, [r7, #4]
 7303 0008 3960     		str	r1, [r7]
 772:fips202.c     ****     uint8_t t[SHA3_256_RATE];
 773:fips202.c     ****     keccak_inc_finalize(state->ctx, SHA3_256_RATE, 0x06);
 7304              		.loc 1 773 5
 7305 000a 3B68     		ldr	r3, [r7]
 7306 000c 1B68     		ldr	r3, [r3]
 7307 000e 0622     		movs	r2, #6
 7308 0010 8821     		movs	r1, #136
 7309 0012 1846     		mov	r0, r3
 7310 0014 FFF7FEFF 		bl	keccak_inc_finalize
 774:fips202.c     **** 
 775:fips202.c     ****     keccak_squeezeblocks(t, 1, state->ctx, SHA3_256_RATE);
 7311              		.loc 1 775 5
 7312 0018 3B68     		ldr	r3, [r7]
 7313 001a 1A68     		ldr	r2, [r3]
 7314 001c 07F10C00 		add	r0, r7, #12
 7315 0020 8823     		movs	r3, #136
 7316 0022 0121     		movs	r1, #1
 7317 0024 FFF7FEFF 		bl	keccak_squeezeblocks
 776:fips202.c     **** 
 777:fips202.c     ****     sha3_256_inc_ctx_release(state);
 7318              		.loc 1 777 5
 7319 0028 3868     		ldr	r0, [r7]
 7320 002a FFF7FEFF 		bl	sha3_256_inc_ctx_release
 7321              	.LBB7:
 778:fips202.c     **** 
 779:fips202.c     ****     for (size_t i = 0; i < 32; i++) {
 7322              		.loc 1 779 17
 7323 002e 0023     		movs	r3, #0
 7324 0030 C7F89430 		str	r3, [r7, #148]
 7325              		.loc 1 779 5
 7326 0034 0FE0     		b	.L102
 7327              	.L103:
 780:fips202.c     ****         output[i] = t[i];
 7328              		.loc 1 780 15 discriminator 3
 7329 0036 7A68     		ldr	r2, [r7, #4]
 7330 0038 D7F89430 		ldr	r3, [r7, #148]
 7331 003c 1344     		add	r3, r3, r2
 7332              		.loc 1 780 22 discriminator 3
 7333 003e 07F10C01 		add	r1, r7, #12
 7334 0042 D7F89420 		ldr	r2, [r7, #148]
 7335 0046 0A44     		add	r2, r2, r1
 7336 0048 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7337              		.loc 1 780 19 discriminator 3
 7338 004a 1A70     		strb	r2, [r3]
 779:fips202.c     ****         output[i] = t[i];
 7339              		.loc 1 779 33 discriminator 3
 7340 004c D7F89430 		ldr	r3, [r7, #148]
 7341 0050 0133     		adds	r3, r3, #1
 7342 0052 C7F89430 		str	r3, [r7, #148]
 7343              	.L102:
 779:fips202.c     ****         output[i] = t[i];
 7344              		.loc 1 779 5 discriminator 1
 7345 0056 D7F89430 		ldr	r3, [r7, #148]
 7346 005a 1F2B     		cmp	r3, #31
 7347 005c EBD9     		bls	.L103
 7348              	.LBE7:
 781:fips202.c     ****     }
 782:fips202.c     **** }
 7349              		.loc 1 782 1
 7350 005e 00BF     		nop
 7351 0060 00BF     		nop
 7352 0062 9837     		adds	r7, r7, #152
 7353              	.LCFI183:
 7354              		.cfi_def_cfa_offset 8
 7355 0064 BD46     		mov	sp, r7
 7356              	.LCFI184:
 7357              		.cfi_def_cfa_register 13
 7358              		@ sp needed
 7359 0066 80BD     		pop	{r7, pc}
 7360              		.cfi_endproc
 7361              	.LFE35:
 7363              		.section	.text.sha3_256,"ax",%progbits
 7364              		.align	1
 7365              		.global	sha3_256
 7366              		.syntax unified
 7367              		.thumb
 7368              		.thumb_func
 7369              		.fpu softvfp
 7371              	sha3_256:
 7372              	.LFB36:
 783:fips202.c     **** 
 784:fips202.c     **** /*************************************************
 785:fips202.c     ****  * Name:        sha3_256
 786:fips202.c     ****  *
 787:fips202.c     ****  * Description: SHA3-256 with non-incremental API
 788:fips202.c     ****  *
 789:fips202.c     ****  * Arguments:   - uint8_t *output:      pointer to output
 790:fips202.c     ****  *              - const uint8_t *input: pointer to input
 791:fips202.c     ****  *              - size_t inlen:   length of input in bytes
 792:fips202.c     ****  **************************************************/
 793:fips202.c     **** void sha3_256(uint8_t *output, const uint8_t *input, size_t inlen) {
 7373              		.loc 1 793 68
 7374              		.cfi_startproc
 7375              		@ args = 0, pretend = 0, frame = 360
 7376              		@ frame_needed = 1, uses_anonymous_args = 0
 7377 0000 80B5     		push	{r7, lr}
 7378              	.LCFI185:
 7379              		.cfi_def_cfa_offset 8
 7380              		.cfi_offset 7, -8
 7381              		.cfi_offset 14, -4
 7382 0002 DCB0     		sub	sp, sp, #368
 7383              	.LCFI186:
 7384              		.cfi_def_cfa_offset 376
 7385 0004 02AF     		add	r7, sp, #8
 7386              	.LCFI187:
 7387              		.cfi_def_cfa 7, 368
 7388 0006 07F5B473 		add	r3, r7, #360
 7389 000a A3F5AE73 		sub	r3, r3, #348
 7390 000e 1860     		str	r0, [r3]
 7391 0010 07F5B473 		add	r3, r7, #360
 7392 0014 A3F5B073 		sub	r3, r3, #352
 7393 0018 1960     		str	r1, [r3]
 7394 001a 07F5B473 		add	r3, r7, #360
 7395 001e A3F5B273 		sub	r3, r3, #356
 7396 0022 1A60     		str	r2, [r3]
 794:fips202.c     ****     uint64_t s[25];
 795:fips202.c     ****     uint8_t t[SHA3_256_RATE];
 796:fips202.c     **** 
 797:fips202.c     ****     /* Absorb input */
 798:fips202.c     ****     keccak_absorb(s, SHA3_256_RATE, input, inlen, 0x06);
 7397              		.loc 1 798 5
 7398 0024 07F5B473 		add	r3, r7, #360
 7399 0028 A3F5B273 		sub	r3, r3, #356
 7400 002c 07F5B472 		add	r2, r7, #360
 7401 0030 A2F5B072 		sub	r2, r2, #352
 7402 0034 07F19800 		add	r0, r7, #152
 7403 0038 0621     		movs	r1, #6
 7404 003a 0091     		str	r1, [sp]
 7405 003c 1B68     		ldr	r3, [r3]
 7406 003e 1268     		ldr	r2, [r2]
 7407 0040 8821     		movs	r1, #136
 7408 0042 FFF7FEFF 		bl	keccak_absorb
 799:fips202.c     **** 
 800:fips202.c     ****     /* Squeeze output */
 801:fips202.c     ****     keccak_squeezeblocks(t, 1, s, SHA3_256_RATE);
 7409              		.loc 1 801 5
 7410 0046 07F19802 		add	r2, r7, #152
 7411 004a 07F11000 		add	r0, r7, #16
 7412 004e 8823     		movs	r3, #136
 7413 0050 0121     		movs	r1, #1
 7414 0052 FFF7FEFF 		bl	keccak_squeezeblocks
 7415              	.LBB8:
 802:fips202.c     **** 
 803:fips202.c     ****     for (size_t i = 0; i < 32; i++) {
 7416              		.loc 1 803 17
 7417 0056 0023     		movs	r3, #0
 7418 0058 C7F86431 		str	r3, [r7, #356]
 7419              		.loc 1 803 5
 7420 005c 15E0     		b	.L105
 7421              	.L106:
 804:fips202.c     ****         output[i] = t[i];
 7422              		.loc 1 804 15 discriminator 3
 7423 005e 07F5B473 		add	r3, r7, #360
 7424 0062 A3F5AE73 		sub	r3, r3, #348
 7425 0066 1A68     		ldr	r2, [r3]
 7426 0068 D7F86431 		ldr	r3, [r7, #356]
 7427 006c 1344     		add	r3, r3, r2
 7428              		.loc 1 804 22 discriminator 3
 7429 006e 07F5B472 		add	r2, r7, #360
 7430 0072 A2F5AC71 		sub	r1, r2, #344
 7431 0076 D7F86421 		ldr	r2, [r7, #356]
 7432 007a 0A44     		add	r2, r2, r1
 7433 007c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7434              		.loc 1 804 19 discriminator 3
 7435 007e 1A70     		strb	r2, [r3]
 803:fips202.c     ****         output[i] = t[i];
 7436              		.loc 1 803 33 discriminator 3
 7437 0080 D7F86431 		ldr	r3, [r7, #356]
 7438 0084 0133     		adds	r3, r3, #1
 7439 0086 C7F86431 		str	r3, [r7, #356]
 7440              	.L105:
 803:fips202.c     ****         output[i] = t[i];
 7441              		.loc 1 803 5 discriminator 1
 7442 008a D7F86431 		ldr	r3, [r7, #356]
 7443 008e 1F2B     		cmp	r3, #31
 7444 0090 E5D9     		bls	.L106
 7445              	.LBE8:
 805:fips202.c     ****     }
 806:fips202.c     **** }
 7446              		.loc 1 806 1
 7447 0092 00BF     		nop
 7448 0094 00BF     		nop
 7449 0096 07F5B477 		add	r7, r7, #360
 7450              	.LCFI188:
 7451              		.cfi_def_cfa_offset 8
 7452 009a BD46     		mov	sp, r7
 7453              	.LCFI189:
 7454              		.cfi_def_cfa_register 13
 7455              		@ sp needed
 7456 009c 80BD     		pop	{r7, pc}
 7457              		.cfi_endproc
 7458              	.LFE36:
 7460              		.section	.text.sha3_384_inc_init,"ax",%progbits
 7461              		.align	1
 7462              		.global	sha3_384_inc_init
 7463              		.syntax unified
 7464              		.thumb
 7465              		.thumb_func
 7466              		.fpu softvfp
 7468              	sha3_384_inc_init:
 7469              	.LFB37:
 807:fips202.c     **** 
 808:fips202.c     **** void sha3_384_inc_init(sha3_384incctx *state) {
 7470              		.loc 1 808 47
 7471              		.cfi_startproc
 7472              		@ args = 0, pretend = 0, frame = 8
 7473              		@ frame_needed = 1, uses_anonymous_args = 0
 7474 0000 80B5     		push	{r7, lr}
 7475              	.LCFI190:
 7476              		.cfi_def_cfa_offset 8
 7477              		.cfi_offset 7, -8
 7478              		.cfi_offset 14, -4
 7479 0002 82B0     		sub	sp, sp, #8
 7480              	.LCFI191:
 7481              		.cfi_def_cfa_offset 16
 7482 0004 00AF     		add	r7, sp, #0
 7483              	.LCFI192:
 7484              		.cfi_def_cfa_register 7
 7485 0006 7860     		str	r0, [r7, #4]
 809:fips202.c     ****     state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 7486              		.loc 1 809 18
 7487 0008 D020     		movs	r0, #208
 7488 000a FFF7FEFF 		bl	malloc
 7489 000e 0346     		mov	r3, r0
 7490 0010 1A46     		mov	r2, r3
 7491              		.loc 1 809 16
 7492 0012 7B68     		ldr	r3, [r7, #4]
 7493 0014 1A60     		str	r2, [r3]
 810:fips202.c     ****     if (state->ctx == NULL) {
 7494              		.loc 1 810 14
 7495 0016 7B68     		ldr	r3, [r7, #4]
 7496 0018 1B68     		ldr	r3, [r3]
 7497              		.loc 1 810 8
 7498 001a 002B     		cmp	r3, #0
 7499 001c 02D1     		bne	.L108
 811:fips202.c     ****         exit(111);
 7500              		.loc 1 811 9
 7501 001e 6F20     		movs	r0, #111
 7502 0020 FFF7FEFF 		bl	exit
 7503              	.L108:
 812:fips202.c     ****     }
 813:fips202.c     ****     keccak_inc_init(state->ctx);
 7504              		.loc 1 813 5
 7505 0024 7B68     		ldr	r3, [r7, #4]
 7506 0026 1B68     		ldr	r3, [r3]
 7507 0028 1846     		mov	r0, r3
 7508 002a FFF7FEFF 		bl	keccak_inc_init
 814:fips202.c     **** }
 7509              		.loc 1 814 1
 7510 002e 00BF     		nop
 7511 0030 0837     		adds	r7, r7, #8
 7512              	.LCFI193:
 7513              		.cfi_def_cfa_offset 8
 7514 0032 BD46     		mov	sp, r7
 7515              	.LCFI194:
 7516              		.cfi_def_cfa_register 13
 7517              		@ sp needed
 7518 0034 80BD     		pop	{r7, pc}
 7519              		.cfi_endproc
 7520              	.LFE37:
 7522              		.section	.text.sha3_384_inc_ctx_clone,"ax",%progbits
 7523              		.align	1
 7524              		.global	sha3_384_inc_ctx_clone
 7525              		.syntax unified
 7526              		.thumb
 7527              		.thumb_func
 7528              		.fpu softvfp
 7530              	sha3_384_inc_ctx_clone:
 7531              	.LFB38:
 815:fips202.c     **** 
 816:fips202.c     **** void sha3_384_inc_ctx_clone(sha3_384incctx *dest, const sha3_384incctx *src) {
 7532              		.loc 1 816 78
 7533              		.cfi_startproc
 7534              		@ args = 0, pretend = 0, frame = 8
 7535              		@ frame_needed = 1, uses_anonymous_args = 0
 7536 0000 80B5     		push	{r7, lr}
 7537              	.LCFI195:
 7538              		.cfi_def_cfa_offset 8
 7539              		.cfi_offset 7, -8
 7540              		.cfi_offset 14, -4
 7541 0002 82B0     		sub	sp, sp, #8
 7542              	.LCFI196:
 7543              		.cfi_def_cfa_offset 16
 7544 0004 00AF     		add	r7, sp, #0
 7545              	.LCFI197:
 7546              		.cfi_def_cfa_register 7
 7547 0006 7860     		str	r0, [r7, #4]
 7548 0008 3960     		str	r1, [r7]
 817:fips202.c     ****     dest->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 7549              		.loc 1 817 17
 7550 000a D020     		movs	r0, #208
 7551 000c FFF7FEFF 		bl	malloc
 7552 0010 0346     		mov	r3, r0
 7553 0012 1A46     		mov	r2, r3
 7554              		.loc 1 817 15
 7555 0014 7B68     		ldr	r3, [r7, #4]
 7556 0016 1A60     		str	r2, [r3]
 818:fips202.c     ****     if (dest->ctx == NULL) {
 7557              		.loc 1 818 13
 7558 0018 7B68     		ldr	r3, [r7, #4]
 7559 001a 1B68     		ldr	r3, [r3]
 7560              		.loc 1 818 8
 7561 001c 002B     		cmp	r3, #0
 7562 001e 02D1     		bne	.L110
 819:fips202.c     ****         exit(111);
 7563              		.loc 1 819 9
 7564 0020 6F20     		movs	r0, #111
 7565 0022 FFF7FEFF 		bl	exit
 7566              	.L110:
 820:fips202.c     ****     }
 821:fips202.c     ****     memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
 7567              		.loc 1 821 16
 7568 0026 7B68     		ldr	r3, [r7, #4]
 7569 0028 1868     		ldr	r0, [r3]
 7570              		.loc 1 821 26
 7571 002a 3B68     		ldr	r3, [r7]
 7572 002c 1B68     		ldr	r3, [r3]
 7573              		.loc 1 821 5
 7574 002e D022     		movs	r2, #208
 7575 0030 1946     		mov	r1, r3
 7576 0032 FFF7FEFF 		bl	memcpy
 822:fips202.c     **** }
 7577              		.loc 1 822 1
 7578 0036 00BF     		nop
 7579 0038 0837     		adds	r7, r7, #8
 7580              	.LCFI198:
 7581              		.cfi_def_cfa_offset 8
 7582 003a BD46     		mov	sp, r7
 7583              	.LCFI199:
 7584              		.cfi_def_cfa_register 13
 7585              		@ sp needed
 7586 003c 80BD     		pop	{r7, pc}
 7587              		.cfi_endproc
 7588              	.LFE38:
 7590              		.section	.text.sha3_384_inc_absorb,"ax",%progbits
 7591              		.align	1
 7592              		.global	sha3_384_inc_absorb
 7593              		.syntax unified
 7594              		.thumb
 7595              		.thumb_func
 7596              		.fpu softvfp
 7598              	sha3_384_inc_absorb:
 7599              	.LFB39:
 823:fips202.c     **** 
 824:fips202.c     **** void sha3_384_inc_absorb(sha3_384incctx *state, const uint8_t *input, size_t inlen) {
 7600              		.loc 1 824 85
 7601              		.cfi_startproc
 7602              		@ args = 0, pretend = 0, frame = 16
 7603              		@ frame_needed = 1, uses_anonymous_args = 0
 7604 0000 80B5     		push	{r7, lr}
 7605              	.LCFI200:
 7606              		.cfi_def_cfa_offset 8
 7607              		.cfi_offset 7, -8
 7608              		.cfi_offset 14, -4
 7609 0002 84B0     		sub	sp, sp, #16
 7610              	.LCFI201:
 7611              		.cfi_def_cfa_offset 24
 7612 0004 00AF     		add	r7, sp, #0
 7613              	.LCFI202:
 7614              		.cfi_def_cfa_register 7
 7615 0006 F860     		str	r0, [r7, #12]
 7616 0008 B960     		str	r1, [r7, #8]
 7617 000a 7A60     		str	r2, [r7, #4]
 825:fips202.c     ****     keccak_inc_absorb(state->ctx, SHA3_384_RATE, input, inlen);
 7618              		.loc 1 825 5
 7619 000c FB68     		ldr	r3, [r7, #12]
 7620 000e 1868     		ldr	r0, [r3]
 7621 0010 7B68     		ldr	r3, [r7, #4]
 7622 0012 BA68     		ldr	r2, [r7, #8]
 7623 0014 6821     		movs	r1, #104
 7624 0016 FFF7FEFF 		bl	keccak_inc_absorb
 826:fips202.c     **** }
 7625              		.loc 1 826 1
 7626 001a 00BF     		nop
 7627 001c 1037     		adds	r7, r7, #16
 7628              	.LCFI203:
 7629              		.cfi_def_cfa_offset 8
 7630 001e BD46     		mov	sp, r7
 7631              	.LCFI204:
 7632              		.cfi_def_cfa_register 13
 7633              		@ sp needed
 7634 0020 80BD     		pop	{r7, pc}
 7635              		.cfi_endproc
 7636              	.LFE39:
 7638              		.section	.text.sha3_384_inc_ctx_release,"ax",%progbits
 7639              		.align	1
 7640              		.global	sha3_384_inc_ctx_release
 7641              		.syntax unified
 7642              		.thumb
 7643              		.thumb_func
 7644              		.fpu softvfp
 7646              	sha3_384_inc_ctx_release:
 7647              	.LFB40:
 827:fips202.c     **** 
 828:fips202.c     **** void sha3_384_inc_ctx_release(sha3_384incctx *state) {
 7648              		.loc 1 828 54
 7649              		.cfi_startproc
 7650              		@ args = 0, pretend = 0, frame = 8
 7651              		@ frame_needed = 1, uses_anonymous_args = 0
 7652 0000 80B5     		push	{r7, lr}
 7653              	.LCFI205:
 7654              		.cfi_def_cfa_offset 8
 7655              		.cfi_offset 7, -8
 7656              		.cfi_offset 14, -4
 7657 0002 82B0     		sub	sp, sp, #8
 7658              	.LCFI206:
 7659              		.cfi_def_cfa_offset 16
 7660 0004 00AF     		add	r7, sp, #0
 7661              	.LCFI207:
 7662              		.cfi_def_cfa_register 7
 7663 0006 7860     		str	r0, [r7, #4]
 829:fips202.c     ****     free(state->ctx);
 7664              		.loc 1 829 15
 7665 0008 7B68     		ldr	r3, [r7, #4]
 7666 000a 1B68     		ldr	r3, [r3]
 7667              		.loc 1 829 5
 7668 000c 1846     		mov	r0, r3
 7669 000e FFF7FEFF 		bl	free
 830:fips202.c     **** }
 7670              		.loc 1 830 1
 7671 0012 00BF     		nop
 7672 0014 0837     		adds	r7, r7, #8
 7673              	.LCFI208:
 7674              		.cfi_def_cfa_offset 8
 7675 0016 BD46     		mov	sp, r7
 7676              	.LCFI209:
 7677              		.cfi_def_cfa_register 13
 7678              		@ sp needed
 7679 0018 80BD     		pop	{r7, pc}
 7680              		.cfi_endproc
 7681              	.LFE40:
 7683              		.section	.text.sha3_384_inc_finalize,"ax",%progbits
 7684              		.align	1
 7685              		.global	sha3_384_inc_finalize
 7686              		.syntax unified
 7687              		.thumb
 7688              		.thumb_func
 7689              		.fpu softvfp
 7691              	sha3_384_inc_finalize:
 7692              	.LFB41:
 831:fips202.c     **** 
 832:fips202.c     **** void sha3_384_inc_finalize(uint8_t *output, sha3_384incctx *state) {
 7693              		.loc 1 832 68
 7694              		.cfi_startproc
 7695              		@ args = 0, pretend = 0, frame = 120
 7696              		@ frame_needed = 1, uses_anonymous_args = 0
 7697 0000 80B5     		push	{r7, lr}
 7698              	.LCFI210:
 7699              		.cfi_def_cfa_offset 8
 7700              		.cfi_offset 7, -8
 7701              		.cfi_offset 14, -4
 7702 0002 9EB0     		sub	sp, sp, #120
 7703              	.LCFI211:
 7704              		.cfi_def_cfa_offset 128
 7705 0004 00AF     		add	r7, sp, #0
 7706              	.LCFI212:
 7707              		.cfi_def_cfa_register 7
 7708 0006 7860     		str	r0, [r7, #4]
 7709 0008 3960     		str	r1, [r7]
 833:fips202.c     ****     uint8_t t[SHA3_384_RATE];
 834:fips202.c     ****     keccak_inc_finalize(state->ctx, SHA3_384_RATE, 0x06);
 7710              		.loc 1 834 5
 7711 000a 3B68     		ldr	r3, [r7]
 7712 000c 1B68     		ldr	r3, [r3]
 7713 000e 0622     		movs	r2, #6
 7714 0010 6821     		movs	r1, #104
 7715 0012 1846     		mov	r0, r3
 7716 0014 FFF7FEFF 		bl	keccak_inc_finalize
 835:fips202.c     **** 
 836:fips202.c     ****     keccak_squeezeblocks(t, 1, state->ctx, SHA3_384_RATE);
 7717              		.loc 1 836 5
 7718 0018 3B68     		ldr	r3, [r7]
 7719 001a 1A68     		ldr	r2, [r3]
 7720 001c 07F10C00 		add	r0, r7, #12
 7721 0020 6823     		movs	r3, #104
 7722 0022 0121     		movs	r1, #1
 7723 0024 FFF7FEFF 		bl	keccak_squeezeblocks
 837:fips202.c     **** 
 838:fips202.c     ****     sha3_384_inc_ctx_release(state);
 7724              		.loc 1 838 5
 7725 0028 3868     		ldr	r0, [r7]
 7726 002a FFF7FEFF 		bl	sha3_384_inc_ctx_release
 7727              	.LBB9:
 839:fips202.c     **** 
 840:fips202.c     ****     for (size_t i = 0; i < 48; i++) {
 7728              		.loc 1 840 17
 7729 002e 0023     		movs	r3, #0
 7730 0030 7B67     		str	r3, [r7, #116]
 7731              		.loc 1 840 5
 7732 0032 0BE0     		b	.L114
 7733              	.L115:
 841:fips202.c     ****         output[i] = t[i];
 7734              		.loc 1 841 15 discriminator 3
 7735 0034 7A68     		ldr	r2, [r7, #4]
 7736 0036 7B6F     		ldr	r3, [r7, #116]
 7737 0038 1344     		add	r3, r3, r2
 7738              		.loc 1 841 22 discriminator 3
 7739 003a 07F10C01 		add	r1, r7, #12
 7740 003e 7A6F     		ldr	r2, [r7, #116]
 7741 0040 0A44     		add	r2, r2, r1
 7742 0042 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7743              		.loc 1 841 19 discriminator 3
 7744 0044 1A70     		strb	r2, [r3]
 840:fips202.c     ****         output[i] = t[i];
 7745              		.loc 1 840 33 discriminator 3
 7746 0046 7B6F     		ldr	r3, [r7, #116]
 7747 0048 0133     		adds	r3, r3, #1
 7748 004a 7B67     		str	r3, [r7, #116]
 7749              	.L114:
 840:fips202.c     ****         output[i] = t[i];
 7750              		.loc 1 840 5 discriminator 1
 7751 004c 7B6F     		ldr	r3, [r7, #116]
 7752 004e 2F2B     		cmp	r3, #47
 7753 0050 F0D9     		bls	.L115
 7754              	.LBE9:
 842:fips202.c     ****     }
 843:fips202.c     **** }
 7755              		.loc 1 843 1
 7756 0052 00BF     		nop
 7757 0054 00BF     		nop
 7758 0056 7837     		adds	r7, r7, #120
 7759              	.LCFI213:
 7760              		.cfi_def_cfa_offset 8
 7761 0058 BD46     		mov	sp, r7
 7762              	.LCFI214:
 7763              		.cfi_def_cfa_register 13
 7764              		@ sp needed
 7765 005a 80BD     		pop	{r7, pc}
 7766              		.cfi_endproc
 7767              	.LFE41:
 7769              		.section	.text.sha3_384,"ax",%progbits
 7770              		.align	1
 7771              		.global	sha3_384
 7772              		.syntax unified
 7773              		.thumb
 7774              		.thumb_func
 7775              		.fpu softvfp
 7777              	sha3_384:
 7778              	.LFB42:
 844:fips202.c     **** 
 845:fips202.c     **** /*************************************************
 846:fips202.c     ****  * Name:        sha3_384
 847:fips202.c     ****  *
 848:fips202.c     ****  * Description: SHA3-256 with non-incremental API
 849:fips202.c     ****  *
 850:fips202.c     ****  * Arguments:   - uint8_t *output:      pointer to output
 851:fips202.c     ****  *              - const uint8_t *input: pointer to input
 852:fips202.c     ****  *              - size_t inlen:   length of input in bytes
 853:fips202.c     ****  **************************************************/
 854:fips202.c     **** void sha3_384(uint8_t *output, const uint8_t *input, size_t inlen) {
 7779              		.loc 1 854 68
 7780              		.cfi_startproc
 7781              		@ args = 0, pretend = 0, frame = 328
 7782              		@ frame_needed = 1, uses_anonymous_args = 0
 7783 0000 80B5     		push	{r7, lr}
 7784              	.LCFI215:
 7785              		.cfi_def_cfa_offset 8
 7786              		.cfi_offset 7, -8
 7787              		.cfi_offset 14, -4
 7788 0002 D4B0     		sub	sp, sp, #336
 7789              	.LCFI216:
 7790              		.cfi_def_cfa_offset 344
 7791 0004 02AF     		add	r7, sp, #8
 7792              	.LCFI217:
 7793              		.cfi_def_cfa 7, 336
 7794 0006 07F5A473 		add	r3, r7, #328
 7795 000a A3F59E73 		sub	r3, r3, #316
 7796 000e 1860     		str	r0, [r3]
 7797 0010 07F5A473 		add	r3, r7, #328
 7798 0014 A3F5A073 		sub	r3, r3, #320
 7799 0018 1960     		str	r1, [r3]
 7800 001a 07F5A473 		add	r3, r7, #328
 7801 001e A3F5A273 		sub	r3, r3, #324
 7802 0022 1A60     		str	r2, [r3]
 855:fips202.c     ****     uint64_t s[25];
 856:fips202.c     ****     uint8_t t[SHA3_384_RATE];
 857:fips202.c     **** 
 858:fips202.c     ****     /* Absorb input */
 859:fips202.c     ****     keccak_absorb(s, SHA3_384_RATE, input, inlen, 0x06);
 7803              		.loc 1 859 5
 7804 0024 07F5A473 		add	r3, r7, #328
 7805 0028 A3F5A273 		sub	r3, r3, #324
 7806 002c 07F5A472 		add	r2, r7, #328
 7807 0030 A2F5A072 		sub	r2, r2, #320
 7808 0034 07F17800 		add	r0, r7, #120
 7809 0038 0621     		movs	r1, #6
 7810 003a 0091     		str	r1, [sp]
 7811 003c 1B68     		ldr	r3, [r3]
 7812 003e 1268     		ldr	r2, [r2]
 7813 0040 6821     		movs	r1, #104
 7814 0042 FFF7FEFF 		bl	keccak_absorb
 860:fips202.c     **** 
 861:fips202.c     ****     /* Squeeze output */
 862:fips202.c     ****     keccak_squeezeblocks(t, 1, s, SHA3_384_RATE);
 7815              		.loc 1 862 5
 7816 0046 07F17802 		add	r2, r7, #120
 7817 004a 07F11000 		add	r0, r7, #16
 7818 004e 6823     		movs	r3, #104
 7819 0050 0121     		movs	r1, #1
 7820 0052 FFF7FEFF 		bl	keccak_squeezeblocks
 7821              	.LBB10:
 863:fips202.c     **** 
 864:fips202.c     ****     for (size_t i = 0; i < 48; i++) {
 7822              		.loc 1 864 17
 7823 0056 0023     		movs	r3, #0
 7824 0058 C7F84431 		str	r3, [r7, #324]
 7825              		.loc 1 864 5
 7826 005c 15E0     		b	.L117
 7827              	.L118:
 865:fips202.c     ****         output[i] = t[i];
 7828              		.loc 1 865 15 discriminator 3
 7829 005e 07F5A473 		add	r3, r7, #328
 7830 0062 A3F59E73 		sub	r3, r3, #316
 7831 0066 1A68     		ldr	r2, [r3]
 7832 0068 D7F84431 		ldr	r3, [r7, #324]
 7833 006c 1344     		add	r3, r3, r2
 7834              		.loc 1 865 22 discriminator 3
 7835 006e 07F5A472 		add	r2, r7, #328
 7836 0072 A2F59C71 		sub	r1, r2, #312
 7837 0076 D7F84421 		ldr	r2, [r7, #324]
 7838 007a 0A44     		add	r2, r2, r1
 7839 007c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7840              		.loc 1 865 19 discriminator 3
 7841 007e 1A70     		strb	r2, [r3]
 864:fips202.c     ****         output[i] = t[i];
 7842              		.loc 1 864 33 discriminator 3
 7843 0080 D7F84431 		ldr	r3, [r7, #324]
 7844 0084 0133     		adds	r3, r3, #1
 7845 0086 C7F84431 		str	r3, [r7, #324]
 7846              	.L117:
 864:fips202.c     ****         output[i] = t[i];
 7847              		.loc 1 864 5 discriminator 1
 7848 008a D7F84431 		ldr	r3, [r7, #324]
 7849 008e 2F2B     		cmp	r3, #47
 7850 0090 E5D9     		bls	.L118
 7851              	.LBE10:
 866:fips202.c     ****     }
 867:fips202.c     **** }
 7852              		.loc 1 867 1
 7853 0092 00BF     		nop
 7854 0094 00BF     		nop
 7855 0096 07F5A477 		add	r7, r7, #328
 7856              	.LCFI218:
 7857              		.cfi_def_cfa_offset 8
 7858 009a BD46     		mov	sp, r7
 7859              	.LCFI219:
 7860              		.cfi_def_cfa_register 13
 7861              		@ sp needed
 7862 009c 80BD     		pop	{r7, pc}
 7863              		.cfi_endproc
 7864              	.LFE42:
 7866              		.section	.text.sha3_512_inc_init,"ax",%progbits
 7867              		.align	1
 7868              		.global	sha3_512_inc_init
 7869              		.syntax unified
 7870              		.thumb
 7871              		.thumb_func
 7872              		.fpu softvfp
 7874              	sha3_512_inc_init:
 7875              	.LFB43:
 868:fips202.c     **** 
 869:fips202.c     **** void sha3_512_inc_init(sha3_512incctx *state) {
 7876              		.loc 1 869 47
 7877              		.cfi_startproc
 7878              		@ args = 0, pretend = 0, frame = 8
 7879              		@ frame_needed = 1, uses_anonymous_args = 0
 7880 0000 80B5     		push	{r7, lr}
 7881              	.LCFI220:
 7882              		.cfi_def_cfa_offset 8
 7883              		.cfi_offset 7, -8
 7884              		.cfi_offset 14, -4
 7885 0002 82B0     		sub	sp, sp, #8
 7886              	.LCFI221:
 7887              		.cfi_def_cfa_offset 16
 7888 0004 00AF     		add	r7, sp, #0
 7889              	.LCFI222:
 7890              		.cfi_def_cfa_register 7
 7891 0006 7860     		str	r0, [r7, #4]
 870:fips202.c     ****     state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 7892              		.loc 1 870 18
 7893 0008 D020     		movs	r0, #208
 7894 000a FFF7FEFF 		bl	malloc
 7895 000e 0346     		mov	r3, r0
 7896 0010 1A46     		mov	r2, r3
 7897              		.loc 1 870 16
 7898 0012 7B68     		ldr	r3, [r7, #4]
 7899 0014 1A60     		str	r2, [r3]
 871:fips202.c     ****     if (state->ctx == NULL) {
 7900              		.loc 1 871 14
 7901 0016 7B68     		ldr	r3, [r7, #4]
 7902 0018 1B68     		ldr	r3, [r3]
 7903              		.loc 1 871 8
 7904 001a 002B     		cmp	r3, #0
 7905 001c 02D1     		bne	.L120
 872:fips202.c     ****         exit(111);
 7906              		.loc 1 872 9
 7907 001e 6F20     		movs	r0, #111
 7908 0020 FFF7FEFF 		bl	exit
 7909              	.L120:
 873:fips202.c     ****     }
 874:fips202.c     ****     keccak_inc_init(state->ctx);
 7910              		.loc 1 874 5
 7911 0024 7B68     		ldr	r3, [r7, #4]
 7912 0026 1B68     		ldr	r3, [r3]
 7913 0028 1846     		mov	r0, r3
 7914 002a FFF7FEFF 		bl	keccak_inc_init
 875:fips202.c     **** }
 7915              		.loc 1 875 1
 7916 002e 00BF     		nop
 7917 0030 0837     		adds	r7, r7, #8
 7918              	.LCFI223:
 7919              		.cfi_def_cfa_offset 8
 7920 0032 BD46     		mov	sp, r7
 7921              	.LCFI224:
 7922              		.cfi_def_cfa_register 13
 7923              		@ sp needed
 7924 0034 80BD     		pop	{r7, pc}
 7925              		.cfi_endproc
 7926              	.LFE43:
 7928              		.section	.text.sha3_512_inc_ctx_clone,"ax",%progbits
 7929              		.align	1
 7930              		.global	sha3_512_inc_ctx_clone
 7931              		.syntax unified
 7932              		.thumb
 7933              		.thumb_func
 7934              		.fpu softvfp
 7936              	sha3_512_inc_ctx_clone:
 7937              	.LFB44:
 876:fips202.c     **** 
 877:fips202.c     **** void sha3_512_inc_ctx_clone(sha3_512incctx *dest, const sha3_512incctx *src) {
 7938              		.loc 1 877 78
 7939              		.cfi_startproc
 7940              		@ args = 0, pretend = 0, frame = 8
 7941              		@ frame_needed = 1, uses_anonymous_args = 0
 7942 0000 80B5     		push	{r7, lr}
 7943              	.LCFI225:
 7944              		.cfi_def_cfa_offset 8
 7945              		.cfi_offset 7, -8
 7946              		.cfi_offset 14, -4
 7947 0002 82B0     		sub	sp, sp, #8
 7948              	.LCFI226:
 7949              		.cfi_def_cfa_offset 16
 7950 0004 00AF     		add	r7, sp, #0
 7951              	.LCFI227:
 7952              		.cfi_def_cfa_register 7
 7953 0006 7860     		str	r0, [r7, #4]
 7954 0008 3960     		str	r1, [r7]
 878:fips202.c     ****     dest->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 7955              		.loc 1 878 17
 7956 000a D020     		movs	r0, #208
 7957 000c FFF7FEFF 		bl	malloc
 7958 0010 0346     		mov	r3, r0
 7959 0012 1A46     		mov	r2, r3
 7960              		.loc 1 878 15
 7961 0014 7B68     		ldr	r3, [r7, #4]
 7962 0016 1A60     		str	r2, [r3]
 879:fips202.c     ****     if (dest->ctx == NULL) {
 7963              		.loc 1 879 13
 7964 0018 7B68     		ldr	r3, [r7, #4]
 7965 001a 1B68     		ldr	r3, [r3]
 7966              		.loc 1 879 8
 7967 001c 002B     		cmp	r3, #0
 7968 001e 02D1     		bne	.L122
 880:fips202.c     ****         exit(111);
 7969              		.loc 1 880 9
 7970 0020 6F20     		movs	r0, #111
 7971 0022 FFF7FEFF 		bl	exit
 7972              	.L122:
 881:fips202.c     ****     }
 882:fips202.c     ****     memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
 7973              		.loc 1 882 16
 7974 0026 7B68     		ldr	r3, [r7, #4]
 7975 0028 1868     		ldr	r0, [r3]
 7976              		.loc 1 882 26
 7977 002a 3B68     		ldr	r3, [r7]
 7978 002c 1B68     		ldr	r3, [r3]
 7979              		.loc 1 882 5
 7980 002e D022     		movs	r2, #208
 7981 0030 1946     		mov	r1, r3
 7982 0032 FFF7FEFF 		bl	memcpy
 883:fips202.c     **** }
 7983              		.loc 1 883 1
 7984 0036 00BF     		nop
 7985 0038 0837     		adds	r7, r7, #8
 7986              	.LCFI228:
 7987              		.cfi_def_cfa_offset 8
 7988 003a BD46     		mov	sp, r7
 7989              	.LCFI229:
 7990              		.cfi_def_cfa_register 13
 7991              		@ sp needed
 7992 003c 80BD     		pop	{r7, pc}
 7993              		.cfi_endproc
 7994              	.LFE44:
 7996              		.section	.text.sha3_512_inc_absorb,"ax",%progbits
 7997              		.align	1
 7998              		.global	sha3_512_inc_absorb
 7999              		.syntax unified
 8000              		.thumb
 8001              		.thumb_func
 8002              		.fpu softvfp
 8004              	sha3_512_inc_absorb:
 8005              	.LFB45:
 884:fips202.c     **** 
 885:fips202.c     **** void sha3_512_inc_absorb(sha3_512incctx *state, const uint8_t *input, size_t inlen) {
 8006              		.loc 1 885 85
 8007              		.cfi_startproc
 8008              		@ args = 0, pretend = 0, frame = 16
 8009              		@ frame_needed = 1, uses_anonymous_args = 0
 8010 0000 80B5     		push	{r7, lr}
 8011              	.LCFI230:
 8012              		.cfi_def_cfa_offset 8
 8013              		.cfi_offset 7, -8
 8014              		.cfi_offset 14, -4
 8015 0002 84B0     		sub	sp, sp, #16
 8016              	.LCFI231:
 8017              		.cfi_def_cfa_offset 24
 8018 0004 00AF     		add	r7, sp, #0
 8019              	.LCFI232:
 8020              		.cfi_def_cfa_register 7
 8021 0006 F860     		str	r0, [r7, #12]
 8022 0008 B960     		str	r1, [r7, #8]
 8023 000a 7A60     		str	r2, [r7, #4]
 886:fips202.c     ****     keccak_inc_absorb(state->ctx, SHA3_512_RATE, input, inlen);
 8024              		.loc 1 886 5
 8025 000c FB68     		ldr	r3, [r7, #12]
 8026 000e 1868     		ldr	r0, [r3]
 8027 0010 7B68     		ldr	r3, [r7, #4]
 8028 0012 BA68     		ldr	r2, [r7, #8]
 8029 0014 4821     		movs	r1, #72
 8030 0016 FFF7FEFF 		bl	keccak_inc_absorb
 887:fips202.c     **** }
 8031              		.loc 1 887 1
 8032 001a 00BF     		nop
 8033 001c 1037     		adds	r7, r7, #16
 8034              	.LCFI233:
 8035              		.cfi_def_cfa_offset 8
 8036 001e BD46     		mov	sp, r7
 8037              	.LCFI234:
 8038              		.cfi_def_cfa_register 13
 8039              		@ sp needed
 8040 0020 80BD     		pop	{r7, pc}
 8041              		.cfi_endproc
 8042              	.LFE45:
 8044              		.section	.text.sha3_512_inc_ctx_release,"ax",%progbits
 8045              		.align	1
 8046              		.global	sha3_512_inc_ctx_release
 8047              		.syntax unified
 8048              		.thumb
 8049              		.thumb_func
 8050              		.fpu softvfp
 8052              	sha3_512_inc_ctx_release:
 8053              	.LFB46:
 888:fips202.c     **** 
 889:fips202.c     **** void sha3_512_inc_ctx_release(sha3_512incctx *state) {
 8054              		.loc 1 889 54
 8055              		.cfi_startproc
 8056              		@ args = 0, pretend = 0, frame = 8
 8057              		@ frame_needed = 1, uses_anonymous_args = 0
 8058 0000 80B5     		push	{r7, lr}
 8059              	.LCFI235:
 8060              		.cfi_def_cfa_offset 8
 8061              		.cfi_offset 7, -8
 8062              		.cfi_offset 14, -4
 8063 0002 82B0     		sub	sp, sp, #8
 8064              	.LCFI236:
 8065              		.cfi_def_cfa_offset 16
 8066 0004 00AF     		add	r7, sp, #0
 8067              	.LCFI237:
 8068              		.cfi_def_cfa_register 7
 8069 0006 7860     		str	r0, [r7, #4]
 890:fips202.c     ****     free(state->ctx);
 8070              		.loc 1 890 15
 8071 0008 7B68     		ldr	r3, [r7, #4]
 8072 000a 1B68     		ldr	r3, [r3]
 8073              		.loc 1 890 5
 8074 000c 1846     		mov	r0, r3
 8075 000e FFF7FEFF 		bl	free
 891:fips202.c     **** }
 8076              		.loc 1 891 1
 8077 0012 00BF     		nop
 8078 0014 0837     		adds	r7, r7, #8
 8079              	.LCFI238:
 8080              		.cfi_def_cfa_offset 8
 8081 0016 BD46     		mov	sp, r7
 8082              	.LCFI239:
 8083              		.cfi_def_cfa_register 13
 8084              		@ sp needed
 8085 0018 80BD     		pop	{r7, pc}
 8086              		.cfi_endproc
 8087              	.LFE46:
 8089              		.section	.text.sha3_512_inc_finalize,"ax",%progbits
 8090              		.align	1
 8091              		.global	sha3_512_inc_finalize
 8092              		.syntax unified
 8093              		.thumb
 8094              		.thumb_func
 8095              		.fpu softvfp
 8097              	sha3_512_inc_finalize:
 8098              	.LFB47:
 892:fips202.c     **** 
 893:fips202.c     **** void sha3_512_inc_finalize(uint8_t *output, sha3_512incctx *state) {
 8099              		.loc 1 893 68
 8100              		.cfi_startproc
 8101              		@ args = 0, pretend = 0, frame = 88
 8102              		@ frame_needed = 1, uses_anonymous_args = 0
 8103 0000 80B5     		push	{r7, lr}
 8104              	.LCFI240:
 8105              		.cfi_def_cfa_offset 8
 8106              		.cfi_offset 7, -8
 8107              		.cfi_offset 14, -4
 8108 0002 96B0     		sub	sp, sp, #88
 8109              	.LCFI241:
 8110              		.cfi_def_cfa_offset 96
 8111 0004 00AF     		add	r7, sp, #0
 8112              	.LCFI242:
 8113              		.cfi_def_cfa_register 7
 8114 0006 7860     		str	r0, [r7, #4]
 8115 0008 3960     		str	r1, [r7]
 894:fips202.c     ****     uint8_t t[SHA3_512_RATE];
 895:fips202.c     ****     keccak_inc_finalize(state->ctx, SHA3_512_RATE, 0x06);
 8116              		.loc 1 895 5
 8117 000a 3B68     		ldr	r3, [r7]
 8118 000c 1B68     		ldr	r3, [r3]
 8119 000e 0622     		movs	r2, #6
 8120 0010 4821     		movs	r1, #72
 8121 0012 1846     		mov	r0, r3
 8122 0014 FFF7FEFF 		bl	keccak_inc_finalize
 896:fips202.c     **** 
 897:fips202.c     ****     keccak_squeezeblocks(t, 1, state->ctx, SHA3_512_RATE);
 8123              		.loc 1 897 5
 8124 0018 3B68     		ldr	r3, [r7]
 8125 001a 1A68     		ldr	r2, [r3]
 8126 001c 07F10C00 		add	r0, r7, #12
 8127 0020 4823     		movs	r3, #72
 8128 0022 0121     		movs	r1, #1
 8129 0024 FFF7FEFF 		bl	keccak_squeezeblocks
 898:fips202.c     **** 
 899:fips202.c     ****     sha3_512_inc_ctx_release(state);
 8130              		.loc 1 899 5
 8131 0028 3868     		ldr	r0, [r7]
 8132 002a FFF7FEFF 		bl	sha3_512_inc_ctx_release
 8133              	.LBB11:
 900:fips202.c     **** 
 901:fips202.c     ****     for (size_t i = 0; i < 64; i++) {
 8134              		.loc 1 901 17
 8135 002e 0023     		movs	r3, #0
 8136 0030 7B65     		str	r3, [r7, #84]
 8137              		.loc 1 901 5
 8138 0032 0BE0     		b	.L126
 8139              	.L127:
 902:fips202.c     ****         output[i] = t[i];
 8140              		.loc 1 902 15 discriminator 3
 8141 0034 7A68     		ldr	r2, [r7, #4]
 8142 0036 7B6D     		ldr	r3, [r7, #84]
 8143 0038 1344     		add	r3, r3, r2
 8144              		.loc 1 902 22 discriminator 3
 8145 003a 07F10C01 		add	r1, r7, #12
 8146 003e 7A6D     		ldr	r2, [r7, #84]
 8147 0040 0A44     		add	r2, r2, r1
 8148 0042 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8149              		.loc 1 902 19 discriminator 3
 8150 0044 1A70     		strb	r2, [r3]
 901:fips202.c     ****         output[i] = t[i];
 8151              		.loc 1 901 33 discriminator 3
 8152 0046 7B6D     		ldr	r3, [r7, #84]
 8153 0048 0133     		adds	r3, r3, #1
 8154 004a 7B65     		str	r3, [r7, #84]
 8155              	.L126:
 901:fips202.c     ****         output[i] = t[i];
 8156              		.loc 1 901 5 discriminator 1
 8157 004c 7B6D     		ldr	r3, [r7, #84]
 8158 004e 3F2B     		cmp	r3, #63
 8159 0050 F0D9     		bls	.L127
 8160              	.LBE11:
 903:fips202.c     ****     }
 904:fips202.c     **** }
 8161              		.loc 1 904 1
 8162 0052 00BF     		nop
 8163 0054 00BF     		nop
 8164 0056 5837     		adds	r7, r7, #88
 8165              	.LCFI243:
 8166              		.cfi_def_cfa_offset 8
 8167 0058 BD46     		mov	sp, r7
 8168              	.LCFI244:
 8169              		.cfi_def_cfa_register 13
 8170              		@ sp needed
 8171 005a 80BD     		pop	{r7, pc}
 8172              		.cfi_endproc
 8173              	.LFE47:
 8175              		.section	.text.sha3_512,"ax",%progbits
 8176              		.align	1
 8177              		.global	sha3_512
 8178              		.syntax unified
 8179              		.thumb
 8180              		.thumb_func
 8181              		.fpu softvfp
 8183              	sha3_512:
 8184              	.LFB48:
 905:fips202.c     **** 
 906:fips202.c     **** /*************************************************
 907:fips202.c     ****  * Name:        sha3_512
 908:fips202.c     ****  *
 909:fips202.c     ****  * Description: SHA3-512 with non-incremental API
 910:fips202.c     ****  *
 911:fips202.c     ****  * Arguments:   - uint8_t *output:      pointer to output
 912:fips202.c     ****  *              - const uint8_t *input: pointer to input
 913:fips202.c     ****  *              - size_t inlen:   length of input in bytes
 914:fips202.c     ****  **************************************************/
 915:fips202.c     **** void sha3_512(uint8_t *output, const uint8_t *input, size_t inlen) {
 8185              		.loc 1 915 68
 8186              		.cfi_startproc
 8187              		@ args = 0, pretend = 0, frame = 296
 8188              		@ frame_needed = 1, uses_anonymous_args = 0
 8189 0000 80B5     		push	{r7, lr}
 8190              	.LCFI245:
 8191              		.cfi_def_cfa_offset 8
 8192              		.cfi_offset 7, -8
 8193              		.cfi_offset 14, -4
 8194 0002 CCB0     		sub	sp, sp, #304
 8195              	.LCFI246:
 8196              		.cfi_def_cfa_offset 312
 8197 0004 02AF     		add	r7, sp, #8
 8198              	.LCFI247:
 8199              		.cfi_def_cfa 7, 304
 8200 0006 07F59473 		add	r3, r7, #296
 8201 000a A3F58E73 		sub	r3, r3, #284
 8202 000e 1860     		str	r0, [r3]
 8203 0010 07F59473 		add	r3, r7, #296
 8204 0014 A3F59073 		sub	r3, r3, #288
 8205 0018 1960     		str	r1, [r3]
 8206 001a 07F59473 		add	r3, r7, #296
 8207 001e A3F59273 		sub	r3, r3, #292
 8208 0022 1A60     		str	r2, [r3]
 916:fips202.c     ****     uint64_t s[25];
 917:fips202.c     ****     uint8_t t[SHA3_512_RATE];
 918:fips202.c     **** 
 919:fips202.c     ****     /* Absorb input */
 920:fips202.c     ****     keccak_absorb(s, SHA3_512_RATE, input, inlen, 0x06);
 8209              		.loc 1 920 5
 8210 0024 07F59473 		add	r3, r7, #296
 8211 0028 A3F59273 		sub	r3, r3, #292
 8212 002c 07F59472 		add	r2, r7, #296
 8213 0030 A2F59072 		sub	r2, r2, #288
 8214 0034 07F15800 		add	r0, r7, #88
 8215 0038 0621     		movs	r1, #6
 8216 003a 0091     		str	r1, [sp]
 8217 003c 1B68     		ldr	r3, [r3]
 8218 003e 1268     		ldr	r2, [r2]
 8219 0040 4821     		movs	r1, #72
 8220 0042 FFF7FEFF 		bl	keccak_absorb
 921:fips202.c     **** 
 922:fips202.c     ****     /* Squeeze output */
 923:fips202.c     ****     keccak_squeezeblocks(t, 1, s, SHA3_512_RATE);
 8221              		.loc 1 923 5
 8222 0046 07F15802 		add	r2, r7, #88
 8223 004a 07F11000 		add	r0, r7, #16
 8224 004e 4823     		movs	r3, #72
 8225 0050 0121     		movs	r1, #1
 8226 0052 FFF7FEFF 		bl	keccak_squeezeblocks
 8227              	.LBB12:
 924:fips202.c     **** 
 925:fips202.c     ****     for (size_t i = 0; i < 64; i++) {
 8228              		.loc 1 925 17
 8229 0056 0023     		movs	r3, #0
 8230 0058 C7F82431 		str	r3, [r7, #292]
 8231              		.loc 1 925 5
 8232 005c 15E0     		b	.L129
 8233              	.L130:
 926:fips202.c     ****         output[i] = t[i];
 8234              		.loc 1 926 15 discriminator 3
 8235 005e 07F59473 		add	r3, r7, #296
 8236 0062 A3F58E73 		sub	r3, r3, #284
 8237 0066 1A68     		ldr	r2, [r3]
 8238 0068 D7F82431 		ldr	r3, [r7, #292]
 8239 006c 1344     		add	r3, r3, r2
 8240              		.loc 1 926 22 discriminator 3
 8241 006e 07F59472 		add	r2, r7, #296
 8242 0072 A2F58C71 		sub	r1, r2, #280
 8243 0076 D7F82421 		ldr	r2, [r7, #292]
 8244 007a 0A44     		add	r2, r2, r1
 8245 007c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8246              		.loc 1 926 19 discriminator 3
 8247 007e 1A70     		strb	r2, [r3]
 925:fips202.c     ****         output[i] = t[i];
 8248              		.loc 1 925 33 discriminator 3
 8249 0080 D7F82431 		ldr	r3, [r7, #292]
 8250 0084 0133     		adds	r3, r3, #1
 8251 0086 C7F82431 		str	r3, [r7, #292]
 8252              	.L129:
 925:fips202.c     ****         output[i] = t[i];
 8253              		.loc 1 925 5 discriminator 1
 8254 008a D7F82431 		ldr	r3, [r7, #292]
 8255 008e 3F2B     		cmp	r3, #63
 8256 0090 E5D9     		bls	.L130
 8257              	.LBE12:
 927:fips202.c     ****     }
 928:fips202.c     **** }
 8258              		.loc 1 928 1
 8259 0092 00BF     		nop
 8260 0094 00BF     		nop
 8261 0096 07F59477 		add	r7, r7, #296
 8262              	.LCFI248:
 8263              		.cfi_def_cfa_offset 8
 8264 009a BD46     		mov	sp, r7
 8265              	.LCFI249:
 8266              		.cfi_def_cfa_register 13
 8267              		@ sp needed
 8268 009c 80BD     		pop	{r7, pc}
 8269              		.cfi_endproc
 8270              	.LFE48:
 8272              		.text
 8273              	.Letext0:
 8274              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 8275              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 8276              		.file 4 "fips202.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fips202.c
     /tmp/ccZwze8J.s:16     .text.load64:0000000000000000 $t
     /tmp/ccZwze8J.s:23     .text.load64:0000000000000000 load64
     /tmp/ccZwze8J.s:121    .text.store64:0000000000000000 $t
     /tmp/ccZwze8J.s:127    .text.store64:0000000000000000 store64
     /tmp/ccZwze8J.s:209    .rodata:0000000000000000 $d
     /tmp/ccZwze8J.s:212    .rodata:0000000000000000 KeccakF_RoundConstants
     /tmp/ccZwze8J.s:262    .text.KeccakF1600_StatePermute:0000000000000000 $t
     /tmp/ccZwze8J.s:268    .text.KeccakF1600_StatePermute:0000000000000000 KeccakF1600_StatePermute
     /tmp/ccZwze8J.s:1245   .text.KeccakF1600_StatePermute:0000000000000bf8 $d
     /tmp/ccZwze8J.s:1247   .text.KeccakF1600_StatePermute:0000000000000bfc $t
     /tmp/ccZwze8J.s:3086   .text.KeccakF1600_StatePermute:00000000000022e0 $d
     /tmp/ccZwze8J.s:3088   .text.KeccakF1600_StatePermute:00000000000022e4 $t
     /tmp/ccZwze8J.s:4458   .text.keccak_absorb:0000000000000000 $t
     /tmp/ccZwze8J.s:4464   .text.keccak_absorb:0000000000000000 keccak_absorb
     /tmp/ccZwze8J.s:4697   .text.keccak_squeezeblocks:0000000000000000 $t
     /tmp/ccZwze8J.s:4703   .text.keccak_squeezeblocks:0000000000000000 keccak_squeezeblocks
     /tmp/ccZwze8J.s:4794   .text.keccak_inc_init:0000000000000000 $t
     /tmp/ccZwze8J.s:4800   .text.keccak_inc_init:0000000000000000 keccak_inc_init
     /tmp/ccZwze8J.s:4867   .text.keccak_inc_absorb:0000000000000000 $t
     /tmp/ccZwze8J.s:4873   .text.keccak_inc_absorb:0000000000000000 keccak_inc_absorb
     /tmp/ccZwze8J.s:5250   .text.keccak_inc_finalize:0000000000000000 $t
     /tmp/ccZwze8J.s:5256   .text.keccak_inc_finalize:0000000000000000 keccak_inc_finalize
     /tmp/ccZwze8J.s:5414   .text.keccak_inc_squeeze:0000000000000000 $t
     /tmp/ccZwze8J.s:5420   .text.keccak_inc_squeeze:0000000000000000 keccak_inc_squeeze
     /tmp/ccZwze8J.s:5708   .text.shake128_inc_init:0000000000000000 $t
     /tmp/ccZwze8J.s:5715   .text.shake128_inc_init:0000000000000000 shake128_inc_init
     /tmp/ccZwze8J.s:5770   .text.shake128_inc_absorb:0000000000000000 $t
     /tmp/ccZwze8J.s:5777   .text.shake128_inc_absorb:0000000000000000 shake128_inc_absorb
     /tmp/ccZwze8J.s:5818   .text.shake128_inc_finalize:0000000000000000 $t
     /tmp/ccZwze8J.s:5825   .text.shake128_inc_finalize:0000000000000000 shake128_inc_finalize
     /tmp/ccZwze8J.s:5864   .text.shake128_inc_squeeze:0000000000000000 $t
     /tmp/ccZwze8J.s:5871   .text.shake128_inc_squeeze:0000000000000000 shake128_inc_squeeze
     /tmp/ccZwze8J.s:5912   .text.shake128_inc_ctx_clone:0000000000000000 $t
     /tmp/ccZwze8J.s:5919   .text.shake128_inc_ctx_clone:0000000000000000 shake128_inc_ctx_clone
     /tmp/ccZwze8J.s:5980   .text.shake128_inc_ctx_release:0000000000000000 $t
     /tmp/ccZwze8J.s:5987   .text.shake128_inc_ctx_release:0000000000000000 shake128_inc_ctx_release
     /tmp/ccZwze8J.s:6025   .text.shake256_inc_init:0000000000000000 $t
     /tmp/ccZwze8J.s:6032   .text.shake256_inc_init:0000000000000000 shake256_inc_init
     /tmp/ccZwze8J.s:6087   .text.shake256_inc_absorb:0000000000000000 $t
     /tmp/ccZwze8J.s:6094   .text.shake256_inc_absorb:0000000000000000 shake256_inc_absorb
     /tmp/ccZwze8J.s:6135   .text.shake256_inc_finalize:0000000000000000 $t
     /tmp/ccZwze8J.s:6142   .text.shake256_inc_finalize:0000000000000000 shake256_inc_finalize
     /tmp/ccZwze8J.s:6181   .text.shake256_inc_squeeze:0000000000000000 $t
     /tmp/ccZwze8J.s:6188   .text.shake256_inc_squeeze:0000000000000000 shake256_inc_squeeze
     /tmp/ccZwze8J.s:6229   .text.shake256_inc_ctx_clone:0000000000000000 $t
     /tmp/ccZwze8J.s:6236   .text.shake256_inc_ctx_clone:0000000000000000 shake256_inc_ctx_clone
     /tmp/ccZwze8J.s:6297   .text.shake256_inc_ctx_release:0000000000000000 $t
     /tmp/ccZwze8J.s:6304   .text.shake256_inc_ctx_release:0000000000000000 shake256_inc_ctx_release
     /tmp/ccZwze8J.s:6342   .text.shake128_absorb:0000000000000000 $t
     /tmp/ccZwze8J.s:6349   .text.shake128_absorb:0000000000000000 shake128_absorb
     /tmp/ccZwze8J.s:6410   .text.shake128_squeezeblocks:0000000000000000 $t
     /tmp/ccZwze8J.s:6417   .text.shake128_squeezeblocks:0000000000000000 shake128_squeezeblocks
     /tmp/ccZwze8J.s:6458   .text.shake128_ctx_clone:0000000000000000 $t
     /tmp/ccZwze8J.s:6465   .text.shake128_ctx_clone:0000000000000000 shake128_ctx_clone
     /tmp/ccZwze8J.s:6526   .text.shake128_ctx_release:0000000000000000 $t
     /tmp/ccZwze8J.s:6533   .text.shake128_ctx_release:0000000000000000 shake128_ctx_release
     /tmp/ccZwze8J.s:6571   .text.shake256_absorb:0000000000000000 $t
     /tmp/ccZwze8J.s:6578   .text.shake256_absorb:0000000000000000 shake256_absorb
     /tmp/ccZwze8J.s:6639   .text.shake256_squeezeblocks:0000000000000000 $t
     /tmp/ccZwze8J.s:6646   .text.shake256_squeezeblocks:0000000000000000 shake256_squeezeblocks
     /tmp/ccZwze8J.s:6687   .text.shake256_ctx_clone:0000000000000000 $t
     /tmp/ccZwze8J.s:6694   .text.shake256_ctx_clone:0000000000000000 shake256_ctx_clone
     /tmp/ccZwze8J.s:6755   .text.shake256_ctx_release:0000000000000000 $t
     /tmp/ccZwze8J.s:6762   .text.shake256_ctx_release:0000000000000000 shake256_ctx_release
     /tmp/ccZwze8J.s:6800   .text.shake128:0000000000000000 $t
     /tmp/ccZwze8J.s:6807   .text.shake128:0000000000000000 shake128
     /tmp/ccZwze8J.s:6920   .text.shake128:00000000000000b8 $d
     /tmp/ccZwze8J.s:6925   .text.shake256:0000000000000000 $t
     /tmp/ccZwze8J.s:6932   .text.shake256:0000000000000000 shake256
     /tmp/ccZwze8J.s:7050   .text.shake256:00000000000000bc $d
     /tmp/ccZwze8J.s:7055   .text.sha3_256_inc_init:0000000000000000 $t
     /tmp/ccZwze8J.s:7062   .text.sha3_256_inc_init:0000000000000000 sha3_256_inc_init
     /tmp/ccZwze8J.s:7117   .text.sha3_256_inc_ctx_clone:0000000000000000 $t
     /tmp/ccZwze8J.s:7124   .text.sha3_256_inc_ctx_clone:0000000000000000 sha3_256_inc_ctx_clone
     /tmp/ccZwze8J.s:7185   .text.sha3_256_inc_ctx_release:0000000000000000 $t
     /tmp/ccZwze8J.s:7192   .text.sha3_256_inc_ctx_release:0000000000000000 sha3_256_inc_ctx_release
     /tmp/ccZwze8J.s:7230   .text.sha3_256_inc_absorb:0000000000000000 $t
     /tmp/ccZwze8J.s:7237   .text.sha3_256_inc_absorb:0000000000000000 sha3_256_inc_absorb
     /tmp/ccZwze8J.s:7278   .text.sha3_256_inc_finalize:0000000000000000 $t
     /tmp/ccZwze8J.s:7285   .text.sha3_256_inc_finalize:0000000000000000 sha3_256_inc_finalize
     /tmp/ccZwze8J.s:7364   .text.sha3_256:0000000000000000 $t
     /tmp/ccZwze8J.s:7371   .text.sha3_256:0000000000000000 sha3_256
     /tmp/ccZwze8J.s:7461   .text.sha3_384_inc_init:0000000000000000 $t
     /tmp/ccZwze8J.s:7468   .text.sha3_384_inc_init:0000000000000000 sha3_384_inc_init
     /tmp/ccZwze8J.s:7523   .text.sha3_384_inc_ctx_clone:0000000000000000 $t
     /tmp/ccZwze8J.s:7530   .text.sha3_384_inc_ctx_clone:0000000000000000 sha3_384_inc_ctx_clone
     /tmp/ccZwze8J.s:7591   .text.sha3_384_inc_absorb:0000000000000000 $t
     /tmp/ccZwze8J.s:7598   .text.sha3_384_inc_absorb:0000000000000000 sha3_384_inc_absorb
     /tmp/ccZwze8J.s:7639   .text.sha3_384_inc_ctx_release:0000000000000000 $t
     /tmp/ccZwze8J.s:7646   .text.sha3_384_inc_ctx_release:0000000000000000 sha3_384_inc_ctx_release
     /tmp/ccZwze8J.s:7684   .text.sha3_384_inc_finalize:0000000000000000 $t
     /tmp/ccZwze8J.s:7691   .text.sha3_384_inc_finalize:0000000000000000 sha3_384_inc_finalize
     /tmp/ccZwze8J.s:7770   .text.sha3_384:0000000000000000 $t
     /tmp/ccZwze8J.s:7777   .text.sha3_384:0000000000000000 sha3_384
     /tmp/ccZwze8J.s:7867   .text.sha3_512_inc_init:0000000000000000 $t
     /tmp/ccZwze8J.s:7874   .text.sha3_512_inc_init:0000000000000000 sha3_512_inc_init
     /tmp/ccZwze8J.s:7929   .text.sha3_512_inc_ctx_clone:0000000000000000 $t
     /tmp/ccZwze8J.s:7936   .text.sha3_512_inc_ctx_clone:0000000000000000 sha3_512_inc_ctx_clone
     /tmp/ccZwze8J.s:7997   .text.sha3_512_inc_absorb:0000000000000000 $t
     /tmp/ccZwze8J.s:8004   .text.sha3_512_inc_absorb:0000000000000000 sha3_512_inc_absorb
     /tmp/ccZwze8J.s:8045   .text.sha3_512_inc_ctx_release:0000000000000000 $t
     /tmp/ccZwze8J.s:8052   .text.sha3_512_inc_ctx_release:0000000000000000 sha3_512_inc_ctx_release
     /tmp/ccZwze8J.s:8090   .text.sha3_512_inc_finalize:0000000000000000 $t
     /tmp/ccZwze8J.s:8097   .text.sha3_512_inc_finalize:0000000000000000 sha3_512_inc_finalize
     /tmp/ccZwze8J.s:8176   .text.sha3_512:0000000000000000 $t
     /tmp/ccZwze8J.s:8183   .text.sha3_512:0000000000000000 sha3_512

UNDEFINED SYMBOLS
malloc
exit
memcpy
free
