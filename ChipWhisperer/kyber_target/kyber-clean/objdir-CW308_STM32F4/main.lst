   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	pk
  16              		.bss
  17              		.align	2
  20              	pk:
  21 0000 00000000 		.space	800
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.global	sk
  23              		.align	2
  26              	sk:
  27 0320 00000000 		.space	1632
  27      00000000 
  27      00000000 
  27      00000000 
  27      00000000 
  28              		.global	m
  29              		.align	2
  32              	m:
  33 0980 00000000 		.space	32
  33      00000000 
  33      00000000 
  33      00000000 
  33      00000000 
  34              		.global	ct
  35              		.align	2
  38              	ct:
  39 09a0 00000000 		.space	768
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              		.global	ss
  41              		.align	2
  44              	ss:
  45 0ca0 00000000 		.space	32
  45      00000000 
  45      00000000 
  45      00000000 
  45      00000000 
  46              		.global	buf
  47              		.align	2
  50              	buf:
  51 0cc0 00000000 		.space	64
  51      00000000 
  51      00000000 
  51      00000000 
  51      00000000 
  52              		.global	coins
  53              		.section	.rodata
  54              		.align	2
  57              	coins:
  58 0000 7C9935A0 		.ascii	"|\2315\240\260v\224\252\014m\020\344\333k\032\335/\330"
  58      B07694AA 
  58      0C6D10E4 
  58      DB6B1ADD 
  58      2FD8
  59 0012 1A25CCB1 		.ascii	"\032%\314\261H\003-\315s\2316s\177-"
  59      48032DCD 
  59      73993673 
  59      7F2D
  60              		.section	.text.get_sk,"ax",%progbits
  61              		.align	1
  62              		.global	get_sk
  63              		.arch armv7e-m
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu softvfp
  69              	get_sk:
  70              	.LFB3:
  71              		.file 1 "main.c"
   1:main.c        **** #include <stddef.h>
   2:main.c        **** #include <stdlib.h>
   3:main.c        **** #include <stdint.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <string.h>
   6:main.c        **** #include "polyvec.h"
   7:main.c        **** #include <stdio.h>
   8:main.c        **** #include <string.h>
   9:main.c        **** #include "kem.h"
  10:main.c        **** #include "indcpa.h"
  11:main.c        **** #include "randombytes.h"
  12:main.c        **** #include "params.h"
  13:main.c        **** #include "indcpa.h"
  14:main.c        **** #include "verify.h"
  15:main.c        **** #include "symmetric.h"
  16:main.c        **** #include "reduce.h"
  17:main.c        **** 
  18:main.c        **** uint8_t pk[KYBER_PUBLICKEYBYTES];
  19:main.c        **** uint8_t sk[KYBER_SECRETKEYBYTES];
  20:main.c        **** uint8_t m[KYBER_INDCPA_MSGBYTES];
  21:main.c        **** uint8_t ct[KYBER_CIPHERTEXTBYTES];
  22:main.c        **** uint8_t ss[KYBER_SSBYTES];
  23:main.c        **** uint8_t buf[2*KYBER_SYMBYTES];
  24:main.c        **** const uint8_t coins[KYBER_SYMBYTES] = {124, 153, 53, 160, 176, 118, 148, 170, 12, 109, 16, 228, 219
  25:main.c        **** 
  26:main.c        **** uint8_t get_sk(uint8_t* data, uint8_t dlen)
  27:main.c        **** {
  72              		.loc 1 27 1
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 48
  75              		@ frame_needed = 1, uses_anonymous_args = 0
  76 0000 80B5     		push	{r7, lr}
  77              	.LCFI0:
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 7, -8
  80              		.cfi_offset 14, -4
  81 0002 8CB0     		sub	sp, sp, #48
  82              	.LCFI1:
  83              		.cfi_def_cfa_offset 56
  84 0004 00AF     		add	r7, sp, #0
  85              	.LCFI2:
  86              		.cfi_def_cfa_register 7
  87 0006 7860     		str	r0, [r7, #4]
  88 0008 0B46     		mov	r3, r1
  89 000a FB70     		strb	r3, [r7, #3]
  28:main.c        **** 	size_t i;
  29:main.c        **** 	PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand(pk,sk,coins);
  90              		.loc 1 29 2
  91 000c 174A     		ldr	r2, .L5
  92 000e 1849     		ldr	r1, .L5+4
  93 0010 1848     		ldr	r0, .L5+8
  94 0012 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand
  30:main.c        **** 	uint8_t temp[32];
  31:main.c        **** 	for(i=0;i<32;i++){
  95              		.loc 1 31 7
  96 0016 0023     		movs	r3, #0
  97 0018 FB62     		str	r3, [r7, #44]
  98              		.loc 1 31 2
  99 001a 0DE0     		b	.L2
 100              	.L3:
  32:main.c        **** 		temp[i] = sk[1600+i];
 101              		.loc 1 32 20 discriminator 3
 102 001c FB6A     		ldr	r3, [r7, #44]
 103 001e 03F5C863 		add	r3, r3, #1600
 104              		.loc 1 32 15 discriminator 3
 105 0022 134A     		ldr	r2, .L5+4
 106 0024 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 107              		.loc 1 32 11 discriminator 3
 108 0026 07F10C02 		add	r2, r7, #12
 109 002a FB6A     		ldr	r3, [r7, #44]
 110 002c 1344     		add	r3, r3, r2
 111 002e 0A46     		mov	r2, r1
 112 0030 1A70     		strb	r2, [r3]
  31:main.c        **** 		temp[i] = sk[1600+i];
 113              		.loc 1 31 16 discriminator 3
 114 0032 FB6A     		ldr	r3, [r7, #44]
 115 0034 0133     		adds	r3, r3, #1
 116 0036 FB62     		str	r3, [r7, #44]
 117              	.L2:
  31:main.c        **** 		temp[i] = sk[1600+i];
 118              		.loc 1 31 2 discriminator 1
 119 0038 FB6A     		ldr	r3, [r7, #44]
 120 003a 1F2B     		cmp	r3, #31
 121 003c EED9     		bls	.L3
  33:main.c        **** 	}
  34:main.c        **** 	PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand(ct,ss,pk,data);
 122              		.loc 1 34 2
 123 003e 7B68     		ldr	r3, [r7, #4]
 124 0040 0C4A     		ldr	r2, .L5+8
 125 0042 0D49     		ldr	r1, .L5+12
 126 0044 0D48     		ldr	r0, .L5+16
 127 0046 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand
  35:main.c        **** 	PQCLEAN_KYBER512_CLEAN_crypto_kem_dec(ss,ct,sk);
 128              		.loc 1 35 2
 129 004a 094A     		ldr	r2, .L5+4
 130 004c 0B49     		ldr	r1, .L5+16
 131 004e 0A48     		ldr	r0, .L5+12
 132 0050 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_crypto_kem_dec
  36:main.c        **** 	simpleserial_put('r', 32, temp);
 133              		.loc 1 36 2
 134 0054 07F10C03 		add	r3, r7, #12
 135 0058 1A46     		mov	r2, r3
 136 005a 2021     		movs	r1, #32
 137 005c 7220     		movs	r0, #114
 138 005e FFF7FEFF 		bl	simpleserial_put
  37:main.c        **** 	return 0;
 139              		.loc 1 37 9
 140 0062 0023     		movs	r3, #0
  38:main.c        **** }
 141              		.loc 1 38 1
 142 0064 1846     		mov	r0, r3
 143 0066 3037     		adds	r7, r7, #48
 144              	.LCFI3:
 145              		.cfi_def_cfa_offset 8
 146 0068 BD46     		mov	sp, r7
 147              	.LCFI4:
 148              		.cfi_def_cfa_register 13
 149              		@ sp needed
 150 006a 80BD     		pop	{r7, pc}
 151              	.L6:
 152              		.align	2
 153              	.L5:
 154 006c 00000000 		.word	coins
 155 0070 00000000 		.word	sk
 156 0074 00000000 		.word	pk
 157 0078 00000000 		.word	ss
 158 007c 00000000 		.word	ct
 159              		.cfi_endproc
 160              	.LFE3:
 162              		.section	.text.main,"ax",%progbits
 163              		.align	1
 164              		.global	main
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 168              		.fpu softvfp
 170              	main:
 171              	.LFB4:
  39:main.c        **** 
  40:main.c        **** 
  41:main.c        **** //////////////////////////////
  42:main.c        **** 
  43:main.c        **** 
  44:main.c        **** int main(void)
  45:main.c        **** {	
 172              		.loc 1 45 1
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 1, uses_anonymous_args = 0
 176 0000 80B5     		push	{r7, lr}
 177              	.LCFI5:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 00AF     		add	r7, sp, #0
 182              	.LCFI6:
 183              		.cfi_def_cfa_register 7
  46:main.c        **** 	platform_init();
 184              		.loc 1 46 2
 185 0004 FFF7FEFF 		bl	platform_init
  47:main.c        **** 	init_uart();
 186              		.loc 1 47 2
 187 0008 FFF7FEFF 		bl	init_uart
  48:main.c        **** 	trigger_setup();	
 188              		.loc 1 48 2
 189 000c FFF7FEFF 		bl	trigger_setup
  49:main.c        **** 	simpleserial_init();
 190              		.loc 1 49 2
 191 0010 FFF7FEFF 		bl	simpleserial_init
  50:main.c        ****   
  51:main.c        ****   simpleserial_addcmd('p',32,get_sk);
 192              		.loc 1 51 3
 193 0014 034A     		ldr	r2, .L9
 194 0016 2021     		movs	r1, #32
 195 0018 7020     		movs	r0, #112
 196 001a FFF7FEFF 		bl	simpleserial_addcmd
 197              	.L8:
 198              	.LBB2:
  52:main.c        **** 
  53:main.c        **** 	while(1)
  54:main.c        **** 		simpleserial_get();
 199              		.loc 1 54 3 discriminator 1
 200 001e FFF7FEFF 		bl	simpleserial_get
 201              	.LBE2:
 202 0022 FCE7     		b	.L8
 203              	.L10:
 204              		.align	2
 205              	.L9:
 206 0024 00000000 		.word	get_sk
 207              		.cfi_endproc
 208              	.LFE4:
 210              		.text
 211              	.Letext0:
 212              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 213              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc0ss82l.s:20     .bss:0000000000000000 pk
     /tmp/cc0ss82l.s:17     .bss:0000000000000000 $d
     /tmp/cc0ss82l.s:26     .bss:0000000000000320 sk
     /tmp/cc0ss82l.s:32     .bss:0000000000000980 m
     /tmp/cc0ss82l.s:38     .bss:00000000000009a0 ct
     /tmp/cc0ss82l.s:44     .bss:0000000000000ca0 ss
     /tmp/cc0ss82l.s:50     .bss:0000000000000cc0 buf
     /tmp/cc0ss82l.s:57     .rodata:0000000000000000 coins
     /tmp/cc0ss82l.s:54     .rodata:0000000000000000 $d
     /tmp/cc0ss82l.s:61     .text.get_sk:0000000000000000 $t
     /tmp/cc0ss82l.s:69     .text.get_sk:0000000000000000 get_sk
     /tmp/cc0ss82l.s:154    .text.get_sk:000000000000006c $d
     /tmp/cc0ss82l.s:163    .text.main:0000000000000000 $t
     /tmp/cc0ss82l.s:170    .text.main:0000000000000000 main
     /tmp/cc0ss82l.s:206    .text.main:0000000000000024 $d

UNDEFINED SYMBOLS
PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand
PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand
PQCLEAN_KYBER512_CLEAN_crypto_kem_dec
simpleserial_put
platform_init
init_uart
trigger_setup
simpleserial_init
simpleserial_addcmd
simpleserial_get
