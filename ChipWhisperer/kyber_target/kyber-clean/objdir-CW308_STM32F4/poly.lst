   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"poly.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_compress,"ax",%progbits
  16              		.align	1
  17              		.global	PQCLEAN_KYBER512_CLEAN_poly_compress
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	PQCLEAN_KYBER512_CLEAN_poly_compress:
  25              	.LFB0:
  26              		.file 1 "poly.c"
   1:poly.c        **** #include "cbd.h"
   2:poly.c        **** #include "ntt.h"
   3:poly.c        **** #include "params.h"
   4:poly.c        **** #include "poly.h"
   5:poly.c        **** #include "reduce.h"
   6:poly.c        **** #include "symmetric.h"
   7:poly.c        **** #include <stdint.h>
   8:poly.c        **** 
   9:poly.c        **** /*************************************************
  10:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_compress
  11:poly.c        **** *
  12:poly.c        **** * Description: Compression and subsequent serialization of a polynomial
  13:poly.c        **** *
  14:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array
  15:poly.c        **** *                            (of length KYBER_POLYCOMPRESSEDBYTES)
  16:poly.c        **** *              - const poly *a: pointer to input polynomial
  17:poly.c        **** **************************************************/
  18:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_compress(uint8_t r[KYBER_POLYCOMPRESSEDBYTES], const poly *a) {
  27              		.loc 1 18 96
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 89B0     		sub	sp, sp, #36
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 40
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  43 0008 3960     		str	r1, [r7]
  19:poly.c        ****     size_t i, j;
  20:poly.c        ****     int16_t u;
  21:poly.c        ****     uint8_t t[8];
  22:poly.c        **** 
  23:poly.c        ****     for (i = 0; i < KYBER_N / 8; i++) {
  44              		.loc 1 23 12
  45 000a 0023     		movs	r3, #0
  46 000c FB61     		str	r3, [r7, #28]
  47              		.loc 1 23 5
  48 000e 63E0     		b	.L2
  49              	.L5:
  24:poly.c        ****         for (j = 0; j < 8; j++) {
  50              		.loc 1 24 16
  51 0010 0023     		movs	r3, #0
  52 0012 BB61     		str	r3, [r7, #24]
  53              		.loc 1 24 9
  54 0014 2CE0     		b	.L3
  55              	.L4:
  25:poly.c        ****             // map to positive standard representatives
  26:poly.c        ****             u  = a->coeffs[8 * i + j];
  56              		.loc 1 26 30 discriminator 3
  57 0016 FB69     		ldr	r3, [r7, #28]
  58 0018 DA00     		lsls	r2, r3, #3
  59              		.loc 1 26 34 discriminator 3
  60 001a BB69     		ldr	r3, [r7, #24]
  61 001c 1A44     		add	r2, r2, r3
  62              		.loc 1 26 16 discriminator 3
  63 001e 3B68     		ldr	r3, [r7]
  64 0020 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
  65 0024 FB82     		strh	r3, [r7, #22]	@ movhi
  27:poly.c        ****             u += (u >> 15) & KYBER_Q;
  66              		.loc 1 27 28 discriminator 3
  67 0026 B7F91630 		ldrsh	r3, [r7, #22]
  68 002a DB13     		asrs	r3, r3, #15
  69 002c 1BB2     		sxth	r3, r3
  70 002e 9AB2     		uxth	r2, r3
  71 0030 40F60153 		movw	r3, #3329
  72 0034 1340     		ands	r3, r3, r2
  73 0036 9AB2     		uxth	r2, r3
  74              		.loc 1 27 15 discriminator 3
  75 0038 FB8A     		ldrh	r3, [r7, #22]
  76 003a 1344     		add	r3, r3, r2
  77 003c 9BB2     		uxth	r3, r3
  78 003e FB82     		strh	r3, [r7, #22]	@ movhi
  28:poly.c        ****             t[j] = ((((uint16_t)u << 4) + KYBER_Q / 2) / KYBER_Q) & 15;
  79              		.loc 1 28 23 discriminator 3
  80 0040 FB8A     		ldrh	r3, [r7, #22]
  81              		.loc 1 28 35 discriminator 3
  82 0042 1B01     		lsls	r3, r3, #4
  83              		.loc 1 28 41 discriminator 3
  84 0044 03F5D063 		add	r3, r3, #1664
  85              		.loc 1 28 56 discriminator 3
  86 0048 284A     		ldr	r2, .L6
  87 004a 82FB0312 		smull	r1, r2, r2, r3
  88 004e 1A44     		add	r2, r2, r3
  89 0050 D212     		asrs	r2, r2, #11
  90 0052 DB17     		asrs	r3, r3, #31
  91 0054 D31A     		subs	r3, r2, r3
  92              		.loc 1 28 67 discriminator 3
  93 0056 DBB2     		uxtb	r3, r3
  94 0058 03F00F03 		and	r3, r3, #15
  95 005c D9B2     		uxtb	r1, r3
  96              		.loc 1 28 18 discriminator 3
  97 005e 07F10C02 		add	r2, r7, #12
  98 0062 BB69     		ldr	r3, [r7, #24]
  99 0064 1344     		add	r3, r3, r2
 100 0066 0A46     		mov	r2, r1
 101 0068 1A70     		strb	r2, [r3]
  24:poly.c        ****             // map to positive standard representatives
 102              		.loc 1 24 29 discriminator 3
 103 006a BB69     		ldr	r3, [r7, #24]
 104 006c 0133     		adds	r3, r3, #1
 105 006e BB61     		str	r3, [r7, #24]
 106              	.L3:
  24:poly.c        ****             // map to positive standard representatives
 107              		.loc 1 24 9 discriminator 1
 108 0070 BB69     		ldr	r3, [r7, #24]
 109 0072 072B     		cmp	r3, #7
 110 0074 CFD9     		bls	.L4
  29:poly.c        ****         }
  30:poly.c        **** 
  31:poly.c        ****         r[0] = t[0] | (t[1] << 4);
 111              		.loc 1 31 17 discriminator 2
 112 0076 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 113 0078 5AB2     		sxtb	r2, r3
 114              		.loc 1 31 25 discriminator 2
 115 007a 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 116              		.loc 1 31 29 discriminator 2
 117 007c 1B01     		lsls	r3, r3, #4
 118              		.loc 1 31 21 discriminator 2
 119 007e 5BB2     		sxtb	r3, r3
 120 0080 1343     		orrs	r3, r3, r2
 121 0082 5BB2     		sxtb	r3, r3
 122 0084 DAB2     		uxtb	r2, r3
 123              		.loc 1 31 14 discriminator 2
 124 0086 7B68     		ldr	r3, [r7, #4]
 125 0088 1A70     		strb	r2, [r3]
  32:poly.c        ****         r[1] = t[2] | (t[3] << 4);
 126              		.loc 1 32 17 discriminator 2
 127 008a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 128 008c 5AB2     		sxtb	r2, r3
 129              		.loc 1 32 25 discriminator 2
 130 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 131              		.loc 1 32 29 discriminator 2
 132 0090 1B01     		lsls	r3, r3, #4
 133              		.loc 1 32 21 discriminator 2
 134 0092 5BB2     		sxtb	r3, r3
 135 0094 1343     		orrs	r3, r3, r2
 136 0096 5AB2     		sxtb	r2, r3
 137              		.loc 1 32 10 discriminator 2
 138 0098 7B68     		ldr	r3, [r7, #4]
 139 009a 0133     		adds	r3, r3, #1
 140              		.loc 1 32 21 discriminator 2
 141 009c D2B2     		uxtb	r2, r2
 142              		.loc 1 32 14 discriminator 2
 143 009e 1A70     		strb	r2, [r3]
  33:poly.c        ****         r[2] = t[4] | (t[5] << 4);
 144              		.loc 1 33 17 discriminator 2
 145 00a0 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 146 00a2 5AB2     		sxtb	r2, r3
 147              		.loc 1 33 25 discriminator 2
 148 00a4 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 149              		.loc 1 33 29 discriminator 2
 150 00a6 1B01     		lsls	r3, r3, #4
 151              		.loc 1 33 21 discriminator 2
 152 00a8 5BB2     		sxtb	r3, r3
 153 00aa 1343     		orrs	r3, r3, r2
 154 00ac 5AB2     		sxtb	r2, r3
 155              		.loc 1 33 10 discriminator 2
 156 00ae 7B68     		ldr	r3, [r7, #4]
 157 00b0 0233     		adds	r3, r3, #2
 158              		.loc 1 33 21 discriminator 2
 159 00b2 D2B2     		uxtb	r2, r2
 160              		.loc 1 33 14 discriminator 2
 161 00b4 1A70     		strb	r2, [r3]
  34:poly.c        ****         r[3] = t[6] | (t[7] << 4);
 162              		.loc 1 34 17 discriminator 2
 163 00b6 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 164 00b8 5AB2     		sxtb	r2, r3
 165              		.loc 1 34 25 discriminator 2
 166 00ba FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 167              		.loc 1 34 29 discriminator 2
 168 00bc 1B01     		lsls	r3, r3, #4
 169              		.loc 1 34 21 discriminator 2
 170 00be 5BB2     		sxtb	r3, r3
 171 00c0 1343     		orrs	r3, r3, r2
 172 00c2 5AB2     		sxtb	r2, r3
 173              		.loc 1 34 10 discriminator 2
 174 00c4 7B68     		ldr	r3, [r7, #4]
 175 00c6 0333     		adds	r3, r3, #3
 176              		.loc 1 34 21 discriminator 2
 177 00c8 D2B2     		uxtb	r2, r2
 178              		.loc 1 34 14 discriminator 2
 179 00ca 1A70     		strb	r2, [r3]
  35:poly.c        ****         r += 4;
 180              		.loc 1 35 11 discriminator 2
 181 00cc 7B68     		ldr	r3, [r7, #4]
 182 00ce 0433     		adds	r3, r3, #4
 183 00d0 7B60     		str	r3, [r7, #4]
  23:poly.c        ****         for (j = 0; j < 8; j++) {
 184              		.loc 1 23 35 discriminator 2
 185 00d2 FB69     		ldr	r3, [r7, #28]
 186 00d4 0133     		adds	r3, r3, #1
 187 00d6 FB61     		str	r3, [r7, #28]
 188              	.L2:
  23:poly.c        ****         for (j = 0; j < 8; j++) {
 189              		.loc 1 23 5 discriminator 1
 190 00d8 FB69     		ldr	r3, [r7, #28]
 191 00da 1F2B     		cmp	r3, #31
 192 00dc 98D9     		bls	.L5
  36:poly.c        ****     }
  37:poly.c        **** }
 193              		.loc 1 37 1
 194 00de 00BF     		nop
 195 00e0 00BF     		nop
 196 00e2 2437     		adds	r7, r7, #36
 197              	.LCFI3:
 198              		.cfi_def_cfa_offset 4
 199 00e4 BD46     		mov	sp, r7
 200              	.LCFI4:
 201              		.cfi_def_cfa_register 13
 202              		@ sp needed
 203 00e6 80BC     		pop	{r7}
 204              	.LCFI5:
 205              		.cfi_restore 7
 206              		.cfi_def_cfa_offset 0
 207 00e8 7047     		bx	lr
 208              	.L7:
 209 00ea 00BF     		.align	2
 210              	.L6:
 211 00ec 41BB7D9D 		.word	-1652704447
 212              		.cfi_endproc
 213              	.LFE0:
 215              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_decompress,"ax",%progbits
 216              		.align	1
 217              		.global	PQCLEAN_KYBER512_CLEAN_poly_decompress
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 221              		.fpu softvfp
 223              	PQCLEAN_KYBER512_CLEAN_poly_decompress:
 224              	.LFB1:
  38:poly.c        **** 
  39:poly.c        **** /*************************************************
  40:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_decompress
  41:poly.c        **** *
  42:poly.c        **** * Description: De-serialization and subsequent decompression of a polynomial;
  43:poly.c        **** *              approximate inverse of PQCLEAN_KYBER512_CLEAN_poly_compress
  44:poly.c        **** *
  45:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
  46:poly.c        **** *              - const uint8_t *a: pointer to input byte array
  47:poly.c        **** *                                  (of length KYBER_POLYCOMPRESSEDBYTES bytes)
  48:poly.c        **** **************************************************/
  49:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_decompress(poly *r, const uint8_t a[KYBER_POLYCOMPRESSEDBYTES]) {
 225              		.loc 1 49 98
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 80B4     		push	{r7}
 231              	.LCFI6:
 232              		.cfi_def_cfa_offset 4
 233              		.cfi_offset 7, -4
 234 0002 85B0     		sub	sp, sp, #20
 235              	.LCFI7:
 236              		.cfi_def_cfa_offset 24
 237 0004 00AF     		add	r7, sp, #0
 238              	.LCFI8:
 239              		.cfi_def_cfa_register 7
 240 0006 7860     		str	r0, [r7, #4]
 241 0008 3960     		str	r1, [r7]
  50:poly.c        ****     size_t i;
  51:poly.c        **** 
  52:poly.c        ****     for (i = 0; i < KYBER_N / 2; i++) {
 242              		.loc 1 52 12
 243 000a 0023     		movs	r3, #0
 244 000c FB60     		str	r3, [r7, #12]
 245              		.loc 1 52 5
 246 000e 27E0     		b	.L9
 247              	.L10:
  53:poly.c        ****         r->coeffs[2 * i + 0] = (((uint16_t)(a[0] & 15) * KYBER_Q) + 8) >> 4;
 248              		.loc 1 53 46 discriminator 3
 249 0010 3B68     		ldr	r3, [r7]
 250 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 251              		.loc 1 53 34 discriminator 3
 252 0014 03F00F03 		and	r3, r3, #15
 253              		.loc 1 53 56 discriminator 3
 254 0018 40F60152 		movw	r2, #3329
 255 001c 02FB03F3 		mul	r3, r2, r3
 256              		.loc 1 53 67 discriminator 3
 257 0020 0833     		adds	r3, r3, #8
 258              		.loc 1 53 72 discriminator 3
 259 0022 1911     		asrs	r1, r3, #4
 260              		.loc 1 53 25 discriminator 3
 261 0024 FB68     		ldr	r3, [r7, #12]
 262 0026 5A00     		lsls	r2, r3, #1
 263              		.loc 1 53 30 discriminator 3
 264 0028 09B2     		sxth	r1, r1
 265 002a 7B68     		ldr	r3, [r7, #4]
 266 002c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  54:poly.c        ****         r->coeffs[2 * i + 1] = (((uint16_t)(a[0] >> 4) * KYBER_Q) + 8) >> 4;
 267              		.loc 1 54 46 discriminator 3
 268 0030 3B68     		ldr	r3, [r7]
 269 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 270              		.loc 1 54 34 discriminator 3
 271 0034 1B09     		lsrs	r3, r3, #4
 272 0036 DBB2     		uxtb	r3, r3
 273 0038 1A46     		mov	r2, r3
 274              		.loc 1 54 56 discriminator 3
 275 003a 40F60153 		movw	r3, #3329
 276 003e 02FB03F3 		mul	r3, r2, r3
 277              		.loc 1 54 67 discriminator 3
 278 0042 0833     		adds	r3, r3, #8
 279              		.loc 1 54 72 discriminator 3
 280 0044 1911     		asrs	r1, r3, #4
 281              		.loc 1 54 21 discriminator 3
 282 0046 FB68     		ldr	r3, [r7, #12]
 283 0048 5B00     		lsls	r3, r3, #1
 284              		.loc 1 54 25 discriminator 3
 285 004a 5A1C     		adds	r2, r3, #1
 286              		.loc 1 54 30 discriminator 3
 287 004c 09B2     		sxth	r1, r1
 288 004e 7B68     		ldr	r3, [r7, #4]
 289 0050 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  55:poly.c        ****         a += 1;
 290              		.loc 1 55 11 discriminator 3
 291 0054 3B68     		ldr	r3, [r7]
 292 0056 0133     		adds	r3, r3, #1
 293 0058 3B60     		str	r3, [r7]
  52:poly.c        ****         r->coeffs[2 * i + 0] = (((uint16_t)(a[0] & 15) * KYBER_Q) + 8) >> 4;
 294              		.loc 1 52 35 discriminator 3
 295 005a FB68     		ldr	r3, [r7, #12]
 296 005c 0133     		adds	r3, r3, #1
 297 005e FB60     		str	r3, [r7, #12]
 298              	.L9:
  52:poly.c        ****         r->coeffs[2 * i + 0] = (((uint16_t)(a[0] & 15) * KYBER_Q) + 8) >> 4;
 299              		.loc 1 52 5 discriminator 1
 300 0060 FB68     		ldr	r3, [r7, #12]
 301 0062 7F2B     		cmp	r3, #127
 302 0064 D4D9     		bls	.L10
  56:poly.c        ****     }
  57:poly.c        **** }
 303              		.loc 1 57 1
 304 0066 00BF     		nop
 305 0068 00BF     		nop
 306 006a 1437     		adds	r7, r7, #20
 307              	.LCFI9:
 308              		.cfi_def_cfa_offset 4
 309 006c BD46     		mov	sp, r7
 310              	.LCFI10:
 311              		.cfi_def_cfa_register 13
 312              		@ sp needed
 313 006e 80BC     		pop	{r7}
 314              	.LCFI11:
 315              		.cfi_restore 7
 316              		.cfi_def_cfa_offset 0
 317 0070 7047     		bx	lr
 318              		.cfi_endproc
 319              	.LFE1:
 321              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_tobytes,"ax",%progbits
 322              		.align	1
 323              		.global	PQCLEAN_KYBER512_CLEAN_poly_tobytes
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 327              		.fpu softvfp
 329              	PQCLEAN_KYBER512_CLEAN_poly_tobytes:
 330              	.LFB2:
  58:poly.c        **** 
  59:poly.c        **** /*************************************************
  60:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_tobytes
  61:poly.c        **** *
  62:poly.c        **** * Description: Serialization of a polynomial
  63:poly.c        **** *
  64:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array
  65:poly.c        **** *                            (needs space for KYBER_POLYBYTES bytes)
  66:poly.c        **** *              - const poly *a: pointer to input polynomial
  67:poly.c        **** **************************************************/
  68:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_tobytes(uint8_t r[KYBER_POLYBYTES], const poly *a) {
 331              		.loc 1 68 85
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 16
 334              		@ frame_needed = 1, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 336 0000 80B4     		push	{r7}
 337              	.LCFI12:
 338              		.cfi_def_cfa_offset 4
 339              		.cfi_offset 7, -4
 340 0002 85B0     		sub	sp, sp, #20
 341              	.LCFI13:
 342              		.cfi_def_cfa_offset 24
 343 0004 00AF     		add	r7, sp, #0
 344              	.LCFI14:
 345              		.cfi_def_cfa_register 7
 346 0006 7860     		str	r0, [r7, #4]
 347 0008 3960     		str	r1, [r7]
  69:poly.c        ****     size_t i;
  70:poly.c        ****     uint16_t t0, t1;
  71:poly.c        **** 
  72:poly.c        ****     for (i = 0; i < KYBER_N / 2; i++) {
 348              		.loc 1 72 12
 349 000a 0023     		movs	r3, #0
 350 000c FB60     		str	r3, [r7, #12]
 351              		.loc 1 72 5
 352 000e 4EE0     		b	.L12
 353              	.L13:
  73:poly.c        ****         // map to positive standard representatives
  74:poly.c        ****         t0  = a->coeffs[2 * i];
 354              		.loc 1 74 27 discriminator 3
 355 0010 FB68     		ldr	r3, [r7, #12]
 356 0012 5A00     		lsls	r2, r3, #1
 357              		.loc 1 74 24 discriminator 3
 358 0014 3B68     		ldr	r3, [r7]
 359 0016 33F91230 		ldrsh	r3, [r3, r2, lsl #1]
 360              		.loc 1 74 13 discriminator 3
 361 001a 7B81     		strh	r3, [r7, #10]	@ movhi
  75:poly.c        ****         t0 += ((int16_t)t0 >> 15) & KYBER_Q;
 362              		.loc 1 75 16 discriminator 3
 363 001c B7F90A30 		ldrsh	r3, [r7, #10]
 364              		.loc 1 75 35 discriminator 3
 365 0020 DB13     		asrs	r3, r3, #15
 366 0022 1BB2     		sxth	r3, r3
 367 0024 9AB2     		uxth	r2, r3
 368 0026 40F60153 		movw	r3, #3329
 369 002a 1340     		ands	r3, r3, r2
 370 002c 9AB2     		uxth	r2, r3
 371              		.loc 1 75 12 discriminator 3
 372 002e 7B89     		ldrh	r3, [r7, #10]	@ movhi
 373 0030 1344     		add	r3, r3, r2
 374 0032 7B81     		strh	r3, [r7, #10]	@ movhi
  76:poly.c        ****         t1 = a->coeffs[2 * i + 1];
 375              		.loc 1 76 26 discriminator 3
 376 0034 FB68     		ldr	r3, [r7, #12]
 377 0036 5B00     		lsls	r3, r3, #1
 378              		.loc 1 76 30 discriminator 3
 379 0038 5A1C     		adds	r2, r3, #1
 380              		.loc 1 76 23 discriminator 3
 381 003a 3B68     		ldr	r3, [r7]
 382 003c 33F91230 		ldrsh	r3, [r3, r2, lsl #1]
 383              		.loc 1 76 12 discriminator 3
 384 0040 3B81     		strh	r3, [r7, #8]	@ movhi
  77:poly.c        ****         t1 += ((int16_t)t1 >> 15) & KYBER_Q;
 385              		.loc 1 77 16 discriminator 3
 386 0042 B7F90830 		ldrsh	r3, [r7, #8]
 387              		.loc 1 77 35 discriminator 3
 388 0046 DB13     		asrs	r3, r3, #15
 389 0048 1BB2     		sxth	r3, r3
 390 004a 9AB2     		uxth	r2, r3
 391 004c 40F60153 		movw	r3, #3329
 392 0050 1340     		ands	r3, r3, r2
 393 0052 9AB2     		uxth	r2, r3
 394              		.loc 1 77 12 discriminator 3
 395 0054 3B89     		ldrh	r3, [r7, #8]	@ movhi
 396 0056 1344     		add	r3, r3, r2
 397 0058 3B81     		strh	r3, [r7, #8]	@ movhi
  78:poly.c        ****         r[3 * i + 0] = (uint8_t)(t0 >> 0);
 398              		.loc 1 78 13 discriminator 3
 399 005a FA68     		ldr	r2, [r7, #12]
 400 005c 1346     		mov	r3, r2
 401 005e 5B00     		lsls	r3, r3, #1
 402 0060 1344     		add	r3, r3, r2
 403              		.loc 1 78 10 discriminator 3
 404 0062 7A68     		ldr	r2, [r7, #4]
 405 0064 1344     		add	r3, r3, r2
 406              		.loc 1 78 24 discriminator 3
 407 0066 7A89     		ldrh	r2, [r7, #10]	@ movhi
 408 0068 D2B2     		uxtb	r2, r2
 409              		.loc 1 78 22 discriminator 3
 410 006a 1A70     		strb	r2, [r3]
  79:poly.c        ****         r[3 * i + 1] = (uint8_t)((t0 >> 8) | (t1 << 4));
 411              		.loc 1 79 44 discriminator 3
 412 006c 7B89     		ldrh	r3, [r7, #10]
 413 006e 1B0A     		lsrs	r3, r3, #8
 414 0070 9BB2     		uxth	r3, r3
 415 0072 5AB2     		sxtb	r2, r3
 416              		.loc 1 79 50 discriminator 3
 417 0074 3B89     		ldrh	r3, [r7, #8]
 418 0076 1B01     		lsls	r3, r3, #4
 419              		.loc 1 79 44 discriminator 3
 420 0078 5BB2     		sxtb	r3, r3
 421 007a 1343     		orrs	r3, r3, r2
 422 007c 59B2     		sxtb	r1, r3
 423              		.loc 1 79 13 discriminator 3
 424 007e FA68     		ldr	r2, [r7, #12]
 425 0080 1346     		mov	r3, r2
 426 0082 5B00     		lsls	r3, r3, #1
 427 0084 1344     		add	r3, r3, r2
 428              		.loc 1 79 10 discriminator 3
 429 0086 0133     		adds	r3, r3, #1
 430 0088 7A68     		ldr	r2, [r7, #4]
 431 008a 1344     		add	r3, r3, r2
 432              		.loc 1 79 24 discriminator 3
 433 008c CAB2     		uxtb	r2, r1
 434              		.loc 1 79 22 discriminator 3
 435 008e 1A70     		strb	r2, [r3]
  80:poly.c        ****         r[3 * i + 2] = (uint8_t)(t1 >> 4);
 436              		.loc 1 80 24 discriminator 3
 437 0090 3B89     		ldrh	r3, [r7, #8]
 438 0092 1B09     		lsrs	r3, r3, #4
 439 0094 99B2     		uxth	r1, r3
 440              		.loc 1 80 13 discriminator 3
 441 0096 FA68     		ldr	r2, [r7, #12]
 442 0098 1346     		mov	r3, r2
 443 009a 5B00     		lsls	r3, r3, #1
 444 009c 1344     		add	r3, r3, r2
 445              		.loc 1 80 10 discriminator 3
 446 009e 0233     		adds	r3, r3, #2
 447 00a0 7A68     		ldr	r2, [r7, #4]
 448 00a2 1344     		add	r3, r3, r2
 449              		.loc 1 80 24 discriminator 3
 450 00a4 CAB2     		uxtb	r2, r1
 451              		.loc 1 80 22 discriminator 3
 452 00a6 1A70     		strb	r2, [r3]
  72:poly.c        ****         // map to positive standard representatives
 453              		.loc 1 72 35 discriminator 3
 454 00a8 FB68     		ldr	r3, [r7, #12]
 455 00aa 0133     		adds	r3, r3, #1
 456 00ac FB60     		str	r3, [r7, #12]
 457              	.L12:
  72:poly.c        ****         // map to positive standard representatives
 458              		.loc 1 72 5 discriminator 1
 459 00ae FB68     		ldr	r3, [r7, #12]
 460 00b0 7F2B     		cmp	r3, #127
 461 00b2 ADD9     		bls	.L13
  81:poly.c        ****     }
  82:poly.c        **** }
 462              		.loc 1 82 1
 463 00b4 00BF     		nop
 464 00b6 00BF     		nop
 465 00b8 1437     		adds	r7, r7, #20
 466              	.LCFI15:
 467              		.cfi_def_cfa_offset 4
 468 00ba BD46     		mov	sp, r7
 469              	.LCFI16:
 470              		.cfi_def_cfa_register 13
 471              		@ sp needed
 472 00bc 80BC     		pop	{r7}
 473              	.LCFI17:
 474              		.cfi_restore 7
 475              		.cfi_def_cfa_offset 0
 476 00be 7047     		bx	lr
 477              		.cfi_endproc
 478              	.LFE2:
 480              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_frombytes,"ax",%progbits
 481              		.align	1
 482              		.global	PQCLEAN_KYBER512_CLEAN_poly_frombytes
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
 486              		.fpu softvfp
 488              	PQCLEAN_KYBER512_CLEAN_poly_frombytes:
 489              	.LFB3:
  83:poly.c        **** 
  84:poly.c        **** /*************************************************
  85:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_frombytes
  86:poly.c        **** *
  87:poly.c        **** * Description: De-serialization of a polynomial;
  88:poly.c        **** *              inverse of PQCLEAN_KYBER512_CLEAN_poly_tobytes
  89:poly.c        **** *
  90:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
  91:poly.c        **** *              - const uint8_t *a: pointer to input byte array
  92:poly.c        **** *                                  (of KYBER_POLYBYTES bytes)
  93:poly.c        **** **************************************************/
  94:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_frombytes(poly *r, const uint8_t a[KYBER_POLYBYTES]) {
 490              		.loc 1 94 87
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 16
 493              		@ frame_needed = 1, uses_anonymous_args = 0
 494              		@ link register save eliminated.
 495 0000 80B4     		push	{r7}
 496              	.LCFI18:
 497              		.cfi_def_cfa_offset 4
 498              		.cfi_offset 7, -4
 499 0002 85B0     		sub	sp, sp, #20
 500              	.LCFI19:
 501              		.cfi_def_cfa_offset 24
 502 0004 00AF     		add	r7, sp, #0
 503              	.LCFI20:
 504              		.cfi_def_cfa_register 7
 505 0006 7860     		str	r0, [r7, #4]
 506 0008 3960     		str	r1, [r7]
  95:poly.c        ****     size_t i;
  96:poly.c        ****     for (i = 0; i < KYBER_N / 2; i++) {
 507              		.loc 1 96 12
 508 000a 0023     		movs	r3, #0
 509 000c FB60     		str	r3, [r7, #12]
 510              		.loc 1 96 5
 511 000e 3EE0     		b	.L15
 512              	.L16:
  97:poly.c        ****         r->coeffs[2 * i]   = ((a[3 * i + 0] >> 0) | ((uint16_t)a[3 * i + 1] << 8)) & 0xFFF;
 513              		.loc 1 97 36 discriminator 3
 514 0010 FA68     		ldr	r2, [r7, #12]
 515 0012 1346     		mov	r3, r2
 516 0014 5B00     		lsls	r3, r3, #1
 517 0016 1344     		add	r3, r3, r2
 518              		.loc 1 97 33 discriminator 3
 519 0018 3A68     		ldr	r2, [r7]
 520 001a 1344     		add	r3, r3, r2
 521 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 522 001e 19B2     		sxth	r1, r3
 523              		.loc 1 97 68 discriminator 3
 524 0020 FA68     		ldr	r2, [r7, #12]
 525 0022 1346     		mov	r3, r2
 526 0024 5B00     		lsls	r3, r3, #1
 527 0026 1344     		add	r3, r3, r2
 528              		.loc 1 97 65 discriminator 3
 529 0028 0133     		adds	r3, r3, #1
 530 002a 3A68     		ldr	r2, [r7]
 531 002c 1344     		add	r3, r3, r2
 532 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 533              		.loc 1 97 77 discriminator 3
 534 0030 1B02     		lsls	r3, r3, #8
 535              		.loc 1 97 51 discriminator 3
 536 0032 1BB2     		sxth	r3, r3
 537 0034 0B43     		orrs	r3, r3, r1
 538 0036 1BB2     		sxth	r3, r3
 539              		.loc 1 97 21 discriminator 3
 540 0038 FA68     		ldr	r2, [r7, #12]
 541 003a 5200     		lsls	r2, r2, #1
 542              		.loc 1 97 84 discriminator 3
 543 003c C3F30B03 		ubfx	r3, r3, #0, #12
 544 0040 19B2     		sxth	r1, r3
 545              		.loc 1 97 28 discriminator 3
 546 0042 7B68     		ldr	r3, [r7, #4]
 547 0044 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  98:poly.c        ****         r->coeffs[2 * i + 1] = ((a[3 * i + 1] >> 4) | ((uint16_t)a[3 * i + 2] << 4)) & 0xFFF;
 548              		.loc 1 98 38 discriminator 3
 549 0048 FA68     		ldr	r2, [r7, #12]
 550 004a 1346     		mov	r3, r2
 551 004c 5B00     		lsls	r3, r3, #1
 552 004e 1344     		add	r3, r3, r2
 553              		.loc 1 98 35 discriminator 3
 554 0050 0133     		adds	r3, r3, #1
 555 0052 3A68     		ldr	r2, [r7]
 556 0054 1344     		add	r3, r3, r2
 557 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 558              		.loc 1 98 53 discriminator 3
 559 0058 1B09     		lsrs	r3, r3, #4
 560 005a DBB2     		uxtb	r3, r3
 561 005c 19B2     		sxth	r1, r3
 562              		.loc 1 98 70 discriminator 3
 563 005e FA68     		ldr	r2, [r7, #12]
 564 0060 1346     		mov	r3, r2
 565 0062 5B00     		lsls	r3, r3, #1
 566 0064 1344     		add	r3, r3, r2
 567              		.loc 1 98 67 discriminator 3
 568 0066 0233     		adds	r3, r3, #2
 569 0068 3A68     		ldr	r2, [r7]
 570 006a 1344     		add	r3, r3, r2
 571 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 572              		.loc 1 98 79 discriminator 3
 573 006e 1B01     		lsls	r3, r3, #4
 574              		.loc 1 98 53 discriminator 3
 575 0070 1BB2     		sxth	r3, r3
 576 0072 0B43     		orrs	r3, r3, r1
 577 0074 1BB2     		sxth	r3, r3
 578              		.loc 1 98 21 discriminator 3
 579 0076 FA68     		ldr	r2, [r7, #12]
 580 0078 5200     		lsls	r2, r2, #1
 581              		.loc 1 98 25 discriminator 3
 582 007a 0132     		adds	r2, r2, #1
 583              		.loc 1 98 86 discriminator 3
 584 007c C3F30B03 		ubfx	r3, r3, #0, #12
 585 0080 19B2     		sxth	r1, r3
 586              		.loc 1 98 30 discriminator 3
 587 0082 7B68     		ldr	r3, [r7, #4]
 588 0084 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  96:poly.c        ****         r->coeffs[2 * i]   = ((a[3 * i + 0] >> 0) | ((uint16_t)a[3 * i + 1] << 8)) & 0xFFF;
 589              		.loc 1 96 35 discriminator 3
 590 0088 FB68     		ldr	r3, [r7, #12]
 591 008a 0133     		adds	r3, r3, #1
 592 008c FB60     		str	r3, [r7, #12]
 593              	.L15:
  96:poly.c        ****         r->coeffs[2 * i]   = ((a[3 * i + 0] >> 0) | ((uint16_t)a[3 * i + 1] << 8)) & 0xFFF;
 594              		.loc 1 96 5 discriminator 1
 595 008e FB68     		ldr	r3, [r7, #12]
 596 0090 7F2B     		cmp	r3, #127
 597 0092 BDD9     		bls	.L16
  99:poly.c        ****     }
 100:poly.c        **** }
 598              		.loc 1 100 1
 599 0094 00BF     		nop
 600 0096 00BF     		nop
 601 0098 1437     		adds	r7, r7, #20
 602              	.LCFI21:
 603              		.cfi_def_cfa_offset 4
 604 009a BD46     		mov	sp, r7
 605              	.LCFI22:
 606              		.cfi_def_cfa_register 13
 607              		@ sp needed
 608 009c 80BC     		pop	{r7}
 609              	.LCFI23:
 610              		.cfi_restore 7
 611              		.cfi_def_cfa_offset 0
 612 009e 7047     		bx	lr
 613              		.cfi_endproc
 614              	.LFE3:
 616              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_frommsg,"ax",%progbits
 617              		.align	1
 618              		.global	PQCLEAN_KYBER512_CLEAN_poly_frommsg
 619              		.syntax unified
 620              		.thumb
 621              		.thumb_func
 622              		.fpu softvfp
 624              	PQCLEAN_KYBER512_CLEAN_poly_frommsg:
 625              	.LFB4:
 101:poly.c        **** 
 102:poly.c        **** /*************************************************
 103:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_frommsg
 104:poly.c        **** *
 105:poly.c        **** * Description: Convert 32-byte message to polynomial
 106:poly.c        **** *
 107:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 108:poly.c        **** *              - const uint8_t *msg: pointer to input message
 109:poly.c        **** **************************************************/
 110:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_frommsg(poly *r, const uint8_t msg[KYBER_INDCPA_MSGBYTES]) {
 626              		.loc 1 110 93
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 24
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 631 0000 80B4     		push	{r7}
 632              	.LCFI24:
 633              		.cfi_def_cfa_offset 4
 634              		.cfi_offset 7, -4
 635 0002 87B0     		sub	sp, sp, #28
 636              	.LCFI25:
 637              		.cfi_def_cfa_offset 32
 638 0004 00AF     		add	r7, sp, #0
 639              	.LCFI26:
 640              		.cfi_def_cfa_register 7
 641 0006 7860     		str	r0, [r7, #4]
 642 0008 3960     		str	r1, [r7]
 111:poly.c        ****     size_t i, j;
 112:poly.c        ****     int16_t mask;
 113:poly.c        **** 
 114:poly.c        ****     for (i = 0; i < KYBER_N / 8; i++) {
 643              		.loc 1 114 12
 644 000a 0023     		movs	r3, #0
 645 000c 7B61     		str	r3, [r7, #20]
 646              		.loc 1 114 5
 647 000e 27E0     		b	.L18
 648              	.L21:
 115:poly.c        ****         for (j = 0; j < 8; j++) {
 649              		.loc 1 115 16
 650 0010 0023     		movs	r3, #0
 651 0012 3B61     		str	r3, [r7, #16]
 652              		.loc 1 115 9
 653 0014 1EE0     		b	.L19
 654              	.L20:
 116:poly.c        ****             mask = -(int16_t)((msg[i] >> j) & 1);
 655              		.loc 1 116 35 discriminator 3
 656 0016 3A68     		ldr	r2, [r7]
 657 0018 7B69     		ldr	r3, [r7, #20]
 658 001a 1344     		add	r3, r3, r2
 659 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 660 001e 1A46     		mov	r2, r3
 661              		.loc 1 116 39 discriminator 3
 662 0020 3B69     		ldr	r3, [r7, #16]
 663 0022 42FA03F3 		asr	r3, r2, r3
 664              		.loc 1 116 21 discriminator 3
 665 0026 9BB2     		uxth	r3, r3
 666 0028 03F00103 		and	r3, r3, #1
 667 002c 9BB2     		uxth	r3, r3
 668              		.loc 1 116 18 discriminator 3
 669 002e 5B42     		rsbs	r3, r3, #0
 670 0030 9BB2     		uxth	r3, r3
 671 0032 FB81     		strh	r3, [r7, #14]	@ movhi
 117:poly.c        ****             r->coeffs[8 * i + j] = mask & ((KYBER_Q + 1) / 2);
 672              		.loc 1 117 25 discriminator 3
 673 0034 7B69     		ldr	r3, [r7, #20]
 674 0036 DA00     		lsls	r2, r3, #3
 675              		.loc 1 117 29 discriminator 3
 676 0038 3B69     		ldr	r3, [r7, #16]
 677 003a 1A44     		add	r2, r2, r3
 678              		.loc 1 117 41 discriminator 3
 679 003c FB89     		ldrh	r3, [r7, #14]	@ movhi
 680 003e 23F4BF73 		bic	r3, r3, #382
 681 0042 5B05     		lsls	r3, r3, #21
 682 0044 5B0D     		lsrs	r3, r3, #21
 683 0046 19B2     		sxth	r1, r3
 684              		.loc 1 117 34 discriminator 3
 685 0048 7B68     		ldr	r3, [r7, #4]
 686 004a 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 115:poly.c        ****         for (j = 0; j < 8; j++) {
 687              		.loc 1 115 29 discriminator 3
 688 004e 3B69     		ldr	r3, [r7, #16]
 689 0050 0133     		adds	r3, r3, #1
 690 0052 3B61     		str	r3, [r7, #16]
 691              	.L19:
 115:poly.c        ****         for (j = 0; j < 8; j++) {
 692              		.loc 1 115 9 discriminator 1
 693 0054 3B69     		ldr	r3, [r7, #16]
 694 0056 072B     		cmp	r3, #7
 695 0058 DDD9     		bls	.L20
 114:poly.c        ****         for (j = 0; j < 8; j++) {
 696              		.loc 1 114 35 discriminator 2
 697 005a 7B69     		ldr	r3, [r7, #20]
 698 005c 0133     		adds	r3, r3, #1
 699 005e 7B61     		str	r3, [r7, #20]
 700              	.L18:
 114:poly.c        ****         for (j = 0; j < 8; j++) {
 701              		.loc 1 114 5 discriminator 1
 702 0060 7B69     		ldr	r3, [r7, #20]
 703 0062 1F2B     		cmp	r3, #31
 704 0064 D4D9     		bls	.L21
 118:poly.c        ****         }
 119:poly.c        ****     }
 120:poly.c        **** }
 705              		.loc 1 120 1
 706 0066 00BF     		nop
 707 0068 00BF     		nop
 708 006a 1C37     		adds	r7, r7, #28
 709              	.LCFI27:
 710              		.cfi_def_cfa_offset 4
 711 006c BD46     		mov	sp, r7
 712              	.LCFI28:
 713              		.cfi_def_cfa_register 13
 714              		@ sp needed
 715 006e 80BC     		pop	{r7}
 716              	.LCFI29:
 717              		.cfi_restore 7
 718              		.cfi_def_cfa_offset 0
 719 0070 7047     		bx	lr
 720              		.cfi_endproc
 721              	.LFE4:
 723              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_tomsg,"ax",%progbits
 724              		.align	1
 725              		.global	PQCLEAN_KYBER512_CLEAN_poly_tomsg
 726              		.syntax unified
 727              		.thumb
 728              		.thumb_func
 729              		.fpu softvfp
 731              	PQCLEAN_KYBER512_CLEAN_poly_tomsg:
 732              	.LFB5:
 121:poly.c        **** 
 122:poly.c        **** /*************************************************
 123:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_tomsg
 124:poly.c        **** *
 125:poly.c        **** * Description: Convert polynomial to 32-byte message
 126:poly.c        **** *
 127:poly.c        **** * Arguments:   - uint8_t *msg: pointer to output message
 128:poly.c        **** *              - const poly *a: pointer to input polynomial
 129:poly.c        **** **************************************************/
 130:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_tomsg(uint8_t msg[KYBER_INDCPA_MSGBYTES], const poly *a) {
 733              		.loc 1 130 91
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 24
 736              		@ frame_needed = 1, uses_anonymous_args = 0
 737              		@ link register save eliminated.
 738 0000 80B4     		push	{r7}
 739              	.LCFI30:
 740              		.cfi_def_cfa_offset 4
 741              		.cfi_offset 7, -4
 742 0002 87B0     		sub	sp, sp, #28
 743              	.LCFI31:
 744              		.cfi_def_cfa_offset 32
 745 0004 00AF     		add	r7, sp, #0
 746              	.LCFI32:
 747              		.cfi_def_cfa_register 7
 748 0006 7860     		str	r0, [r7, #4]
 749 0008 3960     		str	r1, [r7]
 131:poly.c        ****     size_t i, j;
 132:poly.c        ****     uint16_t t;
 133:poly.c        **** 
 134:poly.c        ****     for (i = 0; i < KYBER_N / 8; i++) {
 750              		.loc 1 134 12
 751 000a 0023     		movs	r3, #0
 752 000c 7B61     		str	r3, [r7, #20]
 753              		.loc 1 134 5
 754 000e 44E0     		b	.L23
 755              	.L26:
 135:poly.c        ****         msg[i] = 0;
 756              		.loc 1 135 12
 757 0010 7A68     		ldr	r2, [r7, #4]
 758 0012 7B69     		ldr	r3, [r7, #20]
 759 0014 1344     		add	r3, r3, r2
 760              		.loc 1 135 16
 761 0016 0022     		movs	r2, #0
 762 0018 1A70     		strb	r2, [r3]
 136:poly.c        ****         for (j = 0; j < 8; j++) {
 763              		.loc 1 136 16
 764 001a 0023     		movs	r3, #0
 765 001c 3B61     		str	r3, [r7, #16]
 766              		.loc 1 136 9
 767 001e 36E0     		b	.L24
 768              	.L25:
 137:poly.c        ****             t  = a->coeffs[8 * i + j];
 769              		.loc 1 137 30 discriminator 3
 770 0020 7B69     		ldr	r3, [r7, #20]
 771 0022 DA00     		lsls	r2, r3, #3
 772              		.loc 1 137 34 discriminator 3
 773 0024 3B69     		ldr	r3, [r7, #16]
 774 0026 1A44     		add	r2, r2, r3
 775              		.loc 1 137 27 discriminator 3
 776 0028 3B68     		ldr	r3, [r7]
 777 002a 33F91230 		ldrsh	r3, [r3, r2, lsl #1]
 778              		.loc 1 137 16 discriminator 3
 779 002e FB81     		strh	r3, [r7, #14]	@ movhi
 138:poly.c        ****             t += ((int16_t)t >> 15) & KYBER_Q;
 780              		.loc 1 138 19 discriminator 3
 781 0030 B7F90E30 		ldrsh	r3, [r7, #14]
 782              		.loc 1 138 37 discriminator 3
 783 0034 DB13     		asrs	r3, r3, #15
 784 0036 1BB2     		sxth	r3, r3
 785 0038 9AB2     		uxth	r2, r3
 786 003a 40F60153 		movw	r3, #3329
 787 003e 1340     		ands	r3, r3, r2
 788 0040 9AB2     		uxth	r2, r3
 789              		.loc 1 138 15 discriminator 3
 790 0042 FB89     		ldrh	r3, [r7, #14]	@ movhi
 791 0044 1344     		add	r3, r3, r2
 792 0046 FB81     		strh	r3, [r7, #14]	@ movhi
 139:poly.c        ****             t  = (((t << 1) + KYBER_Q / 2) / KYBER_Q) & 1;
 793              		.loc 1 139 23 discriminator 3
 794 0048 FB89     		ldrh	r3, [r7, #14]
 795 004a 5B00     		lsls	r3, r3, #1
 796              		.loc 1 139 29 discriminator 3
 797 004c 03F5D063 		add	r3, r3, #1664
 798              		.loc 1 139 44 discriminator 3
 799 0050 164A     		ldr	r2, .L27
 800 0052 82FB0312 		smull	r1, r2, r2, r3
 801 0056 1A44     		add	r2, r2, r3
 802 0058 D212     		asrs	r2, r2, #11
 803 005a DB17     		asrs	r3, r3, #31
 804 005c D31A     		subs	r3, r2, r3
 805              		.loc 1 139 55 discriminator 3
 806 005e 9BB2     		uxth	r3, r3
 807              		.loc 1 139 16 discriminator 3
 808 0060 03F00103 		and	r3, r3, #1
 809 0064 FB81     		strh	r3, [r7, #14]	@ movhi
 140:poly.c        ****             msg[i] |= t << j;
 810              		.loc 1 140 20 discriminator 3
 811 0066 7A68     		ldr	r2, [r7, #4]
 812 0068 7B69     		ldr	r3, [r7, #20]
 813 006a 1344     		add	r3, r3, r2
 814 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 815 006e 5AB2     		sxtb	r2, r3
 816              		.loc 1 140 25 discriminator 3
 817 0070 F989     		ldrh	r1, [r7, #14]
 818 0072 3B69     		ldr	r3, [r7, #16]
 819 0074 01FA03F3 		lsl	r3, r1, r3
 820              		.loc 1 140 20 discriminator 3
 821 0078 5BB2     		sxtb	r3, r3
 822 007a 1343     		orrs	r3, r3, r2
 823 007c 59B2     		sxtb	r1, r3
 824 007e 7A68     		ldr	r2, [r7, #4]
 825 0080 7B69     		ldr	r3, [r7, #20]
 826 0082 1344     		add	r3, r3, r2
 827 0084 CAB2     		uxtb	r2, r1
 828 0086 1A70     		strb	r2, [r3]
 136:poly.c        ****             t  = a->coeffs[8 * i + j];
 829              		.loc 1 136 29 discriminator 3
 830 0088 3B69     		ldr	r3, [r7, #16]
 831 008a 0133     		adds	r3, r3, #1
 832 008c 3B61     		str	r3, [r7, #16]
 833              	.L24:
 136:poly.c        ****             t  = a->coeffs[8 * i + j];
 834              		.loc 1 136 9 discriminator 1
 835 008e 3B69     		ldr	r3, [r7, #16]
 836 0090 072B     		cmp	r3, #7
 837 0092 C5D9     		bls	.L25
 134:poly.c        ****         msg[i] = 0;
 838              		.loc 1 134 35 discriminator 2
 839 0094 7B69     		ldr	r3, [r7, #20]
 840 0096 0133     		adds	r3, r3, #1
 841 0098 7B61     		str	r3, [r7, #20]
 842              	.L23:
 134:poly.c        ****         msg[i] = 0;
 843              		.loc 1 134 5 discriminator 1
 844 009a 7B69     		ldr	r3, [r7, #20]
 845 009c 1F2B     		cmp	r3, #31
 846 009e B7D9     		bls	.L26
 141:poly.c        ****         }
 142:poly.c        ****     }
 143:poly.c        **** }
 847              		.loc 1 143 1
 848 00a0 00BF     		nop
 849 00a2 00BF     		nop
 850 00a4 1C37     		adds	r7, r7, #28
 851              	.LCFI33:
 852              		.cfi_def_cfa_offset 4
 853 00a6 BD46     		mov	sp, r7
 854              	.LCFI34:
 855              		.cfi_def_cfa_register 13
 856              		@ sp needed
 857 00a8 80BC     		pop	{r7}
 858              	.LCFI35:
 859              		.cfi_restore 7
 860              		.cfi_def_cfa_offset 0
 861 00aa 7047     		bx	lr
 862              	.L28:
 863              		.align	2
 864              	.L27:
 865 00ac 41BB7D9D 		.word	-1652704447
 866              		.cfi_endproc
 867              	.LFE5:
 869              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1,"ax",%progbits
 870              		.align	1
 871              		.global	PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1
 872              		.syntax unified
 873              		.thumb
 874              		.thumb_func
 875              		.fpu softvfp
 877              	PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1:
 878              	.LFB6:
 144:poly.c        **** 
 145:poly.c        **** /*************************************************
 146:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1
 147:poly.c        **** *
 148:poly.c        **** * Description: Sample a polynomial deterministically from a seed and a nonce,
 149:poly.c        **** *              with output polynomial close to centered binomial distribution
 150:poly.c        **** *              with parameter KYBER_ETA1
 151:poly.c        **** *
 152:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 153:poly.c        **** *              - const uint8_t *seed: pointer to input seed
 154:poly.c        **** *                                     (of length KYBER_SYMBYTES bytes)
 155:poly.c        **** *              - uint8_t nonce: one-byte input nonce
 156:poly.c        **** **************************************************/
 157:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t
 879              		.loc 1 157 108
 880              		.cfi_startproc
 881              		@ args = 0, pretend = 0, frame = 208
 882              		@ frame_needed = 1, uses_anonymous_args = 0
 883 0000 80B5     		push	{r7, lr}
 884              	.LCFI36:
 885              		.cfi_def_cfa_offset 8
 886              		.cfi_offset 7, -8
 887              		.cfi_offset 14, -4
 888 0002 B4B0     		sub	sp, sp, #208
 889              	.LCFI37:
 890              		.cfi_def_cfa_offset 216
 891 0004 00AF     		add	r7, sp, #0
 892              	.LCFI38:
 893              		.cfi_def_cfa_register 7
 894 0006 F860     		str	r0, [r7, #12]
 895 0008 B960     		str	r1, [r7, #8]
 896 000a 1346     		mov	r3, r2
 897 000c FB71     		strb	r3, [r7, #7]
 158:poly.c        ****     uint8_t buf[KYBER_ETA1 * KYBER_N / 4];
 159:poly.c        ****     prf(buf, sizeof(buf), seed, nonce);
 898              		.loc 1 159 5
 899 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 900 0010 07F11000 		add	r0, r7, #16
 901 0014 BA68     		ldr	r2, [r7, #8]
 902 0016 C021     		movs	r1, #192
 903 0018 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_kyber_shake256_prf
 160:poly.c        ****     PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1(r, buf);
 904              		.loc 1 160 5
 905 001c 07F11003 		add	r3, r7, #16
 906 0020 1946     		mov	r1, r3
 907 0022 F868     		ldr	r0, [r7, #12]
 908 0024 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1
 161:poly.c        **** }
 909              		.loc 1 161 1
 910 0028 00BF     		nop
 911 002a D037     		adds	r7, r7, #208
 912              	.LCFI39:
 913              		.cfi_def_cfa_offset 8
 914 002c BD46     		mov	sp, r7
 915              	.LCFI40:
 916              		.cfi_def_cfa_register 13
 917              		@ sp needed
 918 002e 80BD     		pop	{r7, pc}
 919              		.cfi_endproc
 920              	.LFE6:
 922              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2,"ax",%progbits
 923              		.align	1
 924              		.global	PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2
 925              		.syntax unified
 926              		.thumb
 927              		.thumb_func
 928              		.fpu softvfp
 930              	PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2:
 931              	.LFB7:
 162:poly.c        **** 
 163:poly.c        **** /*************************************************
 164:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2
 165:poly.c        **** *
 166:poly.c        **** * Description: Sample a polynomial deterministically from a seed and a nonce,
 167:poly.c        **** *              with output polynomial close to centered binomial distribution
 168:poly.c        **** *              with parameter KYBER_ETA2
 169:poly.c        **** *
 170:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 171:poly.c        **** *              - const uint8_t *seed: pointer to input seed
 172:poly.c        **** *                                     (of length KYBER_SYMBYTES bytes)
 173:poly.c        **** *              - uint8_t nonce: one-byte input nonce
 174:poly.c        **** **************************************************/
 175:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t
 932              		.loc 1 175 108
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 144
 935              		@ frame_needed = 1, uses_anonymous_args = 0
 936 0000 80B5     		push	{r7, lr}
 937              	.LCFI41:
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 A4B0     		sub	sp, sp, #144
 942              	.LCFI42:
 943              		.cfi_def_cfa_offset 152
 944 0004 00AF     		add	r7, sp, #0
 945              	.LCFI43:
 946              		.cfi_def_cfa_register 7
 947 0006 F860     		str	r0, [r7, #12]
 948 0008 B960     		str	r1, [r7, #8]
 949 000a 1346     		mov	r3, r2
 950 000c FB71     		strb	r3, [r7, #7]
 176:poly.c        ****     uint8_t buf[KYBER_ETA2 * KYBER_N / 4];
 177:poly.c        ****     prf(buf, sizeof(buf), seed, nonce);
 951              		.loc 1 177 5
 952 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 953 0010 07F11000 		add	r0, r7, #16
 954 0014 BA68     		ldr	r2, [r7, #8]
 955 0016 8021     		movs	r1, #128
 956 0018 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_kyber_shake256_prf
 178:poly.c        ****     PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2(r, buf);
 957              		.loc 1 178 5
 958 001c 07F11003 		add	r3, r7, #16
 959 0020 1946     		mov	r1, r3
 960 0022 F868     		ldr	r0, [r7, #12]
 961 0024 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2
 179:poly.c        **** }
 962              		.loc 1 179 1
 963 0028 00BF     		nop
 964 002a 9037     		adds	r7, r7, #144
 965              	.LCFI44:
 966              		.cfi_def_cfa_offset 8
 967 002c BD46     		mov	sp, r7
 968              	.LCFI45:
 969              		.cfi_def_cfa_register 13
 970              		@ sp needed
 971 002e 80BD     		pop	{r7, pc}
 972              		.cfi_endproc
 973              	.LFE7:
 975              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_ntt,"ax",%progbits
 976              		.align	1
 977              		.global	PQCLEAN_KYBER512_CLEAN_poly_ntt
 978              		.syntax unified
 979              		.thumb
 980              		.thumb_func
 981              		.fpu softvfp
 983              	PQCLEAN_KYBER512_CLEAN_poly_ntt:
 984              	.LFB8:
 180:poly.c        **** 
 181:poly.c        **** /*************************************************
 182:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_ntt
 183:poly.c        **** *
 184:poly.c        **** * Description: Computes negacyclic number-theoretic transform (NTT) of
 185:poly.c        **** *              a polynomial in place;
 186:poly.c        **** *              inputs assumed to be in normal order, output in bitreversed order
 187:poly.c        **** *
 188:poly.c        **** * Arguments:   - uint16_t *r: pointer to in/output polynomial
 189:poly.c        **** **************************************************/
 190:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_ntt(poly *r) {
 985              		.loc 1 190 47
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 8
 988              		@ frame_needed = 1, uses_anonymous_args = 0
 989 0000 80B5     		push	{r7, lr}
 990              	.LCFI46:
 991              		.cfi_def_cfa_offset 8
 992              		.cfi_offset 7, -8
 993              		.cfi_offset 14, -4
 994 0002 82B0     		sub	sp, sp, #8
 995              	.LCFI47:
 996              		.cfi_def_cfa_offset 16
 997 0004 00AF     		add	r7, sp, #0
 998              	.LCFI48:
 999              		.cfi_def_cfa_register 7
 1000 0006 7860     		str	r0, [r7, #4]
 191:poly.c        ****     PQCLEAN_KYBER512_CLEAN_ntt(r->coeffs);
 1001              		.loc 1 191 33
 1002 0008 7B68     		ldr	r3, [r7, #4]
 1003              		.loc 1 191 5
 1004 000a 1846     		mov	r0, r3
 1005 000c FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_ntt
 192:poly.c        ****     PQCLEAN_KYBER512_CLEAN_poly_reduce(r);
 1006              		.loc 1 192 5
 1007 0010 7868     		ldr	r0, [r7, #4]
 1008 0012 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_poly_reduce
 193:poly.c        **** }
 1009              		.loc 1 193 1
 1010 0016 00BF     		nop
 1011 0018 0837     		adds	r7, r7, #8
 1012              	.LCFI49:
 1013              		.cfi_def_cfa_offset 8
 1014 001a BD46     		mov	sp, r7
 1015              	.LCFI50:
 1016              		.cfi_def_cfa_register 13
 1017              		@ sp needed
 1018 001c 80BD     		pop	{r7, pc}
 1019              		.cfi_endproc
 1020              	.LFE8:
 1022              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont,"ax",%progbits
 1023              		.align	1
 1024              		.global	PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont
 1025              		.syntax unified
 1026              		.thumb
 1027              		.thumb_func
 1028              		.fpu softvfp
 1030              	PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont:
 1031              	.LFB9:
 194:poly.c        **** 
 195:poly.c        **** /*************************************************
 196:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont
 197:poly.c        **** *
 198:poly.c        **** * Description: Computes inverse of negacyclic number-theoretic transform (NTT)
 199:poly.c        **** *              of a polynomial in place;
 200:poly.c        **** *              inputs assumed to be in bitreversed order, output in normal order
 201:poly.c        **** *
 202:poly.c        **** * Arguments:   - uint16_t *a: pointer to in/output polynomial
 203:poly.c        **** **************************************************/
 204:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont(poly *r) {
 1032              		.loc 1 204 57
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 8
 1035              		@ frame_needed = 1, uses_anonymous_args = 0
 1036 0000 80B5     		push	{r7, lr}
 1037              	.LCFI51:
 1038              		.cfi_def_cfa_offset 8
 1039              		.cfi_offset 7, -8
 1040              		.cfi_offset 14, -4
 1041 0002 82B0     		sub	sp, sp, #8
 1042              	.LCFI52:
 1043              		.cfi_def_cfa_offset 16
 1044 0004 00AF     		add	r7, sp, #0
 1045              	.LCFI53:
 1046              		.cfi_def_cfa_register 7
 1047 0006 7860     		str	r0, [r7, #4]
 205:poly.c        ****     PQCLEAN_KYBER512_CLEAN_invntt(r->coeffs);
 1048              		.loc 1 205 36
 1049 0008 7B68     		ldr	r3, [r7, #4]
 1050              		.loc 1 205 5
 1051 000a 1846     		mov	r0, r3
 1052 000c FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_invntt
 206:poly.c        **** }
 1053              		.loc 1 206 1
 1054 0010 00BF     		nop
 1055 0012 0837     		adds	r7, r7, #8
 1056              	.LCFI54:
 1057              		.cfi_def_cfa_offset 8
 1058 0014 BD46     		mov	sp, r7
 1059              	.LCFI55:
 1060              		.cfi_def_cfa_register 13
 1061              		@ sp needed
 1062 0016 80BD     		pop	{r7, pc}
 1063              		.cfi_endproc
 1064              	.LFE9:
 1066              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery,"ax",%progbits
 1067              		.align	1
 1068              		.global	PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery
 1069              		.syntax unified
 1070              		.thumb
 1071              		.thumb_func
 1072              		.fpu softvfp
 1074              	PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery:
 1075              	.LFB10:
 207:poly.c        **** 
 208:poly.c        **** /*************************************************
 209:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery
 210:poly.c        **** *
 211:poly.c        **** * Description: Multiplication of two polynomials in NTT domain
 212:poly.c        **** *
 213:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 214:poly.c        **** *              - const poly *a: pointer to first input polynomial
 215:poly.c        **** *              - const poly *b: pointer to second input polynomial
 216:poly.c        **** **************************************************/
 217:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery(poly *r, const poly *a, const poly *b) {
 1076              		.loc 1 217 92
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 24
 1079              		@ frame_needed = 1, uses_anonymous_args = 0
 1080 0000 90B5     		push	{r4, r7, lr}
 1081              	.LCFI56:
 1082              		.cfi_def_cfa_offset 12
 1083              		.cfi_offset 4, -12
 1084              		.cfi_offset 7, -8
 1085              		.cfi_offset 14, -4
 1086 0002 87B0     		sub	sp, sp, #28
 1087              	.LCFI57:
 1088              		.cfi_def_cfa_offset 40
 1089 0004 00AF     		add	r7, sp, #0
 1090              	.LCFI58:
 1091              		.cfi_def_cfa_register 7
 1092 0006 F860     		str	r0, [r7, #12]
 1093 0008 B960     		str	r1, [r7, #8]
 1094 000a 7A60     		str	r2, [r7, #4]
 218:poly.c        ****     size_t i;
 219:poly.c        ****     for (i = 0; i < KYBER_N / 4; i++) {
 1095              		.loc 1 219 12
 1096 000c 0023     		movs	r3, #0
 1097 000e 7B61     		str	r3, [r7, #20]
 1098              		.loc 1 219 5
 1099 0010 35E0     		b	.L34
 1100              	.L35:
 220:poly.c        ****         PQCLEAN_KYBER512_CLEAN_basemul(&r->coeffs[4 * i], &a->coeffs[4 * i], &b->coeffs[4 * i], PQC
 1101              		.loc 1 220 53 discriminator 3
 1102 0012 7B69     		ldr	r3, [r7, #20]
 1103 0014 9B00     		lsls	r3, r3, #2
 1104              		.loc 1 220 9 discriminator 3
 1105 0016 5B00     		lsls	r3, r3, #1
 1106 0018 FA68     		ldr	r2, [r7, #12]
 1107 001a D018     		adds	r0, r2, r3
 1108              		.loc 1 220 72 discriminator 3
 1109 001c 7B69     		ldr	r3, [r7, #20]
 1110 001e 9B00     		lsls	r3, r3, #2
 1111              		.loc 1 220 9 discriminator 3
 1112 0020 5B00     		lsls	r3, r3, #1
 1113 0022 BA68     		ldr	r2, [r7, #8]
 1114 0024 D118     		adds	r1, r2, r3
 1115              		.loc 1 220 91 discriminator 3
 1116 0026 7B69     		ldr	r3, [r7, #20]
 1117 0028 9B00     		lsls	r3, r3, #2
 1118              		.loc 1 220 9 discriminator 3
 1119 002a 5B00     		lsls	r3, r3, #1
 1120 002c 7A68     		ldr	r2, [r7, #4]
 1121 002e 1A44     		add	r2, r2, r3
 1122              		.loc 1 220 129 discriminator 3
 1123 0030 7B69     		ldr	r3, [r7, #20]
 1124 0032 4033     		adds	r3, r3, #64
 1125              		.loc 1 220 9 discriminator 3
 1126 0034 164C     		ldr	r4, .L36
 1127 0036 34F91330 		ldrsh	r3, [r4, r3, lsl #1]
 1128 003a FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_basemul
 221:poly.c        ****         PQCLEAN_KYBER512_CLEAN_basemul(&r->coeffs[4 * i + 2], &a->coeffs[4 * i + 2], &b->coeffs[4 *
 1129              		.loc 1 221 53 discriminator 3
 1130 003e 7B69     		ldr	r3, [r7, #20]
 1131 0040 9B00     		lsls	r3, r3, #2
 1132              		.loc 1 221 57 discriminator 3
 1133 0042 0233     		adds	r3, r3, #2
 1134              		.loc 1 221 9 discriminator 3
 1135 0044 5B00     		lsls	r3, r3, #1
 1136 0046 FA68     		ldr	r2, [r7, #12]
 1137 0048 D018     		adds	r0, r2, r3
 1138              		.loc 1 221 76 discriminator 3
 1139 004a 7B69     		ldr	r3, [r7, #20]
 1140 004c 9B00     		lsls	r3, r3, #2
 1141              		.loc 1 221 80 discriminator 3
 1142 004e 0233     		adds	r3, r3, #2
 1143              		.loc 1 221 9 discriminator 3
 1144 0050 5B00     		lsls	r3, r3, #1
 1145 0052 BA68     		ldr	r2, [r7, #8]
 1146 0054 D118     		adds	r1, r2, r3
 1147              		.loc 1 221 99 discriminator 3
 1148 0056 7B69     		ldr	r3, [r7, #20]
 1149 0058 9B00     		lsls	r3, r3, #2
 1150              		.loc 1 221 103 discriminator 3
 1151 005a 0233     		adds	r3, r3, #2
 1152              		.loc 1 221 9 discriminator 3
 1153 005c 5B00     		lsls	r3, r3, #1
 1154 005e 7A68     		ldr	r2, [r7, #4]
 1155 0060 1A44     		add	r2, r2, r3
 1156              		.loc 1 221 142 discriminator 3
 1157 0062 7B69     		ldr	r3, [r7, #20]
 1158 0064 4033     		adds	r3, r3, #64
 1159              		.loc 1 221 138 discriminator 3
 1160 0066 0A4C     		ldr	r4, .L36
 1161 0068 34F91330 		ldrsh	r3, [r4, r3, lsl #1]
 1162 006c 9BB2     		uxth	r3, r3
 1163              		.loc 1 221 9 discriminator 3
 1164 006e 5B42     		rsbs	r3, r3, #0
 1165 0070 9BB2     		uxth	r3, r3
 1166 0072 1BB2     		sxth	r3, r3
 1167 0074 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_basemul
 219:poly.c        ****         PQCLEAN_KYBER512_CLEAN_basemul(&r->coeffs[4 * i], &a->coeffs[4 * i], &b->coeffs[4 * i], PQC
 1168              		.loc 1 219 35 discriminator 3
 1169 0078 7B69     		ldr	r3, [r7, #20]
 1170 007a 0133     		adds	r3, r3, #1
 1171 007c 7B61     		str	r3, [r7, #20]
 1172              	.L34:
 219:poly.c        ****         PQCLEAN_KYBER512_CLEAN_basemul(&r->coeffs[4 * i], &a->coeffs[4 * i], &b->coeffs[4 * i], PQC
 1173              		.loc 1 219 5 discriminator 1
 1174 007e 7B69     		ldr	r3, [r7, #20]
 1175 0080 3F2B     		cmp	r3, #63
 1176 0082 C6D9     		bls	.L35
 222:poly.c        ****     }
 223:poly.c        **** }
 1177              		.loc 1 223 1
 1178 0084 00BF     		nop
 1179 0086 00BF     		nop
 1180 0088 1C37     		adds	r7, r7, #28
 1181              	.LCFI59:
 1182              		.cfi_def_cfa_offset 12
 1183 008a BD46     		mov	sp, r7
 1184              	.LCFI60:
 1185              		.cfi_def_cfa_register 13
 1186              		@ sp needed
 1187 008c 90BD     		pop	{r4, r7, pc}
 1188              	.L37:
 1189 008e 00BF     		.align	2
 1190              	.L36:
 1191 0090 00000000 		.word	PQCLEAN_KYBER512_CLEAN_zetas
 1192              		.cfi_endproc
 1193              	.LFE10:
 1195              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_tomont,"ax",%progbits
 1196              		.align	1
 1197              		.global	PQCLEAN_KYBER512_CLEAN_poly_tomont
 1198              		.syntax unified
 1199              		.thumb
 1200              		.thumb_func
 1201              		.fpu softvfp
 1203              	PQCLEAN_KYBER512_CLEAN_poly_tomont:
 1204              	.LFB11:
 224:poly.c        **** 
 225:poly.c        **** /*************************************************
 226:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_tomont
 227:poly.c        **** *
 228:poly.c        **** * Description: Inplace conversion of all coefficients of a polynomial
 229:poly.c        **** *              from normal domain to Montgomery domain
 230:poly.c        **** *
 231:poly.c        **** * Arguments:   - poly *r: pointer to input/output polynomial
 232:poly.c        **** **************************************************/
 233:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_tomont(poly *r) {
 1205              		.loc 1 233 50
 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 16
 1208              		@ frame_needed = 1, uses_anonymous_args = 0
 1209 0000 80B5     		push	{r7, lr}
 1210              	.LCFI61:
 1211              		.cfi_def_cfa_offset 8
 1212              		.cfi_offset 7, -8
 1213              		.cfi_offset 14, -4
 1214 0002 84B0     		sub	sp, sp, #16
 1215              	.LCFI62:
 1216              		.cfi_def_cfa_offset 24
 1217 0004 00AF     		add	r7, sp, #0
 1218              	.LCFI63:
 1219              		.cfi_def_cfa_register 7
 1220 0006 7860     		str	r0, [r7, #4]
 234:poly.c        ****     size_t i;
 235:poly.c        ****     const int16_t f = (1ULL << 32) % KYBER_Q;
 1221              		.loc 1 235 19
 1222 0008 40F24953 		movw	r3, #1353
 1223 000c 7B81     		strh	r3, [r7, #10]	@ movhi
 236:poly.c        ****     for (i = 0; i < KYBER_N; i++) {
 1224              		.loc 1 236 12
 1225 000e 0023     		movs	r3, #0
 1226 0010 FB60     		str	r3, [r7, #12]
 1227              		.loc 1 236 5
 1228 0012 14E0     		b	.L39
 1229              	.L40:
 237:poly.c        ****         r->coeffs[i] = PQCLEAN_KYBER512_CLEAN_montgomery_reduce((int32_t)r->coeffs[i] * f);
 1230              		.loc 1 237 83 discriminator 3
 1231 0014 7B68     		ldr	r3, [r7, #4]
 1232 0016 FA68     		ldr	r2, [r7, #12]
 1233 0018 33F91230 		ldrsh	r3, [r3, r2, lsl #1]
 1234              		.loc 1 237 65 discriminator 3
 1235 001c 1A46     		mov	r2, r3
 1236              		.loc 1 237 24 discriminator 3
 1237 001e B7F90A30 		ldrsh	r3, [r7, #10]
 1238 0022 02FB03F3 		mul	r3, r2, r3
 1239 0026 1846     		mov	r0, r3
 1240 0028 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_montgomery_reduce
 1241 002c 0346     		mov	r3, r0
 1242 002e 1946     		mov	r1, r3
 1243              		.loc 1 237 22 discriminator 3
 1244 0030 7B68     		ldr	r3, [r7, #4]
 1245 0032 FA68     		ldr	r2, [r7, #12]
 1246 0034 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 236:poly.c        ****     for (i = 0; i < KYBER_N; i++) {
 1247              		.loc 1 236 31 discriminator 3
 1248 0038 FB68     		ldr	r3, [r7, #12]
 1249 003a 0133     		adds	r3, r3, #1
 1250 003c FB60     		str	r3, [r7, #12]
 1251              	.L39:
 236:poly.c        ****     for (i = 0; i < KYBER_N; i++) {
 1252              		.loc 1 236 5 discriminator 1
 1253 003e FB68     		ldr	r3, [r7, #12]
 1254 0040 FF2B     		cmp	r3, #255
 1255 0042 E7D9     		bls	.L40
 238:poly.c        ****     }
 239:poly.c        **** }
 1256              		.loc 1 239 1
 1257 0044 00BF     		nop
 1258 0046 00BF     		nop
 1259 0048 1037     		adds	r7, r7, #16
 1260              	.LCFI64:
 1261              		.cfi_def_cfa_offset 8
 1262 004a BD46     		mov	sp, r7
 1263              	.LCFI65:
 1264              		.cfi_def_cfa_register 13
 1265              		@ sp needed
 1266 004c 80BD     		pop	{r7, pc}
 1267              		.cfi_endproc
 1268              	.LFE11:
 1270              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_reduce,"ax",%progbits
 1271              		.align	1
 1272              		.global	PQCLEAN_KYBER512_CLEAN_poly_reduce
 1273              		.syntax unified
 1274              		.thumb
 1275              		.thumb_func
 1276              		.fpu softvfp
 1278              	PQCLEAN_KYBER512_CLEAN_poly_reduce:
 1279              	.LFB12:
 240:poly.c        **** 
 241:poly.c        **** /*************************************************
 242:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_reduce
 243:poly.c        **** *
 244:poly.c        **** * Description: Applies Barrett reduction to all coefficients of a polynomial
 245:poly.c        **** *              for details of the Barrett reduction see comments in reduce.c
 246:poly.c        **** *
 247:poly.c        **** * Arguments:   - poly *r: pointer to input/output polynomial
 248:poly.c        **** **************************************************/
 249:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_reduce(poly *r) {
 1280              		.loc 1 249 50
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 16
 1283              		@ frame_needed = 1, uses_anonymous_args = 0
 1284 0000 80B5     		push	{r7, lr}
 1285              	.LCFI66:
 1286              		.cfi_def_cfa_offset 8
 1287              		.cfi_offset 7, -8
 1288              		.cfi_offset 14, -4
 1289 0002 84B0     		sub	sp, sp, #16
 1290              	.LCFI67:
 1291              		.cfi_def_cfa_offset 24
 1292 0004 00AF     		add	r7, sp, #0
 1293              	.LCFI68:
 1294              		.cfi_def_cfa_register 7
 1295 0006 7860     		str	r0, [r7, #4]
 250:poly.c        ****     size_t i;
 251:poly.c        ****     for (i = 0; i < KYBER_N; i++) {
 1296              		.loc 1 251 12
 1297 0008 0023     		movs	r3, #0
 1298 000a FB60     		str	r3, [r7, #12]
 1299              		.loc 1 251 5
 1300 000c 0FE0     		b	.L42
 1301              	.L43:
 252:poly.c        ****         r->coeffs[i] = PQCLEAN_KYBER512_CLEAN_barrett_reduce(r->coeffs[i]);
 1302              		.loc 1 252 24 discriminator 3
 1303 000e 7B68     		ldr	r3, [r7, #4]
 1304 0010 FA68     		ldr	r2, [r7, #12]
 1305 0012 33F91230 		ldrsh	r3, [r3, r2, lsl #1]
 1306 0016 1846     		mov	r0, r3
 1307 0018 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_barrett_reduce
 1308 001c 0346     		mov	r3, r0
 1309 001e 1946     		mov	r1, r3
 1310              		.loc 1 252 22 discriminator 3
 1311 0020 7B68     		ldr	r3, [r7, #4]
 1312 0022 FA68     		ldr	r2, [r7, #12]
 1313 0024 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 251:poly.c        ****         r->coeffs[i] = PQCLEAN_KYBER512_CLEAN_barrett_reduce(r->coeffs[i]);
 1314              		.loc 1 251 31 discriminator 3
 1315 0028 FB68     		ldr	r3, [r7, #12]
 1316 002a 0133     		adds	r3, r3, #1
 1317 002c FB60     		str	r3, [r7, #12]
 1318              	.L42:
 251:poly.c        ****         r->coeffs[i] = PQCLEAN_KYBER512_CLEAN_barrett_reduce(r->coeffs[i]);
 1319              		.loc 1 251 5 discriminator 1
 1320 002e FB68     		ldr	r3, [r7, #12]
 1321 0030 FF2B     		cmp	r3, #255
 1322 0032 ECD9     		bls	.L43
 253:poly.c        ****     }
 254:poly.c        **** }
 1323              		.loc 1 254 1
 1324 0034 00BF     		nop
 1325 0036 00BF     		nop
 1326 0038 1037     		adds	r7, r7, #16
 1327              	.LCFI69:
 1328              		.cfi_def_cfa_offset 8
 1329 003a BD46     		mov	sp, r7
 1330              	.LCFI70:
 1331              		.cfi_def_cfa_register 13
 1332              		@ sp needed
 1333 003c 80BD     		pop	{r7, pc}
 1334              		.cfi_endproc
 1335              	.LFE12:
 1337              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_add,"ax",%progbits
 1338              		.align	1
 1339              		.global	PQCLEAN_KYBER512_CLEAN_poly_add
 1340              		.syntax unified
 1341              		.thumb
 1342              		.thumb_func
 1343              		.fpu softvfp
 1345              	PQCLEAN_KYBER512_CLEAN_poly_add:
 1346              	.LFB13:
 255:poly.c        **** 
 256:poly.c        **** /*************************************************
 257:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_add
 258:poly.c        **** *
 259:poly.c        **** * Description: Add two polynomials; no modular reduction is performed
 260:poly.c        **** *
 261:poly.c        **** * Arguments: - poly *r: pointer to output polynomial
 262:poly.c        **** *            - const poly *a: pointer to first input polynomial
 263:poly.c        **** *            - const poly *b: pointer to second input polynomial
 264:poly.c        **** **************************************************/
 265:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_add(poly *r, const poly *a, const poly *b) {
 1347              		.loc 1 265 77
 1348              		.cfi_startproc
 1349              		@ args = 0, pretend = 0, frame = 24
 1350              		@ frame_needed = 1, uses_anonymous_args = 0
 1351              		@ link register save eliminated.
 1352 0000 80B4     		push	{r7}
 1353              	.LCFI71:
 1354              		.cfi_def_cfa_offset 4
 1355              		.cfi_offset 7, -4
 1356 0002 87B0     		sub	sp, sp, #28
 1357              	.LCFI72:
 1358              		.cfi_def_cfa_offset 32
 1359 0004 00AF     		add	r7, sp, #0
 1360              	.LCFI73:
 1361              		.cfi_def_cfa_register 7
 1362 0006 F860     		str	r0, [r7, #12]
 1363 0008 B960     		str	r1, [r7, #8]
 1364 000a 7A60     		str	r2, [r7, #4]
 266:poly.c        ****     size_t i;
 267:poly.c        ****     for (i = 0; i < KYBER_N; i++) {
 1365              		.loc 1 267 12
 1366 000c 0023     		movs	r3, #0
 1367 000e 7B61     		str	r3, [r7, #20]
 1368              		.loc 1 267 5
 1369 0010 13E0     		b	.L45
 1370              	.L46:
 268:poly.c        ****         r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 1371              		.loc 1 268 33 discriminator 3
 1372 0012 BB68     		ldr	r3, [r7, #8]
 1373 0014 7A69     		ldr	r2, [r7, #20]
 1374 0016 33F91230 		ldrsh	r3, [r3, r2, lsl #1]
 1375 001a 9AB2     		uxth	r2, r3
 1376              		.loc 1 268 48 discriminator 3
 1377 001c 7B68     		ldr	r3, [r7, #4]
 1378 001e 7969     		ldr	r1, [r7, #20]
 1379 0020 33F91130 		ldrsh	r3, [r3, r1, lsl #1]
 1380 0024 9BB2     		uxth	r3, r3
 1381              		.loc 1 268 37 discriminator 3
 1382 0026 1344     		add	r3, r3, r2
 1383 0028 9BB2     		uxth	r3, r3
 1384 002a 19B2     		sxth	r1, r3
 1385              		.loc 1 268 22 discriminator 3
 1386 002c FB68     		ldr	r3, [r7, #12]
 1387 002e 7A69     		ldr	r2, [r7, #20]
 1388 0030 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 267:poly.c        ****         r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 1389              		.loc 1 267 31 discriminator 3
 1390 0034 7B69     		ldr	r3, [r7, #20]
 1391 0036 0133     		adds	r3, r3, #1
 1392 0038 7B61     		str	r3, [r7, #20]
 1393              	.L45:
 267:poly.c        ****         r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 1394              		.loc 1 267 5 discriminator 1
 1395 003a 7B69     		ldr	r3, [r7, #20]
 1396 003c FF2B     		cmp	r3, #255
 1397 003e E8D9     		bls	.L46
 269:poly.c        ****     }
 270:poly.c        **** }
 1398              		.loc 1 270 1
 1399 0040 00BF     		nop
 1400 0042 00BF     		nop
 1401 0044 1C37     		adds	r7, r7, #28
 1402              	.LCFI74:
 1403              		.cfi_def_cfa_offset 4
 1404 0046 BD46     		mov	sp, r7
 1405              	.LCFI75:
 1406              		.cfi_def_cfa_register 13
 1407              		@ sp needed
 1408 0048 80BC     		pop	{r7}
 1409              	.LCFI76:
 1410              		.cfi_restore 7
 1411              		.cfi_def_cfa_offset 0
 1412 004a 7047     		bx	lr
 1413              		.cfi_endproc
 1414              	.LFE13:
 1416              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_sub,"ax",%progbits
 1417              		.align	1
 1418              		.global	PQCLEAN_KYBER512_CLEAN_poly_sub
 1419              		.syntax unified
 1420              		.thumb
 1421              		.thumb_func
 1422              		.fpu softvfp
 1424              	PQCLEAN_KYBER512_CLEAN_poly_sub:
 1425              	.LFB14:
 271:poly.c        **** 
 272:poly.c        **** /*************************************************
 273:poly.c        **** * Name:        PQCLEAN_KYBER512_CLEAN_poly_sub
 274:poly.c        **** *
 275:poly.c        **** * Description: Subtract two polynomials; no modular reduction is performed
 276:poly.c        **** *
 277:poly.c        **** * Arguments: - poly *r:       pointer to output polynomial
 278:poly.c        **** *            - const poly *a: pointer to first input polynomial
 279:poly.c        **** *            - const poly *b: pointer to second input polynomial
 280:poly.c        **** **************************************************/
 281:poly.c        **** void PQCLEAN_KYBER512_CLEAN_poly_sub(poly *r, const poly *a, const poly *b) {
 1426              		.loc 1 281 77
 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 24
 1429              		@ frame_needed = 1, uses_anonymous_args = 0
 1430              		@ link register save eliminated.
 1431 0000 80B4     		push	{r7}
 1432              	.LCFI77:
 1433              		.cfi_def_cfa_offset 4
 1434              		.cfi_offset 7, -4
 1435 0002 87B0     		sub	sp, sp, #28
 1436              	.LCFI78:
 1437              		.cfi_def_cfa_offset 32
 1438 0004 00AF     		add	r7, sp, #0
 1439              	.LCFI79:
 1440              		.cfi_def_cfa_register 7
 1441 0006 F860     		str	r0, [r7, #12]
 1442 0008 B960     		str	r1, [r7, #8]
 1443 000a 7A60     		str	r2, [r7, #4]
 282:poly.c        ****     size_t i;
 283:poly.c        ****     for (i = 0; i < KYBER_N; i++) {
 1444              		.loc 1 283 12
 1445 000c 0023     		movs	r3, #0
 1446 000e 7B61     		str	r3, [r7, #20]
 1447              		.loc 1 283 5
 1448 0010 13E0     		b	.L48
 1449              	.L49:
 284:poly.c        ****         r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 1450              		.loc 1 284 33 discriminator 3
 1451 0012 BB68     		ldr	r3, [r7, #8]
 1452 0014 7A69     		ldr	r2, [r7, #20]
 1453 0016 33F91230 		ldrsh	r3, [r3, r2, lsl #1]
 1454 001a 9AB2     		uxth	r2, r3
 1455              		.loc 1 284 48 discriminator 3
 1456 001c 7B68     		ldr	r3, [r7, #4]
 1457 001e 7969     		ldr	r1, [r7, #20]
 1458 0020 33F91130 		ldrsh	r3, [r3, r1, lsl #1]
 1459 0024 9BB2     		uxth	r3, r3
 1460              		.loc 1 284 37 discriminator 3
 1461 0026 D31A     		subs	r3, r2, r3
 1462 0028 9BB2     		uxth	r3, r3
 1463 002a 19B2     		sxth	r1, r3
 1464              		.loc 1 284 22 discriminator 3
 1465 002c FB68     		ldr	r3, [r7, #12]
 1466 002e 7A69     		ldr	r2, [r7, #20]
 1467 0030 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 283:poly.c        ****         r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 1468              		.loc 1 283 31 discriminator 3
 1469 0034 7B69     		ldr	r3, [r7, #20]
 1470 0036 0133     		adds	r3, r3, #1
 1471 0038 7B61     		str	r3, [r7, #20]
 1472              	.L48:
 283:poly.c        ****         r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 1473              		.loc 1 283 5 discriminator 1
 1474 003a 7B69     		ldr	r3, [r7, #20]
 1475 003c FF2B     		cmp	r3, #255
 1476 003e E8D9     		bls	.L49
 285:poly.c        ****     }
 286:poly.c        **** }
 1477              		.loc 1 286 1
 1478 0040 00BF     		nop
 1479 0042 00BF     		nop
 1480 0044 1C37     		adds	r7, r7, #28
 1481              	.LCFI80:
 1482              		.cfi_def_cfa_offset 4
 1483 0046 BD46     		mov	sp, r7
 1484              	.LCFI81:
 1485              		.cfi_def_cfa_register 13
 1486              		@ sp needed
 1487 0048 80BC     		pop	{r7}
 1488              	.LCFI82:
 1489              		.cfi_restore 7
 1490              		.cfi_def_cfa_offset 0
 1491 004a 7047     		bx	lr
 1492              		.cfi_endproc
 1493              	.LFE14:
 1495              		.text
 1496              	.Letext0:
 1497              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1498              		.file 3 "poly.h"
 1499              		.file 4 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1500              		.file 5 "ntt.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 poly.c
     /tmp/ccDb6sRK.s:16     .text.PQCLEAN_KYBER512_CLEAN_poly_compress:0000000000000000 $t
     /tmp/ccDb6sRK.s:24     .text.PQCLEAN_KYBER512_CLEAN_poly_compress:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_compress
     /tmp/ccDb6sRK.s:211    .text.PQCLEAN_KYBER512_CLEAN_poly_compress:00000000000000ec $d
     /tmp/ccDb6sRK.s:216    .text.PQCLEAN_KYBER512_CLEAN_poly_decompress:0000000000000000 $t
     /tmp/ccDb6sRK.s:223    .text.PQCLEAN_KYBER512_CLEAN_poly_decompress:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_decompress
     /tmp/ccDb6sRK.s:322    .text.PQCLEAN_KYBER512_CLEAN_poly_tobytes:0000000000000000 $t
     /tmp/ccDb6sRK.s:329    .text.PQCLEAN_KYBER512_CLEAN_poly_tobytes:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_tobytes
     /tmp/ccDb6sRK.s:481    .text.PQCLEAN_KYBER512_CLEAN_poly_frombytes:0000000000000000 $t
     /tmp/ccDb6sRK.s:488    .text.PQCLEAN_KYBER512_CLEAN_poly_frombytes:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_frombytes
     /tmp/ccDb6sRK.s:617    .text.PQCLEAN_KYBER512_CLEAN_poly_frommsg:0000000000000000 $t
     /tmp/ccDb6sRK.s:624    .text.PQCLEAN_KYBER512_CLEAN_poly_frommsg:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_frommsg
     /tmp/ccDb6sRK.s:724    .text.PQCLEAN_KYBER512_CLEAN_poly_tomsg:0000000000000000 $t
     /tmp/ccDb6sRK.s:731    .text.PQCLEAN_KYBER512_CLEAN_poly_tomsg:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_tomsg
     /tmp/ccDb6sRK.s:865    .text.PQCLEAN_KYBER512_CLEAN_poly_tomsg:00000000000000ac $d
     /tmp/ccDb6sRK.s:870    .text.PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1:0000000000000000 $t
     /tmp/ccDb6sRK.s:877    .text.PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1
     /tmp/ccDb6sRK.s:923    .text.PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2:0000000000000000 $t
     /tmp/ccDb6sRK.s:930    .text.PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2
     /tmp/ccDb6sRK.s:976    .text.PQCLEAN_KYBER512_CLEAN_poly_ntt:0000000000000000 $t
     /tmp/ccDb6sRK.s:983    .text.PQCLEAN_KYBER512_CLEAN_poly_ntt:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_ntt
     /tmp/ccDb6sRK.s:1278   .text.PQCLEAN_KYBER512_CLEAN_poly_reduce:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_reduce
     /tmp/ccDb6sRK.s:1023   .text.PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont:0000000000000000 $t
     /tmp/ccDb6sRK.s:1030   .text.PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont
     /tmp/ccDb6sRK.s:1067   .text.PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery:0000000000000000 $t
     /tmp/ccDb6sRK.s:1074   .text.PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery
     /tmp/ccDb6sRK.s:1191   .text.PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery:0000000000000090 $d
     /tmp/ccDb6sRK.s:1196   .text.PQCLEAN_KYBER512_CLEAN_poly_tomont:0000000000000000 $t
     /tmp/ccDb6sRK.s:1203   .text.PQCLEAN_KYBER512_CLEAN_poly_tomont:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_tomont
     /tmp/ccDb6sRK.s:1271   .text.PQCLEAN_KYBER512_CLEAN_poly_reduce:0000000000000000 $t
     /tmp/ccDb6sRK.s:1338   .text.PQCLEAN_KYBER512_CLEAN_poly_add:0000000000000000 $t
     /tmp/ccDb6sRK.s:1345   .text.PQCLEAN_KYBER512_CLEAN_poly_add:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_add
     /tmp/ccDb6sRK.s:1417   .text.PQCLEAN_KYBER512_CLEAN_poly_sub:0000000000000000 $t
     /tmp/ccDb6sRK.s:1424   .text.PQCLEAN_KYBER512_CLEAN_poly_sub:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_sub

UNDEFINED SYMBOLS
PQCLEAN_KYBER512_CLEAN_kyber_shake256_prf
PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1
PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2
PQCLEAN_KYBER512_CLEAN_ntt
PQCLEAN_KYBER512_CLEAN_invntt
PQCLEAN_KYBER512_CLEAN_basemul
PQCLEAN_KYBER512_CLEAN_zetas
PQCLEAN_KYBER512_CLEAN_montgomery_reduce
PQCLEAN_KYBER512_CLEAN_barrett_reduce
