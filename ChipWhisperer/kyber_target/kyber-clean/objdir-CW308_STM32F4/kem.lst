   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"kem.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand,"ax",%progbits
  16              		.align	1
  17              		.global	PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand:
  25              	.LFB0:
  26              		.file 1 "kem.c"
   1:kem.c         **** #include "indcpa.h"
   2:kem.c         **** #include "kem.h"
   3:kem.c         **** #include "params.h"
   4:kem.c         **** #include "randombytes.h"
   5:kem.c         **** #include "symmetric.h"
   6:kem.c         **** #include "verify.h"
   7:kem.c         **** #include <stddef.h>
   8:kem.c         **** #include <stdint.h>
   9:kem.c         **** #include <string.h>
  10:kem.c         **** /*************************************************
  11:kem.c         **** * Name:        PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand
  12:kem.c         **** *
  13:kem.c         **** * Description: Generates public and private key
  14:kem.c         **** *              for CCA-secure Kyber key encapsulation mechanism
  15:kem.c         **** *
  16:kem.c         **** * Arguments:   - uint8_t *pk: pointer to output public key
  17:kem.c         **** *                (an already allocated array of KYBER_PUBLICKEYBYTES bytes)
  18:kem.c         **** *              - uint8_t *sk: pointer to output private key
  19:kem.c         **** *                (an already allocated array of KYBER_SECRETKEYBYTES bytes)
  20:kem.c         **** *              - uint8_t *coins: pointer to input randomness
  21:kem.c         **** *                (an already allocated array filled with 2*KYBER_SYMBYTES random bytes)
  22:kem.c         **** **
  23:kem.c         **** * Returns 0 (success)
  24:kem.c         **** **************************************************/
  25:kem.c         **** int PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand(uint8_t *pk,
  26:kem.c         ****         uint8_t *sk,
  27:kem.c         ****         const uint8_t *coins) {
  27              		.loc 1 27 31
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 84B0     		sub	sp, sp, #16
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 F860     		str	r0, [r7, #12]
  43 0008 B960     		str	r1, [r7, #8]
  44 000a 7A60     		str	r2, [r7, #4]
  28:kem.c         ****     PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand(pk, sk, coins);
  45              		.loc 1 28 5
  46 000c 7A68     		ldr	r2, [r7, #4]
  47 000e B968     		ldr	r1, [r7, #8]
  48 0010 F868     		ldr	r0, [r7, #12]
  49 0012 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand
  29:kem.c         ****     memcpy(sk + KYBER_INDCPA_SECRETKEYBYTES, pk, KYBER_PUBLICKEYBYTES);
  50              		.loc 1 29 15
  51 0016 BB68     		ldr	r3, [r7, #8]
  52 0018 03F54073 		add	r3, r3, #768
  53              		.loc 1 29 5
  54 001c 4FF44872 		mov	r2, #800
  55 0020 F968     		ldr	r1, [r7, #12]
  56 0022 1846     		mov	r0, r3
  57 0024 FFF7FEFF 		bl	memcpy
  30:kem.c         ****     hash_h(sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
  58              		.loc 1 30 5
  59 0028 BB68     		ldr	r3, [r7, #8]
  60 002a 03F5C463 		add	r3, r3, #1568
  61 002e 4FF44872 		mov	r2, #800
  62 0032 F968     		ldr	r1, [r7, #12]
  63 0034 1846     		mov	r0, r3
  64 0036 FFF7FEFF 		bl	sha3_256
  31:kem.c         ****     /* Value z for pseudo-random output on reject */
  32:kem.c         ****     memcpy(sk + KYBER_SECRETKEYBYTES - KYBER_SYMBYTES, coins + KYBER_SYMBYTES, KYBER_SYMBYTES);
  65              		.loc 1 32 38
  66 003a BB68     		ldr	r3, [r7, #8]
  67 003c 03F5C860 		add	r0, r3, #1600
  68              		.loc 1 32 62
  69 0040 7B68     		ldr	r3, [r7, #4]
  70 0042 2033     		adds	r3, r3, #32
  71              		.loc 1 32 5
  72 0044 2022     		movs	r2, #32
  73 0046 1946     		mov	r1, r3
  74 0048 FFF7FEFF 		bl	memcpy
  33:kem.c         ****     return 0;
  75              		.loc 1 33 12
  76 004c 0023     		movs	r3, #0
  34:kem.c         **** }
  77              		.loc 1 34 1
  78 004e 1846     		mov	r0, r3
  79 0050 1037     		adds	r7, r7, #16
  80              	.LCFI3:
  81              		.cfi_def_cfa_offset 8
  82 0052 BD46     		mov	sp, r7
  83              	.LCFI4:
  84              		.cfi_def_cfa_register 13
  85              		@ sp needed
  86 0054 80BD     		pop	{r7, pc}
  87              		.cfi_endproc
  88              	.LFE0:
  90              		.section	.text.PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair,"ax",%progbits
  91              		.align	1
  92              		.global	PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair
  93              		.syntax unified
  94              		.thumb
  95              		.thumb_func
  96              		.fpu softvfp
  98              	PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair:
  99              	.LFB1:
  35:kem.c         **** 
  36:kem.c         **** /*************************************************
  37:kem.c         **** * Name:        PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair
  38:kem.c         **** *
  39:kem.c         **** * Description: Generates public and private key
  40:kem.c         **** *              for CCA-secure Kyber key encapsulation mechanism
  41:kem.c         **** *
  42:kem.c         **** * Arguments:   - uint8_t *pk: pointer to output public key
  43:kem.c         **** *                (an already allocated array of KYBER_PUBLICKEYBYTES bytes)
  44:kem.c         **** *              - uint8_t *sk: pointer to output private key
  45:kem.c         **** *                (an already allocated array of KYBER_SECRETKEYBYTES bytes)
  46:kem.c         **** *
  47:kem.c         **** * Returns 0 (success)
  48:kem.c         **** **************************************************/
  49:kem.c         **** int PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair(uint8_t *pk,
  50:kem.c         ****         uint8_t *sk) {
 100              		.loc 1 50 22
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 72
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 80B5     		push	{r7, lr}
 105              	.LCFI5:
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 7, -8
 108              		.cfi_offset 14, -4
 109 0002 92B0     		sub	sp, sp, #72
 110              	.LCFI6:
 111              		.cfi_def_cfa_offset 80
 112 0004 00AF     		add	r7, sp, #0
 113              	.LCFI7:
 114              		.cfi_def_cfa_register 7
 115 0006 7860     		str	r0, [r7, #4]
 116 0008 3960     		str	r1, [r7]
  51:kem.c         ****     uint8_t coins[2 * KYBER_SYMBYTES];
  52:kem.c         ****     randombytes(coins, 2 * KYBER_SYMBYTES);
 117              		.loc 1 52 5
 118 000a 07F10803 		add	r3, r7, #8
 119 000e 4021     		movs	r1, #64
 120 0010 1846     		mov	r0, r3
 121 0012 FFF7FEFF 		bl	randombytes
  53:kem.c         ****     PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand(pk, sk, coins);
 122              		.loc 1 53 5
 123 0016 07F10803 		add	r3, r7, #8
 124 001a 1A46     		mov	r2, r3
 125 001c 3968     		ldr	r1, [r7]
 126 001e 7868     		ldr	r0, [r7, #4]
 127 0020 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand
  54:kem.c         ****     return 0;
 128              		.loc 1 54 12
 129 0024 0023     		movs	r3, #0
  55:kem.c         **** }
 130              		.loc 1 55 1
 131 0026 1846     		mov	r0, r3
 132 0028 4837     		adds	r7, r7, #72
 133              	.LCFI8:
 134              		.cfi_def_cfa_offset 8
 135 002a BD46     		mov	sp, r7
 136              	.LCFI9:
 137              		.cfi_def_cfa_register 13
 138              		@ sp needed
 139 002c 80BD     		pop	{r7, pc}
 140              		.cfi_endproc
 141              	.LFE1:
 143              		.section	.text.PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand,"ax",%progbits
 144              		.align	1
 145              		.global	PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 149              		.fpu softvfp
 151              	PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand:
 152              	.LFB2:
  56:kem.c         **** 
  57:kem.c         **** /*************************************************
  58:kem.c         **** * Name:        PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand
  59:kem.c         **** *
  60:kem.c         **** * Description: Generates cipher text and shared
  61:kem.c         **** *              secret for given public key
  62:kem.c         **** *
  63:kem.c         **** * Arguments:   - uint8_t *ct: pointer to output cipher text
  64:kem.c         **** *                (an already allocated array of KYBER_CIPHERTEXTBYTES bytes)
  65:kem.c         **** *              - uint8_t *ss: pointer to output shared secret
  66:kem.c         **** *                (an already allocated array of KYBER_SSBYTES bytes)
  67:kem.c         **** *              - const uint8_t *pk: pointer to input public key
  68:kem.c         **** *                (an already allocated array of KYBER_PUBLICKEYBYTES bytes)
  69:kem.c         **** *              - const uint8_t *coins: pointer to input randomness
  70:kem.c         **** *                (an already allocated array filled with KYBER_SYMBYTES random bytes)
  71:kem.c         **** **
  72:kem.c         **** * Returns 0 (success)
  73:kem.c         **** **************************************************/
  74:kem.c         **** int PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand(uint8_t *ct,
  75:kem.c         ****         uint8_t *ss,
  76:kem.c         ****         const uint8_t *pk,
  77:kem.c         ****         const uint8_t *coins) {
 153              		.loc 1 77 31
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 144
 156              		@ frame_needed = 1, uses_anonymous_args = 0
 157 0000 80B5     		push	{r7, lr}
 158              	.LCFI10:
 159              		.cfi_def_cfa_offset 8
 160              		.cfi_offset 7, -8
 161              		.cfi_offset 14, -4
 162 0002 A4B0     		sub	sp, sp, #144
 163              	.LCFI11:
 164              		.cfi_def_cfa_offset 152
 165 0004 00AF     		add	r7, sp, #0
 166              	.LCFI12:
 167              		.cfi_def_cfa_register 7
 168 0006 F860     		str	r0, [r7, #12]
 169 0008 B960     		str	r1, [r7, #8]
 170 000a 7A60     		str	r2, [r7, #4]
 171 000c 3B60     		str	r3, [r7]
  78:kem.c         ****     uint8_t buf[2 * KYBER_SYMBYTES];
  79:kem.c         ****     /* Will contain key, coins */
  80:kem.c         ****     uint8_t kr[2 * KYBER_SYMBYTES];
  81:kem.c         **** 
  82:kem.c         ****     memcpy(buf, coins, KYBER_SYMBYTES);
 172              		.loc 1 82 5
 173 000e 07F15003 		add	r3, r7, #80
 174 0012 2022     		movs	r2, #32
 175 0014 3968     		ldr	r1, [r7]
 176 0016 1846     		mov	r0, r3
 177 0018 FFF7FEFF 		bl	memcpy
  83:kem.c         **** 
  84:kem.c         ****     /* Multitarget countermeasure for coins + contributory KEM */
  85:kem.c         ****     hash_h(buf + KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
 178              		.loc 1 85 5
 179 001c 07F15003 		add	r3, r7, #80
 180 0020 2033     		adds	r3, r3, #32
 181 0022 4FF44872 		mov	r2, #800
 182 0026 7968     		ldr	r1, [r7, #4]
 183 0028 1846     		mov	r0, r3
 184 002a FFF7FEFF 		bl	sha3_256
  86:kem.c         ****     hash_g(kr, buf, 2 * KYBER_SYMBYTES);
 185              		.loc 1 86 5
 186 002e 07F15001 		add	r1, r7, #80
 187 0032 07F11003 		add	r3, r7, #16
 188 0036 4022     		movs	r2, #64
 189 0038 1846     		mov	r0, r3
 190 003a FFF7FEFF 		bl	sha3_512
  87:kem.c         **** 
  88:kem.c         ****     /* coins are in kr+KYBER_SYMBYTES */
  89:kem.c         ****     PQCLEAN_KYBER512_CLEAN_indcpa_enc(ct, buf, pk, kr + KYBER_SYMBYTES);
 191              		.loc 1 89 5
 192 003e 07F11003 		add	r3, r7, #16
 193 0042 2033     		adds	r3, r3, #32
 194 0044 07F15001 		add	r1, r7, #80
 195 0048 7A68     		ldr	r2, [r7, #4]
 196 004a F868     		ldr	r0, [r7, #12]
 197 004c FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_indcpa_enc
  90:kem.c         **** 
  91:kem.c         ****     memcpy(ss, kr, KYBER_SYMBYTES);
 198              		.loc 1 91 5
 199 0050 07F11003 		add	r3, r7, #16
 200 0054 2022     		movs	r2, #32
 201 0056 1946     		mov	r1, r3
 202 0058 B868     		ldr	r0, [r7, #8]
 203 005a FFF7FEFF 		bl	memcpy
  92:kem.c         ****     return 0;
 204              		.loc 1 92 12
 205 005e 0023     		movs	r3, #0
  93:kem.c         **** }
 206              		.loc 1 93 1
 207 0060 1846     		mov	r0, r3
 208 0062 9037     		adds	r7, r7, #144
 209              	.LCFI13:
 210              		.cfi_def_cfa_offset 8
 211 0064 BD46     		mov	sp, r7
 212              	.LCFI14:
 213              		.cfi_def_cfa_register 13
 214              		@ sp needed
 215 0066 80BD     		pop	{r7, pc}
 216              		.cfi_endproc
 217              	.LFE2:
 219              		.section	.text.PQCLEAN_KYBER512_CLEAN_crypto_kem_enc,"ax",%progbits
 220              		.align	1
 221              		.global	PQCLEAN_KYBER512_CLEAN_crypto_kem_enc
 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 225              		.fpu softvfp
 227              	PQCLEAN_KYBER512_CLEAN_crypto_kem_enc:
 228              	.LFB3:
  94:kem.c         **** 
  95:kem.c         **** /*************************************************
  96:kem.c         **** * Name:        PQCLEAN_KYBER512_CLEAN_crypto_kem_enc
  97:kem.c         **** *
  98:kem.c         **** * Description: Generates cipher text and shared
  99:kem.c         **** *              secret for given public key
 100:kem.c         **** *
 101:kem.c         **** * Arguments:   - uint8_t *ct: pointer to output cipher text
 102:kem.c         **** *                (an already allocated array of KYBER_CIPHERTEXTBYTES bytes)
 103:kem.c         **** *              - uint8_t *ss: pointer to output shared secret
 104:kem.c         **** *                (an already allocated array of KYBER_SSBYTES bytes)
 105:kem.c         **** *              - const uint8_t *pk: pointer to input public key
 106:kem.c         **** *                (an already allocated array of KYBER_PUBLICKEYBYTES bytes)
 107:kem.c         **** *
 108:kem.c         **** * Returns 0 (success)
 109:kem.c         **** **************************************************/
 110:kem.c         **** int PQCLEAN_KYBER512_CLEAN_crypto_kem_enc(uint8_t *ct,
 111:kem.c         ****         uint8_t *ss,
 112:kem.c         ****         const uint8_t *pk) {
 229              		.loc 1 112 28
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 48
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233 0000 80B5     		push	{r7, lr}
 234              	.LCFI15:
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 7, -8
 237              		.cfi_offset 14, -4
 238 0002 8CB0     		sub	sp, sp, #48
 239              	.LCFI16:
 240              		.cfi_def_cfa_offset 56
 241 0004 00AF     		add	r7, sp, #0
 242              	.LCFI17:
 243              		.cfi_def_cfa_register 7
 244 0006 F860     		str	r0, [r7, #12]
 245 0008 B960     		str	r1, [r7, #8]
 246 000a 7A60     		str	r2, [r7, #4]
 113:kem.c         ****     uint8_t coins[KYBER_SYMBYTES];
 114:kem.c         ****     randombytes(coins, KYBER_SYMBYTES);
 247              		.loc 1 114 5
 248 000c 07F11003 		add	r3, r7, #16
 249 0010 2021     		movs	r1, #32
 250 0012 1846     		mov	r0, r3
 251 0014 FFF7FEFF 		bl	randombytes
 115:kem.c         ****     PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand(ct, ss, pk, coins);
 252              		.loc 1 115 5
 253 0018 07F11003 		add	r3, r7, #16
 254 001c 7A68     		ldr	r2, [r7, #4]
 255 001e B968     		ldr	r1, [r7, #8]
 256 0020 F868     		ldr	r0, [r7, #12]
 257 0022 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand
 116:kem.c         ****     return 0;
 258              		.loc 1 116 12
 259 0026 0023     		movs	r3, #0
 117:kem.c         **** }
 260              		.loc 1 117 1
 261 0028 1846     		mov	r0, r3
 262 002a 3037     		adds	r7, r7, #48
 263              	.LCFI18:
 264              		.cfi_def_cfa_offset 8
 265 002c BD46     		mov	sp, r7
 266              	.LCFI19:
 267              		.cfi_def_cfa_register 13
 268              		@ sp needed
 269 002e 80BD     		pop	{r7, pc}
 270              		.cfi_endproc
 271              	.LFE3:
 273              		.section	.text.PQCLEAN_KYBER512_CLEAN_crypto_kem_dec,"ax",%progbits
 274              		.align	1
 275              		.global	PQCLEAN_KYBER512_CLEAN_crypto_kem_dec
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 279              		.fpu softvfp
 281              	PQCLEAN_KYBER512_CLEAN_crypto_kem_dec:
 282              	.LFB4:
 118:kem.c         **** 
 119:kem.c         **** /*************************************************
 120:kem.c         **** * Name:        PQCLEAN_KYBER512_CLEAN_crypto_kem_dec
 121:kem.c         **** *
 122:kem.c         **** * Description: Generates shared secret for given
 123:kem.c         **** *              cipher text and private key
 124:kem.c         **** *
 125:kem.c         **** * Arguments:   - uint8_t *ss: pointer to output shared secret
 126:kem.c         **** *                (an already allocated array of KYBER_SSBYTES bytes)
 127:kem.c         **** *              - const uint8_t *ct: pointer to input cipher text
 128:kem.c         **** *                (an already allocated array of KYBER_CIPHERTEXTBYTES bytes)
 129:kem.c         **** *              - const uint8_t *sk: pointer to input private key
 130:kem.c         **** *                (an already allocated array of KYBER_SECRETKEYBYTES bytes)
 131:kem.c         **** *
 132:kem.c         **** * Returns 0.
 133:kem.c         **** *
 134:kem.c         **** * On failure, ss will contain a pseudo-random value.
 135:kem.c         **** **************************************************/
 136:kem.c         **** int PQCLEAN_KYBER512_CLEAN_crypto_kem_dec(uint8_t *ss,
 137:kem.c         ****         const uint8_t *ct,
 138:kem.c         ****         const uint8_t *sk) {
 283              		.loc 1 138 28
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 952
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287 0000 80B5     		push	{r7, lr}
 288              	.LCFI20:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 7, -8
 291              		.cfi_offset 14, -4
 292 0002 ADF56E7D 		sub	sp, sp, #952
 293              	.LCFI21:
 294              		.cfi_def_cfa_offset 960
 295 0006 00AF     		add	r7, sp, #0
 296              	.LCFI22:
 297              		.cfi_def_cfa_register 7
 298 0008 07F56E73 		add	r3, r7, #952
 299 000c A3F56B73 		sub	r3, r3, #940
 300 0010 1860     		str	r0, [r3]
 301 0012 07F56E73 		add	r3, r7, #952
 302 0016 A3F56C73 		sub	r3, r3, #944
 303 001a 1960     		str	r1, [r3]
 304 001c 07F56E73 		add	r3, r7, #952
 305 0020 A3F56D73 		sub	r3, r3, #948
 306 0024 1A60     		str	r2, [r3]
 139:kem.c         ****     int fail;
 140:kem.c         ****     uint8_t buf[2 * KYBER_SYMBYTES];
 141:kem.c         ****     /* Will contain key, coins */
 142:kem.c         ****     uint8_t kr[2 * KYBER_SYMBYTES];
 143:kem.c         ****     uint8_t cmp[KYBER_CIPHERTEXTBYTES + KYBER_SYMBYTES];
 144:kem.c         ****     const uint8_t *pk = sk + KYBER_INDCPA_SECRETKEYBYTES;
 307              		.loc 1 144 20
 308 0026 07F56E73 		add	r3, r7, #952
 309 002a A3F56D73 		sub	r3, r3, #948
 310 002e 1B68     		ldr	r3, [r3]
 311 0030 03F54073 		add	r3, r3, #768
 312 0034 C7F8B433 		str	r3, [r7, #948]
 145:kem.c         **** 
 146:kem.c         ****     PQCLEAN_KYBER512_CLEAN_indcpa_dec(buf, ct, sk);
 313              		.loc 1 146 5
 314 0038 07F56E73 		add	r3, r7, #952
 315 003c A3F56D72 		sub	r2, r3, #948
 316 0040 07F56E73 		add	r3, r7, #952
 317 0044 A3F56C73 		sub	r3, r3, #944
 318 0048 07F55C70 		add	r0, r7, #880
 319 004c 1268     		ldr	r2, [r2]
 320 004e 1968     		ldr	r1, [r3]
 321 0050 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_indcpa_dec
 147:kem.c         **** 
 148:kem.c         ****     /* Multitarget countermeasure for coins + contributory KEM */
 149:kem.c         ****     memcpy(buf + KYBER_SYMBYTES, sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, KYBER_SYMBYTES);
 322              		.loc 1 149 5
 323 0054 07F55C73 		add	r3, r7, #880
 324 0058 2033     		adds	r3, r3, #32
 325              		.loc 1 149 60
 326 005a 07F56E72 		add	r2, r7, #952
 327 005e A2F56D72 		sub	r2, r2, #948
 328 0062 1268     		ldr	r2, [r2]
 329 0064 02F5C461 		add	r1, r2, #1568
 330              		.loc 1 149 5
 331 0068 2022     		movs	r2, #32
 332 006a 1846     		mov	r0, r3
 333 006c FFF7FEFF 		bl	memcpy
 150:kem.c         ****     hash_g(kr, buf, 2 * KYBER_SYMBYTES);
 334              		.loc 1 150 5
 335 0070 07F55C71 		add	r1, r7, #880
 336 0074 07F54C73 		add	r3, r7, #816
 337 0078 4022     		movs	r2, #64
 338 007a 1846     		mov	r0, r3
 339 007c FFF7FEFF 		bl	sha3_512
 151:kem.c         **** 
 152:kem.c         ****     /* coins are in kr+KYBER_SYMBYTES */
 153:kem.c         ****     PQCLEAN_KYBER512_CLEAN_indcpa_enc(cmp, buf, pk, kr + KYBER_SYMBYTES);
 340              		.loc 1 153 5
 341 0080 07F54C73 		add	r3, r7, #816
 342 0084 2033     		adds	r3, r3, #32
 343 0086 07F55C71 		add	r1, r7, #880
 344 008a 07F11000 		add	r0, r7, #16
 345 008e D7F8B423 		ldr	r2, [r7, #948]
 346 0092 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_indcpa_enc
 154:kem.c         **** 
 155:kem.c         ****     fail = PQCLEAN_KYBER512_CLEAN_verify(ct, cmp, KYBER_CIPHERTEXTBYTES);
 347              		.loc 1 155 12
 348 0096 07F11001 		add	r1, r7, #16
 349 009a 07F56E73 		add	r3, r7, #952
 350 009e A3F56C73 		sub	r3, r3, #944
 351 00a2 4FF44072 		mov	r2, #768
 352 00a6 1868     		ldr	r0, [r3]
 353 00a8 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_verify
 354 00ac C7F8B003 		str	r0, [r7, #944]
 156:kem.c         **** 
 157:kem.c         ****     /* Compute rejection key */
 158:kem.c         ****     rkprf(ss, sk + KYBER_SECRETKEYBYTES - KYBER_SYMBYTES, ct);
 355              		.loc 1 158 5
 356 00b0 07F56E73 		add	r3, r7, #952
 357 00b4 A3F56D73 		sub	r3, r3, #948
 358 00b8 1B68     		ldr	r3, [r3]
 359 00ba 03F5C861 		add	r1, r3, #1600
 360 00be 07F56E73 		add	r3, r7, #952
 361 00c2 A3F56C72 		sub	r2, r3, #944
 362 00c6 07F56E73 		add	r3, r7, #952
 363 00ca A3F56B73 		sub	r3, r3, #940
 364 00ce 1268     		ldr	r2, [r2]
 365 00d0 1868     		ldr	r0, [r3]
 366 00d2 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_kyber_shake256_rkprf
 159:kem.c         **** 
 160:kem.c         ****     /* Copy true key to return buffer if fail is false */
 161:kem.c         ****     PQCLEAN_KYBER512_CLEAN_cmov(ss, kr, KYBER_SYMBYTES, (uint8_t) (1 - fail));
 367              		.loc 1 161 5
 368 00d6 D7F8B033 		ldr	r3, [r7, #944]
 369 00da DBB2     		uxtb	r3, r3
 370 00dc C3F10103 		rsb	r3, r3, #1
 371 00e0 DBB2     		uxtb	r3, r3
 372 00e2 07F54C71 		add	r1, r7, #816
 373 00e6 07F56E72 		add	r2, r7, #952
 374 00ea A2F56B70 		sub	r0, r2, #940
 375 00ee 2022     		movs	r2, #32
 376 00f0 0068     		ldr	r0, [r0]
 377 00f2 FFF7FEFF 		bl	PQCLEAN_KYBER512_CLEAN_cmov
 162:kem.c         **** 
 163:kem.c         ****     return 0;
 378              		.loc 1 163 12
 379 00f6 0023     		movs	r3, #0
 164:kem.c         **** }
 380              		.loc 1 164 1
 381 00f8 1846     		mov	r0, r3
 382 00fa 07F56E77 		add	r7, r7, #952
 383              	.LCFI23:
 384              		.cfi_def_cfa_offset 8
 385 00fe BD46     		mov	sp, r7
 386              	.LCFI24:
 387              		.cfi_def_cfa_register 13
 388              		@ sp needed
 389 0100 80BD     		pop	{r7, pc}
 390              		.cfi_endproc
 391              	.LFE4:
 393              		.text
 394              	.Letext0:
 395              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 kem.c
     /tmp/cc8uSs0w.s:16     .text.PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand:0000000000000000 $t
     /tmp/cc8uSs0w.s:24     .text.PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand:0000000000000000 PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand
     /tmp/cc8uSs0w.s:91     .text.PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair:0000000000000000 $t
     /tmp/cc8uSs0w.s:98     .text.PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair:0000000000000000 PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair
     /tmp/cc8uSs0w.s:144    .text.PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand:0000000000000000 $t
     /tmp/cc8uSs0w.s:151    .text.PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand:0000000000000000 PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand
     /tmp/cc8uSs0w.s:220    .text.PQCLEAN_KYBER512_CLEAN_crypto_kem_enc:0000000000000000 $t
     /tmp/cc8uSs0w.s:227    .text.PQCLEAN_KYBER512_CLEAN_crypto_kem_enc:0000000000000000 PQCLEAN_KYBER512_CLEAN_crypto_kem_enc
     /tmp/cc8uSs0w.s:274    .text.PQCLEAN_KYBER512_CLEAN_crypto_kem_dec:0000000000000000 $t
     /tmp/cc8uSs0w.s:281    .text.PQCLEAN_KYBER512_CLEAN_crypto_kem_dec:0000000000000000 PQCLEAN_KYBER512_CLEAN_crypto_kem_dec

UNDEFINED SYMBOLS
PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand
memcpy
sha3_256
randombytes
sha3_512
PQCLEAN_KYBER512_CLEAN_indcpa_enc
PQCLEAN_KYBER512_CLEAN_indcpa_dec
PQCLEAN_KYBER512_CLEAN_verify
PQCLEAN_KYBER512_CLEAN_kyber_shake256_rkprf
PQCLEAN_KYBER512_CLEAN_cmov
