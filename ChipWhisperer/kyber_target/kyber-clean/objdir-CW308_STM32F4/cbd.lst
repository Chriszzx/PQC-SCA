   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"cbd.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.load32_littleendian,"ax",%progbits
  16              		.align	1
  17              		.arch armv7e-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	load32_littleendian:
  24              	.LFB0:
  25              		.file 1 "cbd.c"
   1:cbd.c         **** #include "cbd.h"
   2:cbd.c         **** #include "params.h"
   3:cbd.c         **** #include <stdint.h>
   4:cbd.c         **** 
   5:cbd.c         **** /*************************************************
   6:cbd.c         **** * Name:        load32_littleendian
   7:cbd.c         **** *
   8:cbd.c         **** * Description: load 4 bytes into a 32-bit integer
   9:cbd.c         **** *              in little-endian order
  10:cbd.c         **** *
  11:cbd.c         **** * Arguments:   - const uint8_t *x: pointer to input byte array
  12:cbd.c         **** *
  13:cbd.c         **** * Returns 32-bit unsigned integer loaded from x
  14:cbd.c         **** **************************************************/
  15:cbd.c         **** static uint32_t load32_littleendian(const uint8_t x[4]) {
  26              		.loc 1 15 57
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 85B0     		sub	sp, sp, #20
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 24
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
  16:cbd.c         ****     uint32_t r;
  17:cbd.c         ****     r  = (uint32_t)x[0];
  42              		.loc 1 17 21
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  45              		.loc 1 17 8
  46 000c FB60     		str	r3, [r7, #12]
  18:cbd.c         ****     r |= (uint32_t)x[1] << 8;
  47              		.loc 1 18 21
  48 000e 7B68     		ldr	r3, [r7, #4]
  49 0010 0133     		adds	r3, r3, #1
  50 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  51              		.loc 1 18 25
  52 0014 1B02     		lsls	r3, r3, #8
  53              		.loc 1 18 7
  54 0016 FA68     		ldr	r2, [r7, #12]
  55 0018 1343     		orrs	r3, r3, r2
  56 001a FB60     		str	r3, [r7, #12]
  19:cbd.c         ****     r |= (uint32_t)x[2] << 16;
  57              		.loc 1 19 21
  58 001c 7B68     		ldr	r3, [r7, #4]
  59 001e 0233     		adds	r3, r3, #2
  60 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  61              		.loc 1 19 25
  62 0022 1B04     		lsls	r3, r3, #16
  63              		.loc 1 19 7
  64 0024 FA68     		ldr	r2, [r7, #12]
  65 0026 1343     		orrs	r3, r3, r2
  66 0028 FB60     		str	r3, [r7, #12]
  20:cbd.c         ****     r |= (uint32_t)x[3] << 24;
  67              		.loc 1 20 21
  68 002a 7B68     		ldr	r3, [r7, #4]
  69 002c 0333     		adds	r3, r3, #3
  70 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  71              		.loc 1 20 25
  72 0030 1B06     		lsls	r3, r3, #24
  73              		.loc 1 20 7
  74 0032 FA68     		ldr	r2, [r7, #12]
  75 0034 1343     		orrs	r3, r3, r2
  76 0036 FB60     		str	r3, [r7, #12]
  21:cbd.c         ****     return r;
  77              		.loc 1 21 12
  78 0038 FB68     		ldr	r3, [r7, #12]
  22:cbd.c         **** }
  79              		.loc 1 22 1
  80 003a 1846     		mov	r0, r3
  81 003c 1437     		adds	r7, r7, #20
  82              	.LCFI3:
  83              		.cfi_def_cfa_offset 4
  84 003e BD46     		mov	sp, r7
  85              	.LCFI4:
  86              		.cfi_def_cfa_register 13
  87              		@ sp needed
  88 0040 80BC     		pop	{r7}
  89              	.LCFI5:
  90              		.cfi_restore 7
  91              		.cfi_def_cfa_offset 0
  92 0042 7047     		bx	lr
  93              		.cfi_endproc
  94              	.LFE0:
  96              		.section	.text.load24_littleendian,"ax",%progbits
  97              		.align	1
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu softvfp
 103              	load24_littleendian:
 104              	.LFB1:
  23:cbd.c         **** 
  24:cbd.c         **** /*************************************************
  25:cbd.c         **** * Name:        load24_littleendian
  26:cbd.c         **** *
  27:cbd.c         **** * Description: load 3 bytes into a 32-bit integer
  28:cbd.c         **** *              in little-endian order.
  29:cbd.c         **** *              This function is only needed for Kyber-512
  30:cbd.c         **** *
  31:cbd.c         **** * Arguments:   - const uint8_t *x: pointer to input byte array
  32:cbd.c         **** *
  33:cbd.c         **** * Returns 32-bit unsigned integer loaded from x (most significant byte is zero)
  34:cbd.c         **** **************************************************/
  35:cbd.c         **** static uint32_t load24_littleendian(const uint8_t x[3]) {
 105              		.loc 1 35 57
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 16
 108              		@ frame_needed = 1, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110 0000 80B4     		push	{r7}
 111              	.LCFI6:
 112              		.cfi_def_cfa_offset 4
 113              		.cfi_offset 7, -4
 114 0002 85B0     		sub	sp, sp, #20
 115              	.LCFI7:
 116              		.cfi_def_cfa_offset 24
 117 0004 00AF     		add	r7, sp, #0
 118              	.LCFI8:
 119              		.cfi_def_cfa_register 7
 120 0006 7860     		str	r0, [r7, #4]
  36:cbd.c         ****     uint32_t r;
  37:cbd.c         ****     r  = (uint32_t)x[0];
 121              		.loc 1 37 21
 122 0008 7B68     		ldr	r3, [r7, #4]
 123 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 124              		.loc 1 37 8
 125 000c FB60     		str	r3, [r7, #12]
  38:cbd.c         ****     r |= (uint32_t)x[1] << 8;
 126              		.loc 1 38 21
 127 000e 7B68     		ldr	r3, [r7, #4]
 128 0010 0133     		adds	r3, r3, #1
 129 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 130              		.loc 1 38 25
 131 0014 1B02     		lsls	r3, r3, #8
 132              		.loc 1 38 7
 133 0016 FA68     		ldr	r2, [r7, #12]
 134 0018 1343     		orrs	r3, r3, r2
 135 001a FB60     		str	r3, [r7, #12]
  39:cbd.c         ****     r |= (uint32_t)x[2] << 16;
 136              		.loc 1 39 21
 137 001c 7B68     		ldr	r3, [r7, #4]
 138 001e 0233     		adds	r3, r3, #2
 139 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 140              		.loc 1 39 25
 141 0022 1B04     		lsls	r3, r3, #16
 142              		.loc 1 39 7
 143 0024 FA68     		ldr	r2, [r7, #12]
 144 0026 1343     		orrs	r3, r3, r2
 145 0028 FB60     		str	r3, [r7, #12]
  40:cbd.c         ****     return r;
 146              		.loc 1 40 12
 147 002a FB68     		ldr	r3, [r7, #12]
  41:cbd.c         **** }
 148              		.loc 1 41 1
 149 002c 1846     		mov	r0, r3
 150 002e 1437     		adds	r7, r7, #20
 151              	.LCFI9:
 152              		.cfi_def_cfa_offset 4
 153 0030 BD46     		mov	sp, r7
 154              	.LCFI10:
 155              		.cfi_def_cfa_register 13
 156              		@ sp needed
 157 0032 80BC     		pop	{r7}
 158              	.LCFI11:
 159              		.cfi_restore 7
 160              		.cfi_def_cfa_offset 0
 161 0034 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE1:
 165              		.section	.text.cbd2,"ax",%progbits
 166              		.align	1
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 170              		.fpu softvfp
 172              	cbd2:
 173              	.LFB2:
  42:cbd.c         **** 
  43:cbd.c         **** /*************************************************
  44:cbd.c         **** * Name:        cbd2
  45:cbd.c         **** *
  46:cbd.c         **** * Description: Given an array of uniformly random bytes, compute
  47:cbd.c         **** *              polynomial with coefficients distributed according to
  48:cbd.c         **** *              a centered binomial distribution with parameter eta=2
  49:cbd.c         **** *
  50:cbd.c         **** * Arguments:   - poly *r: pointer to output polynomial
  51:cbd.c         **** *              - const uint8_t *buf: pointer to input byte array
  52:cbd.c         **** **************************************************/
  53:cbd.c         **** static void cbd2(poly *r, const uint8_t buf[2 * KYBER_N / 4]) {
 174              		.loc 1 53 63
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 32
 177              		@ frame_needed = 1, uses_anonymous_args = 0
 178 0000 80B5     		push	{r7, lr}
 179              	.LCFI12:
 180              		.cfi_def_cfa_offset 8
 181              		.cfi_offset 7, -8
 182              		.cfi_offset 14, -4
 183 0002 88B0     		sub	sp, sp, #32
 184              	.LCFI13:
 185              		.cfi_def_cfa_offset 40
 186 0004 00AF     		add	r7, sp, #0
 187              	.LCFI14:
 188              		.cfi_def_cfa_register 7
 189 0006 7860     		str	r0, [r7, #4]
 190 0008 3960     		str	r1, [r7]
  54:cbd.c         ****     unsigned int i, j;
  55:cbd.c         ****     uint32_t t, d;
  56:cbd.c         ****     int16_t a, b;
  57:cbd.c         **** 
  58:cbd.c         ****     for (i = 0; i < KYBER_N / 8; i++) {
 191              		.loc 1 58 12
 192 000a 0023     		movs	r3, #0
 193 000c FB61     		str	r3, [r7, #28]
 194              		.loc 1 58 5
 195 000e 3DE0     		b	.L6
 196              	.L9:
  59:cbd.c         ****         t  = load32_littleendian(buf + 4 * i);
 197              		.loc 1 59 42
 198 0010 FB69     		ldr	r3, [r7, #28]
 199 0012 9B00     		lsls	r3, r3, #2
 200              		.loc 1 59 14
 201 0014 3A68     		ldr	r2, [r7]
 202 0016 1344     		add	r3, r3, r2
 203 0018 1846     		mov	r0, r3
 204 001a FFF7FEFF 		bl	load32_littleendian
 205 001e 7861     		str	r0, [r7, #20]
  60:cbd.c         ****         d  = t & 0x55555555;
 206              		.loc 1 60 12
 207 0020 7B69     		ldr	r3, [r7, #20]
 208 0022 03F05533 		and	r3, r3, #1431655765
 209 0026 3B61     		str	r3, [r7, #16]
  61:cbd.c         ****         d += (t >> 1) & 0x55555555;
 210              		.loc 1 61 17
 211 0028 7B69     		ldr	r3, [r7, #20]
 212 002a 5B08     		lsrs	r3, r3, #1
 213              		.loc 1 61 23
 214 002c 03F05533 		and	r3, r3, #1431655765
 215              		.loc 1 61 11
 216 0030 3A69     		ldr	r2, [r7, #16]
 217 0032 1344     		add	r3, r3, r2
 218 0034 3B61     		str	r3, [r7, #16]
  62:cbd.c         **** 
  63:cbd.c         ****         for (j = 0; j < 8; j++) {
 219              		.loc 1 63 16
 220 0036 0023     		movs	r3, #0
 221 0038 BB61     		str	r3, [r7, #24]
 222              		.loc 1 63 9
 223 003a 21E0     		b	.L7
 224              	.L8:
  64:cbd.c         ****             a = (d >> (4 * j + 0)) & 0x3;
 225              		.loc 1 64 30 discriminator 3
 226 003c BB69     		ldr	r3, [r7, #24]
 227 003e 9B00     		lsls	r3, r3, #2
 228              		.loc 1 64 20 discriminator 3
 229 0040 3A69     		ldr	r2, [r7, #16]
 230 0042 22FA03F3 		lsr	r3, r2, r3
 231              		.loc 1 64 36 discriminator 3
 232 0046 1BB2     		sxth	r3, r3
 233              		.loc 1 64 15 discriminator 3
 234 0048 03F00303 		and	r3, r3, #3
 235 004c FB81     		strh	r3, [r7, #14]	@ movhi
  65:cbd.c         ****             b = (d >> (4 * j + 2)) & 0x3;
 236              		.loc 1 65 26 discriminator 3
 237 004e BB69     		ldr	r3, [r7, #24]
 238 0050 9B00     		lsls	r3, r3, #2
 239              		.loc 1 65 30 discriminator 3
 240 0052 0233     		adds	r3, r3, #2
 241              		.loc 1 65 20 discriminator 3
 242 0054 3A69     		ldr	r2, [r7, #16]
 243 0056 22FA03F3 		lsr	r3, r2, r3
 244              		.loc 1 65 36 discriminator 3
 245 005a 1BB2     		sxth	r3, r3
 246              		.loc 1 65 15 discriminator 3
 247 005c 03F00303 		and	r3, r3, #3
 248 0060 BB81     		strh	r3, [r7, #12]	@ movhi
  66:cbd.c         ****             r->coeffs[8 * i + j] = a - b;
 249              		.loc 1 66 38 discriminator 3
 250 0062 FA89     		ldrh	r2, [r7, #14]
 251 0064 BB89     		ldrh	r3, [r7, #12]
 252 0066 D31A     		subs	r3, r2, r3
 253 0068 99B2     		uxth	r1, r3
 254              		.loc 1 66 25 discriminator 3
 255 006a FB69     		ldr	r3, [r7, #28]
 256 006c DA00     		lsls	r2, r3, #3
 257              		.loc 1 66 29 discriminator 3
 258 006e BB69     		ldr	r3, [r7, #24]
 259 0070 1A44     		add	r2, r2, r3
 260              		.loc 1 66 38 discriminator 3
 261 0072 09B2     		sxth	r1, r1
 262              		.loc 1 66 34 discriminator 3
 263 0074 7B68     		ldr	r3, [r7, #4]
 264 0076 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  63:cbd.c         ****             a = (d >> (4 * j + 0)) & 0x3;
 265              		.loc 1 63 29 discriminator 3
 266 007a BB69     		ldr	r3, [r7, #24]
 267 007c 0133     		adds	r3, r3, #1
 268 007e BB61     		str	r3, [r7, #24]
 269              	.L7:
  63:cbd.c         ****             a = (d >> (4 * j + 0)) & 0x3;
 270              		.loc 1 63 9 discriminator 1
 271 0080 BB69     		ldr	r3, [r7, #24]
 272 0082 072B     		cmp	r3, #7
 273 0084 DAD9     		bls	.L8
  58:cbd.c         ****         t  = load32_littleendian(buf + 4 * i);
 274              		.loc 1 58 35 discriminator 2
 275 0086 FB69     		ldr	r3, [r7, #28]
 276 0088 0133     		adds	r3, r3, #1
 277 008a FB61     		str	r3, [r7, #28]
 278              	.L6:
  58:cbd.c         ****         t  = load32_littleendian(buf + 4 * i);
 279              		.loc 1 58 5 discriminator 1
 280 008c FB69     		ldr	r3, [r7, #28]
 281 008e 1F2B     		cmp	r3, #31
 282 0090 BED9     		bls	.L9
  67:cbd.c         ****         }
  68:cbd.c         ****     }
  69:cbd.c         **** }
 283              		.loc 1 69 1
 284 0092 00BF     		nop
 285 0094 00BF     		nop
 286 0096 2037     		adds	r7, r7, #32
 287              	.LCFI15:
 288              		.cfi_def_cfa_offset 8
 289 0098 BD46     		mov	sp, r7
 290              	.LCFI16:
 291              		.cfi_def_cfa_register 13
 292              		@ sp needed
 293 009a 80BD     		pop	{r7, pc}
 294              		.cfi_endproc
 295              	.LFE2:
 297              		.section	.text.cbd3,"ax",%progbits
 298              		.align	1
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu softvfp
 304              	cbd3:
 305              	.LFB3:
  70:cbd.c         **** 
  71:cbd.c         **** /*************************************************
  72:cbd.c         **** * Name:        cbd3
  73:cbd.c         **** *
  74:cbd.c         **** * Description: Given an array of uniformly random bytes, compute
  75:cbd.c         **** *              polynomial with coefficients distributed according to
  76:cbd.c         **** *              a centered binomial distribution with parameter eta=3.
  77:cbd.c         **** *              This function is only needed for Kyber-512
  78:cbd.c         **** *
  79:cbd.c         **** * Arguments:   - poly *r: pointer to output polynomial
  80:cbd.c         **** *              - const uint8_t *buf: pointer to input byte array
  81:cbd.c         **** **************************************************/
  82:cbd.c         **** static void cbd3(poly *r, const uint8_t buf[3 * KYBER_N / 4]) {
 306              		.loc 1 82 63
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 32
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310 0000 80B5     		push	{r7, lr}
 311              	.LCFI17:
 312              		.cfi_def_cfa_offset 8
 313              		.cfi_offset 7, -8
 314              		.cfi_offset 14, -4
 315 0002 88B0     		sub	sp, sp, #32
 316              	.LCFI18:
 317              		.cfi_def_cfa_offset 40
 318 0004 00AF     		add	r7, sp, #0
 319              	.LCFI19:
 320              		.cfi_def_cfa_register 7
 321 0006 7860     		str	r0, [r7, #4]
 322 0008 3960     		str	r1, [r7]
  83:cbd.c         ****     unsigned int i, j;
  84:cbd.c         ****     uint32_t t, d;
  85:cbd.c         ****     int16_t a, b;
  86:cbd.c         **** 
  87:cbd.c         ****     for (i = 0; i < KYBER_N / 4; i++) {
 323              		.loc 1 87 12
 324 000a 0023     		movs	r3, #0
 325 000c FB61     		str	r3, [r7, #28]
 326              		.loc 1 87 5
 327 000e 4CE0     		b	.L11
 328              	.L14:
  88:cbd.c         ****         t  = load24_littleendian(buf + 3 * i);
 329              		.loc 1 88 42
 330 0010 FA69     		ldr	r2, [r7, #28]
 331 0012 1346     		mov	r3, r2
 332 0014 5B00     		lsls	r3, r3, #1
 333 0016 1344     		add	r3, r3, r2
 334              		.loc 1 88 14
 335 0018 3A68     		ldr	r2, [r7]
 336 001a 1344     		add	r3, r3, r2
 337 001c 1846     		mov	r0, r3
 338 001e FFF7FEFF 		bl	load24_littleendian
 339 0022 7861     		str	r0, [r7, #20]
  89:cbd.c         ****         d  = t & 0x00249249;
 340              		.loc 1 89 12
 341 0024 7A69     		ldr	r2, [r7, #20]
 342 0026 254B     		ldr	r3, .L15
 343 0028 1340     		ands	r3, r3, r2
 344 002a 3B61     		str	r3, [r7, #16]
  90:cbd.c         ****         d += (t >> 1) & 0x00249249;
 345              		.loc 1 90 17
 346 002c 7B69     		ldr	r3, [r7, #20]
 347 002e 5A08     		lsrs	r2, r3, #1
 348              		.loc 1 90 23
 349 0030 224B     		ldr	r3, .L15
 350 0032 1340     		ands	r3, r3, r2
 351              		.loc 1 90 11
 352 0034 3A69     		ldr	r2, [r7, #16]
 353 0036 1344     		add	r3, r3, r2
 354 0038 3B61     		str	r3, [r7, #16]
  91:cbd.c         ****         d += (t >> 2) & 0x00249249;
 355              		.loc 1 91 17
 356 003a 7B69     		ldr	r3, [r7, #20]
 357 003c 9A08     		lsrs	r2, r3, #2
 358              		.loc 1 91 23
 359 003e 1F4B     		ldr	r3, .L15
 360 0040 1340     		ands	r3, r3, r2
 361              		.loc 1 91 11
 362 0042 3A69     		ldr	r2, [r7, #16]
 363 0044 1344     		add	r3, r3, r2
 364 0046 3B61     		str	r3, [r7, #16]
  92:cbd.c         **** 
  93:cbd.c         ****         for (j = 0; j < 4; j++) {
 365              		.loc 1 93 16
 366 0048 0023     		movs	r3, #0
 367 004a BB61     		str	r3, [r7, #24]
 368              		.loc 1 93 9
 369 004c 27E0     		b	.L12
 370              	.L13:
  94:cbd.c         ****             a = (d >> (6 * j + 0)) & 0x7;
 371              		.loc 1 94 30 discriminator 3
 372 004e BA69     		ldr	r2, [r7, #24]
 373 0050 1346     		mov	r3, r2
 374 0052 5B00     		lsls	r3, r3, #1
 375 0054 1344     		add	r3, r3, r2
 376 0056 5B00     		lsls	r3, r3, #1
 377 0058 1A46     		mov	r2, r3
 378              		.loc 1 94 20 discriminator 3
 379 005a 3B69     		ldr	r3, [r7, #16]
 380 005c D340     		lsrs	r3, r3, r2
 381              		.loc 1 94 36 discriminator 3
 382 005e 1BB2     		sxth	r3, r3
 383              		.loc 1 94 15 discriminator 3
 384 0060 03F00703 		and	r3, r3, #7
 385 0064 FB81     		strh	r3, [r7, #14]	@ movhi
  95:cbd.c         ****             b = (d >> (6 * j + 3)) & 0x7;
 386              		.loc 1 95 26 discriminator 3
 387 0066 BA69     		ldr	r2, [r7, #24]
 388 0068 1346     		mov	r3, r2
 389 006a 5B00     		lsls	r3, r3, #1
 390 006c 1344     		add	r3, r3, r2
 391 006e 5B00     		lsls	r3, r3, #1
 392              		.loc 1 95 30 discriminator 3
 393 0070 0333     		adds	r3, r3, #3
 394              		.loc 1 95 20 discriminator 3
 395 0072 3A69     		ldr	r2, [r7, #16]
 396 0074 22FA03F3 		lsr	r3, r2, r3
 397              		.loc 1 95 36 discriminator 3
 398 0078 1BB2     		sxth	r3, r3
 399              		.loc 1 95 15 discriminator 3
 400 007a 03F00703 		and	r3, r3, #7
 401 007e BB81     		strh	r3, [r7, #12]	@ movhi
  96:cbd.c         ****             r->coeffs[4 * i + j] = a - b;
 402              		.loc 1 96 38 discriminator 3
 403 0080 FA89     		ldrh	r2, [r7, #14]
 404 0082 BB89     		ldrh	r3, [r7, #12]
 405 0084 D31A     		subs	r3, r2, r3
 406 0086 99B2     		uxth	r1, r3
 407              		.loc 1 96 25 discriminator 3
 408 0088 FB69     		ldr	r3, [r7, #28]
 409 008a 9A00     		lsls	r2, r3, #2
 410              		.loc 1 96 29 discriminator 3
 411 008c BB69     		ldr	r3, [r7, #24]
 412 008e 1A44     		add	r2, r2, r3
 413              		.loc 1 96 38 discriminator 3
 414 0090 09B2     		sxth	r1, r1
 415              		.loc 1 96 34 discriminator 3
 416 0092 7B68     		ldr	r3, [r7, #4]
 417 0094 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  93:cbd.c         ****             a = (d >> (6 * j + 0)) & 0x7;
 418              		.loc 1 93 29 discriminator 3
 419 0098 BB69     		ldr	r3, [r7, #24]
 420 009a 0133     		adds	r3, r3, #1
 421 009c BB61     		str	r3, [r7, #24]
 422              	.L12:
  93:cbd.c         ****             a = (d >> (6 * j + 0)) & 0x7;
 423              		.loc 1 93 9 discriminator 1
 424 009e BB69     		ldr	r3, [r7, #24]
 425 00a0 032B     		cmp	r3, #3
 426 00a2 D4D9     		bls	.L13
  87:cbd.c         ****         t  = load24_littleendian(buf + 3 * i);
 427              		.loc 1 87 35 discriminator 2
 428 00a4 FB69     		ldr	r3, [r7, #28]
 429 00a6 0133     		adds	r3, r3, #1
 430 00a8 FB61     		str	r3, [r7, #28]
 431              	.L11:
  87:cbd.c         ****         t  = load24_littleendian(buf + 3 * i);
 432              		.loc 1 87 5 discriminator 1
 433 00aa FB69     		ldr	r3, [r7, #28]
 434 00ac 3F2B     		cmp	r3, #63
 435 00ae AFD9     		bls	.L14
  97:cbd.c         ****         }
  98:cbd.c         ****     }
  99:cbd.c         **** }
 436              		.loc 1 99 1
 437 00b0 00BF     		nop
 438 00b2 00BF     		nop
 439 00b4 2037     		adds	r7, r7, #32
 440              	.LCFI20:
 441              		.cfi_def_cfa_offset 8
 442 00b6 BD46     		mov	sp, r7
 443              	.LCFI21:
 444              		.cfi_def_cfa_register 13
 445              		@ sp needed
 446 00b8 80BD     		pop	{r7, pc}
 447              	.L16:
 448 00ba 00BF     		.align	2
 449              	.L15:
 450 00bc 49922400 		.word	2396745
 451              		.cfi_endproc
 452              	.LFE3:
 454              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1,"ax",%progbits
 455              		.align	1
 456              		.global	PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 460              		.fpu softvfp
 462              	PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1:
 463              	.LFB4:
 100:cbd.c         **** 
 101:cbd.c         **** void PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1(poly *r, const uint8_t buf[KYBER_ETA1 * KYBER_N / 4]) {
 464              		.loc 1 101 97
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 8
 467              		@ frame_needed = 1, uses_anonymous_args = 0
 468 0000 80B5     		push	{r7, lr}
 469              	.LCFI22:
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 7, -8
 472              		.cfi_offset 14, -4
 473 0002 82B0     		sub	sp, sp, #8
 474              	.LCFI23:
 475              		.cfi_def_cfa_offset 16
 476 0004 00AF     		add	r7, sp, #0
 477              	.LCFI24:
 478              		.cfi_def_cfa_register 7
 479 0006 7860     		str	r0, [r7, #4]
 480 0008 3960     		str	r1, [r7]
 102:cbd.c         ****     cbd3(r, buf);
 481              		.loc 1 102 5
 482 000a 3968     		ldr	r1, [r7]
 483 000c 7868     		ldr	r0, [r7, #4]
 484 000e FFF7FEFF 		bl	cbd3
 103:cbd.c         **** }
 485              		.loc 1 103 1
 486 0012 00BF     		nop
 487 0014 0837     		adds	r7, r7, #8
 488              	.LCFI25:
 489              		.cfi_def_cfa_offset 8
 490 0016 BD46     		mov	sp, r7
 491              	.LCFI26:
 492              		.cfi_def_cfa_register 13
 493              		@ sp needed
 494 0018 80BD     		pop	{r7, pc}
 495              		.cfi_endproc
 496              	.LFE4:
 498              		.section	.text.PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2,"ax",%progbits
 499              		.align	1
 500              		.global	PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2
 501              		.syntax unified
 502              		.thumb
 503              		.thumb_func
 504              		.fpu softvfp
 506              	PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2:
 507              	.LFB5:
 104:cbd.c         **** 
 105:cbd.c         **** void PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2(poly *r, const uint8_t buf[KYBER_ETA2 * KYBER_N / 4]) {
 508              		.loc 1 105 97
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 8
 511              		@ frame_needed = 1, uses_anonymous_args = 0
 512 0000 80B5     		push	{r7, lr}
 513              	.LCFI27:
 514              		.cfi_def_cfa_offset 8
 515              		.cfi_offset 7, -8
 516              		.cfi_offset 14, -4
 517 0002 82B0     		sub	sp, sp, #8
 518              	.LCFI28:
 519              		.cfi_def_cfa_offset 16
 520 0004 00AF     		add	r7, sp, #0
 521              	.LCFI29:
 522              		.cfi_def_cfa_register 7
 523 0006 7860     		str	r0, [r7, #4]
 524 0008 3960     		str	r1, [r7]
 106:cbd.c         ****     cbd2(r, buf);
 525              		.loc 1 106 5
 526 000a 3968     		ldr	r1, [r7]
 527 000c 7868     		ldr	r0, [r7, #4]
 528 000e FFF7FEFF 		bl	cbd2
 107:cbd.c         **** }
 529              		.loc 1 107 1
 530 0012 00BF     		nop
 531 0014 0837     		adds	r7, r7, #8
 532              	.LCFI30:
 533              		.cfi_def_cfa_offset 8
 534 0016 BD46     		mov	sp, r7
 535              	.LCFI31:
 536              		.cfi_def_cfa_register 13
 537              		@ sp needed
 538 0018 80BD     		pop	{r7, pc}
 539              		.cfi_endproc
 540              	.LFE5:
 542              		.text
 543              	.Letext0:
 544              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 545              		.file 3 "poly.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 cbd.c
     /tmp/ccu2NlkN.s:16     .text.load32_littleendian:0000000000000000 $t
     /tmp/ccu2NlkN.s:23     .text.load32_littleendian:0000000000000000 load32_littleendian
     /tmp/ccu2NlkN.s:97     .text.load24_littleendian:0000000000000000 $t
     /tmp/ccu2NlkN.s:103    .text.load24_littleendian:0000000000000000 load24_littleendian
     /tmp/ccu2NlkN.s:166    .text.cbd2:0000000000000000 $t
     /tmp/ccu2NlkN.s:172    .text.cbd2:0000000000000000 cbd2
     /tmp/ccu2NlkN.s:298    .text.cbd3:0000000000000000 $t
     /tmp/ccu2NlkN.s:304    .text.cbd3:0000000000000000 cbd3
     /tmp/ccu2NlkN.s:450    .text.cbd3:00000000000000bc $d
     /tmp/ccu2NlkN.s:455    .text.PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1:0000000000000000 $t
     /tmp/ccu2NlkN.s:462    .text.PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1
     /tmp/ccu2NlkN.s:499    .text.PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2:0000000000000000 $t
     /tmp/ccu2NlkN.s:506    .text.PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2:0000000000000000 PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2

NO UNDEFINED SYMBOLS
