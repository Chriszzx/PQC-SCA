   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"verify.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.PQCLEAN_KYBER512_CLEAN_verify,"ax",%progbits
  16              		.align	1
  17              		.global	PQCLEAN_KYBER512_CLEAN_verify
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	PQCLEAN_KYBER512_CLEAN_verify:
  25              	.LFB0:
  26              		.file 1 "verify.c"
   1:verify.c      **** #include "verify.h"
   2:verify.c      **** #include <stddef.h>
   3:verify.c      **** #include <stdint.h>
   4:verify.c      **** 
   5:verify.c      **** /*************************************************
   6:verify.c      **** * Name:        PQCLEAN_KYBER512_CLEAN_verify
   7:verify.c      **** *
   8:verify.c      **** * Description: Compare two arrays for equality in constant time.
   9:verify.c      **** *
  10:verify.c      **** * Arguments:   const uint8_t *a: pointer to first byte array
  11:verify.c      **** *              const uint8_t *b: pointer to second byte array
  12:verify.c      **** *              size_t len:       length of the byte arrays
  13:verify.c      **** *
  14:verify.c      **** * Returns 0 if the byte arrays are equal, 1 otherwise
  15:verify.c      **** **************************************************/
  16:verify.c      **** int PQCLEAN_KYBER512_CLEAN_verify(const uint8_t *a, const uint8_t *b, size_t len) {
  27              		.loc 1 16 83
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 2DE9B003 		push	{r4, r5, r7, r8, r9}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 9, -4
  40 0004 87B0     		sub	sp, sp, #28
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 48
  43 0006 00AF     		add	r7, sp, #0
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0008 F860     		str	r0, [r7, #12]
  47 000a B960     		str	r1, [r7, #8]
  48 000c 7A60     		str	r2, [r7, #4]
  17:verify.c      ****     size_t i;
  18:verify.c      ****     uint8_t r = 0;
  49              		.loc 1 18 13
  50 000e 0023     		movs	r3, #0
  51 0010 FB74     		strb	r3, [r7, #19]
  19:verify.c      **** 
  20:verify.c      ****     for (i = 0; i < len; i++) {
  52              		.loc 1 20 12
  53 0012 0023     		movs	r3, #0
  54 0014 7B61     		str	r3, [r7, #20]
  55              		.loc 1 20 5
  56 0016 0FE0     		b	.L2
  57              	.L3:
  21:verify.c      ****         r |= a[i] ^ b[i];
  58              		.loc 1 21 15 discriminator 3
  59 0018 FA68     		ldr	r2, [r7, #12]
  60 001a 7B69     		ldr	r3, [r7, #20]
  61 001c 1344     		add	r3, r3, r2
  62 001e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  63              		.loc 1 21 22 discriminator 3
  64 0020 B968     		ldr	r1, [r7, #8]
  65 0022 7B69     		ldr	r3, [r7, #20]
  66 0024 0B44     		add	r3, r3, r1
  67 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  68              		.loc 1 21 11 discriminator 3
  69 0028 5340     		eors	r3, r3, r2
  70 002a DAB2     		uxtb	r2, r3
  71 002c FB7C     		ldrb	r3, [r7, #19]
  72 002e 1343     		orrs	r3, r3, r2
  73 0030 FB74     		strb	r3, [r7, #19]
  20:verify.c      ****         r |= a[i] ^ b[i];
  74              		.loc 1 20 27 discriminator 3
  75 0032 7B69     		ldr	r3, [r7, #20]
  76 0034 0133     		adds	r3, r3, #1
  77 0036 7B61     		str	r3, [r7, #20]
  78              	.L2:
  20:verify.c      ****         r |= a[i] ^ b[i];
  79              		.loc 1 20 5 discriminator 1
  80 0038 7A69     		ldr	r2, [r7, #20]
  81 003a 7B68     		ldr	r3, [r7, #4]
  82 003c 9A42     		cmp	r2, r3
  83 003e EBD3     		bcc	.L3
  22:verify.c      ****     }
  23:verify.c      **** 
  24:verify.c      ****     return (-(uint64_t)r) >> 63;
  84              		.loc 1 24 14
  85 0040 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
  86 0042 0022     		movs	r2, #0
  87 0044 1C46     		mov	r4, r3
  88 0046 1546     		mov	r5, r2
  89              		.loc 1 24 13
  90 0048 0023     		movs	r3, #0
  91 004a D4F10008 		rsbs	r8, r4, #0
  92 004e 63EB0509 		sbc	r9, r3, r5
  93              		.loc 1 24 27
  94 0052 4FF00002 		mov	r2, #0
  95 0056 4FF00003 		mov	r3, #0
  96 005a 4FEAD972 		lsr	r2, r9, #31
  97 005e 0023     		movs	r3, #0
  98 0060 1346     		mov	r3, r2
  25:verify.c      **** }
  99              		.loc 1 25 1
 100 0062 1846     		mov	r0, r3
 101 0064 1C37     		adds	r7, r7, #28
 102              	.LCFI3:
 103              		.cfi_def_cfa_offset 20
 104 0066 BD46     		mov	sp, r7
 105              	.LCFI4:
 106              		.cfi_def_cfa_register 13
 107              		@ sp needed
 108 0068 BDE8B003 		pop	{r4, r5, r7, r8, r9}
 109              	.LCFI5:
 110              		.cfi_restore 9
 111              		.cfi_restore 8
 112              		.cfi_restore 7
 113              		.cfi_restore 5
 114              		.cfi_restore 4
 115              		.cfi_def_cfa_offset 0
 116 006c 7047     		bx	lr
 117              		.cfi_endproc
 118              	.LFE0:
 120              		.section	.text.PQCLEAN_KYBER512_CLEAN_cmov,"ax",%progbits
 121              		.align	1
 122              		.global	PQCLEAN_KYBER512_CLEAN_cmov
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu softvfp
 128              	PQCLEAN_KYBER512_CLEAN_cmov:
 129              	.LFB1:
  26:verify.c      **** 
  27:verify.c      **** /*************************************************
  28:verify.c      **** * Name:        PQCLEAN_KYBER512_CLEAN_cmov
  29:verify.c      **** *
  30:verify.c      **** * Description: Copy len bytes from x to r if b is 1;
  31:verify.c      **** *              don't modify x if b is 0. Requires b to be in {0,1};
  32:verify.c      **** *              assumes two's complement representation of negative integers.
  33:verify.c      **** *              Runs in constant time.
  34:verify.c      **** *
  35:verify.c      **** * Arguments:   uint8_t *r:       pointer to output byte array
  36:verify.c      **** *              const uint8_t *x: pointer to input byte array
  37:verify.c      **** *              size_t len:       Amount of bytes to be copied
  38:verify.c      **** *              uint8_t b:        Condition bit; has to be in {0,1}
  39:verify.c      **** **************************************************/
  40:verify.c      **** void PQCLEAN_KYBER512_CLEAN_cmov(uint8_t *r, const uint8_t *x, size_t len, uint8_t b) {
 130              		.loc 1 40 87
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 24
 133              		@ frame_needed = 1, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 135 0000 80B4     		push	{r7}
 136              	.LCFI6:
 137              		.cfi_def_cfa_offset 4
 138              		.cfi_offset 7, -4
 139 0002 87B0     		sub	sp, sp, #28
 140              	.LCFI7:
 141              		.cfi_def_cfa_offset 32
 142 0004 00AF     		add	r7, sp, #0
 143              	.LCFI8:
 144              		.cfi_def_cfa_register 7
 145 0006 F860     		str	r0, [r7, #12]
 146 0008 B960     		str	r1, [r7, #8]
 147 000a 7A60     		str	r2, [r7, #4]
 148 000c FB70     		strb	r3, [r7, #3]
  41:verify.c      ****     size_t i;
  42:verify.c      **** 
  43:verify.c      ****     b = -b;
 149              		.loc 1 43 7
 150 000e FB78     		ldrb	r3, [r7, #3]
 151 0010 5B42     		rsbs	r3, r3, #0
 152 0012 FB70     		strb	r3, [r7, #3]
  44:verify.c      ****     for (i = 0; i < len; i++) {
 153              		.loc 1 44 12
 154 0014 0023     		movs	r3, #0
 155 0016 7B61     		str	r3, [r7, #20]
 156              		.loc 1 44 5
 157 0018 19E0     		b	.L6
 158              	.L7:
  45:verify.c      ****         r[i] ^= b & (r[i] ^ x[i]);
 159              		.loc 1 45 14 discriminator 3
 160 001a FA68     		ldr	r2, [r7, #12]
 161 001c 7B69     		ldr	r3, [r7, #20]
 162 001e 1344     		add	r3, r3, r2
 163 0020 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 164              		.loc 1 45 23 discriminator 3
 165 0022 FA68     		ldr	r2, [r7, #12]
 166 0024 7B69     		ldr	r3, [r7, #20]
 167 0026 1344     		add	r3, r3, r2
 168 0028 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 169              		.loc 1 45 30 discriminator 3
 170 002a B868     		ldr	r0, [r7, #8]
 171 002c 7B69     		ldr	r3, [r7, #20]
 172 002e 0344     		add	r3, r3, r0
 173 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 174              		.loc 1 45 14 discriminator 3
 175 0032 5340     		eors	r3, r3, r2
 176 0034 DAB2     		uxtb	r2, r3
 177 0036 FB78     		ldrb	r3, [r7, #3]
 178 0038 1340     		ands	r3, r3, r2
 179 003a DAB2     		uxtb	r2, r3
 180 003c F868     		ldr	r0, [r7, #12]
 181 003e 7B69     		ldr	r3, [r7, #20]
 182 0040 0344     		add	r3, r3, r0
 183 0042 4A40     		eors	r2, r2, r1
 184 0044 D2B2     		uxtb	r2, r2
 185 0046 1A70     		strb	r2, [r3]
  44:verify.c      ****     for (i = 0; i < len; i++) {
 186              		.loc 1 44 27 discriminator 3
 187 0048 7B69     		ldr	r3, [r7, #20]
 188 004a 0133     		adds	r3, r3, #1
 189 004c 7B61     		str	r3, [r7, #20]
 190              	.L6:
  44:verify.c      ****     for (i = 0; i < len; i++) {
 191              		.loc 1 44 5 discriminator 1
 192 004e 7A69     		ldr	r2, [r7, #20]
 193 0050 7B68     		ldr	r3, [r7, #4]
 194 0052 9A42     		cmp	r2, r3
 195 0054 E1D3     		bcc	.L7
  46:verify.c      ****     }
  47:verify.c      **** }
 196              		.loc 1 47 1
 197 0056 00BF     		nop
 198 0058 00BF     		nop
 199 005a 1C37     		adds	r7, r7, #28
 200              	.LCFI9:
 201              		.cfi_def_cfa_offset 4
 202 005c BD46     		mov	sp, r7
 203              	.LCFI10:
 204              		.cfi_def_cfa_register 13
 205              		@ sp needed
 206 005e 80BC     		pop	{r7}
 207              	.LCFI11:
 208              		.cfi_restore 7
 209              		.cfi_def_cfa_offset 0
 210 0060 7047     		bx	lr
 211              		.cfi_endproc
 212              	.LFE1:
 214              		.text
 215              	.Letext0:
 216              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 217              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 verify.c
     /tmp/ccifr59I.s:16     .text.PQCLEAN_KYBER512_CLEAN_verify:0000000000000000 $t
     /tmp/ccifr59I.s:24     .text.PQCLEAN_KYBER512_CLEAN_verify:0000000000000000 PQCLEAN_KYBER512_CLEAN_verify
     /tmp/ccifr59I.s:121    .text.PQCLEAN_KYBER512_CLEAN_cmov:0000000000000000 $t
     /tmp/ccifr59I.s:128    .text.PQCLEAN_KYBER512_CLEAN_cmov:0000000000000000 PQCLEAN_KYBER512_CLEAN_cmov

NO UNDEFINED SYMBOLS
