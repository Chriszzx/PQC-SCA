
simple-test-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008434  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080085c0  080085c0  000185c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087a4  080087a4  00020850  2**0
                  CONTENTS
  4 .ARM          00000000  080087a4  080087a4  00020850  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087a4  080087a4  00020850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080087a4  080087a4  000187a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087ac  080087ac  000187ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000850  20000000  080087b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000efc  20000850  08009000  00020850  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000174c  08009000  0002174c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020850  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4a8  00000000  00000000  000208ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031f5  00000000  00000000  0002ed55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00005216  00000000  00000000  00031f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008a8  00000000  00000000  00037160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000690  00000000  00000000  00037a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006a17  00000000  00000000  00038098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002caa  00000000  00000000  0003eaaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001cb0  00000000  00000000  0004175c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0004340c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000125  00000000  00000000  00043550  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000850 	.word	0x20000850
 800019c:	20000850 	.word	0x20000850
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000850 	.word	0x20000850
 80001c0:	20000850 	.word	0x20000850
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000850 	.word	0x20000850
 80001e8:	00000000 	.word	0x00000000
 80001ec:	080085a4 	.word	0x080085a4

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000854 	.word	0x20000854
 800020c:	080085a4 	.word	0x080085a4

08000210 <atexit>:
 8000210:	2300      	movs	r3, #0
 8000212:	4601      	mov	r1, r0
 8000214:	461a      	mov	r2, r3
 8000216:	4618      	mov	r0, r3
 8000218:	f000 bbba 	b.w	8000990 <__register_exitproc>

0800021c <__errno>:
 800021c:	4b01      	ldr	r3, [pc, #4]	; (8000224 <__errno+0x8>)
 800021e:	6818      	ldr	r0, [r3, #0]
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000010 	.word	0x20000010

08000228 <exit>:
 8000228:	b508      	push	{r3, lr}
 800022a:	2100      	movs	r1, #0
 800022c:	4604      	mov	r4, r0
 800022e:	f000 fbe3 	bl	80009f8 <__call_exitprocs>
 8000232:	4b04      	ldr	r3, [pc, #16]	; (8000244 <exit+0x1c>)
 8000234:	6818      	ldr	r0, [r3, #0]
 8000236:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000238:	b103      	cbz	r3, 800023c <exit+0x14>
 800023a:	4798      	blx	r3
 800023c:	4620      	mov	r0, r4
 800023e:	f000 fd89 	bl	8000d54 <_exit>
 8000242:	bf00      	nop
 8000244:	080087a0 	.word	0x080087a0

08000248 <__libc_fini_array>:
 8000248:	b538      	push	{r3, r4, r5, lr}
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <__libc_fini_array+0x24>)
 800024c:	4d08      	ldr	r5, [pc, #32]	; (8000270 <__libc_fini_array+0x28>)
 800024e:	1b5b      	subs	r3, r3, r5
 8000250:	109c      	asrs	r4, r3, #2
 8000252:	d007      	beq.n	8000264 <__libc_fini_array+0x1c>
 8000254:	3b04      	subs	r3, #4
 8000256:	441d      	add	r5, r3
 8000258:	3c01      	subs	r4, #1
 800025a:	f855 3904 	ldr.w	r3, [r5], #-4
 800025e:	4798      	blx	r3
 8000260:	2c00      	cmp	r4, #0
 8000262:	d1f9      	bne.n	8000258 <__libc_fini_array+0x10>
 8000264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000268:	f008 b9a2 	b.w	80085b0 <_fini>
 800026c:	080087b0 	.word	0x080087b0
 8000270:	080087ac 	.word	0x080087ac

08000274 <__libc_init_array>:
 8000274:	b570      	push	{r4, r5, r6, lr}
 8000276:	4e0d      	ldr	r6, [pc, #52]	; (80002ac <__libc_init_array+0x38>)
 8000278:	4d0d      	ldr	r5, [pc, #52]	; (80002b0 <__libc_init_array+0x3c>)
 800027a:	1b76      	subs	r6, r6, r5
 800027c:	10b6      	asrs	r6, r6, #2
 800027e:	d006      	beq.n	800028e <__libc_init_array+0x1a>
 8000280:	2400      	movs	r4, #0
 8000282:	f855 3b04 	ldr.w	r3, [r5], #4
 8000286:	3401      	adds	r4, #1
 8000288:	4798      	blx	r3
 800028a:	42a6      	cmp	r6, r4
 800028c:	d1f9      	bne.n	8000282 <__libc_init_array+0xe>
 800028e:	4e09      	ldr	r6, [pc, #36]	; (80002b4 <__libc_init_array+0x40>)
 8000290:	4d09      	ldr	r5, [pc, #36]	; (80002b8 <__libc_init_array+0x44>)
 8000292:	1b76      	subs	r6, r6, r5
 8000294:	f008 f986 	bl	80085a4 <_init>
 8000298:	10b6      	asrs	r6, r6, #2
 800029a:	d006      	beq.n	80002aa <__libc_init_array+0x36>
 800029c:	2400      	movs	r4, #0
 800029e:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a2:	3401      	adds	r4, #1
 80002a4:	4798      	blx	r3
 80002a6:	42a6      	cmp	r6, r4
 80002a8:	d1f9      	bne.n	800029e <__libc_init_array+0x2a>
 80002aa:	bd70      	pop	{r4, r5, r6, pc}
 80002ac:	080087a4 	.word	0x080087a4
 80002b0:	080087a4 	.word	0x080087a4
 80002b4:	080087ac 	.word	0x080087ac
 80002b8:	080087a4 	.word	0x080087a4

080002bc <malloc>:
 80002bc:	4b02      	ldr	r3, [pc, #8]	; (80002c8 <malloc+0xc>)
 80002be:	4601      	mov	r1, r0
 80002c0:	6818      	ldr	r0, [r3, #0]
 80002c2:	f000 b80b 	b.w	80002dc <_malloc_r>
 80002c6:	bf00      	nop
 80002c8:	20000010 	.word	0x20000010

080002cc <free>:
 80002cc:	4b02      	ldr	r3, [pc, #8]	; (80002d8 <free+0xc>)
 80002ce:	4601      	mov	r1, r0
 80002d0:	6818      	ldr	r0, [r3, #0]
 80002d2:	f000 bc39 	b.w	8000b48 <_free_r>
 80002d6:	bf00      	nop
 80002d8:	20000010 	.word	0x20000010

080002dc <_malloc_r>:
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	f101 060b 	add.w	r6, r1, #11
 80002e4:	2e16      	cmp	r6, #22
 80002e6:	b083      	sub	sp, #12
 80002e8:	4604      	mov	r4, r0
 80002ea:	d824      	bhi.n	8000336 <_malloc_r+0x5a>
 80002ec:	2910      	cmp	r1, #16
 80002ee:	f200 80ba 	bhi.w	8000466 <_malloc_r+0x18a>
 80002f2:	f000 fb37 	bl	8000964 <__malloc_lock>
 80002f6:	2610      	movs	r6, #16
 80002f8:	2218      	movs	r2, #24
 80002fa:	2002      	movs	r0, #2
 80002fc:	4fb7      	ldr	r7, [pc, #732]	; (80005dc <_malloc_r+0x300>)
 80002fe:	443a      	add	r2, r7
 8000300:	f1a2 0108 	sub.w	r1, r2, #8
 8000304:	6853      	ldr	r3, [r2, #4]
 8000306:	428b      	cmp	r3, r1
 8000308:	f000 80ba 	beq.w	8000480 <_malloc_r+0x1a4>
 800030c:	685a      	ldr	r2, [r3, #4]
 800030e:	68d9      	ldr	r1, [r3, #12]
 8000310:	f022 0203 	bic.w	r2, r2, #3
 8000314:	441a      	add	r2, r3
 8000316:	689d      	ldr	r5, [r3, #8]
 8000318:	60e9      	str	r1, [r5, #12]
 800031a:	608d      	str	r5, [r1, #8]
 800031c:	6851      	ldr	r1, [r2, #4]
 800031e:	f041 0101 	orr.w	r1, r1, #1
 8000322:	4620      	mov	r0, r4
 8000324:	6051      	str	r1, [r2, #4]
 8000326:	f103 0508 	add.w	r5, r3, #8
 800032a:	f000 fb1d 	bl	8000968 <__malloc_unlock>
 800032e:	4628      	mov	r0, r5
 8000330:	b003      	add	sp, #12
 8000332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000336:	f036 0607 	bics.w	r6, r6, #7
 800033a:	f100 8094 	bmi.w	8000466 <_malloc_r+0x18a>
 800033e:	42b1      	cmp	r1, r6
 8000340:	f200 8091 	bhi.w	8000466 <_malloc_r+0x18a>
 8000344:	f000 fb0e 	bl	8000964 <__malloc_lock>
 8000348:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 800034c:	f0c0 8196 	bcc.w	800067c <_malloc_r+0x3a0>
 8000350:	0a73      	lsrs	r3, r6, #9
 8000352:	f000 808f 	beq.w	8000474 <_malloc_r+0x198>
 8000356:	2b04      	cmp	r3, #4
 8000358:	f200 816b 	bhi.w	8000632 <_malloc_r+0x356>
 800035c:	09b3      	lsrs	r3, r6, #6
 800035e:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8000362:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8000366:	00c3      	lsls	r3, r0, #3
 8000368:	4f9c      	ldr	r7, [pc, #624]	; (80005dc <_malloc_r+0x300>)
 800036a:	443b      	add	r3, r7
 800036c:	f1a3 0508 	sub.w	r5, r3, #8
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	429d      	cmp	r5, r3
 8000374:	d106      	bne.n	8000384 <_malloc_r+0xa8>
 8000376:	e00c      	b.n	8000392 <_malloc_r+0xb6>
 8000378:	2900      	cmp	r1, #0
 800037a:	f280 812b 	bge.w	80005d4 <_malloc_r+0x2f8>
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	429d      	cmp	r5, r3
 8000382:	d006      	beq.n	8000392 <_malloc_r+0xb6>
 8000384:	685a      	ldr	r2, [r3, #4]
 8000386:	f022 0203 	bic.w	r2, r2, #3
 800038a:	1b91      	subs	r1, r2, r6
 800038c:	290f      	cmp	r1, #15
 800038e:	ddf3      	ble.n	8000378 <_malloc_r+0x9c>
 8000390:	4660      	mov	r0, ip
 8000392:	693d      	ldr	r5, [r7, #16]
 8000394:	f8df c248 	ldr.w	ip, [pc, #584]	; 80005e0 <_malloc_r+0x304>
 8000398:	4565      	cmp	r5, ip
 800039a:	d07c      	beq.n	8000496 <_malloc_r+0x1ba>
 800039c:	686a      	ldr	r2, [r5, #4]
 800039e:	f022 0203 	bic.w	r2, r2, #3
 80003a2:	1b93      	subs	r3, r2, r6
 80003a4:	2b0f      	cmp	r3, #15
 80003a6:	f300 8177 	bgt.w	8000698 <_malloc_r+0x3bc>
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 80003b0:	f280 8168 	bge.w	8000684 <_malloc_r+0x3a8>
 80003b4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80003b8:	f080 8116 	bcs.w	80005e8 <_malloc_r+0x30c>
 80003bc:	08d3      	lsrs	r3, r2, #3
 80003be:	6879      	ldr	r1, [r7, #4]
 80003c0:	3301      	adds	r3, #1
 80003c2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 80003c6:	2201      	movs	r2, #1
 80003c8:	fa02 f20e 	lsl.w	r2, r2, lr
 80003cc:	430a      	orrs	r2, r1
 80003ce:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 80003d2:	f8c5 e008 	str.w	lr, [r5, #8]
 80003d6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 80003da:	3908      	subs	r1, #8
 80003dc:	60e9      	str	r1, [r5, #12]
 80003de:	607a      	str	r2, [r7, #4]
 80003e0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 80003e4:	f8ce 500c 	str.w	r5, [lr, #12]
 80003e8:	1083      	asrs	r3, r0, #2
 80003ea:	2101      	movs	r1, #1
 80003ec:	4099      	lsls	r1, r3
 80003ee:	4291      	cmp	r1, r2
 80003f0:	d857      	bhi.n	80004a2 <_malloc_r+0x1c6>
 80003f2:	4211      	tst	r1, r2
 80003f4:	d106      	bne.n	8000404 <_malloc_r+0x128>
 80003f6:	f020 0003 	bic.w	r0, r0, #3
 80003fa:	0049      	lsls	r1, r1, #1
 80003fc:	4211      	tst	r1, r2
 80003fe:	f100 0004 	add.w	r0, r0, #4
 8000402:	d0fa      	beq.n	80003fa <_malloc_r+0x11e>
 8000404:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8000408:	464d      	mov	r5, r9
 800040a:	4686      	mov	lr, r0
 800040c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000410:	4545      	cmp	r5, r8
 8000412:	d108      	bne.n	8000426 <_malloc_r+0x14a>
 8000414:	e119      	b.n	800064a <_malloc_r+0x36e>
 8000416:	2b00      	cmp	r3, #0
 8000418:	f280 8120 	bge.w	800065c <_malloc_r+0x380>
 800041c:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8000420:	4545      	cmp	r5, r8
 8000422:	f000 8112 	beq.w	800064a <_malloc_r+0x36e>
 8000426:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800042a:	f022 0203 	bic.w	r2, r2, #3
 800042e:	1b93      	subs	r3, r2, r6
 8000430:	2b0f      	cmp	r3, #15
 8000432:	ddf0      	ble.n	8000416 <_malloc_r+0x13a>
 8000434:	4620      	mov	r0, r4
 8000436:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 800043a:	eb08 0106 	add.w	r1, r8, r6
 800043e:	f046 0601 	orr.w	r6, r6, #1
 8000442:	f8c8 6004 	str.w	r6, [r8, #4]
 8000446:	60ec      	str	r4, [r5, #12]
 8000448:	60a5      	str	r5, [r4, #8]
 800044a:	f043 0401 	orr.w	r4, r3, #1
 800044e:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8000452:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8000456:	604c      	str	r4, [r1, #4]
 8000458:	f848 3002 	str.w	r3, [r8, r2]
 800045c:	f000 fa84 	bl	8000968 <__malloc_unlock>
 8000460:	f108 0508 	add.w	r5, r8, #8
 8000464:	e002      	b.n	800046c <_malloc_r+0x190>
 8000466:	230c      	movs	r3, #12
 8000468:	6023      	str	r3, [r4, #0]
 800046a:	2500      	movs	r5, #0
 800046c:	4628      	mov	r0, r5
 800046e:	b003      	add	sp, #12
 8000470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000474:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000478:	2040      	movs	r0, #64	; 0x40
 800047a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800047e:	e773      	b.n	8000368 <_malloc_r+0x8c>
 8000480:	68d3      	ldr	r3, [r2, #12]
 8000482:	429a      	cmp	r2, r3
 8000484:	bf08      	it	eq
 8000486:	3002      	addeq	r0, #2
 8000488:	f47f af40 	bne.w	800030c <_malloc_r+0x30>
 800048c:	693d      	ldr	r5, [r7, #16]
 800048e:	f8df c150 	ldr.w	ip, [pc, #336]	; 80005e0 <_malloc_r+0x304>
 8000492:	4565      	cmp	r5, ip
 8000494:	d182      	bne.n	800039c <_malloc_r+0xc0>
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	1083      	asrs	r3, r0, #2
 800049a:	2101      	movs	r1, #1
 800049c:	4099      	lsls	r1, r3
 800049e:	4291      	cmp	r1, r2
 80004a0:	d9a7      	bls.n	80003f2 <_malloc_r+0x116>
 80004a2:	68bd      	ldr	r5, [r7, #8]
 80004a4:	686b      	ldr	r3, [r5, #4]
 80004a6:	f023 0803 	bic.w	r8, r3, #3
 80004aa:	4546      	cmp	r6, r8
 80004ac:	d803      	bhi.n	80004b6 <_malloc_r+0x1da>
 80004ae:	eba8 0306 	sub.w	r3, r8, r6
 80004b2:	2b0f      	cmp	r3, #15
 80004b4:	dc7e      	bgt.n	80005b4 <_malloc_r+0x2d8>
 80004b6:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80005e4 <_malloc_r+0x308>
 80004ba:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80004be:	f8d9 3000 	ldr.w	r3, [r9]
 80004c2:	3201      	adds	r2, #1
 80004c4:	4433      	add	r3, r6
 80004c6:	eb05 0a08 	add.w	sl, r5, r8
 80004ca:	f000 812f 	beq.w	800072c <_malloc_r+0x450>
 80004ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004d2:	330f      	adds	r3, #15
 80004d4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 80004d8:	f02b 0b0f 	bic.w	fp, fp, #15
 80004dc:	4659      	mov	r1, fp
 80004de:	4620      	mov	r0, r4
 80004e0:	f000 fa44 	bl	800096c <_sbrk_r>
 80004e4:	1c41      	adds	r1, r0, #1
 80004e6:	4602      	mov	r2, r0
 80004e8:	f000 80ef 	beq.w	80006ca <_malloc_r+0x3ee>
 80004ec:	4582      	cmp	sl, r0
 80004ee:	f200 80ea 	bhi.w	80006c6 <_malloc_r+0x3ea>
 80004f2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80004f6:	4459      	add	r1, fp
 80004f8:	f8c9 1004 	str.w	r1, [r9, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	f000 814b 	beq.w	8000798 <_malloc_r+0x4bc>
 8000502:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 8000506:	3101      	adds	r1, #1
 8000508:	bf1b      	ittet	ne
 800050a:	eba2 0a0a 	subne.w	sl, r2, sl
 800050e:	4453      	addne	r3, sl
 8000510:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
 8000514:	f8c9 3004 	strne.w	r3, [r9, #4]
 8000518:	f012 0307 	ands.w	r3, r2, #7
 800051c:	f000 8112 	beq.w	8000744 <_malloc_r+0x468>
 8000520:	f1c3 0108 	rsb	r1, r3, #8
 8000524:	440a      	add	r2, r1
 8000526:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 800052a:	4493      	add	fp, r2
 800052c:	3108      	adds	r1, #8
 800052e:	eba1 010b 	sub.w	r1, r1, fp
 8000532:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8000536:	4651      	mov	r1, sl
 8000538:	4620      	mov	r0, r4
 800053a:	9201      	str	r2, [sp, #4]
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	f000 fa15 	bl	800096c <_sbrk_r>
 8000542:	1c42      	adds	r2, r0, #1
 8000544:	e9dd 3200 	ldrd	r3, r2, [sp]
 8000548:	f000 814b 	beq.w	80007e2 <_malloc_r+0x506>
 800054c:	1a83      	subs	r3, r0, r2
 800054e:	eb03 0b0a 	add.w	fp, r3, sl
 8000552:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000556:	60ba      	str	r2, [r7, #8]
 8000558:	f04b 0301 	orr.w	r3, fp, #1
 800055c:	eb0a 0100 	add.w	r1, sl, r0
 8000560:	42bd      	cmp	r5, r7
 8000562:	6053      	str	r3, [r2, #4]
 8000564:	f8c9 1004 	str.w	r1, [r9, #4]
 8000568:	f000 8122 	beq.w	80007b0 <_malloc_r+0x4d4>
 800056c:	f1b8 0f0f 	cmp.w	r8, #15
 8000570:	f240 8120 	bls.w	80007b4 <_malloc_r+0x4d8>
 8000574:	686b      	ldr	r3, [r5, #4]
 8000576:	f1a8 000c 	sub.w	r0, r8, #12
 800057a:	f020 0007 	bic.w	r0, r0, #7
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	4303      	orrs	r3, r0
 8000584:	606b      	str	r3, [r5, #4]
 8000586:	f04f 0c05 	mov.w	ip, #5
 800058a:	182b      	adds	r3, r5, r0
 800058c:	280f      	cmp	r0, #15
 800058e:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 8000592:	f200 812d 	bhi.w	80007f0 <_malloc_r+0x514>
 8000596:	6853      	ldr	r3, [r2, #4]
 8000598:	4615      	mov	r5, r2
 800059a:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 800059e:	428a      	cmp	r2, r1
 80005a0:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 80005a4:	bf38      	it	cc
 80005a6:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
 80005aa:	428a      	cmp	r2, r1
 80005ac:	bf38      	it	cc
 80005ae:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
 80005b2:	e08c      	b.n	80006ce <_malloc_r+0x3f2>
 80005b4:	19aa      	adds	r2, r5, r6
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	f046 0601 	orr.w	r6, r6, #1
 80005be:	606e      	str	r6, [r5, #4]
 80005c0:	4620      	mov	r0, r4
 80005c2:	60ba      	str	r2, [r7, #8]
 80005c4:	6053      	str	r3, [r2, #4]
 80005c6:	f000 f9cf 	bl	8000968 <__malloc_unlock>
 80005ca:	3508      	adds	r5, #8
 80005cc:	4628      	mov	r0, r5
 80005ce:	b003      	add	sp, #12
 80005d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005d4:	68d9      	ldr	r1, [r3, #12]
 80005d6:	441a      	add	r2, r3
 80005d8:	e69d      	b.n	8000316 <_malloc_r+0x3a>
 80005da:	bf00      	nop
 80005dc:	20000440 	.word	0x20000440
 80005e0:	20000448 	.word	0x20000448
 80005e4:	20001714 	.word	0x20001714
 80005e8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 80005ec:	ea4f 2352 	mov.w	r3, r2, lsr #9
 80005f0:	d363      	bcc.n	80006ba <_malloc_r+0x3de>
 80005f2:	2b14      	cmp	r3, #20
 80005f4:	f200 80b8 	bhi.w	8000768 <_malloc_r+0x48c>
 80005f8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 80005fc:	00c9      	lsls	r1, r1, #3
 80005fe:	335b      	adds	r3, #91	; 0x5b
 8000600:	eb07 0e01 	add.w	lr, r7, r1
 8000604:	5879      	ldr	r1, [r7, r1]
 8000606:	f1ae 0e08 	sub.w	lr, lr, #8
 800060a:	458e      	cmp	lr, r1
 800060c:	f000 8091 	beq.w	8000732 <_malloc_r+0x456>
 8000610:	684b      	ldr	r3, [r1, #4]
 8000612:	f023 0303 	bic.w	r3, r3, #3
 8000616:	4293      	cmp	r3, r2
 8000618:	d902      	bls.n	8000620 <_malloc_r+0x344>
 800061a:	6889      	ldr	r1, [r1, #8]
 800061c:	458e      	cmp	lr, r1
 800061e:	d1f7      	bne.n	8000610 <_malloc_r+0x334>
 8000620:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 800062a:	f8ce 5008 	str.w	r5, [lr, #8]
 800062e:	60cd      	str	r5, [r1, #12]
 8000630:	e6da      	b.n	80003e8 <_malloc_r+0x10c>
 8000632:	2b14      	cmp	r3, #20
 8000634:	d959      	bls.n	80006ea <_malloc_r+0x40e>
 8000636:	2b54      	cmp	r3, #84	; 0x54
 8000638:	f200 809e 	bhi.w	8000778 <_malloc_r+0x49c>
 800063c:	0b33      	lsrs	r3, r6, #12
 800063e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8000642:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8000646:	00c3      	lsls	r3, r0, #3
 8000648:	e68e      	b.n	8000368 <_malloc_r+0x8c>
 800064a:	f10e 0e01 	add.w	lr, lr, #1
 800064e:	f01e 0f03 	tst.w	lr, #3
 8000652:	f105 0508 	add.w	r5, r5, #8
 8000656:	f47f aed9 	bne.w	800040c <_malloc_r+0x130>
 800065a:	e051      	b.n	8000700 <_malloc_r+0x424>
 800065c:	4442      	add	r2, r8
 800065e:	4645      	mov	r5, r8
 8000660:	6853      	ldr	r3, [r2, #4]
 8000662:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6053      	str	r3, [r2, #4]
 800066c:	f855 3f08 	ldr.w	r3, [r5, #8]!
 8000670:	4620      	mov	r0, r4
 8000672:	60d9      	str	r1, [r3, #12]
 8000674:	608b      	str	r3, [r1, #8]
 8000676:	f000 f977 	bl	8000968 <__malloc_unlock>
 800067a:	e6f7      	b.n	800046c <_malloc_r+0x190>
 800067c:	08f0      	lsrs	r0, r6, #3
 800067e:	f106 0208 	add.w	r2, r6, #8
 8000682:	e63b      	b.n	80002fc <_malloc_r+0x20>
 8000684:	442a      	add	r2, r5
 8000686:	4620      	mov	r0, r4
 8000688:	6853      	ldr	r3, [r2, #4]
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6053      	str	r3, [r2, #4]
 8000690:	3508      	adds	r5, #8
 8000692:	f000 f969 	bl	8000968 <__malloc_unlock>
 8000696:	e6e9      	b.n	800046c <_malloc_r+0x190>
 8000698:	19a9      	adds	r1, r5, r6
 800069a:	4620      	mov	r0, r4
 800069c:	f046 0601 	orr.w	r6, r6, #1
 80006a0:	f043 0401 	orr.w	r4, r3, #1
 80006a4:	606e      	str	r6, [r5, #4]
 80006a6:	e9c7 1104 	strd	r1, r1, [r7, #16]
 80006aa:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 80006ae:	604c      	str	r4, [r1, #4]
 80006b0:	50ab      	str	r3, [r5, r2]
 80006b2:	f000 f959 	bl	8000968 <__malloc_unlock>
 80006b6:	3508      	adds	r5, #8
 80006b8:	e6d8      	b.n	800046c <_malloc_r+0x190>
 80006ba:	0993      	lsrs	r3, r2, #6
 80006bc:	f103 0139 	add.w	r1, r3, #57	; 0x39
 80006c0:	00c9      	lsls	r1, r1, #3
 80006c2:	3338      	adds	r3, #56	; 0x38
 80006c4:	e79c      	b.n	8000600 <_malloc_r+0x324>
 80006c6:	42bd      	cmp	r5, r7
 80006c8:	d060      	beq.n	800078c <_malloc_r+0x4b0>
 80006ca:	68bd      	ldr	r5, [r7, #8]
 80006cc:	686b      	ldr	r3, [r5, #4]
 80006ce:	f023 0b03 	bic.w	fp, r3, #3
 80006d2:	455e      	cmp	r6, fp
 80006d4:	ebab 0306 	sub.w	r3, fp, r6
 80006d8:	d802      	bhi.n	80006e0 <_malloc_r+0x404>
 80006da:	2b0f      	cmp	r3, #15
 80006dc:	f73f af6a 	bgt.w	80005b4 <_malloc_r+0x2d8>
 80006e0:	4620      	mov	r0, r4
 80006e2:	f000 f941 	bl	8000968 <__malloc_unlock>
 80006e6:	2500      	movs	r5, #0
 80006e8:	e6c0      	b.n	800046c <_malloc_r+0x190>
 80006ea:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80006ee:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 80006f2:	00c3      	lsls	r3, r0, #3
 80006f4:	e638      	b.n	8000368 <_malloc_r+0x8c>
 80006f6:	f859 3908 	ldr.w	r3, [r9], #-8
 80006fa:	454b      	cmp	r3, r9
 80006fc:	f040 8096 	bne.w	800082c <_malloc_r+0x550>
 8000700:	f010 0f03 	tst.w	r0, #3
 8000704:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000708:	d1f5      	bne.n	80006f6 <_malloc_r+0x41a>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	ea23 0301 	bic.w	r3, r3, r1
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	4299      	cmp	r1, r3
 8000716:	f63f aec4 	bhi.w	80004a2 <_malloc_r+0x1c6>
 800071a:	b919      	cbnz	r1, 8000724 <_malloc_r+0x448>
 800071c:	e6c1      	b.n	80004a2 <_malloc_r+0x1c6>
 800071e:	0049      	lsls	r1, r1, #1
 8000720:	f10e 0e04 	add.w	lr, lr, #4
 8000724:	4219      	tst	r1, r3
 8000726:	d0fa      	beq.n	800071e <_malloc_r+0x442>
 8000728:	4670      	mov	r0, lr
 800072a:	e66b      	b.n	8000404 <_malloc_r+0x128>
 800072c:	f103 0b10 	add.w	fp, r3, #16
 8000730:	e6d4      	b.n	80004dc <_malloc_r+0x200>
 8000732:	109a      	asrs	r2, r3, #2
 8000734:	f04f 0801 	mov.w	r8, #1
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	fa08 f202 	lsl.w	r2, r8, r2
 800073e:	431a      	orrs	r2, r3
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	e770      	b.n	8000626 <_malloc_r+0x34a>
 8000744:	eb02 010b 	add.w	r1, r2, fp
 8000748:	4249      	negs	r1, r1
 800074a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 800074e:	4651      	mov	r1, sl
 8000750:	4620      	mov	r0, r4
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	9200      	str	r2, [sp, #0]
 8000756:	f000 f909 	bl	800096c <_sbrk_r>
 800075a:	1c43      	adds	r3, r0, #1
 800075c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000760:	f47f aef4 	bne.w	800054c <_malloc_r+0x270>
 8000764:	469a      	mov	sl, r3
 8000766:	e6f4      	b.n	8000552 <_malloc_r+0x276>
 8000768:	2b54      	cmp	r3, #84	; 0x54
 800076a:	d826      	bhi.n	80007ba <_malloc_r+0x4de>
 800076c:	0b13      	lsrs	r3, r2, #12
 800076e:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8000772:	00c9      	lsls	r1, r1, #3
 8000774:	336e      	adds	r3, #110	; 0x6e
 8000776:	e743      	b.n	8000600 <_malloc_r+0x324>
 8000778:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800077c:	d826      	bhi.n	80007cc <_malloc_r+0x4f0>
 800077e:	0bf3      	lsrs	r3, r6, #15
 8000780:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8000784:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8000788:	00c3      	lsls	r3, r0, #3
 800078a:	e5ed      	b.n	8000368 <_malloc_r+0x8c>
 800078c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000790:	445b      	add	r3, fp
 8000792:	f8c9 3004 	str.w	r3, [r9, #4]
 8000796:	e6b4      	b.n	8000502 <_malloc_r+0x226>
 8000798:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800079c:	2800      	cmp	r0, #0
 800079e:	f47f aeb0 	bne.w	8000502 <_malloc_r+0x226>
 80007a2:	68bd      	ldr	r5, [r7, #8]
 80007a4:	eb08 030b 	add.w	r3, r8, fp
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	606b      	str	r3, [r5, #4]
 80007ae:	e6f4      	b.n	800059a <_malloc_r+0x2be>
 80007b0:	4615      	mov	r5, r2
 80007b2:	e6f2      	b.n	800059a <_malloc_r+0x2be>
 80007b4:	2301      	movs	r3, #1
 80007b6:	6053      	str	r3, [r2, #4]
 80007b8:	e792      	b.n	80006e0 <_malloc_r+0x404>
 80007ba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80007be:	d821      	bhi.n	8000804 <_malloc_r+0x528>
 80007c0:	0bd3      	lsrs	r3, r2, #15
 80007c2:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80007c6:	00c9      	lsls	r1, r1, #3
 80007c8:	3377      	adds	r3, #119	; 0x77
 80007ca:	e719      	b.n	8000600 <_malloc_r+0x324>
 80007cc:	f240 5254 	movw	r2, #1364	; 0x554
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d821      	bhi.n	8000818 <_malloc_r+0x53c>
 80007d4:	0cb3      	lsrs	r3, r6, #18
 80007d6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80007da:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 80007de:	00c3      	lsls	r3, r0, #3
 80007e0:	e5c2      	b.n	8000368 <_malloc_r+0x8c>
 80007e2:	3b08      	subs	r3, #8
 80007e4:	449b      	add	fp, r3
 80007e6:	ebab 0b02 	sub.w	fp, fp, r2
 80007ea:	f04f 0a00 	mov.w	sl, #0
 80007ee:	e6b0      	b.n	8000552 <_malloc_r+0x276>
 80007f0:	f105 0108 	add.w	r1, r5, #8
 80007f4:	4620      	mov	r0, r4
 80007f6:	f000 f9a7 	bl	8000b48 <_free_r>
 80007fa:	68bd      	ldr	r5, [r7, #8]
 80007fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000800:	686b      	ldr	r3, [r5, #4]
 8000802:	e6ca      	b.n	800059a <_malloc_r+0x2be>
 8000804:	f240 5154 	movw	r1, #1364	; 0x554
 8000808:	428b      	cmp	r3, r1
 800080a:	d80b      	bhi.n	8000824 <_malloc_r+0x548>
 800080c:	0c93      	lsrs	r3, r2, #18
 800080e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 8000812:	00c9      	lsls	r1, r1, #3
 8000814:	337c      	adds	r3, #124	; 0x7c
 8000816:	e6f3      	b.n	8000600 <_malloc_r+0x324>
 8000818:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800081c:	207f      	movs	r0, #127	; 0x7f
 800081e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8000822:	e5a1      	b.n	8000368 <_malloc_r+0x8c>
 8000824:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000828:	237e      	movs	r3, #126	; 0x7e
 800082a:	e6e9      	b.n	8000600 <_malloc_r+0x324>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	e770      	b.n	8000712 <_malloc_r+0x436>

08000830 <memcpy>:
 8000830:	4684      	mov	ip, r0
 8000832:	ea41 0300 	orr.w	r3, r1, r0
 8000836:	f013 0303 	ands.w	r3, r3, #3
 800083a:	d16d      	bne.n	8000918 <memcpy+0xe8>
 800083c:	3a40      	subs	r2, #64	; 0x40
 800083e:	d341      	bcc.n	80008c4 <memcpy+0x94>
 8000840:	f851 3b04 	ldr.w	r3, [r1], #4
 8000844:	f840 3b04 	str.w	r3, [r0], #4
 8000848:	f851 3b04 	ldr.w	r3, [r1], #4
 800084c:	f840 3b04 	str.w	r3, [r0], #4
 8000850:	f851 3b04 	ldr.w	r3, [r1], #4
 8000854:	f840 3b04 	str.w	r3, [r0], #4
 8000858:	f851 3b04 	ldr.w	r3, [r1], #4
 800085c:	f840 3b04 	str.w	r3, [r0], #4
 8000860:	f851 3b04 	ldr.w	r3, [r1], #4
 8000864:	f840 3b04 	str.w	r3, [r0], #4
 8000868:	f851 3b04 	ldr.w	r3, [r1], #4
 800086c:	f840 3b04 	str.w	r3, [r0], #4
 8000870:	f851 3b04 	ldr.w	r3, [r1], #4
 8000874:	f840 3b04 	str.w	r3, [r0], #4
 8000878:	f851 3b04 	ldr.w	r3, [r1], #4
 800087c:	f840 3b04 	str.w	r3, [r0], #4
 8000880:	f851 3b04 	ldr.w	r3, [r1], #4
 8000884:	f840 3b04 	str.w	r3, [r0], #4
 8000888:	f851 3b04 	ldr.w	r3, [r1], #4
 800088c:	f840 3b04 	str.w	r3, [r0], #4
 8000890:	f851 3b04 	ldr.w	r3, [r1], #4
 8000894:	f840 3b04 	str.w	r3, [r0], #4
 8000898:	f851 3b04 	ldr.w	r3, [r1], #4
 800089c:	f840 3b04 	str.w	r3, [r0], #4
 80008a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80008a4:	f840 3b04 	str.w	r3, [r0], #4
 80008a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80008ac:	f840 3b04 	str.w	r3, [r0], #4
 80008b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80008b4:	f840 3b04 	str.w	r3, [r0], #4
 80008b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80008bc:	f840 3b04 	str.w	r3, [r0], #4
 80008c0:	3a40      	subs	r2, #64	; 0x40
 80008c2:	d2bd      	bcs.n	8000840 <memcpy+0x10>
 80008c4:	3230      	adds	r2, #48	; 0x30
 80008c6:	d311      	bcc.n	80008ec <memcpy+0xbc>
 80008c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80008cc:	f840 3b04 	str.w	r3, [r0], #4
 80008d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80008d4:	f840 3b04 	str.w	r3, [r0], #4
 80008d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80008dc:	f840 3b04 	str.w	r3, [r0], #4
 80008e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80008e4:	f840 3b04 	str.w	r3, [r0], #4
 80008e8:	3a10      	subs	r2, #16
 80008ea:	d2ed      	bcs.n	80008c8 <memcpy+0x98>
 80008ec:	320c      	adds	r2, #12
 80008ee:	d305      	bcc.n	80008fc <memcpy+0xcc>
 80008f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80008f4:	f840 3b04 	str.w	r3, [r0], #4
 80008f8:	3a04      	subs	r2, #4
 80008fa:	d2f9      	bcs.n	80008f0 <memcpy+0xc0>
 80008fc:	3204      	adds	r2, #4
 80008fe:	d008      	beq.n	8000912 <memcpy+0xe2>
 8000900:	07d2      	lsls	r2, r2, #31
 8000902:	bf1c      	itt	ne
 8000904:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000908:	f800 3b01 	strbne.w	r3, [r0], #1
 800090c:	d301      	bcc.n	8000912 <memcpy+0xe2>
 800090e:	880b      	ldrh	r3, [r1, #0]
 8000910:	8003      	strh	r3, [r0, #0]
 8000912:	4660      	mov	r0, ip
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	2a08      	cmp	r2, #8
 800091a:	d313      	bcc.n	8000944 <memcpy+0x114>
 800091c:	078b      	lsls	r3, r1, #30
 800091e:	d08d      	beq.n	800083c <memcpy+0xc>
 8000920:	f010 0303 	ands.w	r3, r0, #3
 8000924:	d08a      	beq.n	800083c <memcpy+0xc>
 8000926:	f1c3 0304 	rsb	r3, r3, #4
 800092a:	1ad2      	subs	r2, r2, r3
 800092c:	07db      	lsls	r3, r3, #31
 800092e:	bf1c      	itt	ne
 8000930:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000934:	f800 3b01 	strbne.w	r3, [r0], #1
 8000938:	d380      	bcc.n	800083c <memcpy+0xc>
 800093a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800093e:	f820 3b02 	strh.w	r3, [r0], #2
 8000942:	e77b      	b.n	800083c <memcpy+0xc>
 8000944:	3a04      	subs	r2, #4
 8000946:	d3d9      	bcc.n	80008fc <memcpy+0xcc>
 8000948:	3a01      	subs	r2, #1
 800094a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800094e:	f800 3b01 	strb.w	r3, [r0], #1
 8000952:	d2f9      	bcs.n	8000948 <memcpy+0x118>
 8000954:	780b      	ldrb	r3, [r1, #0]
 8000956:	7003      	strb	r3, [r0, #0]
 8000958:	784b      	ldrb	r3, [r1, #1]
 800095a:	7043      	strb	r3, [r0, #1]
 800095c:	788b      	ldrb	r3, [r1, #2]
 800095e:	7083      	strb	r3, [r0, #2]
 8000960:	4660      	mov	r0, ip
 8000962:	4770      	bx	lr

08000964 <__malloc_lock>:
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop

08000968 <__malloc_unlock>:
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <_sbrk_r>:
 800096c:	b538      	push	{r3, r4, r5, lr}
 800096e:	4d07      	ldr	r5, [pc, #28]	; (800098c <_sbrk_r+0x20>)
 8000970:	2200      	movs	r2, #0
 8000972:	4604      	mov	r4, r0
 8000974:	4608      	mov	r0, r1
 8000976:	602a      	str	r2, [r5, #0]
 8000978:	f007 fd7c 	bl	8008474 <_sbrk>
 800097c:	1c43      	adds	r3, r0, #1
 800097e:	d000      	beq.n	8000982 <_sbrk_r+0x16>
 8000980:	bd38      	pop	{r3, r4, r5, pc}
 8000982:	682b      	ldr	r3, [r5, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0fb      	beq.n	8000980 <_sbrk_r+0x14>
 8000988:	6023      	str	r3, [r4, #0]
 800098a:	bd38      	pop	{r3, r4, r5, pc}
 800098c:	20001748 	.word	0x20001748

08000990 <__register_exitproc>:
 8000990:	b470      	push	{r4, r5, r6}
 8000992:	4c18      	ldr	r4, [pc, #96]	; (80009f4 <__register_exitproc+0x64>)
 8000994:	6825      	ldr	r5, [r4, #0]
 8000996:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800099a:	b31c      	cbz	r4, 80009e4 <__register_exitproc+0x54>
 800099c:	6865      	ldr	r5, [r4, #4]
 800099e:	2d1f      	cmp	r5, #31
 80009a0:	dc25      	bgt.n	80009ee <__register_exitproc+0x5e>
 80009a2:	b938      	cbnz	r0, 80009b4 <__register_exitproc+0x24>
 80009a4:	1cab      	adds	r3, r5, #2
 80009a6:	3501      	adds	r5, #1
 80009a8:	6065      	str	r5, [r4, #4]
 80009aa:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80009ae:	2000      	movs	r0, #0
 80009b0:	bc70      	pop	{r4, r5, r6}
 80009b2:	4770      	bx	lr
 80009b4:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
 80009b8:	2802      	cmp	r0, #2
 80009ba:	f8cc 2088 	str.w	r2, [ip, #136]	; 0x88
 80009be:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 80009c2:	f04f 0201 	mov.w	r2, #1
 80009c6:	fa02 f205 	lsl.w	r2, r2, r5
 80009ca:	ea46 0602 	orr.w	r6, r6, r2
 80009ce:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 80009d2:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
 80009d6:	d1e5      	bne.n	80009a4 <__register_exitproc+0x14>
 80009d8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 80009dc:	4313      	orrs	r3, r2
 80009de:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 80009e2:	e7df      	b.n	80009a4 <__register_exitproc+0x14>
 80009e4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80009e8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80009ec:	e7d6      	b.n	800099c <__register_exitproc+0xc>
 80009ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f2:	e7dd      	b.n	80009b0 <__register_exitproc+0x20>
 80009f4:	080087a0 	.word	0x080087a0

080009f8 <__call_exitprocs>:
 80009f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <__call_exitprocs+0xac>)
 80009fe:	681f      	ldr	r7, [r3, #0]
 8000a00:	b083      	sub	sp, #12
 8000a02:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8000a06:	9001      	str	r0, [sp, #4]
 8000a08:	b1b6      	cbz	r6, 8000a38 <__call_exitprocs+0x40>
 8000a0a:	468b      	mov	fp, r1
 8000a0c:	f04f 0801 	mov.w	r8, #1
 8000a10:	f04f 0900 	mov.w	r9, #0
 8000a14:	6874      	ldr	r4, [r6, #4]
 8000a16:	1e65      	subs	r5, r4, #1
 8000a18:	d40e      	bmi.n	8000a38 <__call_exitprocs+0x40>
 8000a1a:	3401      	adds	r4, #1
 8000a1c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8000a20:	f1bb 0f00 	cmp.w	fp, #0
 8000a24:	d00b      	beq.n	8000a3e <__call_exitprocs+0x46>
 8000a26:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000a2a:	455b      	cmp	r3, fp
 8000a2c:	d007      	beq.n	8000a3e <__call_exitprocs+0x46>
 8000a2e:	3d01      	subs	r5, #1
 8000a30:	1c6b      	adds	r3, r5, #1
 8000a32:	f1a4 0404 	sub.w	r4, r4, #4
 8000a36:	d1f3      	bne.n	8000a20 <__call_exitprocs+0x28>
 8000a38:	b003      	add	sp, #12
 8000a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a3e:	6873      	ldr	r3, [r6, #4]
 8000a40:	6822      	ldr	r2, [r4, #0]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	42ab      	cmp	r3, r5
 8000a46:	bf0c      	ite	eq
 8000a48:	6075      	streq	r5, [r6, #4]
 8000a4a:	f8c4 9000 	strne.w	r9, [r4]
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d0ed      	beq.n	8000a2e <__call_exitprocs+0x36>
 8000a52:	f8d6 0188 	ldr.w	r0, [r6, #392]	; 0x188
 8000a56:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8000a5a:	fa08 f105 	lsl.w	r1, r8, r5
 8000a5e:	4201      	tst	r1, r0
 8000a60:	d10b      	bne.n	8000a7a <__call_exitprocs+0x82>
 8000a62:	4790      	blx	r2
 8000a64:	6872      	ldr	r2, [r6, #4]
 8000a66:	4552      	cmp	r2, sl
 8000a68:	d112      	bne.n	8000a90 <__call_exitprocs+0x98>
 8000a6a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000a6e:	42b3      	cmp	r3, r6
 8000a70:	d0dd      	beq.n	8000a2e <__call_exitprocs+0x36>
 8000a72:	461e      	mov	r6, r3
 8000a74:	2e00      	cmp	r6, #0
 8000a76:	d1cd      	bne.n	8000a14 <__call_exitprocs+0x1c>
 8000a78:	e7de      	b.n	8000a38 <__call_exitprocs+0x40>
 8000a7a:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 8000a7e:	4201      	tst	r1, r0
 8000a80:	d10b      	bne.n	8000a9a <__call_exitprocs+0xa2>
 8000a82:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8000a86:	9801      	ldr	r0, [sp, #4]
 8000a88:	4790      	blx	r2
 8000a8a:	6872      	ldr	r2, [r6, #4]
 8000a8c:	4552      	cmp	r2, sl
 8000a8e:	d0ec      	beq.n	8000a6a <__call_exitprocs+0x72>
 8000a90:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d1bd      	bne.n	8000a14 <__call_exitprocs+0x1c>
 8000a98:	e7ce      	b.n	8000a38 <__call_exitprocs+0x40>
 8000a9a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8000a9e:	4790      	blx	r2
 8000aa0:	e7e0      	b.n	8000a64 <__call_exitprocs+0x6c>
 8000aa2:	bf00      	nop
 8000aa4:	080087a0 	.word	0x080087a0

08000aa8 <_malloc_trim_r>:
 8000aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aaa:	4f24      	ldr	r7, [pc, #144]	; (8000b3c <_malloc_trim_r+0x94>)
 8000aac:	460c      	mov	r4, r1
 8000aae:	4606      	mov	r6, r0
 8000ab0:	f7ff ff58 	bl	8000964 <__malloc_lock>
 8000ab4:	68ba      	ldr	r2, [r7, #8]
 8000ab6:	6855      	ldr	r5, [r2, #4]
 8000ab8:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 8000abc:	330f      	adds	r3, #15
 8000abe:	f025 0503 	bic.w	r5, r5, #3
 8000ac2:	442b      	add	r3, r5
 8000ac4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000ac8:	f023 030f 	bic.w	r3, r3, #15
 8000acc:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 8000ad0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8000ad4:	db07      	blt.n	8000ae6 <_malloc_trim_r+0x3e>
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4630      	mov	r0, r6
 8000ada:	f7ff ff47 	bl	800096c <_sbrk_r>
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	442b      	add	r3, r5
 8000ae2:	4298      	cmp	r0, r3
 8000ae4:	d004      	beq.n	8000af0 <_malloc_trim_r+0x48>
 8000ae6:	4630      	mov	r0, r6
 8000ae8:	f7ff ff3e 	bl	8000968 <__malloc_unlock>
 8000aec:	2000      	movs	r0, #0
 8000aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000af0:	4261      	negs	r1, r4
 8000af2:	4630      	mov	r0, r6
 8000af4:	f7ff ff3a 	bl	800096c <_sbrk_r>
 8000af8:	3001      	adds	r0, #1
 8000afa:	d00d      	beq.n	8000b18 <_malloc_trim_r+0x70>
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <_malloc_trim_r+0x98>)
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1b2d      	subs	r5, r5, r4
 8000b02:	f045 0501 	orr.w	r5, r5, #1
 8000b06:	605d      	str	r5, [r3, #4]
 8000b08:	6813      	ldr	r3, [r2, #0]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	1b1b      	subs	r3, r3, r4
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	f7ff ff2a 	bl	8000968 <__malloc_unlock>
 8000b14:	2001      	movs	r0, #1
 8000b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	f7ff ff26 	bl	800096c <_sbrk_r>
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	1a83      	subs	r3, r0, r2
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	ddde      	ble.n	8000ae6 <_malloc_trim_r+0x3e>
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <_malloc_trim_r+0x9c>)
 8000b30:	4903      	ldr	r1, [pc, #12]	; (8000b40 <_malloc_trim_r+0x98>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	1ac0      	subs	r0, r0, r3
 8000b36:	6008      	str	r0, [r1, #0]
 8000b38:	e7d5      	b.n	8000ae6 <_malloc_trim_r+0x3e>
 8000b3a:	bf00      	nop
 8000b3c:	20000440 	.word	0x20000440
 8000b40:	20001718 	.word	0x20001718
 8000b44:	20000848 	.word	0x20000848

08000b48 <_free_r>:
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	d061      	beq.n	8000c10 <_free_r+0xc8>
 8000b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4e:	460c      	mov	r4, r1
 8000b50:	4606      	mov	r6, r0
 8000b52:	f7ff ff07 	bl	8000964 <__malloc_lock>
 8000b56:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8000b5a:	4f7b      	ldr	r7, [pc, #492]	; (8000d48 <_free_r+0x200>)
 8000b5c:	f1a4 0508 	sub.w	r5, r4, #8
 8000b60:	f022 0101 	bic.w	r1, r2, #1
 8000b64:	eb05 0c01 	add.w	ip, r5, r1
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8000b6e:	4560      	cmp	r0, ip
 8000b70:	f023 0303 	bic.w	r3, r3, #3
 8000b74:	f000 808b 	beq.w	8000c8e <_free_r+0x146>
 8000b78:	07d2      	lsls	r2, r2, #31
 8000b7a:	f8cc 3004 	str.w	r3, [ip, #4]
 8000b7e:	d432      	bmi.n	8000be6 <_free_r+0x9e>
 8000b80:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8000b84:	1aad      	subs	r5, r5, r2
 8000b86:	4411      	add	r1, r2
 8000b88:	68aa      	ldr	r2, [r5, #8]
 8000b8a:	f107 0008 	add.w	r0, r7, #8
 8000b8e:	4282      	cmp	r2, r0
 8000b90:	d06a      	beq.n	8000c68 <_free_r+0x120>
 8000b92:	eb0c 0403 	add.w	r4, ip, r3
 8000b96:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8000b9a:	68ec      	ldr	r4, [r5, #12]
 8000b9c:	60d4      	str	r4, [r2, #12]
 8000b9e:	f01e 0f01 	tst.w	lr, #1
 8000ba2:	60a2      	str	r2, [r4, #8]
 8000ba4:	f000 8097 	beq.w	8000cd6 <_free_r+0x18e>
 8000ba8:	f041 0301 	orr.w	r3, r1, #1
 8000bac:	606b      	str	r3, [r5, #4]
 8000bae:	f8cc 1000 	str.w	r1, [ip]
 8000bb2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000bb6:	d235      	bcs.n	8000c24 <_free_r+0xdc>
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	08cb      	lsrs	r3, r1, #3
 8000bbc:	0948      	lsrs	r0, r1, #5
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4081      	lsls	r1, r0
 8000bc4:	4311      	orrs	r1, r2
 8000bc6:	6079      	str	r1, [r7, #4]
 8000bc8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8000bcc:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8000bd0:	3a08      	subs	r2, #8
 8000bd2:	e9c5 1202 	strd	r1, r2, [r5, #8]
 8000bd6:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8000bda:	60cd      	str	r5, [r1, #12]
 8000bdc:	4630      	mov	r0, r6
 8000bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000be2:	f7ff bec1 	b.w	8000968 <__malloc_unlock>
 8000be6:	eb0c 0203 	add.w	r2, ip, r3
 8000bea:	6852      	ldr	r2, [r2, #4]
 8000bec:	07d0      	lsls	r0, r2, #31
 8000bee:	d410      	bmi.n	8000c12 <_free_r+0xca>
 8000bf0:	4419      	add	r1, r3
 8000bf2:	f107 0008 	add.w	r0, r7, #8
 8000bf6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8000bfa:	4283      	cmp	r3, r0
 8000bfc:	d073      	beq.n	8000ce6 <_free_r+0x19e>
 8000bfe:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	6093      	str	r3, [r2, #8]
 8000c06:	f041 0301 	orr.w	r3, r1, #1
 8000c0a:	606b      	str	r3, [r5, #4]
 8000c0c:	5069      	str	r1, [r5, r1]
 8000c0e:	e7d0      	b.n	8000bb2 <_free_r+0x6a>
 8000c10:	4770      	bx	lr
 8000c12:	f041 0301 	orr.w	r3, r1, #1
 8000c16:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000c1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8000c1e:	f8cc 1000 	str.w	r1, [ip]
 8000c22:	d3c9      	bcc.n	8000bb8 <_free_r+0x70>
 8000c24:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8000c28:	ea4f 2351 	mov.w	r3, r1, lsr #9
 8000c2c:	d248      	bcs.n	8000cc0 <_free_r+0x178>
 8000c2e:	098b      	lsrs	r3, r1, #6
 8000c30:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8000c34:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8000c38:	00c3      	lsls	r3, r0, #3
 8000c3a:	18f8      	adds	r0, r7, r3
 8000c3c:	58fb      	ldr	r3, [r7, r3]
 8000c3e:	3808      	subs	r0, #8
 8000c40:	4298      	cmp	r0, r3
 8000c42:	d059      	beq.n	8000cf8 <_free_r+0x1b0>
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	f022 0203 	bic.w	r2, r2, #3
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	d902      	bls.n	8000c54 <_free_r+0x10c>
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	4298      	cmp	r0, r3
 8000c52:	d1f7      	bne.n	8000c44 <_free_r+0xfc>
 8000c54:	68d8      	ldr	r0, [r3, #12]
 8000c56:	e9c5 3002 	strd	r3, r0, [r5, #8]
 8000c5a:	6085      	str	r5, [r0, #8]
 8000c5c:	60dd      	str	r5, [r3, #12]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000c64:	f7ff be80 	b.w	8000968 <__malloc_unlock>
 8000c68:	eb0c 0203 	add.w	r2, ip, r3
 8000c6c:	6852      	ldr	r2, [r2, #4]
 8000c6e:	07d2      	lsls	r2, r2, #31
 8000c70:	d463      	bmi.n	8000d3a <_free_r+0x1f2>
 8000c72:	440b      	add	r3, r1
 8000c74:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8000c78:	60ca      	str	r2, [r1, #12]
 8000c7a:	6091      	str	r1, [r2, #8]
 8000c7c:	f043 0201 	orr.w	r2, r3, #1
 8000c80:	606a      	str	r2, [r5, #4]
 8000c82:	4630      	mov	r0, r6
 8000c84:	50eb      	str	r3, [r5, r3]
 8000c86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000c8a:	f7ff be6d 	b.w	8000968 <__malloc_unlock>
 8000c8e:	440b      	add	r3, r1
 8000c90:	07d1      	lsls	r1, r2, #31
 8000c92:	d407      	bmi.n	8000ca4 <_free_r+0x15c>
 8000c94:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8000c98:	1aad      	subs	r5, r5, r2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8000ca0:	60ca      	str	r2, [r1, #12]
 8000ca2:	6091      	str	r1, [r2, #8]
 8000ca4:	f043 0201 	orr.w	r2, r3, #1
 8000ca8:	606a      	str	r2, [r5, #4]
 8000caa:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <_free_r+0x204>)
 8000cac:	60bd      	str	r5, [r7, #8]
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d893      	bhi.n	8000bdc <_free_r+0x94>
 8000cb4:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <_free_r+0x208>)
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	6819      	ldr	r1, [r3, #0]
 8000cba:	f7ff fef5 	bl	8000aa8 <_malloc_trim_r>
 8000cbe:	e78d      	b.n	8000bdc <_free_r+0x94>
 8000cc0:	2b14      	cmp	r3, #20
 8000cc2:	d90a      	bls.n	8000cda <_free_r+0x192>
 8000cc4:	2b54      	cmp	r3, #84	; 0x54
 8000cc6:	d81f      	bhi.n	8000d08 <_free_r+0x1c0>
 8000cc8:	0b0b      	lsrs	r3, r1, #12
 8000cca:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8000cce:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8000cd2:	00c3      	lsls	r3, r0, #3
 8000cd4:	e7b1      	b.n	8000c3a <_free_r+0xf2>
 8000cd6:	4419      	add	r1, r3
 8000cd8:	e78d      	b.n	8000bf6 <_free_r+0xae>
 8000cda:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8000cde:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8000ce2:	00c3      	lsls	r3, r0, #3
 8000ce4:	e7a9      	b.n	8000c3a <_free_r+0xf2>
 8000ce6:	f041 0301 	orr.w	r3, r1, #1
 8000cea:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8000cee:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8000cf2:	606b      	str	r3, [r5, #4]
 8000cf4:	5069      	str	r1, [r5, r1]
 8000cf6:	e771      	b.n	8000bdc <_free_r+0x94>
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	1092      	asrs	r2, r2, #2
 8000cfc:	2401      	movs	r4, #1
 8000cfe:	fa04 f202 	lsl.w	r2, r4, r2
 8000d02:	430a      	orrs	r2, r1
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	e7a6      	b.n	8000c56 <_free_r+0x10e>
 8000d08:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000d0c:	d806      	bhi.n	8000d1c <_free_r+0x1d4>
 8000d0e:	0bcb      	lsrs	r3, r1, #15
 8000d10:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8000d14:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8000d18:	00c3      	lsls	r3, r0, #3
 8000d1a:	e78e      	b.n	8000c3a <_free_r+0xf2>
 8000d1c:	f240 5254 	movw	r2, #1364	; 0x554
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d806      	bhi.n	8000d32 <_free_r+0x1ea>
 8000d24:	0c8b      	lsrs	r3, r1, #18
 8000d26:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8000d2a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8000d2e:	00c3      	lsls	r3, r0, #3
 8000d30:	e783      	b.n	8000c3a <_free_r+0xf2>
 8000d32:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000d36:	227e      	movs	r2, #126	; 0x7e
 8000d38:	e77f      	b.n	8000c3a <_free_r+0xf2>
 8000d3a:	f041 0301 	orr.w	r3, r1, #1
 8000d3e:	606b      	str	r3, [r5, #4]
 8000d40:	f8cc 1000 	str.w	r1, [ip]
 8000d44:	e74a      	b.n	8000bdc <_free_r+0x94>
 8000d46:	bf00      	nop
 8000d48:	20000440 	.word	0x20000440
 8000d4c:	2000084c 	.word	0x2000084c
 8000d50:	20001714 	.word	0x20001714

08000d54 <_exit>:
 8000d54:	e7fe      	b.n	8000d54 <_exit>
 8000d56:	bf00      	nop

08000d58 <load32_littleendian>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns 32-bit unsigned integer loaded from x
**************************************************/
static uint32_t load32_littleendian(const uint8_t x[4]) {
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    uint32_t r;
    r  = (uint32_t)x[0];
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
    r |= (uint32_t)x[1] << 8;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
    r |= (uint32_t)x[2] << 16;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3302      	adds	r3, #2
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	041b      	lsls	r3, r3, #16
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
    r |= (uint32_t)x[3] << 24;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3303      	adds	r3, #3
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	061b      	lsls	r3, r3, #24
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
    return r;
 8000d90:	68fb      	ldr	r3, [r7, #12]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <load24_littleendian>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns 32-bit unsigned integer loaded from x (most significant byte is zero)
**************************************************/
static uint32_t load24_littleendian(const uint8_t x[3]) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    uint32_t r;
    r  = (uint32_t)x[0];
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
    r |= (uint32_t)x[1] << 8;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3301      	adds	r3, #1
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
    r |= (uint32_t)x[2] << 16;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	041b      	lsls	r3, r3, #16
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
    return r;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <cbd2>:
*              a centered binomial distribution with parameter eta=2
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *buf: pointer to input byte array
**************************************************/
static void cbd2(poly *r, const uint8_t buf[2 * KYBER_N / 4]) {
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b088      	sub	sp, #32
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
    unsigned int i, j;
    uint32_t t, d;
    int16_t a, b;

    for (i = 0; i < KYBER_N / 8; i++) {
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	e03d      	b.n	8000e5e <cbd2+0x8c>
        t  = load32_littleendian(buf + 4 * i);
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ffb4 	bl	8000d58 <load32_littleendian>
 8000df0:	6178      	str	r0, [r7, #20]
        d  = t & 0x55555555;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000df8:	613b      	str	r3, [r7, #16]
        d += (t >> 1) & 0x55555555;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	085b      	lsrs	r3, r3, #1
 8000dfe:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4413      	add	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]

        for (j = 0; j < 8; j++) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	e021      	b.n	8000e52 <cbd2+0x80>
            a = (d >> (4 * j + 0)) & 0x3;
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	fa22 f303 	lsr.w	r3, r2, r3
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	81fb      	strh	r3, [r7, #14]
            b = (d >> (4 * j + 2)) & 0x3;
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	81bb      	strh	r3, [r7, #12]
            r->coeffs[8 * i + j] = a - b;
 8000e34:	89fa      	ldrh	r2, [r7, #14]
 8000e36:	89bb      	ldrh	r3, [r7, #12]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	b299      	uxth	r1, r3
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	00da      	lsls	r2, r3, #3
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	441a      	add	r2, r3
 8000e44:	b209      	sxth	r1, r1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (j = 0; j < 8; j++) {
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	2b07      	cmp	r3, #7
 8000e56:	d9da      	bls.n	8000e0e <cbd2+0x3c>
    for (i = 0; i < KYBER_N / 8; i++) {
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	2b1f      	cmp	r3, #31
 8000e62:	d9be      	bls.n	8000de2 <cbd2+0x10>
        }
    }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	0000      	movs	r0, r0

08000e70 <cbd3>:
*              This function is only needed for Kyber-512
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *buf: pointer to input byte array
**************************************************/
static void cbd3(poly *r, const uint8_t buf[3 * KYBER_N / 4]) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    unsigned int i, j;
    uint32_t t, d;
    int16_t a, b;

    for (i = 0; i < KYBER_N / 4; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e04c      	b.n	8000f1a <cbd3+0xaa>
        t  = load24_littleendian(buf + 3 * i);
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff85 	bl	8000d9c <load24_littleendian>
 8000e92:	6178      	str	r0, [r7, #20]
        d  = t & 0x00249249;
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <cbd3+0xbc>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        d += (t >> 1) & 0x00249249;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	085a      	lsrs	r2, r3, #1
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <cbd3+0xbc>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        d += (t >> 2) & 0x00249249;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	089a      	lsrs	r2, r3, #2
 8000eae:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <cbd3+0xbc>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

        for (j = 0; j < 4; j++) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	e027      	b.n	8000f0e <cbd3+0x9e>
            a = (d >> (6 * j + 0)) & 0x7;
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	461a      	mov	r2, r3
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	40d3      	lsrs	r3, r2
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	81fb      	strh	r3, [r7, #14]
            b = (d >> (6 * j + 3)) & 0x7;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	3303      	adds	r3, #3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	81bb      	strh	r3, [r7, #12]
            r->coeffs[4 * i + j] = a - b;
 8000ef0:	89fa      	ldrh	r2, [r7, #14]
 8000ef2:	89bb      	ldrh	r3, [r7, #12]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	b299      	uxth	r1, r3
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	009a      	lsls	r2, r3, #2
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	441a      	add	r2, r3
 8000f00:	b209      	sxth	r1, r1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (j = 0; j < 4; j++) {
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d9d4      	bls.n	8000ebe <cbd3+0x4e>
    for (i = 0; i < KYBER_N / 4; i++) {
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	3301      	adds	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	2b3f      	cmp	r3, #63	; 0x3f
 8000f1e:	d9af      	bls.n	8000e80 <cbd3+0x10>
        }
    }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	00249249 	.word	0x00249249

08000f30 <PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1>:

void PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1(poly *r, const uint8_t buf[KYBER_ETA1 * KYBER_N / 4]) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
    cbd3(r, buf);
 8000f3a:	6839      	ldr	r1, [r7, #0]
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff97 	bl	8000e70 <cbd3>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2>:

void PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2(poly *r, const uint8_t buf[KYBER_ETA2 * KYBER_N / 4]) {
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
    cbd2(r, buf);
 8000f54:	6839      	ldr	r1, [r7, #0]
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff3b 	bl	8000dd2 <cbd2>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <load64>:
 *
 * Arguments:   - const uint8_t *x: pointer to input byte array
 *
 * Returns the loaded 64-bit unsigned integer
 **************************************************/
static uint64_t load64(const uint8_t *x) {
 8000f64:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
    uint64_t r = 0;
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	f04f 0100 	mov.w	r1, #0
 8000f76:	e9c7 0104 	strd	r0, r1, [r7, #16]
    for (size_t i = 0; i < 8; ++i) {
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	60f9      	str	r1, [r7, #12]
 8000f7e:	e022      	b.n	8000fc6 <load64+0x62>
        r |= (uint64_t)x[i] << 8 * i;
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	4401      	add	r1, r0
 8000f86:	7809      	ldrb	r1, [r1, #0]
 8000f88:	b2c9      	uxtb	r1, r1
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	460c      	mov	r4, r1
 8000f8e:	4605      	mov	r5, r0
 8000f90:	68f9      	ldr	r1, [r7, #12]
 8000f92:	00c9      	lsls	r1, r1, #3
 8000f94:	f1a1 0620 	sub.w	r6, r1, #32
 8000f98:	f1c1 0020 	rsb	r0, r1, #32
 8000f9c:	fa05 f301 	lsl.w	r3, r5, r1
 8000fa0:	fa04 f606 	lsl.w	r6, r4, r6
 8000fa4:	4333      	orrs	r3, r6
 8000fa6:	fa24 f000 	lsr.w	r0, r4, r0
 8000faa:	4303      	orrs	r3, r0
 8000fac:	fa04 f201 	lsl.w	r2, r4, r1
 8000fb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fb4:	ea40 0802 	orr.w	r8, r0, r2
 8000fb8:	ea41 0903 	orr.w	r9, r1, r3
 8000fbc:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (size_t i = 0; i < 8; ++i) {
 8000fc0:	68f9      	ldr	r1, [r7, #12]
 8000fc2:	3101      	adds	r1, #1
 8000fc4:	60f9      	str	r1, [r7, #12]
 8000fc6:	68f9      	ldr	r1, [r7, #12]
 8000fc8:	2907      	cmp	r1, #7
 8000fca:	d9d9      	bls.n	8000f80 <load64+0x1c>
    }

    return r;
 8000fcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000fdc:	4770      	bx	lr

08000fde <store64>:
 * Description: Store a 64-bit integer to a byte array in little-endian order
 *
 * Arguments:   - uint8_t *x: pointer to the output byte array
 *              - uint64_t u: input 64-bit unsigned integer
 **************************************************/
static void store64(uint8_t *x, uint64_t u) {
 8000fde:	b4f0      	push	{r4, r5, r6, r7}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	e9c7 2300 	strd	r2, r3, [r7]
    for (size_t i = 0; i < 8; ++i) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e019      	b.n	8001024 <store64+0x46>
        x[i] = (uint8_t) (u >> 8 * i);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	00d9      	lsls	r1, r3, #3
 8000ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ff8:	f1c1 0620 	rsb	r6, r1, #32
 8000ffc:	f1a1 0020 	sub.w	r0, r1, #32
 8001000:	fa22 f401 	lsr.w	r4, r2, r1
 8001004:	fa03 f606 	lsl.w	r6, r3, r6
 8001008:	4334      	orrs	r4, r6
 800100a:	fa23 f000 	lsr.w	r0, r3, r0
 800100e:	4304      	orrs	r4, r0
 8001010:	fa23 f501 	lsr.w	r5, r3, r1
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	4413      	add	r3, r2
 800101a:	b2e2      	uxtb	r2, r4
 800101c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 8; ++i) {
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2b07      	cmp	r3, #7
 8001028:	d9e2      	bls.n	8000ff0 <store64+0x12>
    }
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bcf0      	pop	{r4, r5, r6, r7}
 8001034:	4770      	bx	lr
 8001036:	0000      	movs	r0, r0

08001038 <KeccakF1600_StatePermute>:
 *
 * Description: The Keccak F1600 Permutation
 *
 * Arguments:   - uint64_t *state: pointer to input/output Keccak state
 **************************************************/
static void KeccakF1600_StatePermute(uint64_t *state) {
 8001038:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800103c:	f6ad 3d8c 	subw	sp, sp, #2956	; 0xb8c
 8001040:	af00      	add	r7, sp, #0
 8001042:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001046:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800104a:	6018      	str	r0, [r3, #0]
    uint64_t Eka, Eke, Eki, Eko, Eku;
    uint64_t Ema, Eme, Emi, Emo, Emu;
    uint64_t Esa, Ese, Esi, Eso, Esu;

    // copyFromState(A, state)
    Aba = state[0];
 800104c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001050:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800105e:	e9c1 2300 	strd	r2, r3, [r1]
    Abe = state[1];
 8001062:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001066:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001070:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8001074:	e9c1 2300 	strd	r2, r3, [r1]
    Abi = state[2];
 8001078:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800107c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001086:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800108a:	e9c1 2300 	strd	r2, r3, [r1]
    Abo = state[3];
 800108e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001092:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800109c:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 80010a0:	e9c1 2300 	strd	r2, r3, [r1]
    Abu = state[4];
 80010a4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80010a8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010b2:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 80010b6:	e9c1 2300 	strd	r2, r3, [r1]
    Aga = state[5];
 80010ba:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80010be:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80010c8:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 80010cc:	e9c1 2300 	strd	r2, r3, [r1]
    Age = state[6];
 80010d0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80010d4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80010de:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 80010e2:	e9c1 2300 	strd	r2, r3, [r1]
    Agi = state[7];
 80010e6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80010ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80010f4:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 80010f8:	e9c1 2300 	strd	r2, r3, [r1]
    Ago = state[8];
 80010fc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001100:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800110a:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800110e:	e9c1 2300 	strd	r2, r3, [r1]
    Agu = state[9];
 8001112:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001116:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001120:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8001124:	e9c1 2300 	strd	r2, r3, [r1]
    Aka = state[10];
 8001128:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800112c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001136:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800113a:	e9c1 2300 	strd	r2, r3, [r1]
    Ake = state[11];
 800113e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001142:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800114c:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8001150:	e9c1 2300 	strd	r2, r3, [r1]
    Aki = state[12];
 8001154:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001158:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001162:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8001166:	e9c1 2300 	strd	r2, r3, [r1]
    Ako = state[13];
 800116a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800116e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001178:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800117c:	e9c1 2300 	strd	r2, r3, [r1]
    Aku = state[14];
 8001180:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001184:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800118e:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8001192:	e9c1 2300 	strd	r2, r3, [r1]
    Ama = state[15];
 8001196:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800119a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80011a4:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 80011a8:	e9c1 2300 	strd	r2, r3, [r1]
    Ame = state[16];
 80011ac:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80011b0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80011ba:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 80011be:	e9c1 2300 	strd	r2, r3, [r1]
    Ami = state[17];
 80011c2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80011c6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80011d0:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]
    Amo = state[18];
 80011d8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80011dc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80011e6:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 80011ea:	e9c1 2300 	strd	r2, r3, [r1]
    Amu = state[19];
 80011ee:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80011f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80011fc:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8001200:	e9c1 2300 	strd	r2, r3, [r1]
    Asa = state[20];
 8001204:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001208:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001212:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8001216:	e9c1 2300 	strd	r2, r3, [r1]
    Ase = state[21];
 800121a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800121e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8001228:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800122c:	e9c1 2300 	strd	r2, r3, [r1]
    Asi = state[22];
 8001230:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001234:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800123e:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8001242:	e9c1 2300 	strd	r2, r3, [r1]
    Aso = state[23];
 8001246:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800124a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8001254:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8001258:	e9c1 2300 	strd	r2, r3, [r1]
    Asu = state[24];
 800125c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8001260:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 800126a:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800126e:	e9c1 2300 	strd	r2, r3, [r1]

    for (round = 0; round < NROUNDS; round += 2) {
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8001278:	f002 bf10 	b.w	800409c <KeccakF1600_StatePermute+0x3064>
        //    prepareTheta
        BCa = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
 800127c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001284:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	ea80 0c02 	eor.w	ip, r0, r2
 8001290:	f8c7 c990 	str.w	ip, [r7, #2448]	; 0x990
 8001294:	404b      	eors	r3, r1
 8001296:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 800129a:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f507 6119 	add.w	r1, r7, #2448	; 0x990
 80012a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012aa:	4684      	mov	ip, r0
 80012ac:	ea8c 0c02 	eor.w	ip, ip, r2
 80012b0:	f8c7 c988 	str.w	ip, [r7, #2440]	; 0x988
 80012b4:	404b      	eors	r3, r1
 80012b6:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 80012ba:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f607 1188 	addw	r1, r7, #2440	; 0x988
 80012c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ca:	4684      	mov	ip, r0
 80012cc:	ea8c 0c02 	eor.w	ip, ip, r2
 80012d0:	f8c7 c980 	str.w	ip, [r7, #2432]	; 0x980
 80012d4:	404b      	eors	r3, r1
 80012d6:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 80012da:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f507 6118 	add.w	r1, r7, #2432	; 0x980
 80012e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ea:	4684      	mov	ip, r0
 80012ec:	ea82 0c0c 	eor.w	ip, r2, ip
 80012f0:	f8c7 c548 	str.w	ip, [r7, #1352]	; 0x548
 80012f4:	404b      	eors	r3, r1
 80012f6:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 80012fa:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001306:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = Abe ^ Age ^ Ake ^ Ame ^ Ase;
 800130a:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800130e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001312:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	ea80 0c02 	eor.w	ip, r0, r2
 800131e:	f8c7 c978 	str.w	ip, [r7, #2424]	; 0x978
 8001322:	404b      	eors	r3, r1
 8001324:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 8001328:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f607 1178 	addw	r1, r7, #2424	; 0x978
 8001334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001338:	4684      	mov	ip, r0
 800133a:	ea8c 0c02 	eor.w	ip, ip, r2
 800133e:	f8c7 c970 	str.w	ip, [r7, #2416]	; 0x970
 8001342:	404b      	eors	r3, r1
 8001344:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8001348:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f507 6117 	add.w	r1, r7, #2416	; 0x970
 8001354:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001358:	4684      	mov	ip, r0
 800135a:	ea8c 0c02 	eor.w	ip, ip, r2
 800135e:	f8c7 c968 	str.w	ip, [r7, #2408]	; 0x968
 8001362:	404b      	eors	r3, r1
 8001364:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8001368:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f607 1168 	addw	r1, r7, #2408	; 0x968
 8001374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001378:	4684      	mov	ip, r0
 800137a:	ea82 0c0c 	eor.w	ip, r2, ip
 800137e:	f8c7 c540 	str.w	ip, [r7, #1344]	; 0x540
 8001382:	404b      	eors	r3, r1
 8001384:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8001388:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8001394:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
 8001398:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800139c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a0:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	ea80 0c02 	eor.w	ip, r0, r2
 80013ac:	f8c7 c960 	str.w	ip, [r7, #2400]	; 0x960
 80013b0:	404b      	eors	r3, r1
 80013b2:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80013b6:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f507 6116 	add.w	r1, r7, #2400	; 0x960
 80013c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013c6:	4684      	mov	ip, r0
 80013c8:	ea8c 0c02 	eor.w	ip, ip, r2
 80013cc:	f8c7 c958 	str.w	ip, [r7, #2392]	; 0x958
 80013d0:	404b      	eors	r3, r1
 80013d2:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 80013d6:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f607 1158 	addw	r1, r7, #2392	; 0x958
 80013e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013e6:	4684      	mov	ip, r0
 80013e8:	ea8c 0c02 	eor.w	ip, ip, r2
 80013ec:	f8c7 c950 	str.w	ip, [r7, #2384]	; 0x950
 80013f0:	404b      	eors	r3, r1
 80013f2:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 80013f6:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f507 6115 	add.w	r1, r7, #2384	; 0x950
 8001402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001406:	4684      	mov	ip, r0
 8001408:	ea82 0c0c 	eor.w	ip, r2, ip
 800140c:	f8c7 c538 	str.w	ip, [r7, #1336]	; 0x538
 8001410:	404b      	eors	r3, r1
 8001412:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8001416:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
 8001426:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800142a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800142e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	ea80 0c02 	eor.w	ip, r0, r2
 800143a:	f8c7 c948 	str.w	ip, [r7, #2376]	; 0x948
 800143e:	404b      	eors	r3, r1
 8001440:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 8001444:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f607 1148 	addw	r1, r7, #2376	; 0x948
 8001450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001454:	4684      	mov	ip, r0
 8001456:	ea8c 0c02 	eor.w	ip, ip, r2
 800145a:	f8c7 c940 	str.w	ip, [r7, #2368]	; 0x940
 800145e:	404b      	eors	r3, r1
 8001460:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 8001464:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8001470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001474:	4684      	mov	ip, r0
 8001476:	ea8c 0c02 	eor.w	ip, ip, r2
 800147a:	f8c7 c938 	str.w	ip, [r7, #2360]	; 0x938
 800147e:	404b      	eors	r3, r1
 8001480:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 8001484:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8001490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001494:	4684      	mov	ip, r0
 8001496:	ea82 0c0c 	eor.w	ip, r2, ip
 800149a:	f8c7 c530 	str.w	ip, [r7, #1328]	; 0x530
 800149e:	404b      	eors	r3, r1
 80014a0:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 80014a4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80014b0:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
 80014b4:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80014b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014bc:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	ea80 0c02 	eor.w	ip, r0, r2
 80014c8:	f8c7 c930 	str.w	ip, [r7, #2352]	; 0x930
 80014cc:	404b      	eors	r3, r1
 80014ce:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 80014d2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80014de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014e2:	4684      	mov	ip, r0
 80014e4:	ea8c 0c02 	eor.w	ip, ip, r2
 80014e8:	f8c7 c928 	str.w	ip, [r7, #2344]	; 0x928
 80014ec:	404b      	eors	r3, r1
 80014ee:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 80014f2:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f607 1128 	addw	r1, r7, #2344	; 0x928
 80014fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001502:	4684      	mov	ip, r0
 8001504:	ea8c 0c02 	eor.w	ip, ip, r2
 8001508:	f8c7 c920 	str.w	ip, [r7, #2336]	; 0x920
 800150c:	404b      	eors	r3, r1
 800150e:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 8001512:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 800151e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001522:	4684      	mov	ip, r0
 8001524:	ea82 0c0c 	eor.w	ip, r2, ip
 8001528:	f8c7 c528 	str.w	ip, [r7, #1320]	; 0x528
 800152c:	404b      	eors	r3, r1
 800152e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8001532:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800153e:	e9c1 2300 	strd	r2, r3, [r1]

        // thetaRhoPiChiIotaPrepareTheta(round  , A, E)
        Da = BCu ^ ROL(BCe, 1);
 8001542:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8001546:	0fda      	lsrs	r2, r3, #31
 8001548:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4313      	orrs	r3, r2
 8001550:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8001554:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8001558:	0fda      	lsrs	r2, r3, #31
 800155a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4313      	orrs	r3, r2
 8001562:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 8001566:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f607 1118 	addw	r1, r7, #2328	; 0x918
 8001572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001576:	4684      	mov	ip, r0
 8001578:	ea82 0c0c 	eor.w	ip, r2, ip
 800157c:	f8c7 c520 	str.w	ip, [r7, #1312]	; 0x520
 8001580:	404b      	eors	r3, r1
 8001582:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8001586:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 8001592:	e9c1 2300 	strd	r2, r3, [r1]
        De = BCa ^ ROL(BCi, 1);
 8001596:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800159a:	0fda      	lsrs	r2, r3, #31
 800159c:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4313      	orrs	r3, r2
 80015a4:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 80015a8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80015ac:	0fda      	lsrs	r2, r3, #31
 80015ae:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4313      	orrs	r3, r2
 80015b6:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 80015ba:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f507 6111 	add.w	r1, r7, #2320	; 0x910
 80015c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015ca:	4684      	mov	ip, r0
 80015cc:	ea82 0c0c 	eor.w	ip, r2, ip
 80015d0:	f8c7 c518 	str.w	ip, [r7, #1304]	; 0x518
 80015d4:	404b      	eors	r3, r1
 80015d6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80015da:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 80015e6:	e9c1 2300 	strd	r2, r3, [r1]
        Di = BCe ^ ROL(BCo, 1);
 80015ea:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 80015ee:	0fda      	lsrs	r2, r3, #31
 80015f0:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4313      	orrs	r3, r2
 80015f8:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 80015fc:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8001600:	0fda      	lsrs	r2, r3, #31
 8001602:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4313      	orrs	r3, r2
 800160a:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 800160e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f607 1108 	addw	r1, r7, #2312	; 0x908
 800161a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800161e:	4684      	mov	ip, r0
 8001620:	ea82 0c0c 	eor.w	ip, r2, ip
 8001624:	f8c7 c510 	str.w	ip, [r7, #1296]	; 0x510
 8001628:	404b      	eors	r3, r1
 800162a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800162e:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 800163a:	e9c1 2300 	strd	r2, r3, [r1]
        Do = BCi ^ ROL(BCu, 1);
 800163e:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8001642:	0fda      	lsrs	r2, r3, #31
 8001644:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4313      	orrs	r3, r2
 800164c:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 8001650:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8001654:	0fda      	lsrs	r2, r3, #31
 8001656:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4313      	orrs	r3, r2
 800165e:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 8001662:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800166e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001672:	4684      	mov	ip, r0
 8001674:	ea82 0c0c 	eor.w	ip, r2, ip
 8001678:	f8c7 c508 	str.w	ip, [r7, #1288]	; 0x508
 800167c:	404b      	eors	r3, r1
 800167e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8001682:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 800168e:	e9c1 2300 	strd	r2, r3, [r1]
        Du = BCo ^ ROL(BCa, 1);
 8001692:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8001696:	0fda      	lsrs	r2, r3, #31
 8001698:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4313      	orrs	r3, r2
 80016a0:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 80016a4:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80016a8:	0fda      	lsrs	r2, r3, #31
 80016aa:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4313      	orrs	r3, r2
 80016b2:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 80016b6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f607 01f8 	addw	r1, r7, #2296	; 0x8f8
 80016c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016c6:	4684      	mov	ip, r0
 80016c8:	ea82 0c0c 	eor.w	ip, r2, ip
 80016cc:	f8c7 c500 	str.w	ip, [r7, #1280]	; 0x500
 80016d0:	404b      	eors	r3, r1
 80016d2:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 80016d6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 80016e2:	e9c1 2300 	strd	r2, r3, [r1]

        Aba ^= Da;
 80016e6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80016ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ee:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	ea80 0c02 	eor.w	ip, r0, r2
 80016fa:	f8c7 c4f8 	str.w	ip, [r7, #1272]	; 0x4f8
 80016fe:	404b      	eors	r3, r1
 8001700:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8001704:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8001710:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = Aba;
 8001714:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001720:	e9c1 2300 	strd	r2, r3, [r1]
        Age ^= De;
 8001724:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8001728:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	ea80 0c02 	eor.w	ip, r0, r2
 8001738:	f8c7 c4f0 	str.w	ip, [r7, #1264]	; 0x4f0
 800173c:	404b      	eors	r3, r1
 800173e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8001742:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800174e:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Age, 44);
 8001752:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8001756:	031a      	lsls	r2, r3, #12
 8001758:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800175c:	0d1b      	lsrs	r3, r3, #20
 800175e:	4313      	orrs	r3, r2
 8001760:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8001764:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8001768:	031a      	lsls	r2, r3, #12
 800176a:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800176e:	0d1b      	lsrs	r3, r3, #20
 8001770:	4313      	orrs	r3, r2
 8001772:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8001776:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8001782:	e9c1 2300 	strd	r2, r3, [r1]
        Aki ^= Di;
 8001786:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800178a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800178e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	ea80 0c02 	eor.w	ip, r0, r2
 800179a:	f8c7 c4e0 	str.w	ip, [r7, #1248]	; 0x4e0
 800179e:	404b      	eors	r3, r1
 80017a0:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 80017a4:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 80017b0:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aki, 43);
 80017b4:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80017b8:	02da      	lsls	r2, r3, #11
 80017ba:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 80017be:	0d5b      	lsrs	r3, r3, #21
 80017c0:	4313      	orrs	r3, r2
 80017c2:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 80017c6:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 80017ca:	02da      	lsls	r2, r3, #11
 80017cc:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80017d0:	0d5b      	lsrs	r3, r3, #21
 80017d2:	4313      	orrs	r3, r2
 80017d4:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 80017d8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80017e4:	e9c1 2300 	strd	r2, r3, [r1]
        Amo ^= Do;
 80017e8:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80017ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f0:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	ea80 0c02 	eor.w	ip, r0, r2
 80017fc:	f8c7 c4d0 	str.w	ip, [r7, #1232]	; 0x4d0
 8001800:	404b      	eors	r3, r1
 8001802:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8001806:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8001812:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Amo, 21);
 8001816:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800181a:	0ada      	lsrs	r2, r3, #11
 800181c:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 8001820:	055b      	lsls	r3, r3, #21
 8001822:	4313      	orrs	r3, r2
 8001824:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8001828:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800182c:	0ada      	lsrs	r2, r3, #11
 800182e:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 8001832:	055b      	lsls	r3, r3, #21
 8001834:	4313      	orrs	r3, r2
 8001836:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800183a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8001846:	e9c1 2300 	strd	r2, r3, [r1]
        Asu ^= Du;
 800184a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800184e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001852:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	ea80 0c02 	eor.w	ip, r0, r2
 800185e:	f8c7 c4c0 	str.w	ip, [r7, #1216]	; 0x4c0
 8001862:	404b      	eors	r3, r1
 8001864:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8001868:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8001874:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asu, 14);
 8001878:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800187c:	0c9a      	lsrs	r2, r3, #18
 800187e:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 8001882:	039b      	lsls	r3, r3, #14
 8001884:	4313      	orrs	r3, r2
 8001886:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800188a:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800188e:	0c9a      	lsrs	r2, r3, #18
 8001890:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 8001894:	039b      	lsls	r3, r3, #14
 8001896:	4313      	orrs	r3, r2
 8001898:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800189c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80018a8:	e9c1 2300 	strd	r2, r3, [r1]
        Eba = BCa ^ ((~BCe) & BCi);
 80018ac:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	43d1      	mvns	r1, r2
 80018b6:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 80018ba:	43db      	mvns	r3, r3
 80018bc:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 80018c0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 80018cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018d0:	4684      	mov	ip, r0
 80018d2:	ea0c 0c02 	and.w	ip, ip, r2
 80018d6:	f8c7 c8e8 	str.w	ip, [r7, #2280]	; 0x8e8
 80018da:	400b      	ands	r3, r1
 80018dc:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 80018e0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 80018ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018f0:	4684      	mov	ip, r0
 80018f2:	ea82 0c0c 	eor.w	ip, r2, ip
 80018f6:	f8c7 c4b0 	str.w	ip, [r7, #1200]	; 0x4b0
 80018fa:	404b      	eors	r3, r1
 80018fc:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 8001900:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800190c:	e9c1 2300 	strd	r2, r3, [r1]
        Eba ^= KeccakF_RoundConstants[round];
 8001910:	4ac7      	ldr	r2, [pc, #796]	; (8001c30 <KeccakF1600_StatePermute+0xbf8>)
 8001912:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800191e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	ea82 0c00 	eor.w	ip, r2, r0
 800192a:	f8c7 c4a8 	str.w	ip, [r7, #1192]	; 0x4a8
 800192e:	404b      	eors	r3, r1
 8001930:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8001934:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 8001940:	e9c1 2300 	strd	r2, r3, [r1]
        Ebe = BCe ^ ((~BCi) & BCo);
 8001944:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	43d1      	mvns	r1, r2
 800194e:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 8001952:	43db      	mvns	r3, r3
 8001954:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 8001958:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	f507 610e 	add.w	r1, r7, #2272	; 0x8e0
 8001964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001968:	4684      	mov	ip, r0
 800196a:	ea0c 0c02 	and.w	ip, ip, r2
 800196e:	f8c7 c8d8 	str.w	ip, [r7, #2264]	; 0x8d8
 8001972:	400b      	ands	r3, r1
 8001974:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 8001978:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 8001984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001988:	4684      	mov	ip, r0
 800198a:	ea82 0c0c 	eor.w	ip, r2, ip
 800198e:	f8c7 c4a0 	str.w	ip, [r7, #1184]	; 0x4a0
 8001992:	404b      	eors	r3, r1
 8001994:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8001998:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 80019a4:	e9c1 2300 	strd	r2, r3, [r1]
        Ebi = BCi ^ ((~BCo) & BCu);
 80019a8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	43d1      	mvns	r1, r2
 80019b2:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 80019b6:	43db      	mvns	r3, r3
 80019b8:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 80019bc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f507 610d 	add.w	r1, r7, #2256	; 0x8d0
 80019c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019cc:	4684      	mov	ip, r0
 80019ce:	ea0c 0c02 	and.w	ip, ip, r2
 80019d2:	f8c7 c8c8 	str.w	ip, [r7, #2248]	; 0x8c8
 80019d6:	400b      	ands	r3, r1
 80019d8:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 80019dc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 80019e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019ec:	4684      	mov	ip, r0
 80019ee:	ea82 0c0c 	eor.w	ip, r2, ip
 80019f2:	f8c7 c498 	str.w	ip, [r7, #1176]	; 0x498
 80019f6:	404b      	eors	r3, r1
 80019f8:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 80019fc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8001a08:	e9c1 2300 	strd	r2, r3, [r1]
        Ebo = BCo ^ ((~BCu) & BCa);
 8001a0c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	43d1      	mvns	r1, r2
 8001a16:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8001a20:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f507 610c 	add.w	r1, r7, #2240	; 0x8c0
 8001a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a30:	4684      	mov	ip, r0
 8001a32:	ea0c 0c02 	and.w	ip, ip, r2
 8001a36:	f8c7 c8b8 	str.w	ip, [r7, #2232]	; 0x8b8
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8001a40:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	f607 01b8 	addw	r1, r7, #2232	; 0x8b8
 8001a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a50:	4684      	mov	ip, r0
 8001a52:	ea82 0c0c 	eor.w	ip, r2, ip
 8001a56:	f8c7 c490 	str.w	ip, [r7, #1168]	; 0x490
 8001a5a:	404b      	eors	r3, r1
 8001a5c:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8001a60:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8001a6c:	e9c1 2300 	strd	r2, r3, [r1]
        Ebu = BCu ^ ((~BCa) & BCe);
 8001a70:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	43d1      	mvns	r1, r2
 8001a7a:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 8001a84:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8001a90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a94:	4684      	mov	ip, r0
 8001a96:	ea0c 0c02 	and.w	ip, ip, r2
 8001a9a:	f8c7 c8a8 	str.w	ip, [r7, #2216]	; 0x8a8
 8001a9e:	400b      	ands	r3, r1
 8001aa0:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 8001aa4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 8001ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ab4:	4684      	mov	ip, r0
 8001ab6:	ea82 0c0c 	eor.w	ip, r2, ip
 8001aba:	f8c7 c488 	str.w	ip, [r7, #1160]	; 0x488
 8001abe:	404b      	eors	r3, r1
 8001ac0:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 8001ac4:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 8001ad0:	e9c1 2300 	strd	r2, r3, [r1]

        Abo ^= Do;
 8001ad4:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8001ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001adc:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	ea80 0c02 	eor.w	ip, r0, r2
 8001ae8:	f8c7 c480 	str.w	ip, [r7, #1152]	; 0x480
 8001aec:	404b      	eors	r3, r1
 8001aee:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 8001af2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8001afe:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abo, 28);
 8001b02:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001b06:	091a      	lsrs	r2, r3, #4
 8001b08:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8001b0c:	071b      	lsls	r3, r3, #28
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8001b14:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8001b18:	091a      	lsrs	r2, r3, #4
 8001b1a:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001b1e:	071b      	lsls	r3, r3, #28
 8001b20:	4313      	orrs	r3, r2
 8001b22:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8001b26:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001b32:	e9c1 2300 	strd	r2, r3, [r1]
        Agu ^= Du;
 8001b36:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b3e:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	ea80 0c02 	eor.w	ip, r0, r2
 8001b4a:	f8c7 c470 	str.w	ip, [r7, #1136]	; 0x470
 8001b4e:	404b      	eors	r3, r1
 8001b50:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8001b54:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8001b60:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Agu, 20);
 8001b64:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 8001b68:	0b1a      	lsrs	r2, r3, #12
 8001b6a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8001b6e:	051b      	lsls	r3, r3, #20
 8001b70:	4313      	orrs	r3, r2
 8001b72:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8001b76:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8001b7a:	0b1a      	lsrs	r2, r3, #12
 8001b7c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 8001b80:	051b      	lsls	r3, r3, #20
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8001b88:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8001b94:	e9c1 2300 	strd	r2, r3, [r1]
        Aka ^= Da;
 8001b98:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8001b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ba0:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	ea80 0c02 	eor.w	ip, r0, r2
 8001bac:	f8c7 c460 	str.w	ip, [r7, #1120]	; 0x460
 8001bb0:	404b      	eors	r3, r1
 8001bb2:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 8001bb6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8001bc2:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aka, 3);
 8001bc6:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 8001bca:	0f5a      	lsrs	r2, r3, #29
 8001bcc:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8001bd8:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 8001bdc:	0f5a      	lsrs	r2, r3, #29
 8001bde:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8001bea:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001bf6:	e9c1 2300 	strd	r2, r3, [r1]
        Ame ^= De;
 8001bfa:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8001bfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c02:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	ea80 0c02 	eor.w	ip, r0, r2
 8001c0e:	f8c7 c450 	str.w	ip, [r7, #1104]	; 0x450
 8001c12:	404b      	eors	r3, r1
 8001c14:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001c18:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8001c24:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ame, 45);
 8001c28:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8001c2c:	035a      	lsls	r2, r3, #13
 8001c2e:	e001      	b.n	8001c34 <KeccakF1600_StatePermute+0xbfc>
 8001c30:	080085c0 	.word	0x080085c0
 8001c34:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8001c38:	0cdb      	lsrs	r3, r3, #19
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8001c40:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8001c44:	035a      	lsls	r2, r3, #13
 8001c46:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8001c4a:	0cdb      	lsrs	r3, r3, #19
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8001c52:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8001c5e:	e9c1 2300 	strd	r2, r3, [r1]
        Asi ^= Di;
 8001c62:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8001c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c6a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	ea80 0c02 	eor.w	ip, r0, r2
 8001c76:	f8c7 c440 	str.w	ip, [r7, #1088]	; 0x440
 8001c7a:	404b      	eors	r3, r1
 8001c7c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8001c80:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8001c8c:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asi, 61);
 8001c90:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8001c94:	075a      	lsls	r2, r3, #29
 8001c96:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8001ca2:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8001ca6:	075a      	lsls	r2, r3, #29
 8001ca8:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8001cac:	08db      	lsrs	r3, r3, #3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8001cb4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8001cc0:	e9c1 2300 	strd	r2, r3, [r1]
        Ega = BCa ^ ((~BCe) & BCi);
 8001cc4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	43d1      	mvns	r1, r2
 8001cce:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 8001cd8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8001ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ce8:	4684      	mov	ip, r0
 8001cea:	ea0c 0c02 	and.w	ip, ip, r2
 8001cee:	f8c7 c898 	str.w	ip, [r7, #2200]	; 0x898
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 8001cf8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f607 0198 	addw	r1, r7, #2200	; 0x898
 8001d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d08:	4684      	mov	ip, r0
 8001d0a:	ea82 0c0c 	eor.w	ip, r2, ip
 8001d0e:	f8c7 c430 	str.w	ip, [r7, #1072]	; 0x430
 8001d12:	404b      	eors	r3, r1
 8001d14:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001d18:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8001d24:	e9c1 2300 	strd	r2, r3, [r1]
        Ege = BCe ^ ((~BCi) & BCo);
 8001d28:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	43d1      	mvns	r1, r2
 8001d32:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 8001d36:	43db      	mvns	r3, r3
 8001d38:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 8001d3c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8001d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d4c:	4684      	mov	ip, r0
 8001d4e:	ea0c 0c02 	and.w	ip, ip, r2
 8001d52:	f8c7 c888 	str.w	ip, [r7, #2184]	; 0x888
 8001d56:	400b      	ands	r3, r1
 8001d58:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 8001d5c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f607 0188 	addw	r1, r7, #2184	; 0x888
 8001d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d6c:	4684      	mov	ip, r0
 8001d6e:	ea82 0c0c 	eor.w	ip, r2, ip
 8001d72:	f8c7 c428 	str.w	ip, [r7, #1064]	; 0x428
 8001d76:	404b      	eors	r3, r1
 8001d78:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8001d7c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8001d88:	e9c1 2300 	strd	r2, r3, [r1]
        Egi = BCi ^ ((~BCo) & BCu);
 8001d8c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	43d1      	mvns	r1, r2
 8001d96:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 8001da0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8001dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001db0:	4684      	mov	ip, r0
 8001db2:	ea0c 0c02 	and.w	ip, ip, r2
 8001db6:	f8c7 c878 	str.w	ip, [r7, #2168]	; 0x878
 8001dba:	400b      	ands	r3, r1
 8001dbc:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 8001dc0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f607 0178 	addw	r1, r7, #2168	; 0x878
 8001dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dd0:	4684      	mov	ip, r0
 8001dd2:	ea82 0c0c 	eor.w	ip, r2, ip
 8001dd6:	f8c7 c420 	str.w	ip, [r7, #1056]	; 0x420
 8001dda:	404b      	eors	r3, r1
 8001ddc:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001de0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8001dec:	e9c1 2300 	strd	r2, r3, [r1]
        Ego = BCo ^ ((~BCu) & BCa);
 8001df0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	43d1      	mvns	r1, r2
 8001dfa:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 8001e04:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 8001e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e14:	4684      	mov	ip, r0
 8001e16:	ea0c 0c02 	and.w	ip, ip, r2
 8001e1a:	f8c7 c868 	str.w	ip, [r7, #2152]	; 0x868
 8001e1e:	400b      	ands	r3, r1
 8001e20:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8001e24:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f607 0168 	addw	r1, r7, #2152	; 0x868
 8001e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e34:	4684      	mov	ip, r0
 8001e36:	ea82 0c0c 	eor.w	ip, r2, ip
 8001e3a:	f8c7 c418 	str.w	ip, [r7, #1048]	; 0x418
 8001e3e:	404b      	eors	r3, r1
 8001e40:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001e44:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 8001e50:	e9c1 2300 	strd	r2, r3, [r1]
        Egu = BCu ^ ((~BCa) & BCe);
 8001e54:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	43d1      	mvns	r1, r2
 8001e5e:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 8001e62:	43db      	mvns	r3, r3
 8001e64:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 8001e68:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 8001e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e78:	4684      	mov	ip, r0
 8001e7a:	ea0c 0c02 	and.w	ip, ip, r2
 8001e7e:	f8c7 c858 	str.w	ip, [r7, #2136]	; 0x858
 8001e82:	400b      	ands	r3, r1
 8001e84:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 8001e88:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f607 0158 	addw	r1, r7, #2136	; 0x858
 8001e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e98:	4684      	mov	ip, r0
 8001e9a:	ea82 0c0c 	eor.w	ip, r2, ip
 8001e9e:	f8c7 c410 	str.w	ip, [r7, #1040]	; 0x410
 8001ea2:	404b      	eors	r3, r1
 8001ea4:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001ea8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8001eb4:	e9c1 2300 	strd	r2, r3, [r1]

        Abe ^= De;
 8001eb8:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8001ebc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	ea80 0c02 	eor.w	ip, r0, r2
 8001ecc:	f8c7 c408 	str.w	ip, [r7, #1032]	; 0x408
 8001ed0:	404b      	eors	r3, r1
 8001ed2:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001ed6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8001ee2:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abe, 1);
 8001ee6:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 8001eea:	0fda      	lsrs	r2, r3, #31
 8001eec:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8001ef8:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 8001efc:	0fda      	lsrs	r2, r3, #31
 8001efe:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8001f0a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001f16:	e9c1 2300 	strd	r2, r3, [r1]
        Agi ^= Di;
 8001f1a:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8001f1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f22:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	ea80 0c02 	eor.w	ip, r0, r2
 8001f2e:	f8c7 c3f8 	str.w	ip, [r7, #1016]	; 0x3f8
 8001f32:	404b      	eors	r3, r1
 8001f34:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8001f38:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8001f3c:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8001f40:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Agi, 6);
 8001f44:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 8001f48:	0e9a      	lsrs	r2, r3, #26
 8001f4a:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 8001f4e:	019b      	lsls	r3, r3, #6
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8001f56:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 8001f5a:	0e9a      	lsrs	r2, r3, #26
 8001f5c:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8001f68:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8001f6c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8001f70:	e9c1 2300 	strd	r2, r3, [r1]
        Ako ^= Do;
 8001f74:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8001f78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f7c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f84:	ea80 0c02 	eor.w	ip, r0, r2
 8001f88:	f8c7 c3e8 	str.w	ip, [r7, #1000]	; 0x3e8
 8001f8c:	404b      	eors	r3, r1
 8001f8e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8001f92:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 8001f96:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8001f9a:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Ako, 25);
 8001f9e:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8001fa2:	09da      	lsrs	r2, r3, #7
 8001fa4:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8001fa8:	065b      	lsls	r3, r3, #25
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8001fb0:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8001fb4:	09da      	lsrs	r2, r3, #7
 8001fb6:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8001fba:	065b      	lsls	r3, r3, #25
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8001fc2:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8001fc6:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001fca:	e9c1 2300 	strd	r2, r3, [r1]
        Amu ^= Du;
 8001fce:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8001fd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd6:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	ea80 0c02 	eor.w	ip, r0, r2
 8001fe2:	f8c7 c3d8 	str.w	ip, [r7, #984]	; 0x3d8
 8001fe6:	404b      	eors	r3, r1
 8001fe8:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8001fec:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 8001ff0:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8001ff4:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Amu, 8);
 8001ff8:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 8001ffc:	0e1a      	lsrs	r2, r3, #24
 8001ffe:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800200a:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800200e:	0e1a      	lsrs	r2, r3, #24
 8002010:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800201c:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8002020:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002024:	e9c1 2300 	strd	r2, r3, [r1]
        Asa ^= Da;
 8002028:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800202c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002030:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	ea80 0c02 	eor.w	ip, r0, r2
 800203c:	f8c7 c3c8 	str.w	ip, [r7, #968]	; 0x3c8
 8002040:	404b      	eors	r3, r1
 8002042:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8002046:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800204a:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800204e:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asa, 18);
 8002052:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 8002056:	0b9a      	lsrs	r2, r3, #14
 8002058:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800205c:	049b      	lsls	r3, r3, #18
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8002064:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 8002068:	0b9a      	lsrs	r2, r3, #14
 800206a:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800206e:	049b      	lsls	r3, r3, #18
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8002076:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800207a:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800207e:	e9c1 2300 	strd	r2, r3, [r1]
        Eka = BCa ^ ((~BCe) & BCi);
 8002082:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	43d1      	mvns	r1, r2
 800208c:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 8002090:	43db      	mvns	r3, r3
 8002092:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8002096:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 80020a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020a6:	4684      	mov	ip, r0
 80020a8:	ea0c 0c02 	and.w	ip, ip, r2
 80020ac:	f8c7 c848 	str.w	ip, [r7, #2120]	; 0x848
 80020b0:	400b      	ands	r3, r1
 80020b2:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 80020b6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020be:	f607 0148 	addw	r1, r7, #2120	; 0x848
 80020c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020c6:	4684      	mov	ip, r0
 80020c8:	ea82 0c0c 	eor.w	ip, r2, ip
 80020cc:	f8c7 c3b8 	str.w	ip, [r7, #952]	; 0x3b8
 80020d0:	404b      	eors	r3, r1
 80020d2:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80020d6:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80020da:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 80020de:	e9c1 2300 	strd	r2, r3, [r1]
        Eke = BCe ^ ((~BCi) & BCo);
 80020e2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	43d1      	mvns	r1, r2
 80020ec:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 80020f0:	43db      	mvns	r3, r3
 80020f2:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 80020f6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f507 6104 	add.w	r1, r7, #2112	; 0x840
 8002102:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002106:	4684      	mov	ip, r0
 8002108:	ea0c 0c02 	and.w	ip, ip, r2
 800210c:	f8c7 c838 	str.w	ip, [r7, #2104]	; 0x838
 8002110:	400b      	ands	r3, r1
 8002112:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8002116:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f607 0138 	addw	r1, r7, #2104	; 0x838
 8002122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002126:	4684      	mov	ip, r0
 8002128:	ea82 0c0c 	eor.w	ip, r2, ip
 800212c:	f8c7 c3b0 	str.w	ip, [r7, #944]	; 0x3b0
 8002130:	404b      	eors	r3, r1
 8002132:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8002136:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800213a:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800213e:	e9c1 2300 	strd	r2, r3, [r1]
        Eki = BCi ^ ((~BCo) & BCu);
 8002142:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	43d1      	mvns	r1, r2
 800214c:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 8002150:	43db      	mvns	r3, r3
 8002152:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8002156:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	f507 6103 	add.w	r1, r7, #2096	; 0x830
 8002162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002166:	4684      	mov	ip, r0
 8002168:	ea0c 0c02 	and.w	ip, ip, r2
 800216c:	f8c7 c828 	str.w	ip, [r7, #2088]	; 0x828
 8002170:	400b      	ands	r3, r1
 8002172:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8002176:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f607 0128 	addw	r1, r7, #2088	; 0x828
 8002182:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002186:	4684      	mov	ip, r0
 8002188:	ea82 0c0c 	eor.w	ip, r2, ip
 800218c:	f8c7 c3a8 	str.w	ip, [r7, #936]	; 0x3a8
 8002190:	404b      	eors	r3, r1
 8002192:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8002196:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800219a:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800219e:	e9c1 2300 	strd	r2, r3, [r1]
        Eko = BCo ^ ((~BCu) & BCa);
 80021a2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	43d1      	mvns	r1, r2
 80021ac:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 80021b0:	43db      	mvns	r3, r3
 80021b2:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 80021b6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 80021c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021c6:	4684      	mov	ip, r0
 80021c8:	ea0c 0c02 	and.w	ip, ip, r2
 80021cc:	f8c7 c818 	str.w	ip, [r7, #2072]	; 0x818
 80021d0:	400b      	ands	r3, r1
 80021d2:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 80021d6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80021e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021e6:	4684      	mov	ip, r0
 80021e8:	ea82 0c0c 	eor.w	ip, r2, ip
 80021ec:	f8c7 c3a0 	str.w	ip, [r7, #928]	; 0x3a0
 80021f0:	404b      	eors	r3, r1
 80021f2:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80021f6:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 80021fa:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 80021fe:	e9c1 2300 	strd	r2, r3, [r1]
        Eku = BCu ^ ((~BCa) & BCe);
 8002202:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	43d1      	mvns	r1, r2
 800220c:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 8002210:	43db      	mvns	r3, r3
 8002212:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8002216:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8002222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002226:	4684      	mov	ip, r0
 8002228:	ea0c 0c02 	and.w	ip, ip, r2
 800222c:	f8c7 c808 	str.w	ip, [r7, #2056]	; 0x808
 8002230:	400b      	ands	r3, r1
 8002232:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002236:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8002242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002246:	4684      	mov	ip, r0
 8002248:	ea82 0c0c 	eor.w	ip, r2, ip
 800224c:	f8c7 c398 	str.w	ip, [r7, #920]	; 0x398
 8002250:	404b      	eors	r3, r1
 8002252:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8002256:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 800225a:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800225e:	e9c1 2300 	strd	r2, r3, [r1]

        Abu ^= Du;
 8002262:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8002266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800226a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	ea80 0c02 	eor.w	ip, r0, r2
 8002276:	f8c7 c390 	str.w	ip, [r7, #912]	; 0x390
 800227a:	404b      	eors	r3, r1
 800227c:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8002280:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 8002284:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8002288:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abu, 27);
 800228c:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 8002290:	095a      	lsrs	r2, r3, #5
 8002292:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 8002296:	06db      	lsls	r3, r3, #27
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800229e:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 80022a2:	095a      	lsrs	r2, r3, #5
 80022a4:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 80022a8:	06db      	lsls	r3, r3, #27
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 80022b0:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 80022b4:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80022b8:	e9c1 2300 	strd	r2, r3, [r1]
        Aga ^= Da;
 80022bc:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80022c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022c4:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	ea80 0c02 	eor.w	ip, r0, r2
 80022d0:	f8c7 c380 	str.w	ip, [r7, #896]	; 0x380
 80022d4:	404b      	eors	r3, r1
 80022d6:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 80022da:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 80022de:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 80022e2:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Aga, 36);
 80022e6:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 80022ea:	011a      	lsls	r2, r3, #4
 80022ec:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 80022f0:	0f1b      	lsrs	r3, r3, #28
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80022f8:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 80022fc:	011a      	lsls	r2, r3, #4
 80022fe:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8002302:	0f1b      	lsrs	r3, r3, #28
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800230a:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 800230e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002312:	e9c1 2300 	strd	r2, r3, [r1]
        Ake ^= De;
 8002316:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800231a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800231e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	ea80 0c02 	eor.w	ip, r0, r2
 800232a:	f8c7 c370 	str.w	ip, [r7, #880]	; 0x370
 800232e:	404b      	eors	r3, r1
 8002330:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8002334:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8002338:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800233c:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Ake, 10);
 8002340:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8002344:	0d9a      	lsrs	r2, r3, #22
 8002346:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002352:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8002356:	0d9a      	lsrs	r2, r3, #22
 8002358:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800235c:	029b      	lsls	r3, r3, #10
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8002364:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8002368:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800236c:	e9c1 2300 	strd	r2, r3, [r1]
        Ami ^= Di;
 8002370:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8002374:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002378:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	ea80 0c02 	eor.w	ip, r0, r2
 8002384:	f8c7 c360 	str.w	ip, [r7, #864]	; 0x360
 8002388:	404b      	eors	r3, r1
 800238a:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800238e:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8002392:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8002396:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ami, 15);
 800239a:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 800239e:	0c5a      	lsrs	r2, r3, #17
 80023a0:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 80023a4:	03db      	lsls	r3, r3, #15
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80023ac:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 80023b0:	0c5a      	lsrs	r2, r3, #17
 80023b2:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 80023b6:	03db      	lsls	r3, r3, #15
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 80023be:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 80023c2:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80023c6:	e9c1 2300 	strd	r2, r3, [r1]
        Aso ^= Do;
 80023ca:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80023ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d2:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80023d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023da:	ea80 0c02 	eor.w	ip, r0, r2
 80023de:	f8c7 c350 	str.w	ip, [r7, #848]	; 0x350
 80023e2:	404b      	eors	r3, r1
 80023e4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80023e8:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 80023ec:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 80023f0:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Aso, 56);
 80023f4:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 80023f8:	061a      	lsls	r2, r3, #24
 80023fa:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8002406:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800240a:	061a      	lsls	r2, r3, #24
 800240c:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8002418:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 800241c:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002420:	e9c1 2300 	strd	r2, r3, [r1]
        Ema = BCa ^ ((~BCe) & BCi);
 8002424:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	43d1      	mvns	r1, r2
 800242e:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 8002432:	43db      	mvns	r3, r3
 8002434:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8002438:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 8002444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002448:	4684      	mov	ip, r0
 800244a:	ea0c 0c02 	and.w	ip, ip, r2
 800244e:	f8c7 c7f8 	str.w	ip, [r7, #2040]	; 0x7f8
 8002452:	400b      	ands	r3, r1
 8002454:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8002458:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f507 61ff 	add.w	r1, r7, #2040	; 0x7f8
 8002464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002468:	4684      	mov	ip, r0
 800246a:	ea82 0c0c 	eor.w	ip, r2, ip
 800246e:	f8c7 c340 	str.w	ip, [r7, #832]	; 0x340
 8002472:	404b      	eors	r3, r1
 8002474:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8002478:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 800247c:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8002480:	e9c1 2300 	strd	r2, r3, [r1]
        Eme = BCe ^ ((~BCi) & BCo);
 8002484:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	43d1      	mvns	r1, r2
 800248e:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 8002492:	43db      	mvns	r3, r3
 8002494:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8002498:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 80024a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024a8:	4684      	mov	ip, r0
 80024aa:	ea0c 0c02 	and.w	ip, ip, r2
 80024ae:	f8c7 c7e8 	str.w	ip, [r7, #2024]	; 0x7e8
 80024b2:	400b      	ands	r3, r1
 80024b4:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 80024b8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c0:	f507 61fd 	add.w	r1, r7, #2024	; 0x7e8
 80024c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024c8:	4684      	mov	ip, r0
 80024ca:	ea82 0c0c 	eor.w	ip, r2, ip
 80024ce:	f8c7 c338 	str.w	ip, [r7, #824]	; 0x338
 80024d2:	404b      	eors	r3, r1
 80024d4:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80024d8:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 80024dc:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 80024e0:	e9c1 2300 	strd	r2, r3, [r1]
        Emi = BCi ^ ((~BCo) & BCu);
 80024e4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	43d1      	mvns	r1, r2
 80024ee:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 80024f2:	43db      	mvns	r3, r3
 80024f4:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 80024f8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f507 61fc 	add.w	r1, r7, #2016	; 0x7e0
 8002504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002508:	4684      	mov	ip, r0
 800250a:	ea0c 0c02 	and.w	ip, ip, r2
 800250e:	f8c7 c7d8 	str.w	ip, [r7, #2008]	; 0x7d8
 8002512:	400b      	ands	r3, r1
 8002514:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8002518:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8002524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002528:	4684      	mov	ip, r0
 800252a:	ea82 0c0c 	eor.w	ip, r2, ip
 800252e:	f8c7 c330 	str.w	ip, [r7, #816]	; 0x330
 8002532:	404b      	eors	r3, r1
 8002534:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8002538:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 800253c:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8002540:	e9c1 2300 	strd	r2, r3, [r1]
        Emo = BCo ^ ((~BCu) & BCa);
 8002544:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	43d1      	mvns	r1, r2
 800254e:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 8002552:	43db      	mvns	r3, r3
 8002554:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8002558:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f507 61fa 	add.w	r1, r7, #2000	; 0x7d0
 8002564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002568:	4684      	mov	ip, r0
 800256a:	ea0c 0c02 	and.w	ip, ip, r2
 800256e:	f8c7 c7c8 	str.w	ip, [r7, #1992]	; 0x7c8
 8002572:	400b      	ands	r3, r1
 8002574:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 8002578:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 8002584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002588:	4684      	mov	ip, r0
 800258a:	ea82 0c0c 	eor.w	ip, r2, ip
 800258e:	f8c7 c328 	str.w	ip, [r7, #808]	; 0x328
 8002592:	404b      	eors	r3, r1
 8002594:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8002598:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800259c:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 80025a0:	e9c1 2300 	strd	r2, r3, [r1]
        Emu = BCu ^ ((~BCa) & BCe);
 80025a4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	43d1      	mvns	r1, r2
 80025ae:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 80025b2:	43db      	mvns	r3, r3
 80025b4:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 80025b8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f507 61f8 	add.w	r1, r7, #1984	; 0x7c0
 80025c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025c8:	4684      	mov	ip, r0
 80025ca:	ea0c 0c02 	and.w	ip, ip, r2
 80025ce:	f8c7 c7b8 	str.w	ip, [r7, #1976]	; 0x7b8
 80025d2:	400b      	ands	r3, r1
 80025d4:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 80025d8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 80025e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025e8:	4684      	mov	ip, r0
 80025ea:	ea82 0c0c 	eor.w	ip, r2, ip
 80025ee:	f8c7 c320 	str.w	ip, [r7, #800]	; 0x320
 80025f2:	404b      	eors	r3, r1
 80025f4:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80025f8:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 80025fc:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8002600:	e9c1 2300 	strd	r2, r3, [r1]

        Abi ^= Di;
 8002604:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8002608:	e9d3 0100 	ldrd	r0, r1, [r3]
 800260c:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	ea80 0c02 	eor.w	ip, r0, r2
 8002618:	f8c7 c318 	str.w	ip, [r7, #792]	; 0x318
 800261c:	404b      	eors	r3, r1
 800261e:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8002622:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8002626:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800262a:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abi, 62);
 800262e:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8002632:	079a      	lsls	r2, r3, #30
 8002634:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8002640:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8002644:	079a      	lsls	r2, r3, #30
 8002646:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8002652:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8002656:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800265a:	e9c1 2300 	strd	r2, r3, [r1]
        Ago ^= Do;
 800265e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8002662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002666:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	ea80 0c02 	eor.w	ip, r0, r2
 8002672:	f8c7 c308 	str.w	ip, [r7, #776]	; 0x308
 8002676:	404b      	eors	r3, r1
 8002678:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800267c:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8002680:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8002684:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ago, 55);
 8002688:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 800268c:	05da      	lsls	r2, r3, #23
 800268e:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8002692:	0a5b      	lsrs	r3, r3, #9
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 800269a:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800269e:	05da      	lsls	r2, r3, #23
 80026a0:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 80026a4:	0a5b      	lsrs	r3, r3, #9
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 80026ac:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 80026b0:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80026b4:	e9c1 2300 	strd	r2, r3, [r1]
        Aku ^= Du;
 80026b8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80026bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026c0:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	ea80 0c02 	eor.w	ip, r0, r2
 80026cc:	f8c7 c2f8 	str.w	ip, [r7, #760]	; 0x2f8
 80026d0:	404b      	eors	r3, r1
 80026d2:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80026d6:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 80026da:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 80026de:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aku, 39);
 80026e2:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 80026e6:	01da      	lsls	r2, r3, #7
 80026e8:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 80026ec:	0e5b      	lsrs	r3, r3, #25
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 80026f4:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 80026f8:	01da      	lsls	r2, r3, #7
 80026fa:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 80026fe:	0e5b      	lsrs	r3, r3, #25
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8002706:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800270a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800270e:	e9c1 2300 	strd	r2, r3, [r1]
        Ama ^= Da;
 8002712:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800271a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	ea80 0c02 	eor.w	ip, r0, r2
 8002726:	f8c7 c2e8 	str.w	ip, [r7, #744]	; 0x2e8
 800272a:	404b      	eors	r3, r1
 800272c:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8002730:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8002734:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8002738:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ama, 41);
 800273c:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8002740:	025a      	lsls	r2, r3, #9
 8002742:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8002746:	0ddb      	lsrs	r3, r3, #23
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800274e:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8002752:	025a      	lsls	r2, r3, #9
 8002754:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8002758:	0ddb      	lsrs	r3, r3, #23
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8002760:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8002764:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002768:	e9c1 2300 	strd	r2, r3, [r1]
        Ase ^= De;
 800276c:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8002770:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002774:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	ea80 0c02 	eor.w	ip, r0, r2
 8002780:	f8c7 c2d8 	str.w	ip, [r7, #728]	; 0x2d8
 8002784:	404b      	eors	r3, r1
 8002786:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800278a:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800278e:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8002792:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Ase, 2);
 8002796:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800279a:	0f9a      	lsrs	r2, r3, #30
 800279c:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 80027a8:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 80027ac:	0f9a      	lsrs	r2, r3, #30
 80027ae:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80027ba:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80027be:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80027c2:	e9c1 2300 	strd	r2, r3, [r1]
        Esa = BCa ^ ((~BCe) & BCi);
 80027c6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	43d1      	mvns	r1, r2
 80027d0:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 80027d4:	43db      	mvns	r3, r3
 80027d6:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 80027da:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 80027e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027ea:	4684      	mov	ip, r0
 80027ec:	ea0c 0c02 	and.w	ip, ip, r2
 80027f0:	f8c7 c7a8 	str.w	ip, [r7, #1960]	; 0x7a8
 80027f4:	400b      	ands	r3, r1
 80027f6:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 80027fa:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 8002806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800280a:	4684      	mov	ip, r0
 800280c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002810:	f8c7 c2c8 	str.w	ip, [r7, #712]	; 0x2c8
 8002814:	404b      	eors	r3, r1
 8002816:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800281a:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800281e:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8002822:	e9c1 2300 	strd	r2, r3, [r1]
        Ese = BCe ^ ((~BCi) & BCo);
 8002826:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	43d1      	mvns	r1, r2
 8002830:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 8002834:	43db      	mvns	r3, r3
 8002836:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 800283a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002842:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8002846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800284a:	4684      	mov	ip, r0
 800284c:	ea0c 0c02 	and.w	ip, ip, r2
 8002850:	f8c7 c798 	str.w	ip, [r7, #1944]	; 0x798
 8002854:	400b      	ands	r3, r1
 8002856:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 800285a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 8002866:	e9d1 0100 	ldrd	r0, r1, [r1]
 800286a:	4684      	mov	ip, r0
 800286c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002870:	f8c7 c2c0 	str.w	ip, [r7, #704]	; 0x2c0
 8002874:	404b      	eors	r3, r1
 8002876:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800287a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800287e:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8002882:	e9c1 2300 	strd	r2, r3, [r1]
        Esi = BCi ^ ((~BCo) & BCu);
 8002886:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	43d1      	mvns	r1, r2
 8002890:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 8002894:	43db      	mvns	r3, r3
 8002896:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 800289a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 80028a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028aa:	4684      	mov	ip, r0
 80028ac:	ea0c 0c02 	and.w	ip, ip, r2
 80028b0:	f8c7 c788 	str.w	ip, [r7, #1928]	; 0x788
 80028b4:	400b      	ands	r3, r1
 80028b6:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 80028ba:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 80028c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028ca:	4684      	mov	ip, r0
 80028cc:	ea82 0c0c 	eor.w	ip, r2, ip
 80028d0:	f8c7 c2b8 	str.w	ip, [r7, #696]	; 0x2b8
 80028d4:	404b      	eors	r3, r1
 80028d6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80028da:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80028de:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 80028e2:	e9c1 2300 	strd	r2, r3, [r1]
        Eso = BCo ^ ((~BCu) & BCa);
 80028e6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	43d1      	mvns	r1, r2
 80028f0:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 80028f4:	43db      	mvns	r3, r3
 80028f6:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 80028fa:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8002906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800290a:	4684      	mov	ip, r0
 800290c:	ea0c 0c02 	and.w	ip, ip, r2
 8002910:	f8c7 c778 	str.w	ip, [r7, #1912]	; 0x778
 8002914:	400b      	ands	r3, r1
 8002916:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 800291a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 8002926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800292a:	4684      	mov	ip, r0
 800292c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002930:	f8c7 c2b0 	str.w	ip, [r7, #688]	; 0x2b0
 8002934:	404b      	eors	r3, r1
 8002936:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800293a:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800293e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8002942:	e9c1 2300 	strd	r2, r3, [r1]
        Esu = BCu ^ ((~BCa) & BCe);
 8002946:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	43d1      	mvns	r1, r2
 8002950:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 8002954:	43db      	mvns	r3, r3
 8002956:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 800295a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800295e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002962:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8002966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800296a:	4684      	mov	ip, r0
 800296c:	ea0c 0c02 	and.w	ip, ip, r2
 8002970:	f8c7 c768 	str.w	ip, [r7, #1896]	; 0x768
 8002974:	400b      	ands	r3, r1
 8002976:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 800297a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8002986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800298a:	4684      	mov	ip, r0
 800298c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002990:	f8c7 c2a8 	str.w	ip, [r7, #680]	; 0x2a8
 8002994:	404b      	eors	r3, r1
 8002996:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800299a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800299e:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 80029a2:	e9c1 2300 	strd	r2, r3, [r1]

        //    prepareTheta
        BCa = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
 80029a6:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80029aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ae:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	ea80 0c02 	eor.w	ip, r0, r2
 80029ba:	f8c7 c760 	str.w	ip, [r7, #1888]	; 0x760
 80029be:	404b      	eors	r3, r1
 80029c0:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 80029c4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 80029d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029d4:	4684      	mov	ip, r0
 80029d6:	ea8c 0c02 	eor.w	ip, ip, r2
 80029da:	f8c7 c758 	str.w	ip, [r7, #1880]	; 0x758
 80029de:	404b      	eors	r3, r1
 80029e0:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 80029e4:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 80029f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029f4:	4684      	mov	ip, r0
 80029f6:	ea8c 0c02 	eor.w	ip, ip, r2
 80029fa:	f8c7 c750 	str.w	ip, [r7, #1872]	; 0x750
 80029fe:	404b      	eors	r3, r1
 8002a00:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 8002a04:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 8002a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a14:	4684      	mov	ip, r0
 8002a16:	ea82 0c0c 	eor.w	ip, r2, ip
 8002a1a:	f8c7 c2a0 	str.w	ip, [r7, #672]	; 0x2a0
 8002a1e:	404b      	eors	r3, r1
 8002a20:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8002a24:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8002a28:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8002a2c:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
 8002a30:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8002a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a38:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	ea80 0c02 	eor.w	ip, r0, r2
 8002a44:	f8c7 c748 	str.w	ip, [r7, #1864]	; 0x748
 8002a48:	404b      	eors	r3, r1
 8002a4a:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 8002a4e:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 8002a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a5e:	4684      	mov	ip, r0
 8002a60:	ea8c 0c02 	eor.w	ip, ip, r2
 8002a64:	f8c7 c740 	str.w	ip, [r7, #1856]	; 0x740
 8002a68:	404b      	eors	r3, r1
 8002a6a:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 8002a6e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 8002a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a7e:	4684      	mov	ip, r0
 8002a80:	ea8c 0c02 	eor.w	ip, ip, r2
 8002a84:	f8c7 c738 	str.w	ip, [r7, #1848]	; 0x738
 8002a88:	404b      	eors	r3, r1
 8002a8a:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 8002a8e:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8002a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a96:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 8002a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a9e:	4684      	mov	ip, r0
 8002aa0:	ea82 0c0c 	eor.w	ip, r2, ip
 8002aa4:	f8c7 c298 	str.w	ip, [r7, #664]	; 0x298
 8002aa8:	404b      	eors	r3, r1
 8002aaa:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8002aae:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8002ab2:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002ab6:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
 8002aba:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8002abe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac2:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	ea80 0c02 	eor.w	ip, r0, r2
 8002ace:	f8c7 c730 	str.w	ip, [r7, #1840]	; 0x730
 8002ad2:	404b      	eors	r3, r1
 8002ad4:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 8002ad8:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8002adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae0:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8002ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ae8:	4684      	mov	ip, r0
 8002aea:	ea8c 0c02 	eor.w	ip, ip, r2
 8002aee:	f8c7 c728 	str.w	ip, [r7, #1832]	; 0x728
 8002af2:	404b      	eors	r3, r1
 8002af4:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 8002af8:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 8002b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b08:	4684      	mov	ip, r0
 8002b0a:	ea8c 0c02 	eor.w	ip, ip, r2
 8002b0e:	f8c7 c720 	str.w	ip, [r7, #1824]	; 0x720
 8002b12:	404b      	eors	r3, r1
 8002b14:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8002b18:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8002b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b28:	4684      	mov	ip, r0
 8002b2a:	ea82 0c0c 	eor.w	ip, r2, ip
 8002b2e:	f8c7 c290 	str.w	ip, [r7, #656]	; 0x290
 8002b32:	404b      	eors	r3, r1
 8002b34:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002b38:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8002b3c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8002b40:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
 8002b44:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b4c:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	ea80 0c02 	eor.w	ip, r0, r2
 8002b58:	f8c7 c718 	str.w	ip, [r7, #1816]	; 0x718
 8002b5c:	404b      	eors	r3, r1
 8002b5e:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 8002b62:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 8002b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b72:	4684      	mov	ip, r0
 8002b74:	ea8c 0c02 	eor.w	ip, ip, r2
 8002b78:	f8c7 c710 	str.w	ip, [r7, #1808]	; 0x710
 8002b7c:	404b      	eors	r3, r1
 8002b7e:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 8002b82:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 8002b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b92:	4684      	mov	ip, r0
 8002b94:	ea8c 0c02 	eor.w	ip, ip, r2
 8002b98:	f8c7 c708 	str.w	ip, [r7, #1800]	; 0x708
 8002b9c:	404b      	eors	r3, r1
 8002b9e:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 8002ba2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8002ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002baa:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8002bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bb2:	4684      	mov	ip, r0
 8002bb4:	ea82 0c0c 	eor.w	ip, r2, ip
 8002bb8:	f8c7 c288 	str.w	ip, [r7, #648]	; 0x288
 8002bbc:	404b      	eors	r3, r1
 8002bbe:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8002bc2:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8002bc6:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002bca:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
 8002bce:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd6:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	ea80 0c02 	eor.w	ip, r0, r2
 8002be2:	f8c7 c700 	str.w	ip, [r7, #1792]	; 0x700
 8002be6:	404b      	eors	r3, r1
 8002be8:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8002bec:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 8002bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bfc:	4684      	mov	ip, r0
 8002bfe:	ea8c 0c02 	eor.w	ip, ip, r2
 8002c02:	f8c7 c6f8 	str.w	ip, [r7, #1784]	; 0x6f8
 8002c06:	404b      	eors	r3, r1
 8002c08:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 8002c0c:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 8002c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c1c:	4684      	mov	ip, r0
 8002c1e:	ea8c 0c02 	eor.w	ip, ip, r2
 8002c22:	f8c7 c6f0 	str.w	ip, [r7, #1776]	; 0x6f0
 8002c26:	404b      	eors	r3, r1
 8002c28:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 8002c2c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8002c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c3c:	4684      	mov	ip, r0
 8002c3e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002c42:	f8c7 c280 	str.w	ip, [r7, #640]	; 0x280
 8002c46:	404b      	eors	r3, r1
 8002c48:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002c4c:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8002c50:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002c54:	e9c1 2300 	strd	r2, r3, [r1]

        // thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
        Da = BCu ^ ROL(BCe, 1);
 8002c58:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8002c5c:	0fda      	lsrs	r2, r3, #31
 8002c5e:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 8002c6a:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8002c6e:	0fda      	lsrs	r2, r3, #31
 8002c70:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 8002c7c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 8002c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c8c:	4684      	mov	ip, r0
 8002c8e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002c92:	f8c7 c278 	str.w	ip, [r7, #632]	; 0x278
 8002c96:	404b      	eors	r3, r1
 8002c98:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8002c9c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8002ca0:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 8002ca4:	e9c1 2300 	strd	r2, r3, [r1]
        De = BCa ^ ROL(BCi, 1);
 8002ca8:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8002cac:	0fda      	lsrs	r2, r3, #31
 8002cae:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 8002cba:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8002cbe:	0fda      	lsrs	r2, r3, #31
 8002cc0:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8002ccc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8002cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cdc:	4684      	mov	ip, r0
 8002cde:	ea82 0c0c 	eor.w	ip, r2, ip
 8002ce2:	f8c7 c270 	str.w	ip, [r7, #624]	; 0x270
 8002ce6:	404b      	eors	r3, r1
 8002ce8:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8002cec:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8002cf0:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8002cf4:	e9c1 2300 	strd	r2, r3, [r1]
        Di = BCe ^ ROL(BCo, 1);
 8002cf8:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8002cfc:	0fda      	lsrs	r2, r3, #31
 8002cfe:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 8002d0a:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8002d0e:	0fda      	lsrs	r2, r3, #31
 8002d10:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 8002d1c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8002d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d2c:	4684      	mov	ip, r0
 8002d2e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002d32:	f8c7 c268 	str.w	ip, [r7, #616]	; 0x268
 8002d36:	404b      	eors	r3, r1
 8002d38:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8002d3c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8002d40:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 8002d44:	e9c1 2300 	strd	r2, r3, [r1]
        Do = BCi ^ ROL(BCu, 1);
 8002d48:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8002d4c:	0fda      	lsrs	r2, r3, #31
 8002d4e:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 8002d5a:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8002d5e:	0fda      	lsrs	r2, r3, #31
 8002d60:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 8002d6c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8002d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d7c:	4684      	mov	ip, r0
 8002d7e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002d82:	f8c7 c260 	str.w	ip, [r7, #608]	; 0x260
 8002d86:	404b      	eors	r3, r1
 8002d88:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8002d8c:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8002d90:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 8002d94:	e9c1 2300 	strd	r2, r3, [r1]
        Du = BCo ^ ROL(BCa, 1);
 8002d98:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8002d9c:	0fda      	lsrs	r2, r3, #31
 8002d9e:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 8002daa:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8002dae:	0fda      	lsrs	r2, r3, #31
 8002db0:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 8002dbc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 8002dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dcc:	4684      	mov	ip, r0
 8002dce:	ea82 0c0c 	eor.w	ip, r2, ip
 8002dd2:	f8c7 c258 	str.w	ip, [r7, #600]	; 0x258
 8002dd6:	404b      	eors	r3, r1
 8002dd8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8002ddc:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8002de0:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8002de4:	e9c1 2300 	strd	r2, r3, [r1]

        Eba ^= Da;
 8002de8:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002dec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002df0:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	ea80 0c02 	eor.w	ip, r0, r2
 8002dfc:	f8c7 c250 	str.w	ip, [r7, #592]	; 0x250
 8002e00:	404b      	eors	r3, r1
 8002e02:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8002e06:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8002e0a:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 8002e0e:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = Eba;
 8002e12:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8002e1e:	e9c1 2300 	strd	r2, r3, [r1]
        Ege ^= De;
 8002e22:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8002e26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e2a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	ea80 0c02 	eor.w	ip, r0, r2
 8002e36:	f8c7 c248 	str.w	ip, [r7, #584]	; 0x248
 8002e3a:	404b      	eors	r3, r1
 8002e3c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8002e40:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8002e44:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8002e48:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ege, 44);
 8002e4c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002e50:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 8002e54:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002e58:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 8002e5c:	6803      	ldr	r3, [r0, #0]
 8002e5e:	031a      	lsls	r2, r3, #12
 8002e60:	680b      	ldr	r3, [r1, #0]
 8002e62:	0d1b      	lsrs	r3, r3, #20
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8002e6a:	680b      	ldr	r3, [r1, #0]
 8002e6c:	031a      	lsls	r2, r3, #12
 8002e6e:	6803      	ldr	r3, [r0, #0]
 8002e70:	0d1b      	lsrs	r3, r3, #20
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8002e78:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8002e7c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002e80:	e9c1 2300 	strd	r2, r3, [r1]
        Eki ^= Di;
 8002e84:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8002e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e8c:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	ea80 0c02 	eor.w	ip, r0, r2
 8002e98:	f8c7 c238 	str.w	ip, [r7, #568]	; 0x238
 8002e9c:	404b      	eors	r3, r1
 8002e9e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002ea2:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8002ea6:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 8002eaa:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eki, 43);
 8002eae:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002eb2:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 8002eb6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002eba:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 8002ebe:	6803      	ldr	r3, [r0, #0]
 8002ec0:	02da      	lsls	r2, r3, #11
 8002ec2:	680b      	ldr	r3, [r1, #0]
 8002ec4:	0d5b      	lsrs	r3, r3, #21
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8002ecc:	680b      	ldr	r3, [r1, #0]
 8002ece:	02da      	lsls	r2, r3, #11
 8002ed0:	6803      	ldr	r3, [r0, #0]
 8002ed2:	0d5b      	lsrs	r3, r3, #21
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8002eda:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002ede:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8002ee2:	e9c1 2300 	strd	r2, r3, [r1]
        Emo ^= Do;
 8002ee6:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8002eea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eee:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	ea80 0c02 	eor.w	ip, r0, r2
 8002efa:	f8c7 c228 	str.w	ip, [r7, #552]	; 0x228
 8002efe:	404b      	eors	r3, r1
 8002f00:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8002f04:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8002f08:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8002f0c:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emo, 21);
 8002f10:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f14:	f5a3 70dc 	sub.w	r0, r3, #440	; 0x1b8
 8002f18:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f1c:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 8002f20:	6803      	ldr	r3, [r0, #0]
 8002f22:	0ada      	lsrs	r2, r3, #11
 8002f24:	680b      	ldr	r3, [r1, #0]
 8002f26:	055b      	lsls	r3, r3, #21
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002f2e:	680b      	ldr	r3, [r1, #0]
 8002f30:	0ada      	lsrs	r2, r3, #11
 8002f32:	6803      	ldr	r3, [r0, #0]
 8002f34:	055b      	lsls	r3, r3, #21
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8002f3c:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 8002f40:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002f44:	e9c1 2300 	strd	r2, r3, [r1]
        Esu ^= Du;
 8002f48:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8002f4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f50:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	ea80 0c02 	eor.w	ip, r0, r2
 8002f5c:	f8c7 c218 	str.w	ip, [r7, #536]	; 0x218
 8002f60:	404b      	eors	r3, r1
 8002f62:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002f66:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8002f6a:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 8002f6e:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esu, 14);
 8002f72:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f76:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8002f7a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f7e:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 8002f82:	6803      	ldr	r3, [r0, #0]
 8002f84:	0c9a      	lsrs	r2, r3, #18
 8002f86:	680b      	ldr	r3, [r1, #0]
 8002f88:	039b      	lsls	r3, r3, #14
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8002f90:	680b      	ldr	r3, [r1, #0]
 8002f92:	0c9a      	lsrs	r2, r3, #18
 8002f94:	6803      	ldr	r3, [r0, #0]
 8002f96:	039b      	lsls	r3, r3, #14
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002f9e:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8002fa2:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002fa6:	e9c1 2300 	strd	r2, r3, [r1]
        Aba = BCa ^ ((~BCe) & BCi);
 8002faa:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	43d1      	mvns	r1, r2
 8002fb4:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 8002fbe:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 8002fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fce:	4684      	mov	ip, r0
 8002fd0:	ea0c 0c02 	and.w	ip, ip, r2
 8002fd4:	f8c7 c6b8 	str.w	ip, [r7, #1720]	; 0x6b8
 8002fd8:	400b      	ands	r3, r1
 8002fda:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 8002fde:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8002fea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fee:	4684      	mov	ip, r0
 8002ff0:	ea82 0c0c 	eor.w	ip, r2, ip
 8002ff4:	f8c7 c208 	str.w	ip, [r7, #520]	; 0x208
 8002ff8:	404b      	eors	r3, r1
 8002ffa:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002ffe:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 8003002:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8003006:	e9c1 2300 	strd	r2, r3, [r1]
        Aba ^= KeccakF_RoundConstants[round + 1];
 800300a:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800300e:	3301      	adds	r3, #1
 8003010:	4ac1      	ldr	r2, [pc, #772]	; (8003318 <KeccakF1600_StatePermute+0x22e0>)
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800301a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	ea82 0c00 	eor.w	ip, r2, r0
 8003026:	f8c7 c200 	str.w	ip, [r7, #512]	; 0x200
 800302a:	404b      	eors	r3, r1
 800302c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8003030:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8003034:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8003038:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = BCe ^ ((~BCi) & BCo);
 800303c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	43d1      	mvns	r1, r2
 8003046:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 800304a:	43db      	mvns	r3, r3
 800304c:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 8003050:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 800305c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003060:	4684      	mov	ip, r0
 8003062:	ea0c 0c02 	and.w	ip, ip, r2
 8003066:	f8c7 c6a8 	str.w	ip, [r7, #1704]	; 0x6a8
 800306a:	400b      	ands	r3, r1
 800306c:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 8003070:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 800307c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003080:	4684      	mov	ip, r0
 8003082:	ea82 0c0c 	eor.w	ip, r2, ip
 8003086:	f8c7 c1f8 	str.w	ip, [r7, #504]	; 0x1f8
 800308a:	404b      	eors	r3, r1
 800308c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8003090:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 8003094:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8003098:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = BCi ^ ((~BCo) & BCu);
 800309c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	43d1      	mvns	r1, r2
 80030a6:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 80030aa:	43db      	mvns	r3, r3
 80030ac:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 80030b0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80030bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030c0:	4684      	mov	ip, r0
 80030c2:	ea0c 0c02 	and.w	ip, ip, r2
 80030c6:	f8c7 c698 	str.w	ip, [r7, #1688]	; 0x698
 80030ca:	400b      	ands	r3, r1
 80030cc:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 80030d0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 80030dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030e0:	4684      	mov	ip, r0
 80030e2:	ea82 0c0c 	eor.w	ip, r2, ip
 80030e6:	f8c7 c1f0 	str.w	ip, [r7, #496]	; 0x1f0
 80030ea:	404b      	eors	r3, r1
 80030ec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80030f0:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80030f4:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 80030f8:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = BCo ^ ((~BCu) & BCa);
 80030fc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	43d1      	mvns	r1, r2
 8003106:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 800310a:	43db      	mvns	r3, r3
 800310c:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 8003110:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 800311c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003120:	4684      	mov	ip, r0
 8003122:	ea0c 0c02 	and.w	ip, ip, r2
 8003126:	f8c7 c688 	str.w	ip, [r7, #1672]	; 0x688
 800312a:	400b      	ands	r3, r1
 800312c:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 8003130:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 800313c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003140:	4684      	mov	ip, r0
 8003142:	ea82 0c0c 	eor.w	ip, r2, ip
 8003146:	f8c7 c1e8 	str.w	ip, [r7, #488]	; 0x1e8
 800314a:	404b      	eors	r3, r1
 800314c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8003150:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8003154:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8003158:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = BCu ^ ((~BCa) & BCe);
 800315c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	43d1      	mvns	r1, r2
 8003166:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 800316a:	43db      	mvns	r3, r3
 800316c:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8003170:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 800317c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003180:	4684      	mov	ip, r0
 8003182:	ea0c 0c02 	and.w	ip, ip, r2
 8003186:	f8c7 c678 	str.w	ip, [r7, #1656]	; 0x678
 800318a:	400b      	ands	r3, r1
 800318c:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8003190:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 800319c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031a0:	4684      	mov	ip, r0
 80031a2:	ea82 0c0c 	eor.w	ip, r2, ip
 80031a6:	f8c7 c1e0 	str.w	ip, [r7, #480]	; 0x1e0
 80031aa:	404b      	eors	r3, r1
 80031ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80031b0:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80031b4:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 80031b8:	e9c1 2300 	strd	r2, r3, [r1]

        Ebo ^= Do;
 80031bc:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80031c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c4:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	ea80 0c02 	eor.w	ip, r0, r2
 80031d0:	f8c7 c1d8 	str.w	ip, [r7, #472]	; 0x1d8
 80031d4:	404b      	eors	r3, r1
 80031d6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80031da:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 80031de:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 80031e2:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebo, 28);
 80031e6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80031ea:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 80031ee:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80031f2:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 80031f6:	6803      	ldr	r3, [r0, #0]
 80031f8:	091a      	lsrs	r2, r3, #4
 80031fa:	680b      	ldr	r3, [r1, #0]
 80031fc:	071b      	lsls	r3, r3, #28
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8003204:	680b      	ldr	r3, [r1, #0]
 8003206:	091a      	lsrs	r2, r3, #4
 8003208:	6803      	ldr	r3, [r0, #0]
 800320a:	071b      	lsls	r3, r3, #28
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8003212:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8003216:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800321a:	e9c1 2300 	strd	r2, r3, [r1]
        Egu ^= Du;
 800321e:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8003222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003226:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	ea80 0c02 	eor.w	ip, r0, r2
 8003232:	f8c7 c1c8 	str.w	ip, [r7, #456]	; 0x1c8
 8003236:	404b      	eors	r3, r1
 8003238:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800323c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8003240:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8003244:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Egu, 20);
 8003248:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800324c:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 8003250:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003254:	f5a3 71b6 	sub.w	r1, r3, #364	; 0x16c
 8003258:	6803      	ldr	r3, [r0, #0]
 800325a:	0b1a      	lsrs	r2, r3, #12
 800325c:	680b      	ldr	r3, [r1, #0]
 800325e:	051b      	lsls	r3, r3, #20
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003266:	680b      	ldr	r3, [r1, #0]
 8003268:	0b1a      	lsrs	r2, r3, #12
 800326a:	6803      	ldr	r3, [r0, #0]
 800326c:	051b      	lsls	r3, r3, #20
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003274:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8003278:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800327c:	e9c1 2300 	strd	r2, r3, [r1]
        Eka ^= Da;
 8003280:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8003284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003288:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	ea80 0c02 	eor.w	ip, r0, r2
 8003294:	f8c7 c1b8 	str.w	ip, [r7, #440]	; 0x1b8
 8003298:	404b      	eors	r3, r1
 800329a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800329e:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 80032a2:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 80032a6:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eka, 3);
 80032aa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80032ae:	f5a3 70bc 	sub.w	r0, r3, #376	; 0x178
 80032b2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80032b6:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 80032ba:	6803      	ldr	r3, [r0, #0]
 80032bc:	0f5a      	lsrs	r2, r3, #29
 80032be:	680b      	ldr	r3, [r1, #0]
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80032c8:	680b      	ldr	r3, [r1, #0]
 80032ca:	0f5a      	lsrs	r2, r3, #29
 80032cc:	6803      	ldr	r3, [r0, #0]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80032d6:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 80032da:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80032de:	e9c1 2300 	strd	r2, r3, [r1]
        Eme ^= De;
 80032e2:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80032e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ea:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	ea80 0c02 	eor.w	ip, r0, r2
 80032f6:	f8c7 c1a8 	str.w	ip, [r7, #424]	; 0x1a8
 80032fa:	404b      	eors	r3, r1
 80032fc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003300:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8003304:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8003308:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Eme, 45);
 800330c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003310:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 8003314:	e002      	b.n	800331c <KeccakF1600_StatePermute+0x22e4>
 8003316:	bf00      	nop
 8003318:	080085c0 	.word	0x080085c0
 800331c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003320:	f5a3 71d4 	sub.w	r1, r3, #424	; 0x1a8
 8003324:	6803      	ldr	r3, [r0, #0]
 8003326:	035a      	lsls	r2, r3, #13
 8003328:	680b      	ldr	r3, [r1, #0]
 800332a:	0cdb      	lsrs	r3, r3, #19
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003332:	680b      	ldr	r3, [r1, #0]
 8003334:	035a      	lsls	r2, r3, #13
 8003336:	6803      	ldr	r3, [r0, #0]
 8003338:	0cdb      	lsrs	r3, r3, #19
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003340:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8003344:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8003348:	e9c1 2300 	strd	r2, r3, [r1]
        Esi ^= Di;
 800334c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8003350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003354:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8003358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335c:	ea80 0c02 	eor.w	ip, r0, r2
 8003360:	f8c7 c198 	str.w	ip, [r7, #408]	; 0x198
 8003364:	404b      	eors	r3, r1
 8003366:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800336a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800336e:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8003372:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esi, 61);
 8003376:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800337a:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 800337e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003382:	f5a3 71ec 	sub.w	r1, r3, #472	; 0x1d8
 8003386:	6803      	ldr	r3, [r0, #0]
 8003388:	075a      	lsls	r2, r3, #29
 800338a:	680b      	ldr	r3, [r1, #0]
 800338c:	08db      	lsrs	r3, r3, #3
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003394:	680b      	ldr	r3, [r1, #0]
 8003396:	075a      	lsls	r2, r3, #29
 8003398:	6803      	ldr	r3, [r0, #0]
 800339a:	08db      	lsrs	r3, r3, #3
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80033a2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80033a6:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80033aa:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = BCa ^ ((~BCe) & BCi);
 80033ae:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	43d1      	mvns	r1, r2
 80033b8:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 80033bc:	43db      	mvns	r3, r3
 80033be:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 80033c2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 80033ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033d2:	4684      	mov	ip, r0
 80033d4:	ea0c 0c02 	and.w	ip, ip, r2
 80033d8:	f8c7 c668 	str.w	ip, [r7, #1640]	; 0x668
 80033dc:	400b      	ands	r3, r1
 80033de:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 80033e2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 80033ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033f2:	4684      	mov	ip, r0
 80033f4:	ea82 0c0c 	eor.w	ip, r2, ip
 80033f8:	f8c7 c188 	str.w	ip, [r7, #392]	; 0x188
 80033fc:	404b      	eors	r3, r1
 80033fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003402:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003406:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800340a:	e9c1 2300 	strd	r2, r3, [r1]
        Age = BCe ^ ((~BCi) & BCo);
 800340e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	43d1      	mvns	r1, r2
 8003418:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 800341c:	43db      	mvns	r3, r3
 800341e:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8003422:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 800342e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003432:	4684      	mov	ip, r0
 8003434:	ea0c 0c02 	and.w	ip, ip, r2
 8003438:	f8c7 c658 	str.w	ip, [r7, #1624]	; 0x658
 800343c:	400b      	ands	r3, r1
 800343e:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003442:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 800344e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003452:	4684      	mov	ip, r0
 8003454:	ea82 0c0c 	eor.w	ip, r2, ip
 8003458:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
 800345c:	404b      	eors	r3, r1
 800345e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003462:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8003466:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800346a:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = BCi ^ ((~BCo) & BCu);
 800346e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	43d1      	mvns	r1, r2
 8003478:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 800347c:	43db      	mvns	r3, r3
 800347e:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8003482:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 800348e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003492:	4684      	mov	ip, r0
 8003494:	ea0c 0c02 	and.w	ip, ip, r2
 8003498:	f8c7 c648 	str.w	ip, [r7, #1608]	; 0x648
 800349c:	400b      	ands	r3, r1
 800349e:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 80034a2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 80034ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034b2:	4684      	mov	ip, r0
 80034b4:	ea82 0c0c 	eor.w	ip, r2, ip
 80034b8:	f8c7 c178 	str.w	ip, [r7, #376]	; 0x178
 80034bc:	404b      	eors	r3, r1
 80034be:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80034c2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80034c6:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 80034ca:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = BCo ^ ((~BCu) & BCa);
 80034ce:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	43d1      	mvns	r1, r2
 80034d8:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 80034dc:	43db      	mvns	r3, r3
 80034de:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 80034e2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 80034ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034f2:	4684      	mov	ip, r0
 80034f4:	ea0c 0c02 	and.w	ip, ip, r2
 80034f8:	f8c7 c638 	str.w	ip, [r7, #1592]	; 0x638
 80034fc:	400b      	ands	r3, r1
 80034fe:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8003502:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 800350e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003512:	4684      	mov	ip, r0
 8003514:	ea82 0c0c 	eor.w	ip, r2, ip
 8003518:	f8c7 c170 	str.w	ip, [r7, #368]	; 0x170
 800351c:	404b      	eors	r3, r1
 800351e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003522:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003526:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800352a:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = BCu ^ ((~BCa) & BCe);
 800352e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	43d1      	mvns	r1, r2
 8003538:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 800353c:	43db      	mvns	r3, r3
 800353e:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8003542:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800354e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003552:	4684      	mov	ip, r0
 8003554:	ea0c 0c02 	and.w	ip, ip, r2
 8003558:	f8c7 c628 	str.w	ip, [r7, #1576]	; 0x628
 800355c:	400b      	ands	r3, r1
 800355e:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8003562:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 800356e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003572:	4684      	mov	ip, r0
 8003574:	ea82 0c0c 	eor.w	ip, r2, ip
 8003578:	f8c7 c168 	str.w	ip, [r7, #360]	; 0x168
 800357c:	404b      	eors	r3, r1
 800357e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003582:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8003586:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800358a:	e9c1 2300 	strd	r2, r3, [r1]

        Ebe ^= De;
 800358e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8003592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003596:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	ea80 0c02 	eor.w	ip, r0, r2
 80035a2:	f8c7 c160 	str.w	ip, [r7, #352]	; 0x160
 80035a6:	404b      	eors	r3, r1
 80035a8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80035ac:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80035b0:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 80035b4:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebe, 1);
 80035b8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80035bc:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 80035c0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80035c4:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 80035c8:	6803      	ldr	r3, [r0, #0]
 80035ca:	0fda      	lsrs	r2, r3, #31
 80035cc:	680b      	ldr	r3, [r1, #0]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80035d6:	680b      	ldr	r3, [r1, #0]
 80035d8:	0fda      	lsrs	r2, r3, #31
 80035da:	6803      	ldr	r3, [r0, #0]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80035e4:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80035e8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80035ec:	e9c1 2300 	strd	r2, r3, [r1]
        Egi ^= Di;
 80035f0:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80035f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035f8:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	ea80 0c02 	eor.w	ip, r0, r2
 8003604:	f8c7 c150 	str.w	ip, [r7, #336]	; 0x150
 8003608:	404b      	eors	r3, r1
 800360a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800360e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8003612:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8003616:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Egi, 6);
 800361a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800361e:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8003622:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003626:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 800362a:	6803      	ldr	r3, [r0, #0]
 800362c:	0e9a      	lsrs	r2, r3, #26
 800362e:	680b      	ldr	r3, [r1, #0]
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003638:	680b      	ldr	r3, [r1, #0]
 800363a:	0e9a      	lsrs	r2, r3, #26
 800363c:	6803      	ldr	r3, [r0, #0]
 800363e:	019b      	lsls	r3, r3, #6
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003646:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800364a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800364e:	e9c1 2300 	strd	r2, r3, [r1]
        Eko ^= Do;
 8003652:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8003656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800365a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	ea80 0c02 	eor.w	ip, r0, r2
 8003666:	f8c7 c140 	str.w	ip, [r7, #320]	; 0x140
 800366a:	404b      	eors	r3, r1
 800366c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003670:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003674:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8003678:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eko, 25);
 800367c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003680:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8003684:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003688:	f5a3 71c6 	sub.w	r1, r3, #396	; 0x18c
 800368c:	6803      	ldr	r3, [r0, #0]
 800368e:	09da      	lsrs	r2, r3, #7
 8003690:	680b      	ldr	r3, [r1, #0]
 8003692:	065b      	lsls	r3, r3, #25
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800369a:	680b      	ldr	r3, [r1, #0]
 800369c:	09da      	lsrs	r2, r3, #7
 800369e:	6803      	ldr	r3, [r0, #0]
 80036a0:	065b      	lsls	r3, r3, #25
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80036a8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80036ac:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80036b0:	e9c1 2300 	strd	r2, r3, [r1]
        Emu ^= Du;
 80036b4:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 80036b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036bc:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	ea80 0c02 	eor.w	ip, r0, r2
 80036c8:	f8c7 c130 	str.w	ip, [r7, #304]	; 0x130
 80036cc:	404b      	eors	r3, r1
 80036ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80036d2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80036d6:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 80036da:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emu, 8);
 80036de:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80036e2:	f5a3 70e0 	sub.w	r0, r3, #448	; 0x1c0
 80036e6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80036ea:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 80036ee:	6803      	ldr	r3, [r0, #0]
 80036f0:	0e1a      	lsrs	r2, r3, #24
 80036f2:	680b      	ldr	r3, [r1, #0]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80036fc:	680b      	ldr	r3, [r1, #0]
 80036fe:	0e1a      	lsrs	r2, r3, #24
 8003700:	6803      	ldr	r3, [r0, #0]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800370a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800370e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8003712:	e9c1 2300 	strd	r2, r3, [r1]
        Esa ^= Da;
 8003716:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800371a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800371e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	ea80 0c02 	eor.w	ip, r0, r2
 800372a:	f8c7 c120 	str.w	ip, [r7, #288]	; 0x120
 800372e:	404b      	eors	r3, r1
 8003730:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003734:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003738:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 800373c:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esa, 18);
 8003740:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003744:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8003748:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800374c:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8003750:	6803      	ldr	r3, [r0, #0]
 8003752:	0b9a      	lsrs	r2, r3, #14
 8003754:	680b      	ldr	r3, [r1, #0]
 8003756:	049b      	lsls	r3, r3, #18
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800375e:	680b      	ldr	r3, [r1, #0]
 8003760:	0b9a      	lsrs	r2, r3, #14
 8003762:	6803      	ldr	r3, [r0, #0]
 8003764:	049b      	lsls	r3, r3, #18
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800376c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8003770:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8003774:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = BCa ^ ((~BCe) & BCi);
 8003778:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	43d1      	mvns	r1, r2
 8003782:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 8003786:	43db      	mvns	r3, r3
 8003788:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 800378c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8003798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800379c:	4684      	mov	ip, r0
 800379e:	ea0c 0c02 	and.w	ip, ip, r2
 80037a2:	f8c7 c618 	str.w	ip, [r7, #1560]	; 0x618
 80037a6:	400b      	ands	r3, r1
 80037a8:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 80037ac:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 80037b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037bc:	4684      	mov	ip, r0
 80037be:	ea82 0c0c 	eor.w	ip, r2, ip
 80037c2:	f8c7 c110 	str.w	ip, [r7, #272]	; 0x110
 80037c6:	404b      	eors	r3, r1
 80037c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80037cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80037d0:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 80037d4:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = BCe ^ ((~BCi) & BCo);
 80037d8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	43d1      	mvns	r1, r2
 80037e2:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 80037e6:	43db      	mvns	r3, r3
 80037e8:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 80037ec:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 80037f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037fc:	4684      	mov	ip, r0
 80037fe:	ea0c 0c02 	and.w	ip, ip, r2
 8003802:	f8c7 c608 	str.w	ip, [r7, #1544]	; 0x608
 8003806:	400b      	ands	r3, r1
 8003808:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800380c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 8003818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800381c:	4684      	mov	ip, r0
 800381e:	ea82 0c0c 	eor.w	ip, r2, ip
 8003822:	f8c7 c108 	str.w	ip, [r7, #264]	; 0x108
 8003826:	404b      	eors	r3, r1
 8003828:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800382c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8003830:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8003834:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = BCi ^ ((~BCo) & BCu);
 8003838:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	43d1      	mvns	r1, r2
 8003842:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 8003846:	43db      	mvns	r3, r3
 8003848:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800384c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8003858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800385c:	4684      	mov	ip, r0
 800385e:	ea0c 0c02 	and.w	ip, ip, r2
 8003862:	f8c7 c5f8 	str.w	ip, [r7, #1528]	; 0x5f8
 8003866:	400b      	ands	r3, r1
 8003868:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800386c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 8003878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800387c:	4684      	mov	ip, r0
 800387e:	ea82 0c0c 	eor.w	ip, r2, ip
 8003882:	f8c7 c100 	str.w	ip, [r7, #256]	; 0x100
 8003886:	404b      	eors	r3, r1
 8003888:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800388c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8003890:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8003894:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = BCo ^ ((~BCu) & BCa);
 8003898:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	43d1      	mvns	r1, r2
 80038a2:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 80038a6:	43db      	mvns	r3, r3
 80038a8:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80038ac:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 80038b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038bc:	4684      	mov	ip, r0
 80038be:	ea0c 0c02 	and.w	ip, ip, r2
 80038c2:	f8c7 c5e8 	str.w	ip, [r7, #1512]	; 0x5e8
 80038c6:	400b      	ands	r3, r1
 80038c8:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 80038cc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 80038d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038dc:	4684      	mov	ip, r0
 80038de:	ea82 0c0c 	eor.w	ip, r2, ip
 80038e2:	f8c7 c0f8 	str.w	ip, [r7, #248]	; 0xf8
 80038e6:	404b      	eors	r3, r1
 80038e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038ec:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80038f0:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 80038f4:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = BCu ^ ((~BCa) & BCe);
 80038f8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003900:	43d1      	mvns	r1, r2
 8003902:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 8003906:	43db      	mvns	r3, r3
 8003908:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 800390c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 8003918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800391c:	4684      	mov	ip, r0
 800391e:	ea0c 0c02 	and.w	ip, ip, r2
 8003922:	f8c7 c5d8 	str.w	ip, [r7, #1496]	; 0x5d8
 8003926:	400b      	ands	r3, r1
 8003928:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800392c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 8003938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800393c:	4684      	mov	ip, r0
 800393e:	ea82 0c0c 	eor.w	ip, r2, ip
 8003942:	f8c7 c0f0 	str.w	ip, [r7, #240]	; 0xf0
 8003946:	404b      	eors	r3, r1
 8003948:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800394c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003950:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8003954:	e9c1 2300 	strd	r2, r3, [r1]

        Ebu ^= Du;
 8003958:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800395c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003960:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	ea80 0c02 	eor.w	ip, r0, r2
 800396c:	f8c7 c0e8 	str.w	ip, [r7, #232]	; 0xe8
 8003970:	404b      	eors	r3, r1
 8003972:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003976:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800397a:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800397e:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebu, 27);
 8003982:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003986:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 800398a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800398e:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8003992:	6803      	ldr	r3, [r0, #0]
 8003994:	095a      	lsrs	r2, r3, #5
 8003996:	680b      	ldr	r3, [r1, #0]
 8003998:	06db      	lsls	r3, r3, #27
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039a0:	680b      	ldr	r3, [r1, #0]
 80039a2:	095a      	lsrs	r2, r3, #5
 80039a4:	6803      	ldr	r3, [r0, #0]
 80039a6:	06db      	lsls	r3, r3, #27
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039ae:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80039b2:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80039b6:	e9c1 2300 	strd	r2, r3, [r1]
        Ega ^= Da;
 80039ba:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 80039be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039c2:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	ea80 0c02 	eor.w	ip, r0, r2
 80039ce:	f8c7 c0d8 	str.w	ip, [r7, #216]	; 0xd8
 80039d2:	404b      	eors	r3, r1
 80039d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80039d8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80039dc:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 80039e0:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ega, 36);
 80039e4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039e8:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 80039ec:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039f0:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 80039f4:	6803      	ldr	r3, [r0, #0]
 80039f6:	011a      	lsls	r2, r3, #4
 80039f8:	680b      	ldr	r3, [r1, #0]
 80039fa:	0f1b      	lsrs	r3, r3, #28
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a02:	680b      	ldr	r3, [r1, #0]
 8003a04:	011a      	lsls	r2, r3, #4
 8003a06:	6803      	ldr	r3, [r0, #0]
 8003a08:	0f1b      	lsrs	r3, r3, #28
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a10:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003a14:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003a18:	e9c1 2300 	strd	r2, r3, [r1]
        Eke ^= De;
 8003a1c:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8003a20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a24:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	ea80 0c02 	eor.w	ip, r0, r2
 8003a30:	f8c7 c0c8 	str.w	ip, [r7, #200]	; 0xc8
 8003a34:	404b      	eors	r3, r1
 8003a36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a3a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8003a3e:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 8003a42:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eke, 10);
 8003a46:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a4a:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 8003a4e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a52:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 8003a56:	6803      	ldr	r3, [r0, #0]
 8003a58:	0d9a      	lsrs	r2, r3, #22
 8003a5a:	680b      	ldr	r3, [r1, #0]
 8003a5c:	029b      	lsls	r3, r3, #10
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a64:	680b      	ldr	r3, [r1, #0]
 8003a66:	0d9a      	lsrs	r2, r3, #22
 8003a68:	6803      	ldr	r3, [r0, #0]
 8003a6a:	029b      	lsls	r3, r3, #10
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a72:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003a76:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8003a7a:	e9c1 2300 	strd	r2, r3, [r1]
        Emi ^= Di;
 8003a7e:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8003a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a86:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	ea80 0c02 	eor.w	ip, r0, r2
 8003a92:	f8c7 c0b8 	str.w	ip, [r7, #184]	; 0xb8
 8003a96:	404b      	eors	r3, r1
 8003a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a9c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8003aa0:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8003aa4:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emi, 15);
 8003aa8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003aac:	f5a3 70d8 	sub.w	r0, r3, #432	; 0x1b0
 8003ab0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ab4:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8003ab8:	6803      	ldr	r3, [r0, #0]
 8003aba:	0c5a      	lsrs	r2, r3, #17
 8003abc:	680b      	ldr	r3, [r1, #0]
 8003abe:	03db      	lsls	r3, r3, #15
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ac6:	680b      	ldr	r3, [r1, #0]
 8003ac8:	0c5a      	lsrs	r2, r3, #17
 8003aca:	6803      	ldr	r3, [r0, #0]
 8003acc:	03db      	lsls	r3, r3, #15
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ad4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003ad8:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8003adc:	e9c1 2300 	strd	r2, r3, [r1]
        Eso ^= Do;
 8003ae0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8003ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ae8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	ea80 0c02 	eor.w	ip, r0, r2
 8003af4:	f8c7 c0a8 	str.w	ip, [r7, #168]	; 0xa8
 8003af8:	404b      	eors	r3, r1
 8003afa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003afe:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8003b02:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8003b06:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Eso, 56);
 8003b0a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003b0e:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8003b12:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003b16:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 8003b1a:	6803      	ldr	r3, [r0, #0]
 8003b1c:	061a      	lsls	r2, r3, #24
 8003b1e:	680b      	ldr	r3, [r1, #0]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b28:	680b      	ldr	r3, [r1, #0]
 8003b2a:	061a      	lsls	r2, r3, #24
 8003b2c:	6803      	ldr	r3, [r0, #0]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b36:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003b3a:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8003b3e:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = BCa ^ ((~BCe) & BCi);
 8003b42:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	43d1      	mvns	r1, r2
 8003b4c:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 8003b50:	43db      	mvns	r3, r3
 8003b52:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8003b56:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 8003b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b66:	4684      	mov	ip, r0
 8003b68:	ea0c 0c02 	and.w	ip, ip, r2
 8003b6c:	f8c7 c5c8 	str.w	ip, [r7, #1480]	; 0x5c8
 8003b70:	400b      	ands	r3, r1
 8003b72:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8003b76:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 8003b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b86:	4684      	mov	ip, r0
 8003b88:	ea82 0c0c 	eor.w	ip, r2, ip
 8003b8c:	f8c7 c098 	str.w	ip, [r7, #152]	; 0x98
 8003b90:	404b      	eors	r3, r1
 8003b92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b96:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8003b9a:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8003b9e:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = BCe ^ ((~BCi) & BCo);
 8003ba2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	43d1      	mvns	r1, r2
 8003bac:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8003bb6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 8003bc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bc6:	4684      	mov	ip, r0
 8003bc8:	ea0c 0c02 	and.w	ip, ip, r2
 8003bcc:	f8c7 c5b8 	str.w	ip, [r7, #1464]	; 0x5b8
 8003bd0:	400b      	ands	r3, r1
 8003bd2:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8003bd6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8003be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003be6:	4684      	mov	ip, r0
 8003be8:	ea82 0c0c 	eor.w	ip, r2, ip
 8003bec:	f8c7 c090 	str.w	ip, [r7, #144]	; 0x90
 8003bf0:	404b      	eors	r3, r1
 8003bf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bf6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003bfa:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8003bfe:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = BCi ^ ((~BCo) & BCu);
 8003c02:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	43d1      	mvns	r1, r2
 8003c0c:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8003c10:	43db      	mvns	r3, r3
 8003c12:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8003c16:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8003c22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c26:	4684      	mov	ip, r0
 8003c28:	ea0c 0c02 	and.w	ip, ip, r2
 8003c2c:	f8c7 c5a8 	str.w	ip, [r7, #1448]	; 0x5a8
 8003c30:	400b      	ands	r3, r1
 8003c32:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8003c36:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 8003c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c46:	4684      	mov	ip, r0
 8003c48:	ea82 0c0c 	eor.w	ip, r2, ip
 8003c4c:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
 8003c50:	404b      	eors	r3, r1
 8003c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c56:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c5a:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8003c5e:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = BCo ^ ((~BCu) & BCa);
 8003c62:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	43d1      	mvns	r1, r2
 8003c6c:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8003c70:	43db      	mvns	r3, r3
 8003c72:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8003c76:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8003c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c86:	4684      	mov	ip, r0
 8003c88:	ea0c 0c02 	and.w	ip, ip, r2
 8003c8c:	f8c7 c598 	str.w	ip, [r7, #1432]	; 0x598
 8003c90:	400b      	ands	r3, r1
 8003c92:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8003c96:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8003ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ca6:	4684      	mov	ip, r0
 8003ca8:	ea82 0c0c 	eor.w	ip, r2, ip
 8003cac:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8003cb0:	404b      	eors	r3, r1
 8003cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cb6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003cba:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8003cbe:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = BCu ^ ((~BCa) & BCe);
 8003cc2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	43d1      	mvns	r1, r2
 8003ccc:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8003cd6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8003ce2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ce6:	4684      	mov	ip, r0
 8003ce8:	ea0c 0c02 	and.w	ip, ip, r2
 8003cec:	f8c7 c588 	str.w	ip, [r7, #1416]	; 0x588
 8003cf0:	400b      	ands	r3, r1
 8003cf2:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8003cf6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8003d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d06:	4684      	mov	ip, r0
 8003d08:	ea82 0c0c 	eor.w	ip, r2, ip
 8003d0c:	f8c7 c078 	str.w	ip, [r7, #120]	; 0x78
 8003d10:	404b      	eors	r3, r1
 8003d12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d14:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003d18:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8003d1c:	e9c1 2300 	strd	r2, r3, [r1]

        Ebi ^= Di;
 8003d20:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003d24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d28:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	ea80 0c02 	eor.w	ip, r0, r2
 8003d34:	f8c7 c070 	str.w	ip, [r7, #112]	; 0x70
 8003d38:	404b      	eors	r3, r1
 8003d3a:	677b      	str	r3, [r7, #116]	; 0x74
 8003d3c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d40:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8003d44:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebi, 62);
 8003d48:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003d4c:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8003d50:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003d54:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 8003d58:	6803      	ldr	r3, [r0, #0]
 8003d5a:	079a      	lsls	r2, r3, #30
 8003d5c:	680b      	ldr	r3, [r1, #0]
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	4313      	orrs	r3, r2
 8003d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d64:	680b      	ldr	r3, [r1, #0]
 8003d66:	079a      	lsls	r2, r3, #30
 8003d68:	6803      	ldr	r3, [r0, #0]
 8003d6a:	089b      	lsrs	r3, r3, #2
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d70:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003d74:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8003d78:	e9c1 2300 	strd	r2, r3, [r1]
        Ego ^= Do;
 8003d7c:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8003d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d84:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	ea80 0c02 	eor.w	ip, r0, r2
 8003d90:	f8c7 c060 	str.w	ip, [r7, #96]	; 0x60
 8003d94:	404b      	eors	r3, r1
 8003d96:	667b      	str	r3, [r7, #100]	; 0x64
 8003d98:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003d9c:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 8003da0:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ego, 55);
 8003da4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003da8:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 8003dac:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003db0:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 8003db4:	6803      	ldr	r3, [r0, #0]
 8003db6:	05da      	lsls	r2, r3, #23
 8003db8:	680b      	ldr	r3, [r1, #0]
 8003dba:	0a5b      	lsrs	r3, r3, #9
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dc0:	680b      	ldr	r3, [r1, #0]
 8003dc2:	05da      	lsls	r2, r3, #23
 8003dc4:	6803      	ldr	r3, [r0, #0]
 8003dc6:	0a5b      	lsrs	r3, r3, #9
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dd0:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003dd4:	e9c1 2300 	strd	r2, r3, [r1]
        Eku ^= Du;
 8003dd8:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8003ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003de0:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	ea80 0c02 	eor.w	ip, r0, r2
 8003dec:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8003df0:	404b      	eors	r3, r1
 8003df2:	657b      	str	r3, [r7, #84]	; 0x54
 8003df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003df8:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8003dfc:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eku, 39);
 8003e00:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003e04:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 8003e08:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003e0c:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 8003e10:	6803      	ldr	r3, [r0, #0]
 8003e12:	01da      	lsls	r2, r3, #7
 8003e14:	680b      	ldr	r3, [r1, #0]
 8003e16:	0e5b      	lsrs	r3, r3, #25
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e1c:	680b      	ldr	r3, [r1, #0]
 8003e1e:	01da      	lsls	r2, r3, #7
 8003e20:	6803      	ldr	r3, [r0, #0]
 8003e22:	0e5b      	lsrs	r3, r3, #25
 8003e24:	4313      	orrs	r3, r2
 8003e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e2c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8003e30:	e9c1 2300 	strd	r2, r3, [r1]
        Ema ^= Da;
 8003e34:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8003e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e3c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	ea80 0c02 	eor.w	ip, r0, r2
 8003e48:	f8c7 c040 	str.w	ip, [r7, #64]	; 0x40
 8003e4c:	404b      	eors	r3, r1
 8003e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e54:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8003e58:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ema, 41);
 8003e5c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003e60:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8003e64:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003e68:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8003e6c:	6803      	ldr	r3, [r0, #0]
 8003e6e:	025a      	lsls	r2, r3, #9
 8003e70:	680b      	ldr	r3, [r1, #0]
 8003e72:	0ddb      	lsrs	r3, r3, #23
 8003e74:	4313      	orrs	r3, r2
 8003e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e78:	680b      	ldr	r3, [r1, #0]
 8003e7a:	025a      	lsls	r2, r3, #9
 8003e7c:	6803      	ldr	r3, [r0, #0]
 8003e7e:	0ddb      	lsrs	r3, r3, #23
 8003e80:	4313      	orrs	r3, r2
 8003e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e88:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8003e8c:	e9c1 2300 	strd	r2, r3, [r1]
        Ese ^= De;
 8003e90:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8003e94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e98:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	ea80 0c02 	eor.w	ip, r0, r2
 8003ea4:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 8003ea8:	404b      	eors	r3, r1
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8003eac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003eb0:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8003eb4:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Ese, 2);
 8003eb8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ebc:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 8003ec0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ec4:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 8003ec8:	6803      	ldr	r3, [r0, #0]
 8003eca:	0f9a      	lsrs	r2, r3, #30
 8003ecc:	680b      	ldr	r3, [r1, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed4:	680b      	ldr	r3, [r1, #0]
 8003ed6:	0f9a      	lsrs	r2, r3, #30
 8003ed8:	6803      	ldr	r3, [r0, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4313      	orrs	r3, r2
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ee4:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8003ee8:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = BCa ^ ((~BCe) & BCi);
 8003eec:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	43d1      	mvns	r1, r2
 8003ef6:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 8003efa:	43db      	mvns	r3, r3
 8003efc:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8003f00:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8003f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f10:	4684      	mov	ip, r0
 8003f12:	ea0c 0c02 	and.w	ip, ip, r2
 8003f16:	f8c7 c578 	str.w	ip, [r7, #1400]	; 0x578
 8003f1a:	400b      	ands	r3, r1
 8003f1c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8003f20:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8003f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f30:	4684      	mov	ip, r0
 8003f32:	ea82 0c0c 	eor.w	ip, r2, ip
 8003f36:	f8c7 c020 	str.w	ip, [r7, #32]
 8003f3a:	404b      	eors	r3, r1
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f42:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8003f46:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = BCe ^ ((~BCi) & BCo);
 8003f4a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	43d1      	mvns	r1, r2
 8003f54:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8003f5e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 8003f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f6e:	4684      	mov	ip, r0
 8003f70:	ea0c 0c02 	and.w	ip, ip, r2
 8003f74:	f8c7 c568 	str.w	ip, [r7, #1384]	; 0x568
 8003f78:	400b      	ands	r3, r1
 8003f7a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8003f7e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8003f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f8e:	4684      	mov	ip, r0
 8003f90:	ea82 0c0c 	eor.w	ip, r2, ip
 8003f94:	f8c7 c018 	str.w	ip, [r7, #24]
 8003f98:	404b      	eors	r3, r1
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fa0:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8003fa4:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = BCi ^ ((~BCo) & BCu);
 8003fa8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	43d1      	mvns	r1, r2
 8003fb2:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8003fbc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8003fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fcc:	4684      	mov	ip, r0
 8003fce:	ea0c 0c02 	and.w	ip, ip, r2
 8003fd2:	f8c7 c558 	str.w	ip, [r7, #1368]	; 0x558
 8003fd6:	400b      	ands	r3, r1
 8003fd8:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8003fdc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8003fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fec:	4684      	mov	ip, r0
 8003fee:	ea82 0c0c 	eor.w	ip, r2, ip
 8003ff2:	f8c7 c010 	str.w	ip, [r7, #16]
 8003ff6:	404b      	eors	r3, r1
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ffe:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8004002:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = BCo ^ ((~BCu) & BCa);
 8004006:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	43d1      	mvns	r1, r2
 8004010:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 8004014:	43db      	mvns	r3, r3
 8004016:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 800401a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8004026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800402a:	4684      	mov	ip, r0
 800402c:	ea0c 0a02 	and.w	sl, ip, r2
 8004030:	ea01 0b03 	and.w	fp, r1, r3
 8004034:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	ea82 010a 	eor.w	r1, r2, sl
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	ea83 030b 	eor.w	r3, r3, fp
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800404c:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8004050:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = BCu ^ ((~BCa) & BCe);
 8004054:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	ea6f 0802 	mvn.w	r8, r2
 8004060:	ea6f 0903 	mvn.w	r9, r3
 8004064:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	ea08 0402 	and.w	r4, r8, r2
 8004070:	ea09 0503 	and.w	r5, r9, r3
 8004074:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	ea82 0104 	eor.w	r1, r2, r4
 8004080:	6039      	str	r1, [r7, #0]
 8004082:	406b      	eors	r3, r5
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800408a:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800408e:	e9c1 2300 	strd	r2, r3, [r1]
    for (round = 0; round < NROUNDS; round += 2) {
 8004092:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8004096:	3302      	adds	r3, #2
 8004098:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800409c:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80040a0:	2b17      	cmp	r3, #23
 80040a2:	f77d a8eb 	ble.w	800127c <KeccakF1600_StatePermute+0x244>
    }

    // copyToState(state, A)
    state[0] = Aba;
 80040a6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80040aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040ae:	6819      	ldr	r1, [r3, #0]
 80040b0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	e9c1 2300 	strd	r2, r3, [r1]
    state[1] = Abe;
 80040bc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80040c0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f103 0108 	add.w	r1, r3, #8
 80040ca:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	e9c1 2300 	strd	r2, r3, [r1]
    state[2] = Abi;
 80040d6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80040da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f103 0110 	add.w	r1, r3, #16
 80040e4:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	e9c1 2300 	strd	r2, r3, [r1]
    state[3] = Abo;
 80040f0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80040f4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f103 0118 	add.w	r1, r3, #24
 80040fe:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	e9c1 2300 	strd	r2, r3, [r1]
    state[4] = Abu;
 800410a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800410e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f103 0120 	add.w	r1, r3, #32
 8004118:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	e9c1 2300 	strd	r2, r3, [r1]
    state[5] = Aga;
 8004124:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8004128:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8004132:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	e9c1 2300 	strd	r2, r3, [r1]
    state[6] = Age;
 800413e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8004142:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800414c:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	e9c1 2300 	strd	r2, r3, [r1]
    state[7] = Agi;
 8004158:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800415c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004166:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	e9c1 2300 	strd	r2, r3, [r1]
    state[8] = Ago;
 8004172:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8004176:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8004180:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	e9c1 2300 	strd	r2, r3, [r1]
    state[9] = Agu;
 800418c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8004190:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800419a:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	e9c1 2300 	strd	r2, r3, [r1]
    state[10] = Aka;
 80041a6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80041aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80041b4:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	e9c1 2300 	strd	r2, r3, [r1]
    state[11] = Ake;
 80041c0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80041c4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80041ce:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	e9c1 2300 	strd	r2, r3, [r1]
    state[12] = Aki;
 80041da:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80041de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f103 0160 	add.w	r1, r3, #96	; 0x60
 80041e8:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	e9c1 2300 	strd	r2, r3, [r1]
    state[13] = Ako;
 80041f4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80041f8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8004202:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	e9c1 2300 	strd	r2, r3, [r1]
    state[14] = Aku;
 800420e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8004212:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800421c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	e9c1 2300 	strd	r2, r3, [r1]
    state[15] = Ama;
 8004228:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800422c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8004236:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	e9c1 2300 	strd	r2, r3, [r1]
    state[16] = Ame;
 8004242:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8004246:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8004250:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	e9c1 2300 	strd	r2, r3, [r1]
    state[17] = Ami;
 800425c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8004260:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800426a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	e9c1 2300 	strd	r2, r3, [r1]
    state[18] = Amo;
 8004276:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800427a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8004284:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	e9c1 2300 	strd	r2, r3, [r1]
    state[19] = Amu;
 8004290:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8004294:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800429e:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	e9c1 2300 	strd	r2, r3, [r1]
    state[20] = Asa;
 80042aa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80042ae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 80042b8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	e9c1 2300 	strd	r2, r3, [r1]
    state[21] = Ase;
 80042c4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80042c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80042d2:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	e9c1 2300 	strd	r2, r3, [r1]
    state[22] = Asi;
 80042de:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80042e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 80042ec:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	e9c1 2300 	strd	r2, r3, [r1]
    state[23] = Aso;
 80042f8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80042fc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8004306:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	e9c1 2300 	strd	r2, r3, [r1]
    state[24] = Asu;
 8004312:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8004316:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8004320:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	e9c1 2300 	strd	r2, r3, [r1]
}
 800432c:	bf00      	nop
 800432e:	f607 378c 	addw	r7, r7, #2956	; 0xb8c
 8004332:	46bd      	mov	sp, r7
 8004334:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop

0800433c <keccak_absorb>:
 *              - size_t mlen: length of input in bytes
 *              - uint8_t p: domain-separation byte for different
 *                                 Keccak-derived functions
 **************************************************/
static void keccak_absorb(uint64_t *s, uint32_t r, const uint8_t *m,
                          size_t mlen, uint8_t p) {
 800433c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004340:	b0b9      	sub	sp, #228	; 0xe4
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	603b      	str	r3, [r7, #0]
    size_t i;
    uint8_t t[200];

    /* Zero state */
    for (i = 0; i < 25; ++i) {
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004352:	e00f      	b.n	8004374 <keccak_absorb+0x38>
        s[i] = 0;
 8004354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	18d1      	adds	r1, r2, r3
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 25; ++i) {
 800436a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800436e:	3301      	adds	r3, #1
 8004370:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004378:	2b18      	cmp	r3, #24
 800437a:	d9eb      	bls.n	8004354 <keccak_absorb+0x18>
    }

    while (mlen >= r) {
 800437c:	e034      	b.n	80043e8 <keccak_absorb+0xac>
        for (i = 0; i < r / 8; ++i) {
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004384:	e01f      	b.n	80043c6 <keccak_absorb+0x8a>
            s[i] ^= load64(m + 8 * i);
 8004386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4413      	add	r3, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc fde7 	bl	8000f64 <load64>
 8004396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f8d7 60dc 	ldr.w	r6, [r7, #220]	; 0xdc
 80043a8:	00f6      	lsls	r6, r6, #3
 80043aa:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80043ae:	4466      	add	r6, ip
 80043b0:	ea80 0802 	eor.w	r8, r0, r2
 80043b4:	ea81 0903 	eor.w	r9, r1, r3
 80043b8:	e9c6 8900 	strd	r8, r9, [r6]
        for (i = 0; i < r / 8; ++i) {
 80043bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c0:	3301      	adds	r3, #1
 80043c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	08db      	lsrs	r3, r3, #3
 80043ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d3d9      	bcc.n	8004386 <keccak_absorb+0x4a>
        }

        KeccakF1600_StatePermute(s);
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7fc fe30 	bl	8001038 <KeccakF1600_StatePermute>
        mlen -= r;
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	603b      	str	r3, [r7, #0]
        m += r;
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4413      	add	r3, r2
 80043e6:	607b      	str	r3, [r7, #4]
    while (mlen >= r) {
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d2c6      	bcs.n	800437e <keccak_absorb+0x42>
    }

    for (i = 0; i < r; ++i) {
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043f6:	e00b      	b.n	8004410 <keccak_absorb+0xd4>
        t[i] = 0;
 80043f8:	f107 0214 	add.w	r2, r7, #20
 80043fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004400:	4413      	add	r3, r2
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < r; ++i) {
 8004406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800440a:	3301      	adds	r3, #1
 800440c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004410:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	d3ee      	bcc.n	80043f8 <keccak_absorb+0xbc>
    }
    for (i = 0; i < mlen; ++i) {
 800441a:	2300      	movs	r3, #0
 800441c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004420:	e010      	b.n	8004444 <keccak_absorb+0x108>
        t[i] = m[i];
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004428:	4413      	add	r3, r2
 800442a:	7819      	ldrb	r1, [r3, #0]
 800442c:	f107 0214 	add.w	r2, r7, #20
 8004430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004434:	4413      	add	r3, r2
 8004436:	460a      	mov	r2, r1
 8004438:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < mlen; ++i) {
 800443a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800443e:	3301      	adds	r3, #1
 8004440:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004444:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d3e9      	bcc.n	8004422 <keccak_absorb+0xe6>
    }
    t[i] = p;
 800444e:	f107 0214 	add.w	r2, r7, #20
 8004452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004456:	4413      	add	r3, r2
 8004458:	f897 2100 	ldrb.w	r2, [r7, #256]	; 0x100
 800445c:	701a      	strb	r2, [r3, #0]
    t[r - 1] |= 128;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3b01      	subs	r3, #1
 8004462:	33e0      	adds	r3, #224	; 0xe0
 8004464:	443b      	add	r3, r7
 8004466:	f813 2ccc 	ldrb.w	r2, [r3, #-204]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3b01      	subs	r3, #1
 800446e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	33e0      	adds	r3, #224	; 0xe0
 8004476:	443b      	add	r3, r7
 8004478:	f803 2ccc 	strb.w	r2, [r3, #-204]
    for (i = 0; i < r / 8; ++i) {
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004482:	e020      	b.n	80044c6 <keccak_absorb+0x18a>
        s[i] ^= load64(t + 8 * i);
 8004484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	f107 0214 	add.w	r2, r7, #20
 800448e:	4413      	add	r3, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f7fc fd67 	bl	8000f64 <load64>
 8004496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f8d7 60dc 	ldr.w	r6, [r7, #220]	; 0xdc
 80044a8:	00f6      	lsls	r6, r6, #3
 80044aa:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80044ae:	4466      	add	r6, ip
 80044b0:	ea80 0402 	eor.w	r4, r0, r2
 80044b4:	ea81 0503 	eor.w	r5, r1, r3
 80044b8:	e9c6 4500 	strd	r4, r5, [r6]
    for (i = 0; i < r / 8; ++i) {
 80044bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c0:	3301      	adds	r3, #1
 80044c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	08db      	lsrs	r3, r3, #3
 80044ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3d8      	bcc.n	8004484 <keccak_absorb+0x148>
    }
}
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	37e4      	adds	r7, #228	; 0xe4
 80044d8:	46bd      	mov	sp, r7
 80044da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080044de <keccak_squeezeblocks>:
 *                                                squeezed (written to h)
 *              - uint64_t *s: pointer to input/output Keccak state
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 **************************************************/
static void keccak_squeezeblocks(uint8_t *h, size_t nblocks,
                                 uint64_t *s, uint32_t r) {
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	603b      	str	r3, [r7, #0]
    while (nblocks > 0) {
 80044ec:	e021      	b.n	8004532 <keccak_squeezeblocks+0x54>
        KeccakF1600_StatePermute(s);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fc fda2 	bl	8001038 <KeccakF1600_StatePermute>
        for (size_t i = 0; i < (r >> 3); i++) {
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e00f      	b.n	800451a <keccak_squeezeblocks+0x3c>
            store64(h + 8 * i, s[i]);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	18d1      	adds	r1, r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	4608      	mov	r0, r1
 8004510:	f7fc fd65 	bl	8000fde <store64>
        for (size_t i = 0; i < (r >> 3); i++) {
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	3301      	adds	r3, #1
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	08db      	lsrs	r3, r3, #3
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	429a      	cmp	r2, r3
 8004522:	d3ea      	bcc.n	80044fa <keccak_squeezeblocks+0x1c>
        }
        h += r;
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	4413      	add	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
        nblocks--;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	3b01      	subs	r3, #1
 8004530:	60bb      	str	r3, [r7, #8]
    while (nblocks > 0) {
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1da      	bne.n	80044ee <keccak_squeezeblocks+0x10>
    }
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <keccak_inc_init>:
 * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 *                First 25 values represent Keccak state.
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 **************************************************/
static void keccak_inc_init(uint64_t *s_inc) {
 8004542:	b480      	push	{r7}
 8004544:	b085      	sub	sp, #20
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
    size_t i;

    for (i = 0; i < 25; ++i) {
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	e00c      	b.n	800456a <keccak_inc_init+0x28>
        s_inc[i] = 0;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	18d1      	adds	r1, r2, r3
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 25; ++i) {
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b18      	cmp	r3, #24
 800456e:	d9ef      	bls.n	8004550 <keccak_inc_init+0xe>
    }
    s_inc[25] = 0;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <keccak_inc_absorb>:
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - const uint8_t *m: pointer to input to be absorbed into s
 *              - size_t mlen: length of input in bytes
 **************************************************/
static void keccak_inc_absorb(uint64_t *s_inc, uint32_t r, const uint8_t *m,
                              size_t mlen) {
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b0b0      	sub	sp, #192	; 0xc0
 8004592:	af00      	add	r7, sp, #0
 8004594:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8004598:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800459c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    size_t i;

    /* Recall that s_inc[25] is the non-absorbed bytes xored into the state */
    while (mlen + s_inc[25] >= r) {
 80045a4:	e0d1      	b.n	800474a <keccak_inc_absorb+0x1be>
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 80045a6:	2300      	movs	r3, #0
 80045a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045ac:	e098      	b.n	80046e0 <keccak_inc_absorb+0x154>
            /* Take the i'th byte from message
               xor with the s_inc[25] + i'th byte of the state; little-endian */
            s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 80045ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045b2:	33c8      	adds	r3, #200	; 0xc8
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80045bc:	2000      	movs	r0, #0
 80045be:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80045c2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 80045c6:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80045ca:	4641      	mov	r1, r8
 80045cc:	1851      	adds	r1, r2, r1
 80045ce:	67b9      	str	r1, [r7, #120]	; 0x78
 80045d0:	4649      	mov	r1, r9
 80045d2:	414b      	adcs	r3, r1
 80045d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045e2:	4641      	mov	r1, r8
 80045e4:	08ca      	lsrs	r2, r1, #3
 80045e6:	46cc      	mov	ip, r9
 80045e8:	ea42 724c 	orr.w	r2, r2, ip, lsl #29
 80045ec:	4649      	mov	r1, r9
 80045ee:	08cb      	lsrs	r3, r1, #3
 80045f0:	4613      	mov	r3, r2
 80045f2:	00da      	lsls	r2, r3, #3
 80045f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045f8:	4413      	add	r3, r2
 80045fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004602:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004606:	4413      	add	r3, r2
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2200      	movs	r2, #0
 800460e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004612:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004616:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800461a:	33c8      	adds	r3, #200	; 0xc8
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8004624:	2000      	movs	r0, #0
 8004626:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800462a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800462e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004632:	1851      	adds	r1, r2, r1
 8004634:	6739      	str	r1, [r7, #112]	; 0x70
 8004636:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800463a:	414b      	adcs	r3, r1
 800463c:	677b      	str	r3, [r7, #116]	; 0x74
 800463e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	00d9      	lsls	r1, r3, #3
 8004646:	f1a1 0320 	sub.w	r3, r1, #32
 800464a:	f1c1 0220 	rsb	r2, r1, #32
 800464e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8004652:	fa00 f501 	lsl.w	r5, r0, r1
 8004656:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800465a:	fa00 f303 	lsl.w	r3, r0, r3
 800465e:	431d      	orrs	r5, r3
 8004660:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004664:	fa23 f202 	lsr.w	r2, r3, r2
 8004668:	4315      	orrs	r5, r2
 800466a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800466e:	fa03 f401 	lsl.w	r4, r3, r1
 8004672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004676:	33c8      	adds	r3, #200	; 0xc8
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8004680:	2000      	movs	r0, #0
 8004682:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8004686:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800468a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800468e:	1851      	adds	r1, r2, r1
 8004690:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004694:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004698:	414b      	adcs	r3, r1
 800469a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80046aa:	08ca      	lsrs	r2, r1, #3
 80046ac:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80046b0:	468c      	mov	ip, r1
 80046b2:	ea42 724c 	orr.w	r2, r2, ip, lsl #29
 80046b6:	08cb      	lsrs	r3, r1, #3
 80046b8:	4613      	mov	r3, r2
 80046ba:	00da      	lsls	r2, r3, #3
 80046bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046c0:	4413      	add	r3, r2
 80046c2:	ea88 0204 	eor.w	r2, r8, r4
 80046c6:	66ba      	str	r2, [r7, #104]	; 0x68
 80046c8:	ea89 0205 	eor.w	r2, r9, r5
 80046cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80046d2:	e9c3 1200 	strd	r1, r2, [r3]
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 80046d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046da:	3301      	adds	r3, #1
 80046dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80046e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046e4:	33c8      	adds	r3, #200	; 0xc8
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046ee:	1a9a      	subs	r2, r3, r2
 80046f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046f4:	4293      	cmp	r3, r2
 80046f6:	f4ff af5a 	bcc.w	80045ae <keccak_inc_absorb+0x22>
        }
        mlen -= (size_t)(r - s_inc[25]);
 80046fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046fe:	33c8      	adds	r3, #200	; 0xc8
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004708:	1ad2      	subs	r2, r2, r3
 800470a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800470e:	4413      	add	r3, r2
 8004710:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        m += r - s_inc[25];
 8004714:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004718:	33c8      	adds	r3, #200	; 0xc8
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004722:	1a9a      	subs	r2, r3, r2
 8004724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004728:	4413      	add	r3, r2
 800472a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        s_inc[25] = 0;
 800472e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004732:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9c1 2300 	strd	r2, r3, [r1]

        KeccakF1600_StatePermute(s_inc);
 8004742:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004746:	f7fc fc77 	bl	8001038 <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 800474a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800474e:	2200      	movs	r2, #0
 8004750:	663b      	str	r3, [r7, #96]	; 0x60
 8004752:	667a      	str	r2, [r7, #100]	; 0x64
 8004754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004758:	33c8      	adds	r3, #200	; 0xc8
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004762:	4641      	mov	r1, r8
 8004764:	1889      	adds	r1, r1, r2
 8004766:	65b9      	str	r1, [r7, #88]	; 0x58
 8004768:	4649      	mov	r1, r9
 800476a:	eb41 0303 	adc.w	r3, r1, r3
 800476e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004770:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004774:	2200      	movs	r2, #0
 8004776:	653b      	str	r3, [r7, #80]	; 0x50
 8004778:	657a      	str	r2, [r7, #84]	; 0x54
 800477a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800477e:	4684      	mov	ip, r0
 8004780:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004784:	4696      	mov	lr, r2
 8004786:	45f4      	cmp	ip, lr
 8004788:	eb71 0303 	sbcs.w	r3, r1, r3
 800478c:	f4bf af0b 	bcs.w	80045a6 <keccak_inc_absorb+0x1a>
    }

    for (i = 0; i < mlen; i++) {
 8004790:	2300      	movs	r3, #0
 8004792:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004796:	e08f      	b.n	80048b8 <keccak_inc_absorb+0x32c>
        s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 8004798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800479c:	33c8      	adds	r3, #200	; 0xc8
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80047a6:	2000      	movs	r0, #0
 80047a8:	64b9      	str	r1, [r7, #72]	; 0x48
 80047aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 80047ac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80047b0:	4621      	mov	r1, r4
 80047b2:	1851      	adds	r1, r2, r1
 80047b4:	6439      	str	r1, [r7, #64]	; 0x40
 80047b6:	4629      	mov	r1, r5
 80047b8:	414b      	adcs	r3, r1
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80047c8:	4621      	mov	r1, r4
 80047ca:	08ca      	lsrs	r2, r1, #3
 80047cc:	4620      	mov	r0, r4
 80047ce:	4629      	mov	r1, r5
 80047d0:	460c      	mov	r4, r1
 80047d2:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
 80047d6:	08cb      	lsrs	r3, r1, #3
 80047d8:	4613      	mov	r3, r2
 80047da:	00da      	lsls	r2, r3, #3
 80047dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047e0:	4413      	add	r3, r2
 80047e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80047e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80047ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047ee:	4413      	add	r3, r2
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2200      	movs	r2, #0
 80047f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80047f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047fe:	33c8      	adds	r3, #200	; 0xc8
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8004808:	2000      	movs	r0, #0
 800480a:	6339      	str	r1, [r7, #48]	; 0x30
 800480c:	6378      	str	r0, [r7, #52]	; 0x34
 800480e:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8004812:	4641      	mov	r1, r8
 8004814:	1851      	adds	r1, r2, r1
 8004816:	62b9      	str	r1, [r7, #40]	; 0x28
 8004818:	4649      	mov	r1, r9
 800481a:	414b      	adcs	r3, r1
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	00d9      	lsls	r1, r3, #3
 8004826:	f1a1 0320 	sub.w	r3, r1, #32
 800482a:	f1c1 0220 	rsb	r2, r1, #32
 800482e:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004832:	4648      	mov	r0, r9
 8004834:	fa00 fb01 	lsl.w	fp, r0, r1
 8004838:	4640      	mov	r0, r8
 800483a:	fa00 f303 	lsl.w	r3, r0, r3
 800483e:	ea4b 0b03 	orr.w	fp, fp, r3
 8004842:	4643      	mov	r3, r8
 8004844:	fa23 f202 	lsr.w	r2, r3, r2
 8004848:	ea4b 0b02 	orr.w	fp, fp, r2
 800484c:	4643      	mov	r3, r8
 800484e:	fa03 fa01 	lsl.w	sl, r3, r1
 8004852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004856:	33c8      	adds	r3, #200	; 0xc8
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8004860:	2000      	movs	r0, #0
 8004862:	6239      	str	r1, [r7, #32]
 8004864:	6278      	str	r0, [r7, #36]	; 0x24
 8004866:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800486a:	4641      	mov	r1, r8
 800486c:	1851      	adds	r1, r2, r1
 800486e:	61b9      	str	r1, [r7, #24]
 8004870:	4649      	mov	r1, r9
 8004872:	414b      	adcs	r3, r1
 8004874:	61fb      	str	r3, [r7, #28]
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004882:	4641      	mov	r1, r8
 8004884:	08ca      	lsrs	r2, r1, #3
 8004886:	46cc      	mov	ip, r9
 8004888:	ea42 724c 	orr.w	r2, r2, ip, lsl #29
 800488c:	4649      	mov	r1, r9
 800488e:	08cb      	lsrs	r3, r1, #3
 8004890:	4613      	mov	r3, r2
 8004892:	00da      	lsls	r2, r3, #3
 8004894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004898:	4413      	add	r3, r2
 800489a:	ea84 020a 	eor.w	r2, r4, sl
 800489e:	613a      	str	r2, [r7, #16]
 80048a0:	ea85 020b 	eor.w	r2, r5, fp
 80048a4:	617a      	str	r2, [r7, #20]
 80048a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048aa:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 0; i < mlen; i++) {
 80048ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048b2:	3301      	adds	r3, #1
 80048b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80048b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048c0:	429a      	cmp	r2, r3
 80048c2:	f4ff af69 	bcc.w	8004798 <keccak_inc_absorb+0x20c>
    }
    s_inc[25] += mlen;
 80048c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048ca:	33c8      	adds	r3, #200	; 0xc8
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80048d4:	2000      	movs	r0, #0
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80048de:	31c8      	adds	r1, #200	; 0xc8
 80048e0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048e4:	4620      	mov	r0, r4
 80048e6:	1810      	adds	r0, r2, r0
 80048e8:	6038      	str	r0, [r7, #0]
 80048ea:	4628      	mov	r0, r5
 80048ec:	eb43 0000 	adc.w	r0, r3, r0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80048f6:	e9c1 3400 	strd	r3, r4, [r1]
}
 80048fa:	bf00      	nop
 80048fc:	37c0      	adds	r7, #192	; 0xc0
 80048fe:	46bd      	mov	sp, r7
 8004900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004904 <keccak_inc_finalize>:
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - uint8_t p: domain-separation byte for different
 *                                 Keccak-derived functions
 **************************************************/
static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 8004904:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004908:	b08a      	sub	sp, #40	; 0x28
 800490a:	af00      	add	r7, sp, #0
 800490c:	6278      	str	r0, [r7, #36]	; 0x24
 800490e:	6239      	str	r1, [r7, #32]
 8004910:	4613      	mov	r3, r2
 8004912:	77fb      	strb	r3, [r7, #31]
    /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
       so we can always use one more byte for p in the current state. */
    s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	33c8      	adds	r3, #200	; 0xc8
 8004918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	08c2      	lsrs	r2, r0, #3
 8004926:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 800492a:	08cb      	lsrs	r3, r1, #3
 800492c:	4613      	mov	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004932:	4413      	add	r3, r2
 8004934:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004938:	e9c7 1200 	strd	r1, r2, [r7]
 800493c:	7ffb      	ldrb	r3, [r7, #31]
 800493e:	2200      	movs	r2, #0
 8004940:	469a      	mov	sl, r3
 8004942:	4693      	mov	fp, r2
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	33c8      	adds	r3, #200	; 0xc8
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	4613      	mov	r3, r2
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	00da      	lsls	r2, r3, #3
 8004954:	f1a2 0120 	sub.w	r1, r2, #32
 8004958:	f1c2 0320 	rsb	r3, r2, #32
 800495c:	fa0b f502 	lsl.w	r5, fp, r2
 8004960:	fa0a f101 	lsl.w	r1, sl, r1
 8004964:	430d      	orrs	r5, r1
 8004966:	fa2a f303 	lsr.w	r3, sl, r3
 800496a:	431d      	orrs	r5, r3
 800496c:	fa0a f402 	lsl.w	r4, sl, r2
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	33c8      	adds	r3, #200	; 0xc8
 8004974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	08c2      	lsrs	r2, r0, #3
 8004982:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 8004986:	08cb      	lsrs	r3, r1, #3
 8004988:	4613      	mov	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498e:	4413      	add	r3, r2
 8004990:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004994:	4608      	mov	r0, r1
 8004996:	4060      	eors	r0, r4
 8004998:	6138      	str	r0, [r7, #16]
 800499a:	406a      	eors	r2, r5
 800499c:	617a      	str	r2, [r7, #20]
 800499e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80049a2:	e9c3 1200 	strd	r1, r2, [r3]
    s_inc[(r - 1) >> 3] ^= (uint64_t)128 << (8 * ((r - 1) & 0x07));
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	08db      	lsrs	r3, r3, #3
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b0:	4413      	add	r3, r2
 80049b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	00d9      	lsls	r1, r3, #3
 80049c0:	f04f 0280 	mov.w	r2, #128	; 0x80
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	f1a1 0620 	sub.w	r6, r1, #32
 80049cc:	f1c1 0020 	rsb	r0, r1, #32
 80049d0:	fa03 f901 	lsl.w	r9, r3, r1
 80049d4:	fa02 f606 	lsl.w	r6, r2, r6
 80049d8:	ea49 0906 	orr.w	r9, r9, r6
 80049dc:	fa22 f000 	lsr.w	r0, r2, r0
 80049e0:	ea49 0900 	orr.w	r9, r9, r0
 80049e4:	fa02 f801 	lsl.w	r8, r2, r1
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	08db      	lsrs	r3, r3, #3
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f2:	4413      	add	r3, r2
 80049f4:	ea84 0208 	eor.w	r2, r4, r8
 80049f8:	60ba      	str	r2, [r7, #8]
 80049fa:	ea85 0209 	eor.w	r2, r5, r9
 80049fe:	60fa      	str	r2, [r7, #12]
 8004a00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a04:	e9c3 1200 	strd	r1, r2, [r3]
    s_inc[25] = 0;
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004a1a:	bf00      	nop
 8004a1c:	3728      	adds	r7, #40	; 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a24:	4770      	bx	lr

08004a26 <keccak_inc_squeeze>:
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 **************************************************/
static void keccak_inc_squeeze(uint8_t *h, size_t outlen,
                               uint64_t *s_inc, uint32_t r) {
 8004a26:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a2a:	b09e      	sub	sp, #120	; 0x78
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8004a30:	66b9      	str	r1, [r7, #104]	; 0x68
 8004a32:	667a      	str	r2, [r7, #100]	; 0x64
 8004a34:	663b      	str	r3, [r7, #96]	; 0x60
    size_t i;

    /* First consume any bytes we still have sitting around */
    for (i = 0; i < outlen && i < s_inc[25]; i++) {
 8004a36:	2300      	movs	r3, #0
 8004a38:	677b      	str	r3, [r7, #116]	; 0x74
 8004a3a:	e070      	b.n	8004b1e <keccak_inc_squeeze+0xf8>
        /* There are s_inc[25] bytes left, so r - s_inc[25] is the first
           available byte. We consume from there, i.e., up to r. */
        h[i] = (uint8_t)(s_inc[(r - s_inc[25] + i) >> 3] >> (8 * ((r - s_inc[25] + i) & 0x07)));
 8004a3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a3e:	2200      	movs	r2, #0
 8004a40:	653b      	str	r3, [r7, #80]	; 0x50
 8004a42:	657a      	str	r2, [r7, #84]	; 0x54
 8004a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a46:	33c8      	adds	r3, #200	; 0xc8
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a50:	4604      	mov	r4, r0
 8004a52:	1aa4      	subs	r4, r4, r2
 8004a54:	64bc      	str	r4, [r7, #72]	; 0x48
 8004a56:	eb61 0303 	sbc.w	r3, r1, r3
 8004a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a5e:	2200      	movs	r2, #0
 8004a60:	643b      	str	r3, [r7, #64]	; 0x40
 8004a62:	647a      	str	r2, [r7, #68]	; 0x44
 8004a64:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004a68:	4623      	mov	r3, r4
 8004a6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004a6e:	4602      	mov	r2, r0
 8004a70:	189b      	adds	r3, r3, r2
 8004a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a74:	462b      	mov	r3, r5
 8004a76:	460a      	mov	r2, r1
 8004a78:	4153      	adcs	r3, r2
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8004a88:	4621      	mov	r1, r4
 8004a8a:	08ca      	lsrs	r2, r1, #3
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	4629      	mov	r1, r5
 8004a90:	460c      	mov	r4, r1
 8004a92:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
 8004a96:	08cb      	lsrs	r3, r1, #3
 8004a98:	4613      	mov	r3, r2
 8004a9a:	00da      	lsls	r2, r3, #3
 8004a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a9e:	4413      	add	r3, r2
 8004aa0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8004aaa:	637a      	str	r2, [r7, #52]	; 0x34
 8004aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aae:	33c8      	adds	r3, #200	; 0xc8
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004ab8:	4684      	mov	ip, r0
 8004aba:	ebbc 0c02 	subs.w	ip, ip, r2
 8004abe:	f8c7 c058 	str.w	ip, [r7, #88]	; 0x58
 8004ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8004ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aca:	2200      	movs	r2, #0
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ad2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	189b      	adds	r3, r3, r2
 8004ada:	623b      	str	r3, [r7, #32]
 8004adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ade:	460a      	mov	r2, r1
 8004ae0:	4153      	adcs	r3, r2
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	00d9      	lsls	r1, r3, #3
 8004aec:	f1c1 0320 	rsb	r3, r1, #32
 8004af0:	f1a1 0220 	sub.w	r2, r1, #32
 8004af4:	fa24 fa01 	lsr.w	sl, r4, r1
 8004af8:	fa05 f303 	lsl.w	r3, r5, r3
 8004afc:	ea4a 0a03 	orr.w	sl, sl, r3
 8004b00:	fa25 f202 	lsr.w	r2, r5, r2
 8004b04:	ea4a 0a02 	orr.w	sl, sl, r2
 8004b08:	fa25 fb01 	lsr.w	fp, r5, r1
 8004b0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b10:	441a      	add	r2, r3
 8004b12:	fa5f f38a 	uxtb.w	r3, sl
 8004b16:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < outlen && i < s_inc[25]; i++) {
 8004b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	677b      	str	r3, [r7, #116]	; 0x74
 8004b1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d20f      	bcs.n	8004b46 <keccak_inc_squeeze+0x120>
 8004b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b28:	2200      	movs	r2, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	61fa      	str	r2, [r7, #28]
 8004b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b30:	33c8      	adds	r3, #200	; 0xc8
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4294      	cmp	r4, r2
 8004b3e:	eb71 0303 	sbcs.w	r3, r1, r3
 8004b42:	f4ff af7b 	bcc.w	8004a3c <keccak_inc_squeeze+0x16>
    }
    h += i;
 8004b46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b4a:	4413      	add	r3, r2
 8004b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    outlen -= i;
 8004b4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	66bb      	str	r3, [r7, #104]	; 0x68
    s_inc[25] -= i;
 8004b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b58:	33c8      	adds	r3, #200	; 0xc8
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004b60:	2000      	movs	r0, #0
 8004b62:	6139      	str	r1, [r7, #16]
 8004b64:	6178      	str	r0, [r7, #20]
 8004b66:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004b68:	31c8      	adds	r1, #200	; 0xc8
 8004b6a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b6e:	4620      	mov	r0, r4
 8004b70:	1a10      	subs	r0, r2, r0
 8004b72:	60b8      	str	r0, [r7, #8]
 8004b74:	4628      	mov	r0, r5
 8004b76:	eb63 0300 	sbc.w	r3, r3, r0
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b80:	e9c1 3400 	strd	r3, r4, [r1]

    /* Then squeeze the remaining necessary blocks */
    while (outlen > 0) {
 8004b84:	e045      	b.n	8004c12 <keccak_inc_squeeze+0x1ec>
        KeccakF1600_StatePermute(s_inc);
 8004b86:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004b88:	f7fc fa56 	bl	8001038 <KeccakF1600_StatePermute>

        for (i = 0; i < outlen && i < r; i++) {
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	677b      	str	r3, [r7, #116]	; 0x74
 8004b90:	e023      	b.n	8004bda <keccak_inc_squeeze+0x1b4>
            h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
 8004b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b94:	08db      	lsrs	r3, r3, #3
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b9a:	4413      	add	r3, r2
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004ba2:	f001 0107 	and.w	r1, r1, #7
 8004ba6:	00c9      	lsls	r1, r1, #3
 8004ba8:	f1c1 0420 	rsb	r4, r1, #32
 8004bac:	f1a1 0020 	sub.w	r0, r1, #32
 8004bb0:	fa22 f801 	lsr.w	r8, r2, r1
 8004bb4:	fa03 f404 	lsl.w	r4, r3, r4
 8004bb8:	ea48 0804 	orr.w	r8, r8, r4
 8004bbc:	fa23 f000 	lsr.w	r0, r3, r0
 8004bc0:	ea48 0800 	orr.w	r8, r8, r0
 8004bc4:	fa23 f901 	lsr.w	r9, r3, r1
 8004bc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bcc:	4413      	add	r3, r2
 8004bce:	fa5f f288 	uxtb.w	r2, r8
 8004bd2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < outlen && i < r; i++) {
 8004bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	677b      	str	r3, [r7, #116]	; 0x74
 8004bda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d203      	bcs.n	8004bea <keccak_inc_squeeze+0x1c4>
 8004be2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d3d3      	bcc.n	8004b92 <keccak_inc_squeeze+0x16c>
        }
        h += i;
 8004bea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bee:	4413      	add	r3, r2
 8004bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
        outlen -= i;
 8004bf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	66bb      	str	r3, [r7, #104]	; 0x68
        s_inc[25] = r - i;
 8004bfa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bfe:	1ad2      	subs	r2, r2, r3
 8004c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c02:	33c8      	adds	r3, #200	; 0xc8
 8004c04:	2100      	movs	r1, #0
 8004c06:	603a      	str	r2, [r7, #0]
 8004c08:	6079      	str	r1, [r7, #4]
 8004c0a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c0e:	e9c3 1200 	strd	r1, r2, [r3]
    while (outlen > 0) {
 8004c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1b6      	bne.n	8004b86 <keccak_inc_squeeze+0x160>
    }
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	3778      	adds	r7, #120	; 0x78
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c24 <shake256_inc_init>:

void shake128_inc_ctx_release(shake128incctx *state) {
    free(state->ctx);
}

void shake256_inc_init(shake256incctx *state) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
    state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 8004c2c:	20d0      	movs	r0, #208	; 0xd0
 8004c2e:	f7fb fb45 	bl	80002bc <malloc>
 8004c32:	4603      	mov	r3, r0
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
    if (state->ctx == NULL) {
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <shake256_inc_init+0x24>
        exit(111);
 8004c42:	206f      	movs	r0, #111	; 0x6f
 8004c44:	f7fb faf0 	bl	8000228 <exit>
    }
    keccak_inc_init(state->ctx);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff fc78 	bl	8004542 <keccak_inc_init>
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <shake256_inc_absorb>:

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	2188      	movs	r1, #136	; 0x88
 8004c70:	f7ff fc8c 	bl	800458c <keccak_inc_absorb>
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <shake256_inc_finalize>:

void shake256_inc_finalize(shake256incctx *state) {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	221f      	movs	r2, #31
 8004c8a:	2188      	movs	r1, #136	; 0x88
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fe39 	bl	8004904 <keccak_inc_finalize>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <shake256_inc_squeeze>:

void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	2388      	movs	r3, #136	; 0x88
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff feb9 	bl	8004a26 <keccak_inc_squeeze>
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <shake256_inc_ctx_release>:
        exit(111);
    }
    memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
}

void shake256_inc_ctx_release(shake256incctx *state) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
    free(state->ctx);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fb faff 	bl	80002cc <free>
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <shake128_absorb>:
 * Arguments:   - uint64_t *s: pointer to (uninitialized) output Keccak state
 *              - const uint8_t *input: pointer to input to be absorbed
 *                                            into s
 *              - size_t inlen: length of input in bytes
 **************************************************/
void shake128_absorb(shake128ctx *state, const uint8_t *input, size_t inlen) {
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af02      	add	r7, sp, #8
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
    state->ctx = malloc(PQC_SHAKECTX_BYTES);
 8004ce2:	20c8      	movs	r0, #200	; 0xc8
 8004ce4:	f7fb faea 	bl	80002bc <malloc>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461a      	mov	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	601a      	str	r2, [r3, #0]
    if (state->ctx == NULL) {
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <shake128_absorb+0x28>
        exit(111);
 8004cf8:	206f      	movs	r0, #111	; 0x6f
 8004cfa:	f7fb fa95 	bl	8000228 <exit>
    }
    keccak_absorb(state->ctx, SHAKE128_RATE, input, inlen, 0x1F);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	231f      	movs	r3, #31
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	21a8      	movs	r1, #168	; 0xa8
 8004d0c:	f7ff fb16 	bl	800433c <keccak_absorb>
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <shake128_squeezeblocks>:
 * Arguments:   - uint8_t *output: pointer to output blocks
 *              - size_t nblocks: number of blocks to be squeezed
 *                                            (written to output)
 *              - shake128ctx *state: pointer to input/output Keccak state
 **************************************************/
void shake128_squeezeblocks(uint8_t *output, size_t nblocks, shake128ctx *state) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
    keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE128_RATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	23a8      	movs	r3, #168	; 0xa8
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7ff fbd6 	bl	80044de <keccak_squeezeblocks>
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <shake128_ctx_release>:
    }
    memcpy(dest->ctx, src->ctx, PQC_SHAKECTX_BYTES);
}

/** Release the allocated state. Call only once. */
void shake128_ctx_release(shake128ctx *state) {
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
    free(state->ctx);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fac0 	bl	80002cc <free>
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <shake256_absorb>:
 * Arguments:   - shake256ctx *state: pointer to (uninitialized) output Keccak state
 *              - const uint8_t *input: pointer to input to be absorbed
 *                                            into s
 *              - size_t inlen: length of input in bytes
 **************************************************/
void shake256_absorb(shake256ctx *state, const uint8_t *input, size_t inlen) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
    state->ctx = malloc(PQC_SHAKECTX_BYTES);
 8004d60:	20c8      	movs	r0, #200	; 0xc8
 8004d62:	f7fb faab 	bl	80002bc <malloc>
 8004d66:	4603      	mov	r3, r0
 8004d68:	461a      	mov	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]
    if (state->ctx == NULL) {
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <shake256_absorb+0x28>
        exit(111);
 8004d76:	206f      	movs	r0, #111	; 0x6f
 8004d78:	f7fb fa56 	bl	8000228 <exit>
    }
    keccak_absorb(state->ctx, SHAKE256_RATE, input, inlen, 0x1F);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	231f      	movs	r3, #31
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	2188      	movs	r1, #136	; 0x88
 8004d8a:	f7ff fad7 	bl	800433c <keccak_absorb>
}
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <shake256_squeezeblocks>:
 * Arguments:   - uint8_t *output: pointer to output blocks
 *              - size_t nblocks: number of blocks to be squeezed
 *                                (written to output)
 *              - shake256ctx *state: pointer to input/output Keccak state
 **************************************************/
void shake256_squeezeblocks(uint8_t *output, size_t nblocks, shake256ctx *state) {
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
    keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE256_RATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	2388      	movs	r3, #136	; 0x88
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff fb97 	bl	80044de <keccak_squeezeblocks>
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <shake256_ctx_release>:
    }
    memcpy(dest->ctx, src->ctx, PQC_SHAKECTX_BYTES);
}

/** Release the allocated state. Call only once. */
void shake256_ctx_release(shake256ctx *state) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
    free(state->ctx);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fb fa81 	bl	80002cc <free>
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	0000      	movs	r0, r0

08004dd4 <shake256>:
 *              - size_t outlen: requested output length in bytes
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen: length of input in bytes
 **************************************************/
void shake256(uint8_t *output, size_t outlen,
              const uint8_t *input, size_t inlen) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b0aa      	sub	sp, #168	; 0xa8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
    size_t nblocks = outlen / SHAKE256_RATE;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4a2a      	ldr	r2, [pc, #168]	; (8004e90 <shake256+0xbc>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	09db      	lsrs	r3, r3, #7
 8004dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    uint8_t t[SHAKE256_RATE];
    shake256ctx s;

    shake256_absorb(&s, input, inlen);
 8004df0:	f107 0314 	add.w	r3, r7, #20
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ffab 	bl	8004d54 <shake256_absorb>
    shake256_squeezeblocks(output, nblocks, &s);
 8004dfe:	f107 0314 	add.w	r3, r7, #20
 8004e02:	461a      	mov	r2, r3
 8004e04:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff ffc4 	bl	8004d96 <shake256_squeezeblocks>

    output += nblocks * SHAKE256_RATE;
 8004e0e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004e12:	4613      	mov	r3, r2
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	4413      	add	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
    outlen -= nblocks * SHAKE256_RATE;
 8004e22:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004e26:	4613      	mov	r3, r2
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	60bb      	str	r3, [r7, #8]

    if (outlen) {
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d020      	beq.n	8004e7e <shake256+0xaa>
        shake256_squeezeblocks(t, 1, &s);
 8004e3c:	f107 0214 	add.w	r2, r7, #20
 8004e40:	f107 0318 	add.w	r3, r7, #24
 8004e44:	2101      	movs	r1, #1
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff ffa5 	bl	8004d96 <shake256_squeezeblocks>
        for (size_t i = 0; i < outlen; ++i) {
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e52:	e00f      	b.n	8004e74 <shake256+0xa0>
            output[i] = t[i];
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f107 0118 	add.w	r1, r7, #24
 8004e60:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004e64:	440a      	add	r2, r1
 8004e66:	7812      	ldrb	r2, [r2, #0]
 8004e68:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < outlen; ++i) {
 8004e6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e74:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d3ea      	bcc.n	8004e54 <shake256+0x80>
        }
    }
    shake256_ctx_release(&s);
 8004e7e:	f107 0314 	add.w	r3, r7, #20
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff ff98 	bl	8004db8 <shake256_ctx_release>
}
 8004e88:	bf00      	nop
 8004e8a:	37a8      	adds	r7, #168	; 0xa8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	f0f0f0f1 	.word	0xf0f0f0f1

08004e94 <sha3_256>:
 *
 * Arguments:   - uint8_t *output:      pointer to output
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen:   length of input in bytes
 **************************************************/
void sha3_256(uint8_t *output, const uint8_t *input, size_t inlen) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b0dc      	sub	sp, #368	; 0x170
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e9e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004ea2:	6018      	str	r0, [r3, #0]
 8004ea4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004ea8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004eac:	6019      	str	r1, [r3, #0]
 8004eae:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004eb2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004eb6:	601a      	str	r2, [r3, #0]
    uint64_t s[25];
    uint8_t t[SHA3_256_RATE];

    /* Absorb input */
    keccak_absorb(s, SHA3_256_RATE, input, inlen, 0x06);
 8004eb8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004ebc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004ec0:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8004ec4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004ec8:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8004ecc:	2106      	movs	r1, #6
 8004ece:	9100      	str	r1, [sp, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	2188      	movs	r1, #136	; 0x88
 8004ed6:	f7ff fa31 	bl	800433c <keccak_absorb>

    /* Squeeze output */
    keccak_squeezeblocks(t, 1, s, SHA3_256_RATE);
 8004eda:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8004ede:	f107 0010 	add.w	r0, r7, #16
 8004ee2:	2388      	movs	r3, #136	; 0x88
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	f7ff fafa 	bl	80044de <keccak_squeezeblocks>

    for (size_t i = 0; i < 32; i++) {
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8004ef0:	e015      	b.n	8004f1e <sha3_256+0x8a>
        output[i] = t[i];
 8004ef2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004ef6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004f00:	4413      	add	r3, r2
 8004f02:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8004f06:	f5a2 71ac 	sub.w	r1, r2, #344	; 0x158
 8004f0a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8004f0e:	440a      	add	r2, r1
 8004f10:	7812      	ldrb	r2, [r2, #0]
 8004f12:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 32; i++) {
 8004f14:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8004f1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004f22:	2b1f      	cmp	r3, #31
 8004f24:	d9e5      	bls.n	8004ef2 <sha3_256+0x5e>
    }
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <sha3_512>:
 *
 * Arguments:   - uint8_t *output:      pointer to output
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen:   length of input in bytes
 **************************************************/
void sha3_512(uint8_t *output, const uint8_t *input, size_t inlen) {
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b0cc      	sub	sp, #304	; 0x130
 8004f36:	af02      	add	r7, sp, #8
 8004f38:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004f3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f40:	6018      	str	r0, [r3, #0]
 8004f42:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004f46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f4a:	6019      	str	r1, [r3, #0]
 8004f4c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004f50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f54:	601a      	str	r2, [r3, #0]
    uint64_t s[25];
    uint8_t t[SHA3_512_RATE];

    /* Absorb input */
    keccak_absorb(s, SHA3_512_RATE, input, inlen, 0x06);
 8004f56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004f5a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f5e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8004f62:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004f66:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004f6a:	2106      	movs	r1, #6
 8004f6c:	9100      	str	r1, [sp, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	2148      	movs	r1, #72	; 0x48
 8004f74:	f7ff f9e2 	bl	800433c <keccak_absorb>

    /* Squeeze output */
    keccak_squeezeblocks(t, 1, s, SHA3_512_RATE);
 8004f78:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004f7c:	f107 0010 	add.w	r0, r7, #16
 8004f80:	2348      	movs	r3, #72	; 0x48
 8004f82:	2101      	movs	r1, #1
 8004f84:	f7ff faab 	bl	80044de <keccak_squeezeblocks>

    for (size_t i = 0; i < 64; i++) {
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f8e:	e015      	b.n	8004fbc <sha3_512+0x8a>
        output[i] = t[i];
 8004f90:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004f94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8004fa4:	f5a2 718c 	sub.w	r1, r2, #280	; 0x118
 8004fa8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004fac:	440a      	add	r2, r1
 8004fae:	7812      	ldrb	r2, [r2, #0]
 8004fb0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < 64; i++) {
 8004fb2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fbc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fc0:	2b3f      	cmp	r3, #63	; 0x3f
 8004fc2:	d9e5      	bls.n	8004f90 <sha3_512+0x5e>
    }
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <pack_pk>:
*              polyvec *pk: pointer to the input public-key polyvec
*              const uint8_t *seed: pointer to the input public seed
**************************************************/
static void pack_pk(uint8_t r[KYBER_INDCPA_PUBLICKEYBYTES],
                    polyvec *pk,
                    const uint8_t seed[KYBER_SYMBYTES]) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
    PQCLEAN_KYBER512_CLEAN_polyvec_tobytes(r, pk);
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f001 fb87 	bl	80066f2 <PQCLEAN_KYBER512_CLEAN_polyvec_tobytes>
    memcpy(r + KYBER_POLYVECBYTES, seed, KYBER_SYMBYTES);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004fea:	2220      	movs	r2, #32
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fb fc1e 	bl	8000830 <memcpy>
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <unpack_pk>:
*              - uint8_t *seed: pointer to output seed to generate matrix A
*              - const uint8_t *packedpk: pointer to input serialized public key
**************************************************/
static void unpack_pk(polyvec *pk,
                      uint8_t seed[KYBER_SYMBYTES],
                      const uint8_t packedpk[KYBER_INDCPA_PUBLICKEYBYTES]) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
    PQCLEAN_KYBER512_CLEAN_polyvec_frombytes(pk, packedpk);
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f001 fb93 	bl	8006736 <PQCLEAN_KYBER512_CLEAN_polyvec_frombytes>
    memcpy(seed, packedpk + KYBER_POLYVECBYTES, KYBER_SYMBYTES);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005016:	2220      	movs	r2, #32
 8005018:	4619      	mov	r1, r3
 800501a:	68b8      	ldr	r0, [r7, #8]
 800501c:	f7fb fc08 	bl	8000830 <memcpy>
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <pack_sk>:
* Description: Serialize the secret key
*
* Arguments:   - uint8_t *r: pointer to output serialized secret key
*              - polyvec *sk: pointer to input vector of polynomials (secret key)
**************************************************/
static void pack_sk(uint8_t r[KYBER_INDCPA_SECRETKEYBYTES], polyvec *sk) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
    PQCLEAN_KYBER512_CLEAN_polyvec_tobytes(r, sk);
 8005032:	6839      	ldr	r1, [r7, #0]
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 fb5c 	bl	80066f2 <PQCLEAN_KYBER512_CLEAN_polyvec_tobytes>
}
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <unpack_sk>:
* Description: De-serialize the secret key; inverse of pack_sk
*
* Arguments:   - polyvec *sk: pointer to output vector of polynomials (secret key)
*              - const uint8_t *packedsk: pointer to input serialized secret key
**************************************************/
static void unpack_sk(polyvec *sk, const uint8_t packedsk[KYBER_INDCPA_SECRETKEYBYTES]) {
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
    PQCLEAN_KYBER512_CLEAN_polyvec_frombytes(sk, packedsk);
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 fb71 	bl	8006736 <PQCLEAN_KYBER512_CLEAN_polyvec_frombytes>
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <pack_ciphertext>:
*
* Arguments:   uint8_t *r: pointer to the output serialized ciphertext
*              poly *pk: pointer to the input vector of polynomials b
*              poly *v: pointer to the input polynomial v
**************************************************/
static void pack_ciphertext(uint8_t r[KYBER_INDCPA_BYTES], polyvec *b, poly *v) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
    PQCLEAN_KYBER512_CLEAN_polyvec_compress(r, b);
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f001 fa1e 	bl	80064ac <PQCLEAN_KYBER512_CLEAN_polyvec_compress>
    PQCLEAN_KYBER512_CLEAN_poly_compress(r + KYBER_POLYVECCOMPRESSEDBYTES, v);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fefd 	bl	8005e78 <PQCLEAN_KYBER512_CLEAN_poly_compress>
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <unpack_ciphertext>:
*
* Arguments:   - polyvec *b: pointer to the output vector of polynomials b
*              - poly *v: pointer to the output polynomial v
*              - const uint8_t *c: pointer to the input serialized ciphertext
**************************************************/
static void unpack_ciphertext(polyvec *b, poly *v, const uint8_t c[KYBER_INDCPA_BYTES]) {
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
    PQCLEAN_KYBER512_CLEAN_polyvec_decompress(b, c);
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f001 faaf 	bl	80065f8 <PQCLEAN_KYBER512_CLEAN_polyvec_decompress>
    PQCLEAN_KYBER512_CLEAN_poly_decompress(v, c + KYBER_POLYVECCOMPRESSEDBYTES);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80050a0:	4619      	mov	r1, r3
 80050a2:	68b8      	ldr	r0, [r7, #8]
 80050a4:	f000 ff60 	bl	8005f68 <PQCLEAN_KYBER512_CLEAN_poly_decompress>
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <rej_uniform>:
* Returns number of sampled 16-bit integers (at most len)
**************************************************/
static unsigned int rej_uniform(int16_t *r,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen) {
 80050b0:	b480      	push	{r7}
 80050b2:	b089      	sub	sp, #36	; 0x24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
    unsigned int ctr, pos;
    uint16_t val0, val1;

    ctr = pos = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	61fb      	str	r3, [r7, #28]
    while (ctr < len && pos + 3 <= buflen) {
 80050c6:	e047      	b.n	8005158 <rej_uniform+0xa8>
        val0 = ((buf[pos + 0] >> 0) | ((uint16_t)buf[pos + 1] << 8)) & 0xFFF;
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	4413      	add	r3, r2
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b21a      	sxth	r2, r3
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	3301      	adds	r3, #1
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	440b      	add	r3, r1
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	b21b      	sxth	r3, r3
 80050e0:	4313      	orrs	r3, r2
 80050e2:	b21b      	sxth	r3, r3
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ea:	82fb      	strh	r3, [r7, #22]
        val1 = ((buf[pos + 1] >> 4) | ((uint16_t)buf[pos + 2] << 4)) & 0xFFF;
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	3301      	adds	r3, #1
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4413      	add	r3, r2
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	091b      	lsrs	r3, r3, #4
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	b21a      	sxth	r2, r3
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	3302      	adds	r3, #2
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	440b      	add	r3, r1
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	b21b      	sxth	r3, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	b21b      	sxth	r3, r3
 800510e:	b29b      	uxth	r3, r3
 8005110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005114:	82bb      	strh	r3, [r7, #20]
        pos += 3;
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	3303      	adds	r3, #3
 800511a:	61bb      	str	r3, [r7, #24]

        if (val0 < KYBER_Q) {
 800511c:	8afb      	ldrh	r3, [r7, #22]
 800511e:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005122:	d808      	bhi.n	8005136 <rej_uniform+0x86>
            r[ctr++] = val0;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	61fa      	str	r2, [r7, #28]
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005134:	801a      	strh	r2, [r3, #0]
        }
        if (ctr < len && val1 < KYBER_Q) {
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	d20c      	bcs.n	8005158 <rej_uniform+0xa8>
 800513e:	8abb      	ldrh	r3, [r7, #20]
 8005140:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005144:	d808      	bhi.n	8005158 <rej_uniform+0xa8>
            r[ctr++] = val1;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	61fa      	str	r2, [r7, #28]
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005156:	801a      	strh	r2, [r3, #0]
    while (ctr < len && pos + 3 <= buflen) {
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	429a      	cmp	r2, r3
 800515e:	d204      	bcs.n	800516a <rej_uniform+0xba>
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	3303      	adds	r3, #3
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d2ae      	bcs.n	80050c8 <rej_uniform+0x18>
        }
    }

    return ctr;
 800516a:	69fb      	ldr	r3, [r7, #28]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3724      	adds	r7, #36	; 0x24
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr
 8005176:	0000      	movs	r0, r0

08005178 <PQCLEAN_KYBER512_CLEAN_gen_matrix>:
*              - const uint8_t *seed: pointer to input seed
*              - int transposed: boolean deciding whether A or A^T is generated
**************************************************/
#define GEN_MATRIX_NBLOCKS ((12*KYBER_N/8*(1 << 12)/KYBER_Q + XOF_BLOCKBYTES)/XOF_BLOCKBYTES)
// Not static for benchmarking
void PQCLEAN_KYBER512_CLEAN_gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed) {
 8005178:	b580      	push	{r7, lr}
 800517a:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 800517e:	af00      	add	r7, sp, #0
 8005180:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8005184:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8005188:	6018      	str	r0, [r3, #0]
 800518a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800518e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8005192:	6019      	str	r1, [r3, #0]
 8005194:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8005198:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800519c:	601a      	str	r2, [r3, #0]
    unsigned int ctr, i, j, k;
    unsigned int buflen, off;
    uint8_t buf[GEN_MATRIX_NBLOCKS * XOF_BLOCKBYTES + 2];
    xof_state state;

    for (i = 0; i < KYBER_K; i++) {
 800519e:	2300      	movs	r3, #0
 80051a0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80051a4:	e0c7      	b.n	8005336 <PQCLEAN_KYBER512_CLEAN_gen_matrix+0x1be>
        for (j = 0; j < KYBER_K; j++) {
 80051a6:	2300      	movs	r3, #0
 80051a8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80051ac:	e0b9      	b.n	8005322 <PQCLEAN_KYBER512_CLEAN_gen_matrix+0x1aa>
            if (transposed) {
 80051ae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80051b2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00f      	beq.n	80051dc <PQCLEAN_KYBER512_CLEAN_gen_matrix+0x64>
                xof_absorb(&state, seed, (uint8_t)i, (uint8_t)j);
 80051bc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80051cc:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 80051d0:	f107 0010 	add.w	r0, r7, #16
 80051d4:	6809      	ldr	r1, [r1, #0]
 80051d6:	f001 fbee 	bl	80069b6 <PQCLEAN_KYBER512_CLEAN_kyber_shake128_absorb>
 80051da:	e00e      	b.n	80051fa <PQCLEAN_KYBER512_CLEAN_gen_matrix+0x82>
            } else {
                xof_absorb(&state, seed, (uint8_t)j, (uint8_t)i);
 80051dc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80051ec:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 80051f0:	f107 0010 	add.w	r0, r7, #16
 80051f4:	6809      	ldr	r1, [r1, #0]
 80051f6:	f001 fbde 	bl	80069b6 <PQCLEAN_KYBER512_CLEAN_kyber_shake128_absorb>
            }

            xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);
 80051fa:	f107 0210 	add.w	r2, r7, #16
 80051fe:	f107 0314 	add.w	r3, r7, #20
 8005202:	2103      	movs	r1, #3
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fd87 	bl	8004d18 <shake128_squeezeblocks>
            buflen = GEN_MATRIX_NBLOCKS * XOF_BLOCKBYTES;
 800520a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800520e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
            ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);
 8005212:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005216:	029b      	lsls	r3, r3, #10
 8005218:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800521c:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	441a      	add	r2, r3
 8005224:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005228:	025b      	lsls	r3, r3, #9
 800522a:	18d0      	adds	r0, r2, r3
 800522c:	f107 0214 	add.w	r2, r7, #20
 8005230:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005238:	f7ff ff3a 	bl	80050b0 <rej_uniform>
 800523c:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224

            while (ctr < KYBER_N) {
 8005240:	e061      	b.n	8005306 <PQCLEAN_KYBER512_CLEAN_gen_matrix+0x18e>
                off = buflen % 3;
 8005242:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8005246:	4b41      	ldr	r3, [pc, #260]	; (800534c <PQCLEAN_KYBER512_CLEAN_gen_matrix+0x1d4>)
 8005248:	fba3 1302 	umull	r1, r3, r3, r2
 800524c:	0859      	lsrs	r1, r3, #1
 800524e:	460b      	mov	r3, r1
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	440b      	add	r3, r1
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                for (k = 0; k < off; k++) {
 800525a:	2300      	movs	r3, #0
 800525c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8005260:	e01a      	b.n	8005298 <PQCLEAN_KYBER512_CLEAN_gen_matrix+0x120>
                    buf[k] = buf[buflen - off + k];
 8005262:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8005266:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800526a:	1ad2      	subs	r2, r2, r3
 800526c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005270:	4413      	add	r3, r2
 8005272:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8005276:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800527a:	5cd1      	ldrb	r1, [r2, r3]
 800527c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8005280:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8005284:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005288:	4413      	add	r3, r2
 800528a:	460a      	mov	r2, r1
 800528c:	701a      	strb	r2, [r3, #0]
                for (k = 0; k < off; k++) {
 800528e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005292:	3301      	adds	r3, #1
 8005294:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8005298:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800529c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d3de      	bcc.n	8005262 <PQCLEAN_KYBER512_CLEAN_gen_matrix+0xea>
                }
                xof_squeezeblocks(buf + off, 1, &state);
 80052a4:	f107 0214 	add.w	r2, r7, #20
 80052a8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052ac:	4413      	add	r3, r2
 80052ae:	f107 0210 	add.w	r2, r7, #16
 80052b2:	2101      	movs	r1, #1
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fd2f 	bl	8004d18 <shake128_squeezeblocks>
                buflen = off + XOF_BLOCKBYTES;
 80052ba:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052be:	33a8      	adds	r3, #168	; 0xa8
 80052c0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
                ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
 80052c4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80052c8:	029b      	lsls	r3, r3, #10
 80052ca:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80052ce:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	441a      	add	r2, r3
 80052d6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80052da:	025b      	lsls	r3, r3, #9
 80052dc:	441a      	add	r2, r3
 80052de:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	18d0      	adds	r0, r2, r3
 80052e6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80052ea:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80052ee:	f107 0214 	add.w	r2, r7, #20
 80052f2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80052f6:	f7ff fedb 	bl	80050b0 <rej_uniform>
 80052fa:	4602      	mov	r2, r0
 80052fc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005300:	4413      	add	r3, r2
 8005302:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
            while (ctr < KYBER_N) {
 8005306:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800530a:	2bff      	cmp	r3, #255	; 0xff
 800530c:	d999      	bls.n	8005242 <PQCLEAN_KYBER512_CLEAN_gen_matrix+0xca>
            }
            xof_ctx_release(&state);
 800530e:	f107 0310 	add.w	r3, r7, #16
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fd11 	bl	8004d3a <shake128_ctx_release>
        for (j = 0; j < KYBER_K; j++) {
 8005318:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800531c:	3301      	adds	r3, #1
 800531e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8005322:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005326:	2b01      	cmp	r3, #1
 8005328:	f67f af41 	bls.w	80051ae <PQCLEAN_KYBER512_CLEAN_gen_matrix+0x36>
    for (i = 0; i < KYBER_K; i++) {
 800532c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005330:	3301      	adds	r3, #1
 8005332:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8005336:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800533a:	2b01      	cmp	r3, #1
 800533c:	f67f af33 	bls.w	80051a6 <PQCLEAN_KYBER512_CLEAN_gen_matrix+0x2e>
        }
    }
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	aaaaaaab 	.word	0xaaaaaaab

08005350 <PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand>:
*              - const uint8_t *coins: pointer to input randomness
*                             (of length KYBER_SYMBYTES bytes)
**************************************************/
void PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand(uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
        uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES],
        const uint8_t coins[KYBER_SYMBYTES]) {
 8005350:	b580      	push	{r7, lr}
 8005352:	f5ad 5da3 	sub.w	sp, sp, #5216	; 0x1460
 8005356:	af00      	add	r7, sp, #0
 8005358:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800535c:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8005360:	6018      	str	r0, [r3, #0]
 8005362:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8005366:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800536a:	6019      	str	r1, [r3, #0]
 800536c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8005370:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8005374:	601a      	str	r2, [r3, #0]
    unsigned int i;
    uint8_t buf[2 * KYBER_SYMBYTES];
    const uint8_t *publicseed = buf;
 8005376:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800537a:	f103 0310 	add.w	r3, r3, #16
 800537e:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8005382:	f102 0214 	add.w	r2, r2, #20
 8005386:	6013      	str	r3, [r2, #0]
    const uint8_t *noiseseed = buf + KYBER_SYMBYTES;
 8005388:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800538c:	f103 0310 	add.w	r3, r3, #16
 8005390:	3320      	adds	r3, #32
 8005392:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8005396:	f102 0210 	add.w	r2, r2, #16
 800539a:	6013      	str	r3, [r2, #0]
    uint8_t nonce = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80053a2:	f102 021b 	add.w	r2, r2, #27
 80053a6:	7013      	strb	r3, [r2, #0]
    polyvec a[KYBER_K], e, pkpv, skpv;

    hash_g(buf, coins, KYBER_SYMBYTES);
 80053a8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80053ac:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80053b0:	f507 50a0 	add.w	r0, r7, #5120	; 0x1400
 80053b4:	f100 0010 	add.w	r0, r0, #16
 80053b8:	2220      	movs	r2, #32
 80053ba:	6819      	ldr	r1, [r3, #0]
 80053bc:	f7ff fdb9 	bl	8004f32 <sha3_512>

    gen_a(a, publicseed);
 80053c0:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80053c4:	2200      	movs	r2, #0
 80053c6:	f507 51a2 	add.w	r1, r7, #5184	; 0x1440
 80053ca:	f101 0114 	add.w	r1, r1, #20
 80053ce:	6809      	ldr	r1, [r1, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fed1 	bl	8005178 <PQCLEAN_KYBER512_CLEAN_gen_matrix>

    for (i = 0; i < KYBER_K; i++) {
 80053d6:	2300      	movs	r3, #0
 80053d8:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80053dc:	f102 021c 	add.w	r2, r2, #28
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e027      	b.n	8005434 <PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand+0xe4>
        PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1(&skpv.vec[i], noiseseed, nonce++);
 80053e4:	f107 0320 	add.w	r3, r7, #32
 80053e8:	3b10      	subs	r3, #16
 80053ea:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80053ee:	f102 021c 	add.w	r2, r2, #28
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	0252      	lsls	r2, r2, #9
 80053f6:	1898      	adds	r0, r3, r2
 80053f8:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80053fc:	f103 031b 	add.w	r3, r3, #27
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	f507 51a2 	add.w	r1, r7, #5184	; 0x1440
 8005408:	f101 011b 	add.w	r1, r1, #27
 800540c:	700a      	strb	r2, [r1, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005414:	f103 0310 	add.w	r3, r3, #16
 8005418:	6819      	ldr	r1, [r3, #0]
 800541a:	f000 ff1f 	bl	800625c <PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1>
    for (i = 0; i < KYBER_K; i++) {
 800541e:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005422:	f103 031c 	add.w	r3, r3, #28
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3301      	adds	r3, #1
 800542a:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 800542e:	f102 021c 	add.w	r2, r2, #28
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005438:	f103 031c 	add.w	r3, r3, #28
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d9d0      	bls.n	80053e4 <PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand+0x94>
    }
    for (i = 0; i < KYBER_K; i++) {
 8005442:	2300      	movs	r3, #0
 8005444:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8005448:	f102 021c 	add.w	r2, r2, #28
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e026      	b.n	800549e <PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand+0x14e>
        PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1(&e.vec[i], noiseseed, nonce++);
 8005450:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8005454:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005458:	f103 031c 	add.w	r3, r3, #28
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	025b      	lsls	r3, r3, #9
 8005460:	18d0      	adds	r0, r2, r3
 8005462:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005466:	f103 031b 	add.w	r3, r3, #27
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	f507 51a2 	add.w	r1, r7, #5184	; 0x1440
 8005472:	f101 011b 	add.w	r1, r1, #27
 8005476:	700a      	strb	r2, [r1, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800547e:	f103 0310 	add.w	r3, r3, #16
 8005482:	6819      	ldr	r1, [r3, #0]
 8005484:	f000 feea 	bl	800625c <PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1>
    for (i = 0; i < KYBER_K; i++) {
 8005488:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800548c:	f103 031c 	add.w	r3, r3, #28
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3301      	adds	r3, #1
 8005494:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8005498:	f102 021c 	add.w	r2, r2, #28
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80054a2:	f103 031c 	add.w	r3, r3, #28
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d9d1      	bls.n	8005450 <PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand+0x100>
    }

    PQCLEAN_KYBER512_CLEAN_polyvec_ntt(&skpv);
 80054ac:	f107 0320 	add.w	r3, r7, #32
 80054b0:	3b10      	subs	r3, #16
 80054b2:	4618      	mov	r0, r3
 80054b4:	f001 f961 	bl	800677a <PQCLEAN_KYBER512_CLEAN_polyvec_ntt>
    PQCLEAN_KYBER512_CLEAN_polyvec_ntt(&e);
 80054b8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80054bc:	4618      	mov	r0, r3
 80054be:	f001 f95c 	bl	800677a <PQCLEAN_KYBER512_CLEAN_polyvec_ntt>

    // matrix-vector multiplication
    for (i = 0; i < KYBER_K; i++) {
 80054c2:	2300      	movs	r3, #0
 80054c4:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80054c8:	f102 021c 	add.w	r2, r2, #28
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e030      	b.n	8005532 <PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand+0x1e2>
        PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery(&pkpv.vec[i], &a[i], &skpv);
 80054d0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80054d4:	3b10      	subs	r3, #16
 80054d6:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80054da:	f102 021c 	add.w	r2, r2, #28
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	0252      	lsls	r2, r2, #9
 80054e2:	1898      	adds	r0, r3, r2
 80054e4:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 80054e8:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80054ec:	f103 031c 	add.w	r3, r3, #28
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	029b      	lsls	r3, r3, #10
 80054f4:	18d1      	adds	r1, r2, r3
 80054f6:	f107 0320 	add.w	r3, r7, #32
 80054fa:	3b10      	subs	r3, #16
 80054fc:	461a      	mov	r2, r3
 80054fe:	f001 f96e 	bl	80067de <PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery>
        PQCLEAN_KYBER512_CLEAN_poly_tomont(&pkpv.vec[i]);
 8005502:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005506:	3b10      	subs	r3, #16
 8005508:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 800550c:	f102 021c 	add.w	r2, r2, #28
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	0252      	lsls	r2, r2, #9
 8005514:	4413      	add	r3, r2
 8005516:	4618      	mov	r0, r3
 8005518:	f000 ff36 	bl	8006388 <PQCLEAN_KYBER512_CLEAN_poly_tomont>
    for (i = 0; i < KYBER_K; i++) {
 800551c:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005520:	f103 031c 	add.w	r3, r3, #28
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 800552c:	f102 021c 	add.w	r2, r2, #28
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8005536:	f103 031c 	add.w	r3, r3, #28
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d9c7      	bls.n	80054d0 <PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand+0x180>
    }

    PQCLEAN_KYBER512_CLEAN_polyvec_add(&pkpv, &pkpv, &e);
 8005540:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8005544:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8005548:	3910      	subs	r1, #16
 800554a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800554e:	3b10      	subs	r3, #16
 8005550:	4618      	mov	r0, r3
 8005552:	f001 f9bf 	bl	80068d4 <PQCLEAN_KYBER512_CLEAN_polyvec_add>
    PQCLEAN_KYBER512_CLEAN_polyvec_reduce(&pkpv);
 8005556:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800555a:	3b10      	subs	r3, #16
 800555c:	4618      	mov	r0, r3
 800555e:	f001 f9a0 	bl	80068a2 <PQCLEAN_KYBER512_CLEAN_polyvec_reduce>

    pack_sk(sk, &skpv);
 8005562:	f107 0320 	add.w	r3, r7, #32
 8005566:	3b10      	subs	r3, #16
 8005568:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800556c:	f5a2 628b 	sub.w	r2, r2, #1112	; 0x458
 8005570:	4619      	mov	r1, r3
 8005572:	6810      	ldr	r0, [r2, #0]
 8005574:	f7ff fd58 	bl	8005028 <pack_sk>
    pack_pk(pk, &pkpv, publicseed);
 8005578:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800557c:	3b10      	subs	r3, #16
 800557e:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8005582:	f2a2 4054 	subw	r0, r2, #1108	; 0x454
 8005586:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 800558a:	f102 0214 	add.w	r2, r2, #20
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	4619      	mov	r1, r3
 8005592:	6800      	ldr	r0, [r0, #0]
 8005594:	f7ff fd1c 	bl	8004fd0 <pack_pk>
}
 8005598:	bf00      	nop
 800559a:	f507 57a3 	add.w	r7, r7, #5216	; 0x1460
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <PQCLEAN_KYBER512_CLEAN_indcpa_enc>:
*                                      generate all randomness
**************************************************/
void PQCLEAN_KYBER512_CLEAN_indcpa_enc(uint8_t c[KYBER_INDCPA_BYTES],
                                       const uint8_t m[KYBER_INDCPA_MSGBYTES],
                                       const uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
                                       const uint8_t coins[KYBER_SYMBYTES]) {
 80055a2:	b590      	push	{r4, r7, lr}
 80055a4:	f5ad 5df1 	sub.w	sp, sp, #7712	; 0x1e20
 80055a8:	b087      	sub	sp, #28
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	f607 6438 	addw	r4, r7, #3640	; 0xe38
 80055b0:	f6a4 642c 	subw	r4, r4, #3628	; 0xe2c
 80055b4:	6020      	str	r0, [r4, #0]
 80055b6:	f607 6038 	addw	r0, r7, #3640	; 0xe38
 80055ba:	f5a0 6063 	sub.w	r0, r0, #3632	; 0xe30
 80055be:	6001      	str	r1, [r0, #0]
 80055c0:	f607 6138 	addw	r1, r7, #3640	; 0xe38
 80055c4:	f6a1 6134 	subw	r1, r1, #3636	; 0xe34
 80055c8:	600a      	str	r2, [r1, #0]
 80055ca:	f607 6238 	addw	r2, r7, #3640	; 0xe38
 80055ce:	f6a2 6238 	subw	r2, r2, #3640	; 0xe38
 80055d2:	6013      	str	r3, [r2, #0]
    unsigned int i;
    uint8_t seed[KYBER_SYMBYTES];
    uint8_t nonce = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 80055da:	f102 0213 	add.w	r2, r2, #19
 80055de:	7013      	strb	r3, [r2, #0]
    polyvec sp, pkpv, ep, at[KYBER_K], b;
    poly v, k, epp;

    unpack_pk(&pkpv, seed, pk);
 80055e0:	f607 6338 	addw	r3, r7, #3640	; 0xe38
 80055e4:	f6a3 6334 	subw	r3, r3, #3636	; 0xe34
 80055e8:	f507 51f0 	add.w	r1, r7, #7680	; 0x1e00
 80055ec:	f101 0110 	add.w	r1, r1, #16
 80055f0:	f507 50b0 	add.w	r0, r7, #5632	; 0x1600
 80055f4:	f100 0010 	add.w	r0, r0, #16
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	f7ff fcff 	bl	8004ffc <unpack_pk>
    PQCLEAN_KYBER512_CLEAN_poly_frommsg(&k, m);
 80055fe:	f607 6338 	addw	r3, r7, #3640	; 0xe38
 8005602:	f5a3 6263 	sub.w	r2, r3, #3632	; 0xe30
 8005606:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800560a:	3b08      	subs	r3, #8
 800560c:	6811      	ldr	r1, [r2, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fd93 	bl	800613a <PQCLEAN_KYBER512_CLEAN_poly_frommsg>
    gen_at(at, seed);
 8005614:	f507 51f0 	add.w	r1, r7, #7680	; 0x1e00
 8005618:	f101 0110 	add.w	r1, r1, #16
 800561c:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8005620:	3b08      	subs	r3, #8
 8005622:	2201      	movs	r2, #1
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff fda7 	bl	8005178 <PQCLEAN_KYBER512_CLEAN_gen_matrix>

    for (i = 0; i < KYBER_K; i++) {
 800562a:	2300      	movs	r3, #0
 800562c:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8005630:	f102 0214 	add.w	r2, r2, #20
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e028      	b.n	800568a <PQCLEAN_KYBER512_CLEAN_indcpa_enc+0xe8>
        PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1(sp.vec + i, coins, nonce++);
 8005638:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800563c:	f103 0314 	add.w	r3, r3, #20
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	025b      	lsls	r3, r3, #9
 8005644:	f507 52d0 	add.w	r2, r7, #6656	; 0x1a00
 8005648:	f102 0210 	add.w	r2, r2, #16
 800564c:	18d0      	adds	r0, r2, r3
 800564e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8005652:	f103 0313 	add.w	r3, r3, #19
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800565e:	f101 0113 	add.w	r1, r1, #19
 8005662:	700a      	strb	r2, [r1, #0]
 8005664:	f607 6238 	addw	r2, r7, #3640	; 0xe38
 8005668:	f6a2 6138 	subw	r1, r2, #3640	; 0xe38
 800566c:	461a      	mov	r2, r3
 800566e:	6809      	ldr	r1, [r1, #0]
 8005670:	f000 fdf4 	bl	800625c <PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1>
    for (i = 0; i < KYBER_K; i++) {
 8005674:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8005678:	f103 0314 	add.w	r3, r3, #20
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3301      	adds	r3, #1
 8005680:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8005684:	f102 0214 	add.w	r2, r2, #20
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800568e:	f103 0314 	add.w	r3, r3, #20
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d9cf      	bls.n	8005638 <PQCLEAN_KYBER512_CLEAN_indcpa_enc+0x96>
    }
    for (i = 0; i < KYBER_K; i++) {
 8005698:	2300      	movs	r3, #0
 800569a:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 800569e:	f102 0214 	add.w	r2, r2, #20
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	e028      	b.n	80056f8 <PQCLEAN_KYBER512_CLEAN_indcpa_enc+0x156>
        PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2(ep.vec + i, coins, nonce++);
 80056a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80056aa:	f103 0314 	add.w	r3, r3, #20
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	025b      	lsls	r3, r3, #9
 80056b2:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80056b6:	f102 0210 	add.w	r2, r2, #16
 80056ba:	18d0      	adds	r0, r2, r3
 80056bc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80056c0:	f103 0313 	add.w	r3, r3, #19
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80056cc:	f101 0113 	add.w	r1, r1, #19
 80056d0:	700a      	strb	r2, [r1, #0]
 80056d2:	f607 6238 	addw	r2, r7, #3640	; 0xe38
 80056d6:	f6a2 6138 	subw	r1, r2, #3640	; 0xe38
 80056da:	461a      	mov	r2, r3
 80056dc:	6809      	ldr	r1, [r1, #0]
 80056de:	f000 fdd5 	bl	800628c <PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2>
    for (i = 0; i < KYBER_K; i++) {
 80056e2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80056e6:	f103 0314 	add.w	r3, r3, #20
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 80056f2:	f102 0214 	add.w	r2, r2, #20
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80056fc:	f103 0314 	add.w	r3, r3, #20
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d9cf      	bls.n	80056a6 <PQCLEAN_KYBER512_CLEAN_indcpa_enc+0x104>
    }
    PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2(&epp, coins, nonce++);
 8005706:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800570a:	f103 0313 	add.w	r3, r3, #19
 800570e:	781a      	ldrb	r2, [r3, #0]
 8005710:	1c53      	adds	r3, r2, #1
 8005712:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8005716:	f101 0113 	add.w	r1, r1, #19
 800571a:	700b      	strb	r3, [r1, #0]
 800571c:	f607 6338 	addw	r3, r7, #3640	; 0xe38
 8005720:	f6a3 6138 	subw	r1, r3, #3640	; 0xe38
 8005724:	f107 0318 	add.w	r3, r7, #24
 8005728:	3b08      	subs	r3, #8
 800572a:	6809      	ldr	r1, [r1, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fdad 	bl	800628c <PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2>

    PQCLEAN_KYBER512_CLEAN_polyvec_ntt(&sp);
 8005732:	f507 53d0 	add.w	r3, r7, #6656	; 0x1a00
 8005736:	f103 0310 	add.w	r3, r3, #16
 800573a:	4618      	mov	r0, r3
 800573c:	f001 f81d 	bl	800677a <PQCLEAN_KYBER512_CLEAN_polyvec_ntt>

    // matrix-vector multiplication
    for (i = 0; i < KYBER_K; i++) {
 8005740:	2300      	movs	r3, #0
 8005742:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8005746:	f102 0214 	add.w	r2, r2, #20
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	e025      	b.n	800579a <PQCLEAN_KYBER512_CLEAN_indcpa_enc+0x1f8>
        PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery(&b.vec[i], &at[i], &sp);
 800574e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8005752:	3b08      	subs	r3, #8
 8005754:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8005758:	f102 0214 	add.w	r2, r2, #20
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	0252      	lsls	r2, r2, #9
 8005760:	1898      	adds	r0, r3, r2
 8005762:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8005766:	3b08      	subs	r3, #8
 8005768:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 800576c:	f102 0214 	add.w	r2, r2, #20
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	0292      	lsls	r2, r2, #10
 8005774:	4413      	add	r3, r2
 8005776:	f507 52d0 	add.w	r2, r7, #6656	; 0x1a00
 800577a:	f102 0210 	add.w	r2, r2, #16
 800577e:	4619      	mov	r1, r3
 8005780:	f001 f82d 	bl	80067de <PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery>
    for (i = 0; i < KYBER_K; i++) {
 8005784:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8005788:	f103 0314 	add.w	r3, r3, #20
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3301      	adds	r3, #1
 8005790:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8005794:	f102 0214 	add.w	r2, r2, #20
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800579e:	f103 0314 	add.w	r3, r3, #20
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d9d2      	bls.n	800574e <PQCLEAN_KYBER512_CLEAN_indcpa_enc+0x1ac>
    }

    PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery(&v, &pkpv, &sp);
 80057a8:	f507 52d0 	add.w	r2, r7, #6656	; 0x1a00
 80057ac:	f102 0210 	add.w	r2, r2, #16
 80057b0:	f507 51b0 	add.w	r1, r7, #5632	; 0x1600
 80057b4:	f101 0110 	add.w	r1, r1, #16
 80057b8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80057bc:	3b08      	subs	r3, #8
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 f80d 	bl	80067de <PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery>

    PQCLEAN_KYBER512_CLEAN_polyvec_invntt_tomont(&b);
 80057c4:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80057c8:	3b08      	subs	r3, #8
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 ffee 	bl	80067ac <PQCLEAN_KYBER512_CLEAN_polyvec_invntt_tomont>
    PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont(&v);
 80057d0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80057d4:	3b08      	subs	r3, #8
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fd7f 	bl	80062da <PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont>

    PQCLEAN_KYBER512_CLEAN_polyvec_add(&b, &b, &ep);
 80057dc:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80057e0:	f102 0210 	add.w	r2, r2, #16
 80057e4:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 80057e8:	3908      	subs	r1, #8
 80057ea:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80057ee:	3b08      	subs	r3, #8
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 f86f 	bl	80068d4 <PQCLEAN_KYBER512_CLEAN_polyvec_add>
    PQCLEAN_KYBER512_CLEAN_poly_add(&v, &v, &epp);
 80057f6:	f107 0218 	add.w	r2, r7, #24
 80057fa:	3a08      	subs	r2, #8
 80057fc:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8005800:	3908      	subs	r1, #8
 8005802:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8005806:	3b08      	subs	r3, #8
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fe03 	bl	8006414 <PQCLEAN_KYBER512_CLEAN_poly_add>
    PQCLEAN_KYBER512_CLEAN_poly_add(&v, &v, &k);
 800580e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8005812:	3a08      	subs	r2, #8
 8005814:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8005818:	3908      	subs	r1, #8
 800581a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800581e:	3b08      	subs	r3, #8
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fdf7 	bl	8006414 <PQCLEAN_KYBER512_CLEAN_poly_add>
    PQCLEAN_KYBER512_CLEAN_polyvec_reduce(&b);
 8005826:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800582a:	3b08      	subs	r3, #8
 800582c:	4618      	mov	r0, r3
 800582e:	f001 f838 	bl	80068a2 <PQCLEAN_KYBER512_CLEAN_polyvec_reduce>
    PQCLEAN_KYBER512_CLEAN_poly_reduce(&v);
 8005832:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8005836:	3b08      	subs	r3, #8
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fdcc 	bl	80063d6 <PQCLEAN_KYBER512_CLEAN_poly_reduce>

    pack_ciphertext(c, &b, &v);
 800583e:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8005842:	3a08      	subs	r2, #8
 8005844:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8005848:	3b08      	subs	r3, #8
 800584a:	f607 6138 	addw	r1, r7, #3640	; 0xe38
 800584e:	f6a1 602c 	subw	r0, r1, #3628	; 0xe2c
 8005852:	4619      	mov	r1, r3
 8005854:	6800      	ldr	r0, [r0, #0]
 8005856:	f7ff fc01 	bl	800505c <pack_ciphertext>
}
 800585a:	bf00      	nop
 800585c:	f507 57f1 	add.w	r7, r7, #7712	; 0x1e20
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd90      	pop	{r4, r7, pc}

08005866 <PQCLEAN_KYBER512_CLEAN_indcpa_dec>:
*              - const uint8_t *sk: pointer to input secret key
*                                   (of length KYBER_INDCPA_SECRETKEYBYTES)
**************************************************/
void PQCLEAN_KYBER512_CLEAN_indcpa_dec(uint8_t m[KYBER_INDCPA_MSGBYTES],
                                       const uint8_t c[KYBER_INDCPA_BYTES],
                                       const uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES]) {
 8005866:	b580      	push	{r7, lr}
 8005868:	f5ad 6d41 	sub.w	sp, sp, #3088	; 0xc10
 800586c:	af00      	add	r7, sp, #0
 800586e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8005872:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8005876:	6018      	str	r0, [r3, #0]
 8005878:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800587c:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 8005880:	6019      	str	r1, [r3, #0]
 8005882:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8005886:	f6a3 430c 	subw	r3, r3, #3084	; 0xc0c
 800588a:	601a      	str	r2, [r3, #0]
    polyvec b, skpv;
    poly v, mp;

    unpack_ciphertext(&b, &v, c);
 800588c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8005890:	f6a3 4308 	subw	r3, r3, #3080	; 0xc08
 8005894:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8005898:	f507 6001 	add.w	r0, r7, #2064	; 0x810
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	f7ff fbf2 	bl	8005086 <unpack_ciphertext>
    unpack_sk(&skpv, sk);
 80058a2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80058a6:	f6a3 430c 	subw	r3, r3, #3084	; 0xc0c
 80058aa:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7ff fbc6 	bl	8005042 <unpack_sk>

    PQCLEAN_KYBER512_CLEAN_polyvec_ntt(&b);
 80058b6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 ff5d 	bl	800677a <PQCLEAN_KYBER512_CLEAN_polyvec_ntt>
    trigger_high();
 80058c0:	f001 fcc2 	bl	8007248 <trigger_high>
    PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery(&mp, &skpv, &b);
 80058c4:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80058c8:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80058cc:	f107 0310 	add.w	r3, r7, #16
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 ff84 	bl	80067de <PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery>
    trigger_low();
 80058d6:	f001 fcc3 	bl	8007260 <trigger_low>
    PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont(&mp);
 80058da:	f107 0310 	add.w	r3, r7, #16
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fcfb 	bl	80062da <PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont>

    PQCLEAN_KYBER512_CLEAN_poly_sub(&mp, &v, &mp);
 80058e4:	f107 0210 	add.w	r2, r7, #16
 80058e8:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80058ec:	f107 0310 	add.w	r3, r7, #16
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fdb5 	bl	8006460 <PQCLEAN_KYBER512_CLEAN_poly_sub>
    PQCLEAN_KYBER512_CLEAN_poly_reduce(&mp);
 80058f6:	f107 0310 	add.w	r3, r7, #16
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fd6b 	bl	80063d6 <PQCLEAN_KYBER512_CLEAN_poly_reduce>

    PQCLEAN_KYBER512_CLEAN_poly_tomsg(m, &mp);
 8005900:	f107 0210 	add.w	r2, r7, #16
 8005904:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8005908:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800590c:	4611      	mov	r1, r2
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	f000 fc4c 	bl	80061ac <PQCLEAN_KYBER512_CLEAN_poly_tomsg>
}
 8005914:	bf00      	nop
 8005916:	f507 6741 	add.w	r7, r7, #3088	; 0xc10
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand>:
**
* Returns 0 (success)
**************************************************/
int PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand(uint8_t *pk,
        uint8_t *sk,
        const uint8_t *coins) {
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
    PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand(pk, sk, coins);
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fd0e 	bl	8005350 <PQCLEAN_KYBER512_CLEAN_indcpa_keypair_derand>
    memcpy(sk + KYBER_INDCPA_SECRETKEYBYTES, pk, KYBER_PUBLICKEYBYTES);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800593a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	4618      	mov	r0, r3
 8005942:	f7fa ff75 	bl	8000830 <memcpy>
    hash_h(sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800594c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005950:	68f9      	ldr	r1, [r7, #12]
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff fa9e 	bl	8004e94 <sha3_256>
    /* Value z for pseudo-random output on reject */
    memcpy(sk + KYBER_SECRETKEYBYTES - KYBER_SYMBYTES, coins + KYBER_SYMBYTES, KYBER_SYMBYTES);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f503 60c8 	add.w	r0, r3, #1600	; 0x640
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3320      	adds	r3, #32
 8005962:	2220      	movs	r2, #32
 8005964:	4619      	mov	r1, r3
 8005966:	f7fa ff63 	bl	8000830 <memcpy>
    return 0;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand>:
* Returns 0 (success)
**************************************************/
int PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand(uint8_t *ct,
        uint8_t *ss,
        const uint8_t *pk,
        const uint8_t *coins) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b0a4      	sub	sp, #144	; 0x90
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
    uint8_t buf[2 * KYBER_SYMBYTES];
    /* Will contain key, coins */
    uint8_t kr[2 * KYBER_SYMBYTES];

    memcpy(buf, coins, KYBER_SYMBYTES);
 8005982:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005986:	2220      	movs	r2, #32
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f7fa ff50 	bl	8000830 <memcpy>

    /* Multitarget countermeasure for coins + contributory KEM */
    hash_h(buf + KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
 8005990:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005994:	3320      	adds	r3, #32
 8005996:	f44f 7248 	mov.w	r2, #800	; 0x320
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	4618      	mov	r0, r3
 800599e:	f7ff fa79 	bl	8004e94 <sha3_256>
    hash_g(kr, buf, 2 * KYBER_SYMBYTES);
 80059a2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80059a6:	f107 0310 	add.w	r3, r7, #16
 80059aa:	2240      	movs	r2, #64	; 0x40
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fac0 	bl	8004f32 <sha3_512>

    /* coins are in kr+KYBER_SYMBYTES */
    PQCLEAN_KYBER512_CLEAN_indcpa_enc(ct, buf, pk, kr + KYBER_SYMBYTES);
 80059b2:	f107 0310 	add.w	r3, r7, #16
 80059b6:	3320      	adds	r3, #32
 80059b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff fdef 	bl	80055a2 <PQCLEAN_KYBER512_CLEAN_indcpa_enc>

    memcpy(ss, kr, KYBER_SYMBYTES);
 80059c4:	f107 0310 	add.w	r3, r7, #16
 80059c8:	2220      	movs	r2, #32
 80059ca:	4619      	mov	r1, r3
 80059cc:	68b8      	ldr	r0, [r7, #8]
 80059ce:	f7fa ff2f 	bl	8000830 <memcpy>
    return 0;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3790      	adds	r7, #144	; 0x90
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <PQCLEAN_KYBER512_CLEAN_crypto_kem_dec>:
*
* On failure, ss will contain a pseudo-random value.
**************************************************/
int PQCLEAN_KYBER512_CLEAN_crypto_kem_dec(uint8_t *ss,
        const uint8_t *ct,
        const uint8_t *sk) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80059e8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80059ec:	6018      	str	r0, [r3, #0]
 80059ee:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80059f2:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80059f6:	6019      	str	r1, [r3, #0]
 80059f8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80059fc:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8005a00:	601a      	str	r2, [r3, #0]
    int fail;
    uint8_t buf[2 * KYBER_SYMBYTES];
    /* Will contain key, coins */
    uint8_t kr[2 * KYBER_SYMBYTES];
    uint8_t cmp[KYBER_CIPHERTEXTBYTES + KYBER_SYMBYTES];
    const uint8_t *pk = sk + KYBER_INDCPA_SECRETKEYBYTES;
 8005a02:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8005a06:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005a10:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4

    PQCLEAN_KYBER512_CLEAN_indcpa_dec(buf, ct, sk);
 8005a14:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8005a18:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8005a1c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8005a20:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8005a24:	f507 705c 	add.w	r0, r7, #880	; 0x370
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	6819      	ldr	r1, [r3, #0]
 8005a2c:	f7ff ff1b 	bl	8005866 <PQCLEAN_KYBER512_CLEAN_indcpa_dec>

    /* Multitarget countermeasure for coins + contributory KEM */
    memcpy(buf + KYBER_SYMBYTES, sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, KYBER_SYMBYTES);
 8005a30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a34:	3320      	adds	r3, #32
 8005a36:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8005a3a:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	f502 61c4 	add.w	r1, r2, #1568	; 0x620
 8005a44:	2220      	movs	r2, #32
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fa fef2 	bl	8000830 <memcpy>
    hash_g(kr, buf, 2 * KYBER_SYMBYTES);
 8005a4c:	f507 715c 	add.w	r1, r7, #880	; 0x370
 8005a50:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8005a54:	2240      	movs	r2, #64	; 0x40
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff fa6b 	bl	8004f32 <sha3_512>

    /* coins are in kr+KYBER_SYMBYTES */
    PQCLEAN_KYBER512_CLEAN_indcpa_enc(cmp, buf, pk, kr + KYBER_SYMBYTES);
 8005a5c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8005a60:	3320      	adds	r3, #32
 8005a62:	f507 715c 	add.w	r1, r7, #880	; 0x370
 8005a66:	f107 0010 	add.w	r0, r7, #16
 8005a6a:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8005a6e:	f7ff fd98 	bl	80055a2 <PQCLEAN_KYBER512_CLEAN_indcpa_enc>

    fail = PQCLEAN_KYBER512_CLEAN_verify(ct, cmp, KYBER_CIPHERTEXTBYTES);
 8005a72:	f107 0110 	add.w	r1, r7, #16
 8005a76:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8005a7a:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8005a7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	f001 f805 	bl	8006a92 <PQCLEAN_KYBER512_CLEAN_verify>
 8005a88:	f8c7 03b0 	str.w	r0, [r7, #944]	; 0x3b0

    /* Compute rejection key */
    rkprf(ss, sk + KYBER_SECRETKEYBYTES - KYBER_SYMBYTES, ct);
 8005a8c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8005a90:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
 8005a9a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8005a9e:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8005aa2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8005aa6:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8005aaa:	6812      	ldr	r2, [r2, #0]
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	f000 ffc1 	bl	8006a34 <PQCLEAN_KYBER512_CLEAN_kyber_shake256_rkprf>

    /* Copy true key to return buffer if fail is false */
    PQCLEAN_KYBER512_CLEAN_cmov(ss, kr, KYBER_SYMBYTES, (uint8_t) (1 - fail));
 8005ab2:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f1c3 0301 	rsb	r3, r3, #1
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f507 714c 	add.w	r1, r7, #816	; 0x330
 8005ac2:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8005ac6:	f5a2 706b 	sub.w	r0, r2, #940	; 0x3ac
 8005aca:	2220      	movs	r2, #32
 8005acc:	6800      	ldr	r0, [r0, #0]
 8005ace:	f001 f817 	bl	8006b00 <PQCLEAN_KYBER512_CLEAN_cmov>

    return 0;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f507 776e 	add.w	r7, r7, #952	; 0x3b8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	0000      	movs	r0, r0

08005ae0 <get_sk>:
uint8_t ss[KYBER_SSBYTES];
uint8_t buf[2*KYBER_SYMBYTES];
const uint8_t coins[KYBER_SYMBYTES] = {124, 153, 53, 160, 176, 118, 148, 170, 12, 109, 16, 228, 219, 107, 26, 221, 47, 216, 26, 37, 204, 177, 72, 3, 45, 205, 115, 153, 54, 115, 127, 45};

uint8_t get_sk(uint8_t* data, uint8_t dlen)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08c      	sub	sp, #48	; 0x30
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
	size_t i;
	PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand(pk,sk,coins);
 8005aec:	4a17      	ldr	r2, [pc, #92]	; (8005b4c <get_sk+0x6c>)
 8005aee:	4918      	ldr	r1, [pc, #96]	; (8005b50 <get_sk+0x70>)
 8005af0:	4818      	ldr	r0, [pc, #96]	; (8005b54 <get_sk+0x74>)
 8005af2:	f7ff ff14 	bl	800591e <PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair_derand>
	uint8_t temp[32];
	for(i=0;i<32;i++){
 8005af6:	2300      	movs	r3, #0
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afa:	e00d      	b.n	8005b18 <get_sk+0x38>
		temp[i] = sk[1600+i];
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8005b02:	4a13      	ldr	r2, [pc, #76]	; (8005b50 <get_sk+0x70>)
 8005b04:	5cd1      	ldrb	r1, [r2, r3]
 8005b06:	f107 020c 	add.w	r2, r7, #12
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	4413      	add	r3, r2
 8005b0e:	460a      	mov	r2, r1
 8005b10:	701a      	strb	r2, [r3, #0]
	for(i=0;i<32;i++){
 8005b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b14:	3301      	adds	r3, #1
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1a:	2b1f      	cmp	r3, #31
 8005b1c:	d9ee      	bls.n	8005afc <get_sk+0x1c>
	}
	PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand(ct,ss,pk,data);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <get_sk+0x74>)
 8005b22:	490d      	ldr	r1, [pc, #52]	; (8005b58 <get_sk+0x78>)
 8005b24:	480d      	ldr	r0, [pc, #52]	; (8005b5c <get_sk+0x7c>)
 8005b26:	f7ff ff25 	bl	8005974 <PQCLEAN_KYBER512_CLEAN_crypto_kem_enc_derand>
	PQCLEAN_KYBER512_CLEAN_crypto_kem_dec(ss,ct,sk);
 8005b2a:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <get_sk+0x70>)
 8005b2c:	490b      	ldr	r1, [pc, #44]	; (8005b5c <get_sk+0x7c>)
 8005b2e:	480a      	ldr	r0, [pc, #40]	; (8005b58 <get_sk+0x78>)
 8005b30:	f7ff ff54 	bl	80059dc <PQCLEAN_KYBER512_CLEAN_crypto_kem_dec>
	simpleserial_put('r', 32, temp);
 8005b34:	f107 030c 	add.w	r3, r7, #12
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2120      	movs	r1, #32
 8005b3c:	2072      	movs	r0, #114	; 0x72
 8005b3e:	f001 fa7f 	bl	8007040 <simpleserial_put>
	return 0;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3730      	adds	r7, #48	; 0x30
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	08008680 	.word	0x08008680
 8005b50:	20000b8c 	.word	0x20000b8c
 8005b54:	2000086c 	.word	0x2000086c
 8005b58:	2000150c 	.word	0x2000150c
 8005b5c:	2000120c 	.word	0x2000120c

08005b60 <main>:

//////////////////////////////


int main(void)
{	
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
	platform_init();
 8005b64:	f001 faa2 	bl	80070ac <platform_init>
	init_uart();
 8005b68:	f001 faf0 	bl	800714c <init_uart>
	trigger_setup();	
 8005b6c:	f001 fb44 	bl	80071f8 <trigger_setup>
	simpleserial_init();
 8005b70:	f001 f914 	bl	8006d9c <simpleserial_init>
  
  simpleserial_addcmd('p',32,get_sk);
 8005b74:	4a03      	ldr	r2, [pc, #12]	; (8005b84 <main+0x24>)
 8005b76:	2120      	movs	r1, #32
 8005b78:	2070      	movs	r0, #112	; 0x70
 8005b7a:	f001 f929 	bl	8006dd0 <simpleserial_addcmd>

	while(1)
		simpleserial_get();
 8005b7e:	f001 f97d 	bl	8006e7c <simpleserial_get>
 8005b82:	e7fc      	b.n	8005b7e <main+0x1e>
 8005b84:	08005ae1 	.word	0x08005ae1

08005b88 <fqmul>:
* Arguments:   - int16_t a: first factor
*              - int16_t b: second factor
*
* Returns 16-bit integer congruent to a*b*R^{-1} mod q
**************************************************/
static int16_t fqmul(int16_t a, int16_t b) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	460a      	mov	r2, r1
 8005b92:	80fb      	strh	r3, [r7, #6]
 8005b94:	4613      	mov	r3, r2
 8005b96:	80bb      	strh	r3, [r7, #4]
    return PQCLEAN_KYBER512_CLEAN_montgomery_reduce((int32_t)a * b);
 8005b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b9c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005ba0:	fb02 f303 	mul.w	r3, r2, r3
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 feb8 	bl	800691a <PQCLEAN_KYBER512_CLEAN_montgomery_reduce>
 8005baa:	4603      	mov	r3, r0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <PQCLEAN_KYBER512_CLEAN_ntt>:
* Description: Inplace number-theoretic transform (NTT) in Rq.
*              input is in standard order, output is in bitreversed order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void PQCLEAN_KYBER512_CLEAN_ntt(int16_t r[256]) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
    unsigned int len, start, j, k;
    int16_t t, zeta;

    k = 1;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	613b      	str	r3, [r7, #16]
    for (len = 128; len >= 2; len >>= 1) {
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	e051      	b.n	8005c6a <PQCLEAN_KYBER512_CLEAN_ntt+0xb6>
        for (start = 0; start < 256; start = j + len) {
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	e048      	b.n	8005c5e <PQCLEAN_KYBER512_CLEAN_ntt+0xaa>
            zeta = PQCLEAN_KYBER512_CLEAN_zetas[k++];
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	613a      	str	r2, [r7, #16]
 8005bd2:	4a2a      	ldr	r2, [pc, #168]	; (8005c7c <PQCLEAN_KYBER512_CLEAN_ntt+0xc8>)
 8005bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd8:	81fb      	strh	r3, [r7, #14]
            for (j = start; j < start + len; j++) {
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	e034      	b.n	8005c4a <PQCLEAN_KYBER512_CLEAN_ntt+0x96>
                t = fqmul(zeta, r[j + len]);
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	4413      	add	r3, r2
 8005bec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005bf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff ffc6 	bl	8005b88 <fqmul>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	81bb      	strh	r3, [r7, #12]
                r[j + len] = r[j] - t;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	4413      	add	r3, r2
 8005c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	89bb      	ldrh	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	b299      	uxth	r1, r3
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	4413      	add	r3, r2
 8005c20:	b20a      	sxth	r2, r1
 8005c22:	801a      	strh	r2, [r3, #0]
                r[j] = r[j] + t;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	89bb      	ldrh	r3, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	b299      	uxth	r1, r3
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	4413      	add	r3, r2
 8005c40:	b20a      	sxth	r2, r1
 8005c42:	801a      	strh	r2, [r3, #0]
            for (j = start; j < start + len; j++) {
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3301      	adds	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	4413      	add	r3, r2
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d3c4      	bcc.n	8005be0 <PQCLEAN_KYBER512_CLEAN_ntt+0x2c>
        for (start = 0; start < 256; start = j + len) {
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2bff      	cmp	r3, #255	; 0xff
 8005c62:	d9b3      	bls.n	8005bcc <PQCLEAN_KYBER512_CLEAN_ntt+0x18>
    for (len = 128; len >= 2; len >>= 1) {
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	085b      	lsrs	r3, r3, #1
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d8aa      	bhi.n	8005bc6 <PQCLEAN_KYBER512_CLEAN_ntt+0x12>
            }
        }
    }
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	080086a0 	.word	0x080086a0

08005c80 <PQCLEAN_KYBER512_CLEAN_invntt>:
*              multiplication by Montgomery factor 2^16.
*              Input is in bitreversed order, output is in standard order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void PQCLEAN_KYBER512_CLEAN_invntt(int16_t r[256]) {
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b089      	sub	sp, #36	; 0x24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
    unsigned int start, len, j, k;
    int16_t t, zeta;
    const int16_t f = 1441; // mont^2/128
 8005c88:	f240 53a1 	movw	r3, #1441	; 0x5a1
 8005c8c:	81fb      	strh	r3, [r7, #14]

    k = 127;
 8005c8e:	237f      	movs	r3, #127	; 0x7f
 8005c90:	613b      	str	r3, [r7, #16]
    for (len = 2; len <= 128; len <<= 1) {
 8005c92:	2302      	movs	r3, #2
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	e064      	b.n	8005d62 <PQCLEAN_KYBER512_CLEAN_invntt+0xe2>
        for (start = 0; start < 256; start = j + len) {
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	e05b      	b.n	8005d56 <PQCLEAN_KYBER512_CLEAN_invntt+0xd6>
            zeta = PQCLEAN_KYBER512_CLEAN_zetas[k--];
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1e5a      	subs	r2, r3, #1
 8005ca2:	613a      	str	r2, [r7, #16]
 8005ca4:	4a40      	ldr	r2, [pc, #256]	; (8005da8 <PQCLEAN_KYBER512_CLEAN_invntt+0x128>)
 8005ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005caa:	81bb      	strh	r3, [r7, #12]
            for (j = start; j < start + len; j++) {
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	e047      	b.n	8005d42 <PQCLEAN_KYBER512_CLEAN_invntt+0xc2>
                t = r[j];
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4413      	add	r3, r2
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	817b      	strh	r3, [r7, #10]
                r[j] = PQCLEAN_KYBER512_CLEAN_barrett_reduce(t + r[j + len]);
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	897b      	ldrh	r3, [r7, #10]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	b219      	sxth	r1, r3
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	18d4      	adds	r4, r2, r3
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	f000 fe42 	bl	800696a <PQCLEAN_KYBER512_CLEAN_barrett_reduce>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	8023      	strh	r3, [r4, #0]
                r[j + len] = r[j + len] - t;
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	4413      	add	r3, r2
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	897b      	ldrh	r3, [r7, #10]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	b299      	uxth	r1, r3
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	4413      	add	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	b20a      	sxth	r2, r1
 8005d10:	801a      	strh	r2, [r3, #0]
                r[j + len] = fqmul(zeta, r[j + len]);
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	4413      	add	r3, r2
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	4413      	add	r3, r2
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	18d4      	adds	r4, r2, r3
 8005d2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff ff28 	bl	8005b88 <fqmul>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	8023      	strh	r3, [r4, #0]
            for (j = start; j < start + len; j++) {
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	69fa      	ldr	r2, [r7, #28]
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	4413      	add	r3, r2
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d3b1      	bcc.n	8005cb2 <PQCLEAN_KYBER512_CLEAN_invntt+0x32>
        for (start = 0; start < 256; start = j + len) {
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	4413      	add	r3, r2
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	2bff      	cmp	r3, #255	; 0xff
 8005d5a:	d9a0      	bls.n	8005c9e <PQCLEAN_KYBER512_CLEAN_invntt+0x1e>
    for (len = 2; len <= 128; len <<= 1) {
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b80      	cmp	r3, #128	; 0x80
 8005d66:	d997      	bls.n	8005c98 <PQCLEAN_KYBER512_CLEAN_invntt+0x18>
            }
        }
    }

    for (j = 0; j < 256; j++) {
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	e013      	b.n	8005d96 <PQCLEAN_KYBER512_CLEAN_invntt+0x116>
        r[j] = fqmul(r[j], f);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4413      	add	r3, r2
 8005d76:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	18d4      	adds	r4, r2, r3
 8005d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d86:	4619      	mov	r1, r3
 8005d88:	f7ff fefe 	bl	8005b88 <fqmul>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	8023      	strh	r3, [r4, #0]
    for (j = 0; j < 256; j++) {
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	3301      	adds	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2bff      	cmp	r3, #255	; 0xff
 8005d9a:	d9e8      	bls.n	8005d6e <PQCLEAN_KYBER512_CLEAN_invntt+0xee>
    }
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	3724      	adds	r7, #36	; 0x24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd90      	pop	{r4, r7, pc}
 8005da6:	bf00      	nop
 8005da8:	080086a0 	.word	0x080086a0

08005dac <PQCLEAN_KYBER512_CLEAN_basemul>:
* Arguments:   - int16_t r[2]: pointer to the output polynomial
*              - const int16_t a[2]: pointer to the first factor
*              - const int16_t b[2]: pointer to the second factor
*              - int16_t zeta: integer defining the reduction polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_basemul(int16_t r[2], const int16_t a[2], const int16_t b[2], int16_t zeta) {
 8005dac:	b590      	push	{r4, r7, lr}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	807b      	strh	r3, [r7, #2]
    r[0]  = fqmul(a[1], b[1]);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	3302      	adds	r3, #2
 8005dbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f7ff fedb 	bl	8005b88 <fqmul>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	801a      	strh	r2, [r3, #0]
    r[0]  = fqmul(r[0], zeta);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005de0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005de4:	4611      	mov	r1, r2
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff fece 	bl	8005b88 <fqmul>
 8005dec:	4603      	mov	r3, r0
 8005dee:	461a      	mov	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	801a      	strh	r2, [r3, #0]
    r[0] += fqmul(a[0], b[0]);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f7ff fec0 	bl	8005b88 <fqmul>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	b28b      	uxth	r3, r1
 8005e16:	4413      	add	r3, r2
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	b21a      	sxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	801a      	strh	r2, [r3, #0]
    r[1]  = fqmul(a[0], b[1]);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3302      	adds	r3, #2
 8005e2a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1c9c      	adds	r4, r3, #2
 8005e32:	4610      	mov	r0, r2
 8005e34:	f7ff fea8 	bl	8005b88 <fqmul>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	8023      	strh	r3, [r4, #0]
    r[1] += fqmul(a[1], b[0]);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	3302      	adds	r3, #2
 8005e40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f7ff fe9b 	bl	8005b88 <fqmul>
 8005e52:	4603      	mov	r3, r0
 8005e54:	4619      	mov	r1, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3302      	adds	r3, #2
 8005e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	b28b      	uxth	r3, r1
 8005e62:	4413      	add	r3, r2
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3302      	adds	r3, #2
 8005e6a:	b212      	sxth	r2, r2
 8005e6c:	801a      	strh	r2, [r3, #0]
}
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd90      	pop	{r4, r7, pc}
 8005e76:	0000      	movs	r0, r0

08005e78 <PQCLEAN_KYBER512_CLEAN_poly_compress>:
*
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (of length KYBER_POLYCOMPRESSEDBYTES)
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_compress(uint8_t r[KYBER_POLYCOMPRESSEDBYTES], const poly *a) {
 8005e78:	b480      	push	{r7}
 8005e7a:	b089      	sub	sp, #36	; 0x24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
    size_t i, j;
    int16_t u;
    uint8_t t[8];

    for (i = 0; i < KYBER_N / 8; i++) {
 8005e82:	2300      	movs	r3, #0
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	e063      	b.n	8005f50 <PQCLEAN_KYBER512_CLEAN_poly_compress+0xd8>
        for (j = 0; j < 8; j++) {
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
 8005e8c:	e02c      	b.n	8005ee8 <PQCLEAN_KYBER512_CLEAN_poly_compress+0x70>
            // map to positive standard representatives
            u  = a->coeffs[8 * i + j];
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	00da      	lsls	r2, r3, #3
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	441a      	add	r2, r3
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005e9c:	82fb      	strh	r3, [r7, #22]
            u += (u >> 15) & KYBER_Q;
 8005e9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005ea2:	13db      	asrs	r3, r3, #15
 8005ea4:	b21b      	sxth	r3, r3
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	f640 5301 	movw	r3, #3329	; 0xd01
 8005eac:	4013      	ands	r3, r2
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	8afb      	ldrh	r3, [r7, #22]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	82fb      	strh	r3, [r7, #22]
            t[j] = ((((uint16_t)u << 4) + KYBER_Q / 2) / KYBER_Q) & 15;
 8005eb8:	8afb      	ldrh	r3, [r7, #22]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8005ec0:	4a28      	ldr	r2, [pc, #160]	; (8005f64 <PQCLEAN_KYBER512_CLEAN_poly_compress+0xec>)
 8005ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8005ec6:	441a      	add	r2, r3
 8005ec8:	12d2      	asrs	r2, r2, #11
 8005eca:	17db      	asrs	r3, r3, #31
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	b2d9      	uxtb	r1, r3
 8005ed6:	f107 020c 	add.w	r2, r7, #12
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	4413      	add	r3, r2
 8005ede:	460a      	mov	r2, r1
 8005ee0:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++) {
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	61bb      	str	r3, [r7, #24]
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b07      	cmp	r3, #7
 8005eec:	d9cf      	bls.n	8005e8e <PQCLEAN_KYBER512_CLEAN_poly_compress+0x16>
        }

        r[0] = t[0] | (t[1] << 4);
 8005eee:	7b3b      	ldrb	r3, [r7, #12]
 8005ef0:	b25a      	sxtb	r2, r3
 8005ef2:	7b7b      	ldrb	r3, [r7, #13]
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	b25b      	sxtb	r3, r3
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	b25b      	sxtb	r3, r3
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	701a      	strb	r2, [r3, #0]
        r[1] = t[2] | (t[3] << 4);
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	b25a      	sxtb	r2, r3
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	b25b      	sxtb	r3, r3
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	b25a      	sxtb	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3301      	adds	r3, #1
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
        r[2] = t[4] | (t[5] << 4);
 8005f18:	7c3b      	ldrb	r3, [r7, #16]
 8005f1a:	b25a      	sxtb	r2, r3
 8005f1c:	7c7b      	ldrb	r3, [r7, #17]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	b25b      	sxtb	r3, r3
 8005f22:	4313      	orrs	r3, r2
 8005f24:	b25a      	sxtb	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3302      	adds	r3, #2
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]
        r[3] = t[6] | (t[7] << 4);
 8005f2e:	7cbb      	ldrb	r3, [r7, #18]
 8005f30:	b25a      	sxtb	r2, r3
 8005f32:	7cfb      	ldrb	r3, [r7, #19]
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	b25b      	sxtb	r3, r3
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	b25a      	sxtb	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3303      	adds	r3, #3
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
        r += 4;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	607b      	str	r3, [r7, #4]
    for (i = 0; i < KYBER_N / 8; i++) {
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b1f      	cmp	r3, #31
 8005f54:	d998      	bls.n	8005e88 <PQCLEAN_KYBER512_CLEAN_poly_compress+0x10>
    }
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	3724      	adds	r7, #36	; 0x24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	9d7dbb41 	.word	0x9d7dbb41

08005f68 <PQCLEAN_KYBER512_CLEAN_poly_decompress>:
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: pointer to input byte array
*                                  (of length KYBER_POLYCOMPRESSEDBYTES bytes)
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_decompress(poly *r, const uint8_t a[KYBER_POLYCOMPRESSEDBYTES]) {
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
    size_t i;

    for (i = 0; i < KYBER_N / 2; i++) {
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	e027      	b.n	8005fc8 <PQCLEAN_KYBER512_CLEAN_poly_decompress+0x60>
        r->coeffs[2 * i + 0] = (((uint16_t)(a[0] & 15) * KYBER_Q) + 8) >> 4;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	f640 5201 	movw	r2, #3329	; 0xd01
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	3308      	adds	r3, #8
 8005f8a:	1119      	asrs	r1, r3, #4
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	005a      	lsls	r2, r3, #1
 8005f90:	b209      	sxth	r1, r1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        r->coeffs[2 * i + 1] = (((uint16_t)(a[0] >> 4) * KYBER_Q) + 8) >> 4;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f640 5301 	movw	r3, #3329	; 0xd01
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	3308      	adds	r3, #8
 8005fac:	1119      	asrs	r1, r3, #4
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	b209      	sxth	r1, r1
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        a += 1;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	603b      	str	r3, [r7, #0]
    for (i = 0; i < KYBER_N / 2; i++) {
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b7f      	cmp	r3, #127	; 0x7f
 8005fcc:	d9d4      	bls.n	8005f78 <PQCLEAN_KYBER512_CLEAN_poly_decompress+0x10>
    }
}
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr

08005fda <PQCLEAN_KYBER512_CLEAN_poly_tobytes>:
*
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYBYTES bytes)
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_tobytes(uint8_t r[KYBER_POLYBYTES], const poly *a) {
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
    size_t i;
    uint16_t t0, t1;

    for (i = 0; i < KYBER_N / 2; i++) {
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	e04e      	b.n	8006088 <PQCLEAN_KYBER512_CLEAN_poly_tobytes+0xae>
        // map to positive standard representatives
        t0  = a->coeffs[2 * i];
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	005a      	lsls	r2, r3, #1
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005ff4:	817b      	strh	r3, [r7, #10]
        t0 += ((int16_t)t0 >> 15) & KYBER_Q;
 8005ff6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005ffa:	13db      	asrs	r3, r3, #15
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	f640 5301 	movw	r3, #3329	; 0xd01
 8006004:	4013      	ands	r3, r2
 8006006:	b29a      	uxth	r2, r3
 8006008:	897b      	ldrh	r3, [r7, #10]
 800600a:	4413      	add	r3, r2
 800600c:	817b      	strh	r3, [r7, #10]
        t1 = a->coeffs[2 * i + 1];
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800601a:	813b      	strh	r3, [r7, #8]
        t1 += ((int16_t)t1 >> 15) & KYBER_Q;
 800601c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006020:	13db      	asrs	r3, r3, #15
 8006022:	b21b      	sxth	r3, r3
 8006024:	b29a      	uxth	r2, r3
 8006026:	f640 5301 	movw	r3, #3329	; 0xd01
 800602a:	4013      	ands	r3, r2
 800602c:	b29a      	uxth	r2, r3
 800602e:	893b      	ldrh	r3, [r7, #8]
 8006030:	4413      	add	r3, r2
 8006032:	813b      	strh	r3, [r7, #8]
        r[3 * i + 0] = (uint8_t)(t0 >> 0);
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4613      	mov	r3, r2
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	4413      	add	r3, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	4413      	add	r3, r2
 8006040:	897a      	ldrh	r2, [r7, #10]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
        r[3 * i + 1] = (uint8_t)((t0 >> 8) | (t1 << 4));
 8006046:	897b      	ldrh	r3, [r7, #10]
 8006048:	0a1b      	lsrs	r3, r3, #8
 800604a:	b29b      	uxth	r3, r3
 800604c:	b25a      	sxtb	r2, r3
 800604e:	893b      	ldrh	r3, [r7, #8]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	b25b      	sxtb	r3, r3
 8006054:	4313      	orrs	r3, r2
 8006056:	b259      	sxtb	r1, r3
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4613      	mov	r3, r2
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	4413      	add	r3, r2
 8006060:	3301      	adds	r3, #1
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	4413      	add	r3, r2
 8006066:	b2ca      	uxtb	r2, r1
 8006068:	701a      	strb	r2, [r3, #0]
        r[3 * i + 2] = (uint8_t)(t1 >> 4);
 800606a:	893b      	ldrh	r3, [r7, #8]
 800606c:	091b      	lsrs	r3, r3, #4
 800606e:	b299      	uxth	r1, r3
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4613      	mov	r3, r2
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	4413      	add	r3, r2
 8006078:	3302      	adds	r3, #2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4413      	add	r3, r2
 800607e:	b2ca      	uxtb	r2, r1
 8006080:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < KYBER_N / 2; i++) {
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3301      	adds	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b7f      	cmp	r3, #127	; 0x7f
 800608c:	d9ad      	bls.n	8005fea <PQCLEAN_KYBER512_CLEAN_poly_tobytes+0x10>
    }
}
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	bc80      	pop	{r7}
 8006098:	4770      	bx	lr

0800609a <PQCLEAN_KYBER512_CLEAN_poly_frombytes>:
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: pointer to input byte array
*                                  (of KYBER_POLYBYTES bytes)
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_frombytes(poly *r, const uint8_t a[KYBER_POLYBYTES]) {
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; i < KYBER_N / 2; i++) {
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	e03e      	b.n	8006128 <PQCLEAN_KYBER512_CLEAN_poly_frombytes+0x8e>
        r->coeffs[2 * i]   = ((a[3 * i + 0] >> 0) | ((uint16_t)a[3 * i + 1] << 8)) & 0xFFF;
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4613      	mov	r3, r2
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	4413      	add	r3, r2
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	4413      	add	r3, r2
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	b219      	sxth	r1, r3
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4613      	mov	r3, r2
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	4413      	add	r3, r2
 80060c2:	3301      	adds	r3, #1
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	4413      	add	r3, r2
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	b21b      	sxth	r3, r3
 80060ce:	430b      	orrs	r3, r1
 80060d0:	b21b      	sxth	r3, r3
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	0052      	lsls	r2, r2, #1
 80060d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060da:	b219      	sxth	r1, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        r->coeffs[2 * i + 1] = ((a[3 * i + 1] >> 4) | ((uint16_t)a[3 * i + 2] << 4)) & 0xFFF;
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4613      	mov	r3, r2
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	4413      	add	r3, r2
 80060ea:	3301      	adds	r3, #1
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	4413      	add	r3, r2
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	091b      	lsrs	r3, r3, #4
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	b219      	sxth	r1, r3
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4613      	mov	r3, r2
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	4413      	add	r3, r2
 8006100:	3302      	adds	r3, #2
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	4413      	add	r3, r2
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	b21b      	sxth	r3, r3
 800610c:	430b      	orrs	r3, r1
 800610e:	b21b      	sxth	r3, r3
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	0052      	lsls	r2, r2, #1
 8006114:	3201      	adds	r2, #1
 8006116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611a:	b219      	sxth	r1, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < KYBER_N / 2; i++) {
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3301      	adds	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b7f      	cmp	r3, #127	; 0x7f
 800612c:	d9bd      	bls.n	80060aa <PQCLEAN_KYBER512_CLEAN_poly_frombytes+0x10>
    }
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr

0800613a <PQCLEAN_KYBER512_CLEAN_poly_frommsg>:
* Description: Convert 32-byte message to polynomial
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *msg: pointer to input message
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_frommsg(poly *r, const uint8_t msg[KYBER_INDCPA_MSGBYTES]) {
 800613a:	b480      	push	{r7}
 800613c:	b087      	sub	sp, #28
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]
    size_t i, j;
    int16_t mask;

    for (i = 0; i < KYBER_N / 8; i++) {
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	e027      	b.n	800619a <PQCLEAN_KYBER512_CLEAN_poly_frommsg+0x60>
        for (j = 0; j < 8; j++) {
 800614a:	2300      	movs	r3, #0
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	e01e      	b.n	800618e <PQCLEAN_KYBER512_CLEAN_poly_frommsg+0x54>
            mask = -(int16_t)((msg[i] >> j) & 1);
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4413      	add	r3, r2
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	fa42 f303 	asr.w	r3, r2, r3
 8006160:	b29b      	uxth	r3, r3
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	b29b      	uxth	r3, r3
 8006168:	425b      	negs	r3, r3
 800616a:	b29b      	uxth	r3, r3
 800616c:	81fb      	strh	r3, [r7, #14]
            r->coeffs[8 * i + j] = mask & ((KYBER_Q + 1) / 2);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	00da      	lsls	r2, r3, #3
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	441a      	add	r2, r3
 8006176:	89fb      	ldrh	r3, [r7, #14]
 8006178:	f423 73bf 	bic.w	r3, r3, #382	; 0x17e
 800617c:	055b      	lsls	r3, r3, #21
 800617e:	0d5b      	lsrs	r3, r3, #21
 8006180:	b219      	sxth	r1, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (j = 0; j < 8; j++) {
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	3301      	adds	r3, #1
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b07      	cmp	r3, #7
 8006192:	d9dd      	bls.n	8006150 <PQCLEAN_KYBER512_CLEAN_poly_frommsg+0x16>
    for (i = 0; i < KYBER_N / 8; i++) {
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	3301      	adds	r3, #1
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b1f      	cmp	r3, #31
 800619e:	d9d4      	bls.n	800614a <PQCLEAN_KYBER512_CLEAN_poly_frommsg+0x10>
        }
    }
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <PQCLEAN_KYBER512_CLEAN_poly_tomsg>:
* Description: Convert polynomial to 32-byte message
*
* Arguments:   - uint8_t *msg: pointer to output message
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_tomsg(uint8_t msg[KYBER_INDCPA_MSGBYTES], const poly *a) {
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
    size_t i, j;
    uint16_t t;

    for (i = 0; i < KYBER_N / 8; i++) {
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	e044      	b.n	8006246 <PQCLEAN_KYBER512_CLEAN_poly_tomsg+0x9a>
        msg[i] = 0;
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	4413      	add	r3, r2
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++) {
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	e036      	b.n	800623a <PQCLEAN_KYBER512_CLEAN_poly_tomsg+0x8e>
            t  = a->coeffs[8 * i + j];
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	00da      	lsls	r2, r3, #3
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	441a      	add	r2, r3
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80061da:	81fb      	strh	r3, [r7, #14]
            t += ((int16_t)t >> 15) & KYBER_Q;
 80061dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061e0:	13db      	asrs	r3, r3, #15
 80061e2:	b21b      	sxth	r3, r3
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	f640 5301 	movw	r3, #3329	; 0xd01
 80061ea:	4013      	ands	r3, r2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	89fb      	ldrh	r3, [r7, #14]
 80061f0:	4413      	add	r3, r2
 80061f2:	81fb      	strh	r3, [r7, #14]
            t  = (((t << 1) + KYBER_Q / 2) / KYBER_Q) & 1;
 80061f4:	89fb      	ldrh	r3, [r7, #14]
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80061fc:	4a16      	ldr	r2, [pc, #88]	; (8006258 <PQCLEAN_KYBER512_CLEAN_poly_tomsg+0xac>)
 80061fe:	fb82 1203 	smull	r1, r2, r2, r3
 8006202:	441a      	add	r2, r3
 8006204:	12d2      	asrs	r2, r2, #11
 8006206:	17db      	asrs	r3, r3, #31
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	b29b      	uxth	r3, r3
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	81fb      	strh	r3, [r7, #14]
            msg[i] |= t << j;
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	4413      	add	r3, r2
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	b25a      	sxtb	r2, r3
 800621c:	89f9      	ldrh	r1, [r7, #14]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	fa01 f303 	lsl.w	r3, r1, r3
 8006224:	b25b      	sxtb	r3, r3
 8006226:	4313      	orrs	r3, r2
 8006228:	b259      	sxtb	r1, r3
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	4413      	add	r3, r2
 8006230:	b2ca      	uxtb	r2, r1
 8006232:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 8; j++) {
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	3301      	adds	r3, #1
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b07      	cmp	r3, #7
 800623e:	d9c5      	bls.n	80061cc <PQCLEAN_KYBER512_CLEAN_poly_tomsg+0x20>
    for (i = 0; i < KYBER_N / 8; i++) {
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	3301      	adds	r3, #1
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b1f      	cmp	r3, #31
 800624a:	d9b7      	bls.n	80061bc <PQCLEAN_KYBER512_CLEAN_poly_tomsg+0x10>
        }
    }
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	9d7dbb41 	.word	0x9d7dbb41

0800625c <PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *seed: pointer to input seed
*                                     (of length KYBER_SYMBYTES bytes)
*              - uint8_t nonce: one-byte input nonce
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b0b4      	sub	sp, #208	; 0xd0
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[KYBER_ETA1 * KYBER_N / 4];
    prf(buf, sizeof(buf), seed, nonce);
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	f107 0010 	add.w	r0, r7, #16
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	21c0      	movs	r1, #192	; 0xc0
 8006274:	f000 fbc2 	bl	80069fc <PQCLEAN_KYBER512_CLEAN_kyber_shake256_prf>
    PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1(r, buf);
 8006278:	f107 0310 	add.w	r3, r7, #16
 800627c:	4619      	mov	r1, r3
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f7fa fe56 	bl	8000f30 <PQCLEAN_KYBER512_CLEAN_poly_cbd_eta1>
}
 8006284:	bf00      	nop
 8006286:	37d0      	adds	r7, #208	; 0xd0
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *seed: pointer to input seed
*                                     (of length KYBER_SYMBYTES bytes)
*              - uint8_t nonce: one-byte input nonce
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_getnoise_eta2(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce) {
 800628c:	b580      	push	{r7, lr}
 800628e:	b0a4      	sub	sp, #144	; 0x90
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[KYBER_ETA2 * KYBER_N / 4];
    prf(buf, sizeof(buf), seed, nonce);
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	f107 0010 	add.w	r0, r7, #16
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	2180      	movs	r1, #128	; 0x80
 80062a4:	f000 fbaa 	bl	80069fc <PQCLEAN_KYBER512_CLEAN_kyber_shake256_prf>
    PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2(r, buf);
 80062a8:	f107 0310 	add.w	r3, r7, #16
 80062ac:	4619      	mov	r1, r3
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7fa fe4b 	bl	8000f4a <PQCLEAN_KYBER512_CLEAN_poly_cbd_eta2>
}
 80062b4:	bf00      	nop
 80062b6:	3790      	adds	r7, #144	; 0x90
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <PQCLEAN_KYBER512_CLEAN_poly_ntt>:
*              a polynomial in place;
*              inputs assumed to be in normal order, output in bitreversed order
*
* Arguments:   - uint16_t *r: pointer to in/output polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_ntt(poly *r) {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
    PQCLEAN_KYBER512_CLEAN_ntt(r->coeffs);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff fc74 	bl	8005bb4 <PQCLEAN_KYBER512_CLEAN_ntt>
    PQCLEAN_KYBER512_CLEAN_poly_reduce(r);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f882 	bl	80063d6 <PQCLEAN_KYBER512_CLEAN_poly_reduce>
}
 80062d2:	bf00      	nop
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont>:
*              of a polynomial in place;
*              inputs assumed to be in bitreversed order, output in normal order
*
* Arguments:   - uint16_t *a: pointer to in/output polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont(poly *r) {
 80062da:	b580      	push	{r7, lr}
 80062dc:	b082      	sub	sp, #8
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
    PQCLEAN_KYBER512_CLEAN_invntt(r->coeffs);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7ff fccb 	bl	8005c80 <PQCLEAN_KYBER512_CLEAN_invntt>
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	0000      	movs	r0, r0

080062f4 <PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery>:
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery(poly *r, const poly *a, const poly *b) {
 80062f4:	b590      	push	{r4, r7, lr}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
    size_t i;
    for (i = 0; i < KYBER_N / 4; i++) {
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e035      	b.n	8006372 <PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery+0x7e>
        PQCLEAN_KYBER512_CLEAN_basemul(&r->coeffs[4 * i], &a->coeffs[4 * i], &b->coeffs[4 * i], PQCLEAN_KYBER512_CLEAN_zetas[64 + i]);
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	18d0      	adds	r0, r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	18d1      	adds	r1, r2, r3
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	441a      	add	r2, r3
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	3340      	adds	r3, #64	; 0x40
 8006328:	4c16      	ldr	r4, [pc, #88]	; (8006384 <PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery+0x90>)
 800632a:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 800632e:	f7ff fd3d 	bl	8005dac <PQCLEAN_KYBER512_CLEAN_basemul>
        PQCLEAN_KYBER512_CLEAN_basemul(&r->coeffs[4 * i + 2], &a->coeffs[4 * i + 2], &b->coeffs[4 * i + 2], -PQCLEAN_KYBER512_CLEAN_zetas[64 + i]);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	3302      	adds	r3, #2
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	18d0      	adds	r0, r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	3302      	adds	r3, #2
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	18d1      	adds	r1, r2, r3
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	3302      	adds	r3, #2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	441a      	add	r2, r3
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	3340      	adds	r3, #64	; 0x40
 800635a:	4c0a      	ldr	r4, [pc, #40]	; (8006384 <PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery+0x90>)
 800635c:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8006360:	b29b      	uxth	r3, r3
 8006362:	425b      	negs	r3, r3
 8006364:	b29b      	uxth	r3, r3
 8006366:	b21b      	sxth	r3, r3
 8006368:	f7ff fd20 	bl	8005dac <PQCLEAN_KYBER512_CLEAN_basemul>
    for (i = 0; i < KYBER_N / 4; i++) {
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	3301      	adds	r3, #1
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b3f      	cmp	r3, #63	; 0x3f
 8006376:	d9c6      	bls.n	8006306 <PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery+0x12>
    }
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	bd90      	pop	{r4, r7, pc}
 8006382:	bf00      	nop
 8006384:	080086a0 	.word	0x080086a0

08006388 <PQCLEAN_KYBER512_CLEAN_poly_tomont>:
* Description: Inplace conversion of all coefficients of a polynomial
*              from normal domain to Montgomery domain
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_tomont(poly *r) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
    size_t i;
    const int16_t f = (1ULL << 32) % KYBER_Q;
 8006390:	f240 5349 	movw	r3, #1353	; 0x549
 8006394:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < KYBER_N; i++) {
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	e014      	b.n	80063c6 <PQCLEAN_KYBER512_CLEAN_poly_tomont+0x3e>
        r->coeffs[i] = PQCLEAN_KYBER512_CLEAN_montgomery_reduce((int32_t)r->coeffs[i] * f);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80063a4:	461a      	mov	r2, r3
 80063a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fab3 	bl	800691a <PQCLEAN_KYBER512_CLEAN_montgomery_reduce>
 80063b4:	4603      	mov	r3, r0
 80063b6:	4619      	mov	r1, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < KYBER_N; i++) {
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3301      	adds	r3, #1
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2bff      	cmp	r3, #255	; 0xff
 80063ca:	d9e7      	bls.n	800639c <PQCLEAN_KYBER512_CLEAN_poly_tomont+0x14>
    }
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <PQCLEAN_KYBER512_CLEAN_poly_reduce>:
* Description: Applies Barrett reduction to all coefficients of a polynomial
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_reduce(poly *r) {
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < KYBER_N; i++) {
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e00f      	b.n	8006404 <PQCLEAN_KYBER512_CLEAN_poly_reduce+0x2e>
        r->coeffs[i] = PQCLEAN_KYBER512_CLEAN_barrett_reduce(r->coeffs[i]);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fabc 	bl	800696a <PQCLEAN_KYBER512_CLEAN_barrett_reduce>
 80063f2:	4603      	mov	r3, r0
 80063f4:	4619      	mov	r1, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < KYBER_N; i++) {
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3301      	adds	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2bff      	cmp	r3, #255	; 0xff
 8006408:	d9ec      	bls.n	80063e4 <PQCLEAN_KYBER512_CLEAN_poly_reduce+0xe>
    }
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <PQCLEAN_KYBER512_CLEAN_poly_add>:
*
* Arguments: - poly *r: pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_add(poly *r, const poly *a, const poly *b) {
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
    size_t i;
    for (i = 0; i < KYBER_N; i++) {
 8006420:	2300      	movs	r3, #0
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	e013      	b.n	800644e <PQCLEAN_KYBER512_CLEAN_poly_add+0x3a>
        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800642e:	b29a      	uxth	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6979      	ldr	r1, [r7, #20]
 8006434:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8006438:	b29b      	uxth	r3, r3
 800643a:	4413      	add	r3, r2
 800643c:	b29b      	uxth	r3, r3
 800643e:	b219      	sxth	r1, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < KYBER_N; i++) {
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	3301      	adds	r3, #1
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2bff      	cmp	r3, #255	; 0xff
 8006452:	d9e8      	bls.n	8006426 <PQCLEAN_KYBER512_CLEAN_poly_add+0x12>
    }
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr

08006460 <PQCLEAN_KYBER512_CLEAN_poly_sub>:
*
* Arguments: - poly *r:       pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_poly_sub(poly *r, const poly *a, const poly *b) {
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
    size_t i;
    for (i = 0; i < KYBER_N; i++) {
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	e013      	b.n	800649a <PQCLEAN_KYBER512_CLEAN_poly_sub+0x3a>
        r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800647a:	b29a      	uxth	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6979      	ldr	r1, [r7, #20]
 8006480:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8006484:	b29b      	uxth	r3, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	b29b      	uxth	r3, r3
 800648a:	b219      	sxth	r1, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < KYBER_N; i++) {
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	3301      	adds	r3, #1
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2bff      	cmp	r3, #255	; 0xff
 800649e:	d9e8      	bls.n	8006472 <PQCLEAN_KYBER512_CLEAN_poly_sub+0x12>
    }
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr

080064ac <PQCLEAN_KYBER512_CLEAN_polyvec_compress>:
*
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYVECCOMPRESSEDBYTES)
*              - const polyvec *a: pointer to input vector of polynomials
**************************************************/
void PQCLEAN_KYBER512_CLEAN_polyvec_compress(uint8_t r[KYBER_POLYVECCOMPRESSEDBYTES], const polyvec *a) {
 80064ac:	b480      	push	{r7}
 80064ae:	b089      	sub	sp, #36	; 0x24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
    unsigned int i, j, k;

    uint16_t t[4];
    for (i = 0; i < KYBER_K; i++) {
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e091      	b.n	80065e0 <PQCLEAN_KYBER512_CLEAN_polyvec_compress+0x134>
        for (j = 0; j < KYBER_N / 4; j++) {
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	e087      	b.n	80065d2 <PQCLEAN_KYBER512_CLEAN_polyvec_compress+0x126>
            for (k = 0; k < 4; k++) {
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	e049      	b.n	800655c <PQCLEAN_KYBER512_CLEAN_polyvec_compress+0xb0>
                t[k]  = a->vec[i].coeffs[4 * j + k];
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	009a      	lsls	r2, r3, #2
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	441a      	add	r2, r3
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	69f9      	ldr	r1, [r7, #28]
 80064d4:	0209      	lsls	r1, r1, #8
 80064d6:	440a      	add	r2, r1
 80064d8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80064dc:	b29a      	uxth	r2, r3
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	3320      	adds	r3, #32
 80064e4:	443b      	add	r3, r7
 80064e6:	f823 2c14 	strh.w	r2, [r3, #-20]
                t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	3320      	adds	r3, #32
 80064f0:	443b      	add	r3, r7
 80064f2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	3320      	adds	r3, #32
 80064fc:	443b      	add	r3, r7
 80064fe:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006502:	b21b      	sxth	r3, r3
 8006504:	13db      	asrs	r3, r3, #15
 8006506:	b21b      	sxth	r3, r3
 8006508:	b299      	uxth	r1, r3
 800650a:	f640 5301 	movw	r3, #3329	; 0xd01
 800650e:	400b      	ands	r3, r1
 8006510:	b29b      	uxth	r3, r3
 8006512:	4413      	add	r3, r2
 8006514:	b29a      	uxth	r2, r3
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	3320      	adds	r3, #32
 800651c:	443b      	add	r3, r7
 800651e:	f823 2c14 	strh.w	r2, [r3, #-20]
                t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q / 2) / KYBER_Q) & 0x3ff;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	3320      	adds	r3, #32
 8006528:	443b      	add	r3, r7
 800652a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800652e:	029b      	lsls	r3, r3, #10
 8006530:	f503 62d0 	add.w	r2, r3, #1664	; 0x680
 8006534:	4b2f      	ldr	r3, [pc, #188]	; (80065f4 <PQCLEAN_KYBER512_CLEAN_polyvec_compress+0x148>)
 8006536:	fba3 1302 	umull	r1, r3, r3, r2
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	0852      	lsrs	r2, r2, #1
 800653e:	4413      	add	r3, r2
 8006540:	0adb      	lsrs	r3, r3, #11
 8006542:	b29b      	uxth	r3, r3
 8006544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006548:	b29a      	uxth	r2, r3
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	3320      	adds	r3, #32
 8006550:	443b      	add	r3, r7
 8006552:	f823 2c14 	strh.w	r2, [r3, #-20]
            for (k = 0; k < 4; k++) {
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	3301      	adds	r3, #1
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2b03      	cmp	r3, #3
 8006560:	d9b2      	bls.n	80064c8 <PQCLEAN_KYBER512_CLEAN_polyvec_compress+0x1c>
            }

            r[0] = (uint8_t)(t[0] >> 0);
 8006562:	89bb      	ldrh	r3, [r7, #12]
 8006564:	b2da      	uxtb	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	701a      	strb	r2, [r3, #0]
            r[1] = (uint8_t)((t[0] >> 8) | (t[1] << 2));
 800656a:	89bb      	ldrh	r3, [r7, #12]
 800656c:	0a1b      	lsrs	r3, r3, #8
 800656e:	b29b      	uxth	r3, r3
 8006570:	b25a      	sxtb	r2, r3
 8006572:	89fb      	ldrh	r3, [r7, #14]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	b25b      	sxtb	r3, r3
 8006578:	4313      	orrs	r3, r2
 800657a:	b25a      	sxtb	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3301      	adds	r3, #1
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	701a      	strb	r2, [r3, #0]
            r[2] = (uint8_t)((t[1] >> 6) | (t[2] << 4));
 8006584:	89fb      	ldrh	r3, [r7, #14]
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	b29b      	uxth	r3, r3
 800658a:	b25a      	sxtb	r2, r3
 800658c:	8a3b      	ldrh	r3, [r7, #16]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	b25b      	sxtb	r3, r3
 8006592:	4313      	orrs	r3, r2
 8006594:	b25a      	sxtb	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3302      	adds	r3, #2
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]
            r[3] = (uint8_t)((t[2] >> 4) | (t[3] << 6));
 800659e:	8a3b      	ldrh	r3, [r7, #16]
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	b25a      	sxtb	r2, r3
 80065a6:	8a7b      	ldrh	r3, [r7, #18]
 80065a8:	019b      	lsls	r3, r3, #6
 80065aa:	b25b      	sxtb	r3, r3
 80065ac:	4313      	orrs	r3, r2
 80065ae:	b25a      	sxtb	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3303      	adds	r3, #3
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]
            r[4] = (uint8_t)(t[3] >> 2);
 80065b8:	8a7b      	ldrh	r3, [r7, #18]
 80065ba:	089b      	lsrs	r3, r3, #2
 80065bc:	b29a      	uxth	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3304      	adds	r3, #4
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
            r += 5;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3305      	adds	r3, #5
 80065ca:	607b      	str	r3, [r7, #4]
        for (j = 0; j < KYBER_N / 4; j++) {
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	3301      	adds	r3, #1
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	2b3f      	cmp	r3, #63	; 0x3f
 80065d6:	f67f af74 	bls.w	80064c2 <PQCLEAN_KYBER512_CLEAN_polyvec_compress+0x16>
    for (i = 0; i < KYBER_K; i++) {
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	3301      	adds	r3, #1
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	f67f af6a 	bls.w	80064bc <PQCLEAN_KYBER512_CLEAN_polyvec_compress+0x10>
        }
    }
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	3724      	adds	r7, #36	; 0x24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr
 80065f4:	3afb7681 	.word	0x3afb7681

080065f8 <PQCLEAN_KYBER512_CLEAN_polyvec_decompress>:
*
* Arguments:   - polyvec *r:       pointer to output vector of polynomials
*              - const uint8_t *a: pointer to input byte array
*                                  (of length KYBER_POLYVECCOMPRESSEDBYTES)
**************************************************/
void PQCLEAN_KYBER512_CLEAN_polyvec_decompress(polyvec *r, const uint8_t a[KYBER_POLYVECCOMPRESSEDBYTES]) {
 80065f8:	b480      	push	{r7}
 80065fa:	b089      	sub	sp, #36	; 0x24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
    unsigned int i, j, k;

    uint16_t t[4];
    for (i = 0; i < KYBER_K; i++) {
 8006602:	2300      	movs	r3, #0
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	e06b      	b.n	80066e0 <PQCLEAN_KYBER512_CLEAN_polyvec_decompress+0xe8>
        for (j = 0; j < KYBER_N / 4; j++) {
 8006608:	2300      	movs	r3, #0
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	e062      	b.n	80066d4 <PQCLEAN_KYBER512_CLEAN_polyvec_decompress+0xdc>
            t[0] = (a[0] >> 0) | ((uint16_t)a[1] << 8);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	b21a      	sxth	r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	3301      	adds	r3, #1
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	b21b      	sxth	r3, r3
 800661e:	4313      	orrs	r3, r2
 8006620:	b21b      	sxth	r3, r3
 8006622:	b29b      	uxth	r3, r3
 8006624:	81bb      	strh	r3, [r7, #12]
            t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	089b      	lsrs	r3, r3, #2
 800662e:	b2db      	uxtb	r3, r3
 8006630:	b21a      	sxth	r2, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	3302      	adds	r3, #2
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	019b      	lsls	r3, r3, #6
 800663a:	b21b      	sxth	r3, r3
 800663c:	4313      	orrs	r3, r2
 800663e:	b21b      	sxth	r3, r3
 8006640:	b29b      	uxth	r3, r3
 8006642:	81fb      	strh	r3, [r7, #14]
            t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	3302      	adds	r3, #2
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	091b      	lsrs	r3, r3, #4
 800664c:	b2db      	uxtb	r3, r3
 800664e:	b21a      	sxth	r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	3303      	adds	r3, #3
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	b21b      	sxth	r3, r3
 800665a:	4313      	orrs	r3, r2
 800665c:	b21b      	sxth	r3, r3
 800665e:	b29b      	uxth	r3, r3
 8006660:	823b      	strh	r3, [r7, #16]
            t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	3303      	adds	r3, #3
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	099b      	lsrs	r3, r3, #6
 800666a:	b2db      	uxtb	r3, r3
 800666c:	b21a      	sxth	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	3304      	adds	r3, #4
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	b21b      	sxth	r3, r3
 8006678:	4313      	orrs	r3, r2
 800667a:	b21b      	sxth	r3, r3
 800667c:	b29b      	uxth	r3, r3
 800667e:	827b      	strh	r3, [r7, #18]
            a += 5;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	3305      	adds	r3, #5
 8006684:	603b      	str	r3, [r7, #0]

            for (k = 0; k < 4; k++) {
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	e01d      	b.n	80066c8 <PQCLEAN_KYBER512_CLEAN_polyvec_decompress+0xd0>
                r->vec[i].coeffs[4 * j + k] = ((uint32_t)(t[k] & 0x3FF) * KYBER_Q + 512) >> 10;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	3320      	adds	r3, #32
 8006692:	443b      	add	r3, r7
 8006694:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800669c:	f640 5201 	movw	r2, #3329	; 0xd01
 80066a0:	fb02 f303 	mul.w	r3, r2, r3
 80066a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80066a8:	0a99      	lsrs	r1, r3, #10
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	009a      	lsls	r2, r3, #2
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	441a      	add	r2, r3
 80066b2:	b208      	sxth	r0, r1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	69f9      	ldr	r1, [r7, #28]
 80066b8:	0209      	lsls	r1, r1, #8
 80066ba:	440a      	add	r2, r1
 80066bc:	4601      	mov	r1, r0
 80066be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for (k = 0; k < 4; k++) {
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	3301      	adds	r3, #1
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d9de      	bls.n	800668c <PQCLEAN_KYBER512_CLEAN_polyvec_decompress+0x94>
        for (j = 0; j < KYBER_N / 4; j++) {
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	3301      	adds	r3, #1
 80066d2:	61bb      	str	r3, [r7, #24]
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	2b3f      	cmp	r3, #63	; 0x3f
 80066d8:	d999      	bls.n	800660e <PQCLEAN_KYBER512_CLEAN_polyvec_decompress+0x16>
    for (i = 0; i < KYBER_K; i++) {
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	3301      	adds	r3, #1
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d990      	bls.n	8006608 <PQCLEAN_KYBER512_CLEAN_polyvec_decompress+0x10>
            }
        }
    }
}
 80066e6:	bf00      	nop
 80066e8:	bf00      	nop
 80066ea:	3724      	adds	r7, #36	; 0x24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr

080066f2 <PQCLEAN_KYBER512_CLEAN_polyvec_tobytes>:
*
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYVECBYTES)
*              - const polyvec *a: pointer to input vector of polynomials
**************************************************/
void PQCLEAN_KYBER512_CLEAN_polyvec_tobytes(uint8_t r[KYBER_POLYVECBYTES], const polyvec *a) {
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
    unsigned int i;
    for (i = 0; i < KYBER_K; i++) {
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	e011      	b.n	8006726 <PQCLEAN_KYBER512_CLEAN_polyvec_tobytes+0x34>
        PQCLEAN_KYBER512_CLEAN_poly_tobytes(r + i * KYBER_POLYBYTES, &a->vec[i]);
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4613      	mov	r3, r2
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	4413      	add	r3, r2
 800670a:	01db      	lsls	r3, r3, #7
 800670c:	461a      	mov	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	1898      	adds	r0, r3, r2
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	025b      	lsls	r3, r3, #9
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	4413      	add	r3, r2
 800671a:	4619      	mov	r1, r3
 800671c:	f7ff fc5d 	bl	8005fda <PQCLEAN_KYBER512_CLEAN_poly_tobytes>
    for (i = 0; i < KYBER_K; i++) {
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3301      	adds	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d9ea      	bls.n	8006702 <PQCLEAN_KYBER512_CLEAN_polyvec_tobytes+0x10>
    }
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <PQCLEAN_KYBER512_CLEAN_polyvec_frombytes>:
*
* Arguments:   - uint8_t *r:       pointer to output byte array
*              - const polyvec *a: pointer to input vector of polynomials
*                                  (of length KYBER_POLYVECBYTES)
**************************************************/
void PQCLEAN_KYBER512_CLEAN_polyvec_frombytes(polyvec *r, const uint8_t a[KYBER_POLYVECBYTES]) {
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
    unsigned int i;
    for (i = 0; i < KYBER_K; i++) {
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	e011      	b.n	800676a <PQCLEAN_KYBER512_CLEAN_polyvec_frombytes+0x34>
        PQCLEAN_KYBER512_CLEAN_poly_frombytes(&r->vec[i], a + i * KYBER_POLYBYTES);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	025b      	lsls	r3, r3, #9
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	18d0      	adds	r0, r2, r3
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4613      	mov	r3, r2
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	4413      	add	r3, r2
 8006756:	01db      	lsls	r3, r3, #7
 8006758:	461a      	mov	r2, r3
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	4413      	add	r3, r2
 800675e:	4619      	mov	r1, r3
 8006760:	f7ff fc9b 	bl	800609a <PQCLEAN_KYBER512_CLEAN_poly_frombytes>
    for (i = 0; i < KYBER_K; i++) {
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3301      	adds	r3, #1
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d9ea      	bls.n	8006746 <PQCLEAN_KYBER512_CLEAN_polyvec_frombytes+0x10>
    }
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <PQCLEAN_KYBER512_CLEAN_polyvec_ntt>:
*
* Description: Apply forward NTT to all elements of a vector of polynomials
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void PQCLEAN_KYBER512_CLEAN_polyvec_ntt(polyvec *r) {
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for (i = 0; i < KYBER_K; i++) {
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e009      	b.n	800679c <PQCLEAN_KYBER512_CLEAN_polyvec_ntt+0x22>
        PQCLEAN_KYBER512_CLEAN_poly_ntt(&r->vec[i]);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	025b      	lsls	r3, r3, #9
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	4413      	add	r3, r2
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff fd93 	bl	80062bc <PQCLEAN_KYBER512_CLEAN_poly_ntt>
    for (i = 0; i < KYBER_K; i++) {
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3301      	adds	r3, #1
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d9f2      	bls.n	8006788 <PQCLEAN_KYBER512_CLEAN_polyvec_ntt+0xe>
    }
}
 80067a2:	bf00      	nop
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <PQCLEAN_KYBER512_CLEAN_polyvec_invntt_tomont>:
* Description: Apply inverse NTT to all elements of a vector of polynomials
*              and multiply by Montgomery factor 2^16
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void PQCLEAN_KYBER512_CLEAN_polyvec_invntt_tomont(polyvec *r) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for (i = 0; i < KYBER_K; i++) {
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	e009      	b.n	80067ce <PQCLEAN_KYBER512_CLEAN_polyvec_invntt_tomont+0x22>
        PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont(&r->vec[i]);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	025b      	lsls	r3, r3, #9
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff fd89 	bl	80062da <PQCLEAN_KYBER512_CLEAN_poly_invntt_tomont>
    for (i = 0; i < KYBER_K; i++) {
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3301      	adds	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d9f2      	bls.n	80067ba <PQCLEAN_KYBER512_CLEAN_polyvec_invntt_tomont+0xe>
    }
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery>:
*
* Arguments: - poly *r: pointer to output polynomial
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b) {
 80067de:	b580      	push	{r7, lr}
 80067e0:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80067ea:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80067ee:	6018      	str	r0, [r3, #0]
 80067f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80067f4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80067f8:	6019      	str	r1, [r3, #0]
 80067fa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80067fe:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8006802:	601a      	str	r2, [r3, #0]
    unsigned int i;
    poly t;

    //trigger_high();
    PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery(r, &a->vec[0], &b->vec[0]);
 8006804:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006808:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800680c:	6819      	ldr	r1, [r3, #0]
 800680e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006812:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800681c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	f7ff fd67 	bl	80062f4 <PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery>
    //trigger_low();
    for (i = 1; i < KYBER_K; i++) {
 8006826:	2301      	movs	r3, #1
 8006828:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800682c:	e029      	b.n	8006882 <PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery+0xa4>
        PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery(&t, &a->vec[i], &b->vec[i]);
 800682e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006832:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8006836:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800683a:	025b      	lsls	r3, r3, #9
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	18d1      	adds	r1, r2, r3
 8006840:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006844:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8006848:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800684c:	025b      	lsls	r3, r3, #9
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	441a      	add	r2, r3
 8006852:	f107 0314 	add.w	r3, r7, #20
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fd4c 	bl	80062f4 <PQCLEAN_KYBER512_CLEAN_poly_basemul_montgomery>
        PQCLEAN_KYBER512_CLEAN_poly_add(r, r, &t);
 800685c:	f107 0214 	add.w	r2, r7, #20
 8006860:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006864:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 8006868:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800686c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006870:	6809      	ldr	r1, [r1, #0]
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	f7ff fdce 	bl	8006414 <PQCLEAN_KYBER512_CLEAN_poly_add>
    for (i = 1; i < KYBER_K; i++) {
 8006878:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800687c:	3301      	adds	r3, #1
 800687e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8006882:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006886:	2b01      	cmp	r3, #1
 8006888:	d9d1      	bls.n	800682e <PQCLEAN_KYBER512_CLEAN_polyvec_basemul_acc_montgomery+0x50>
    }

    PQCLEAN_KYBER512_CLEAN_poly_reduce(r);
 800688a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800688e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	f7ff fd9f 	bl	80063d6 <PQCLEAN_KYBER512_CLEAN_poly_reduce>
}
 8006898:	bf00      	nop
 800689a:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <PQCLEAN_KYBER512_CLEAN_polyvec_reduce>:
*              of each element of a vector of polynomials;
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - polyvec *r: pointer to input/output polynomial
**************************************************/
void PQCLEAN_KYBER512_CLEAN_polyvec_reduce(polyvec *r) {
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for (i = 0; i < KYBER_K; i++) {
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	e009      	b.n	80068c4 <PQCLEAN_KYBER512_CLEAN_polyvec_reduce+0x22>
        PQCLEAN_KYBER512_CLEAN_poly_reduce(&r->vec[i]);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	025b      	lsls	r3, r3, #9
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	4413      	add	r3, r2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fd8c 	bl	80063d6 <PQCLEAN_KYBER512_CLEAN_poly_reduce>
    for (i = 0; i < KYBER_K; i++) {
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3301      	adds	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d9f2      	bls.n	80068b0 <PQCLEAN_KYBER512_CLEAN_polyvec_reduce+0xe>
    }
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <PQCLEAN_KYBER512_CLEAN_polyvec_add>:
*
* Arguments: - polyvec *r: pointer to output vector of polynomials
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void PQCLEAN_KYBER512_CLEAN_polyvec_add(polyvec *r, const polyvec *a, const polyvec *b) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
    unsigned int i;
    for (i = 0; i < KYBER_K; i++) {
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	e011      	b.n	800690a <PQCLEAN_KYBER512_CLEAN_polyvec_add+0x36>
        PQCLEAN_KYBER512_CLEAN_poly_add(&r->vec[i], &a->vec[i], &b->vec[i]);
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	025b      	lsls	r3, r3, #9
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	18d0      	adds	r0, r2, r3
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	025b      	lsls	r3, r3, #9
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	18d1      	adds	r1, r2, r3
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	025b      	lsls	r3, r3, #9
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	4413      	add	r3, r2
 80068fe:	461a      	mov	r2, r3
 8006900:	f7ff fd88 	bl	8006414 <PQCLEAN_KYBER512_CLEAN_poly_add>
    for (i = 0; i < KYBER_K; i++) {
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	3301      	adds	r3, #1
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d9ea      	bls.n	80068e6 <PQCLEAN_KYBER512_CLEAN_polyvec_add+0x12>
    }
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <PQCLEAN_KYBER512_CLEAN_montgomery_reduce>:
* Arguments:   - int32_t a: input integer to be reduced;
*                           has to be in {-q2^15,...,q2^15-1}
*
* Returns:     integer in {-q+1,...,q-1} congruent to a * R^-1 modulo q.
**************************************************/
int16_t PQCLEAN_KYBER512_CLEAN_montgomery_reduce(int32_t a) {
 800691a:	b480      	push	{r7}
 800691c:	b085      	sub	sp, #20
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
    int16_t t;

    t = (int16_t)a * QINV;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	b29b      	uxth	r3, r3
 8006926:	461a      	mov	r2, r3
 8006928:	0052      	lsls	r2, r2, #1
 800692a:	441a      	add	r2, r3
 800692c:	4611      	mov	r1, r2
 800692e:	00c8      	lsls	r0, r1, #3
 8006930:	4611      	mov	r1, r2
 8006932:	4602      	mov	r2, r0
 8006934:	440a      	add	r2, r1
 8006936:	4611      	mov	r1, r2
 8006938:	00c8      	lsls	r0, r1, #3
 800693a:	4611      	mov	r1, r2
 800693c:	4602      	mov	r2, r0
 800693e:	440a      	add	r2, r1
 8006940:	0212      	lsls	r2, r2, #8
 8006942:	4413      	add	r3, r2
 8006944:	b29b      	uxth	r3, r3
 8006946:	81fb      	strh	r3, [r7, #14]
    t = (a - (int32_t)t * KYBER_Q) >> 16;
 8006948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800694c:	f46f 6250 	mvn.w	r2, #3328	; 0xd00
 8006950:	fb03 f202 	mul.w	r2, r3, r2
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4413      	add	r3, r2
 8006958:	141b      	asrs	r3, r3, #16
 800695a:	81fb      	strh	r3, [r7, #14]
    return t;
 800695c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr

0800696a <PQCLEAN_KYBER512_CLEAN_barrett_reduce>:
*
* Arguments:   - int16_t a: input integer to be reduced
*
* Returns:     integer in {-(q-1)/2,...,(q-1)/2} congruent to a modulo q.
**************************************************/
int16_t PQCLEAN_KYBER512_CLEAN_barrett_reduce(int16_t a) {
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	4603      	mov	r3, r0
 8006972:	80fb      	strh	r3, [r7, #6]
    int16_t t;
    const int16_t v = ((1 << 26) + KYBER_Q / 2) / KYBER_Q;
 8006974:	f644 63bf 	movw	r3, #20159	; 0x4ebf
 8006978:	81fb      	strh	r3, [r7, #14]

    t  = ((int32_t)v * a + (1 << 25)) >> 26;
 800697a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800697e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006982:	fb02 f303 	mul.w	r3, r2, r3
 8006986:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800698a:	169b      	asrs	r3, r3, #26
 800698c:	81bb      	strh	r3, [r7, #12]
    t *= KYBER_Q;
 800698e:	89bb      	ldrh	r3, [r7, #12]
 8006990:	461a      	mov	r2, r3
 8006992:	0052      	lsls	r2, r2, #1
 8006994:	441a      	add	r2, r3
 8006996:	0092      	lsls	r2, r2, #2
 8006998:	441a      	add	r2, r3
 800699a:	0212      	lsls	r2, r2, #8
 800699c:	4413      	add	r3, r2
 800699e:	b29b      	uxth	r3, r3
 80069a0:	81bb      	strh	r3, [r7, #12]
    return a - t;
 80069a2:	88fa      	ldrh	r2, [r7, #6]
 80069a4:	89bb      	ldrh	r3, [r7, #12]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	b21b      	sxth	r3, r3
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr

080069b6 <PQCLEAN_KYBER512_CLEAN_kyber_shake128_absorb>:
*              - uint8_t j: additional byte of input
**************************************************/
void PQCLEAN_KYBER512_CLEAN_kyber_shake128_absorb(xof_state *state,
        const uint8_t seed[KYBER_SYMBYTES],
        uint8_t x,
        uint8_t y) {
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b08e      	sub	sp, #56	; 0x38
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	4611      	mov	r1, r2
 80069c2:	461a      	mov	r2, r3
 80069c4:	460b      	mov	r3, r1
 80069c6:	71fb      	strb	r3, [r7, #7]
 80069c8:	4613      	mov	r3, r2
 80069ca:	71bb      	strb	r3, [r7, #6]
    uint8_t extseed[KYBER_SYMBYTES + 2];

    memcpy(extseed, seed, KYBER_SYMBYTES);
 80069cc:	f107 0314 	add.w	r3, r7, #20
 80069d0:	2220      	movs	r2, #32
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7f9 ff2b 	bl	8000830 <memcpy>
    extseed[KYBER_SYMBYTES + 0] = x;
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    extseed[KYBER_SYMBYTES + 1] = y;
 80069e0:	79bb      	ldrb	r3, [r7, #6]
 80069e2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    shake128_absorb(state, extseed, sizeof(extseed));
 80069e6:	f107 0314 	add.w	r3, r7, #20
 80069ea:	2222      	movs	r2, #34	; 0x22
 80069ec:	4619      	mov	r1, r3
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7fe f971 	bl	8004cd6 <shake128_absorb>
}
 80069f4:	bf00      	nop
 80069f6:	3738      	adds	r7, #56	; 0x38
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <PQCLEAN_KYBER512_CLEAN_kyber_shake256_prf>:
* Arguments:   - uint8_t *out: pointer to output
*              - size_t outlen: number of requested output bytes
*              - const uint8_t *key: pointer to the key (of length KYBER_SYMBYTES)
*              - uint8_t nonce: single-byte nonce (public PRF input)
**************************************************/
void PQCLEAN_KYBER512_CLEAN_kyber_shake256_prf(uint8_t *out, size_t outlen, const uint8_t key[KYBER_SYMBYTES], uint8_t nonce) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08e      	sub	sp, #56	; 0x38
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	70fb      	strb	r3, [r7, #3]
    uint8_t extkey[KYBER_SYMBYTES + 1];

    memcpy(extkey, key, KYBER_SYMBYTES);
 8006a0a:	f107 0314 	add.w	r3, r7, #20
 8006a0e:	2220      	movs	r2, #32
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7f9 ff0c 	bl	8000830 <memcpy>
    extkey[KYBER_SYMBYTES] = nonce;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    shake256(out, outlen, extkey, sizeof(extkey));
 8006a1e:	f107 0214 	add.w	r2, r7, #20
 8006a22:	2321      	movs	r3, #33	; 0x21
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7fe f9d4 	bl	8004dd4 <shake256>
}
 8006a2c:	bf00      	nop
 8006a2e:	3738      	adds	r7, #56	; 0x38
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <PQCLEAN_KYBER512_CLEAN_kyber_shake256_rkprf>:
* Arguments:   - uint8_t *out: pointer to output
*              - size_t outlen: number of requested output bytes
*              - const uint8_t *key: pointer to the key (of length KYBER_SYMBYTES)
*              - uint8_t nonce: single-byte nonce (public PRF input)
**************************************************/
void PQCLEAN_KYBER512_CLEAN_kyber_shake256_rkprf(uint8_t out[KYBER_SSBYTES], const uint8_t key[KYBER_SYMBYTES], const uint8_t input[KYBER_CIPHERTEXTBYTES]) {
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
    shake256incctx s;

    shake256_inc_init(&s);
 8006a40:	f107 0314 	add.w	r3, r7, #20
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe f8ed 	bl	8004c24 <shake256_inc_init>
    shake256_inc_absorb(&s, key, KYBER_SYMBYTES);
 8006a4a:	f107 0314 	add.w	r3, r7, #20
 8006a4e:	2220      	movs	r2, #32
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe f901 	bl	8004c5a <shake256_inc_absorb>
    shake256_inc_absorb(&s, input, KYBER_CIPHERTEXTBYTES);
 8006a58:	f107 0314 	add.w	r3, r7, #20
 8006a5c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe f8f9 	bl	8004c5a <shake256_inc_absorb>
    shake256_inc_finalize(&s);
 8006a68:	f107 0314 	add.w	r3, r7, #20
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe f905 	bl	8004c7c <shake256_inc_finalize>
    shake256_inc_squeeze(out, KYBER_SSBYTES, &s);
 8006a72:	f107 0314 	add.w	r3, r7, #20
 8006a76:	461a      	mov	r2, r3
 8006a78:	2120      	movs	r1, #32
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7fe f90d 	bl	8004c9a <shake256_inc_squeeze>
    shake256_inc_ctx_release(&s);
 8006a80:	f107 0314 	add.w	r3, r7, #20
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe f919 	bl	8004cbc <shake256_inc_ctx_release>
}
 8006a8a:	bf00      	nop
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <PQCLEAN_KYBER512_CLEAN_verify>:
*              const uint8_t *b: pointer to second byte array
*              size_t len:       length of the byte arrays
*
* Returns 0 if the byte arrays are equal, 1 otherwise
**************************************************/
int PQCLEAN_KYBER512_CLEAN_verify(const uint8_t *a, const uint8_t *b, size_t len) {
 8006a92:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
    size_t i;
    uint8_t r = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	74fb      	strb	r3, [r7, #19]

    for (i = 0; i < len; i++) {
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	e00f      	b.n	8006aca <PQCLEAN_KYBER512_CLEAN_verify+0x38>
        r |= a[i] ^ b[i];
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	781a      	ldrb	r2, [r3, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	440b      	add	r3, r1
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	4053      	eors	r3, r2
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	7cfb      	ldrb	r3, [r7, #19]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	74fb      	strb	r3, [r7, #19]
    for (i = 0; i < len; i++) {
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d3eb      	bcc.n	8006aaa <PQCLEAN_KYBER512_CLEAN_verify+0x18>
    }

    return (-(uint64_t)r) >> 63;
 8006ad2:	7cfb      	ldrb	r3, [r7, #19]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	461c      	mov	r4, r3
 8006ad8:	4615      	mov	r5, r2
 8006ada:	2300      	movs	r3, #0
 8006adc:	f1d4 0800 	rsbs	r8, r4, #0
 8006ae0:	eb63 0905 	sbc.w	r9, r3, r5
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 8006af0:	2300      	movs	r3, #0
 8006af2:	4613      	mov	r3, r2
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8006afe:	4770      	bx	lr

08006b00 <PQCLEAN_KYBER512_CLEAN_cmov>:
* Arguments:   uint8_t *r:       pointer to output byte array
*              const uint8_t *x: pointer to input byte array
*              size_t len:       Amount of bytes to be copied
*              uint8_t b:        Condition bit; has to be in {0,1}
**************************************************/
void PQCLEAN_KYBER512_CLEAN_cmov(uint8_t *r, const uint8_t *x, size_t len, uint8_t b) {
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	70fb      	strb	r3, [r7, #3]
    size_t i;

    b = -b;
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	425b      	negs	r3, r3
 8006b12:	70fb      	strb	r3, [r7, #3]
    for (i = 0; i < len; i++) {
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e019      	b.n	8006b4e <PQCLEAN_KYBER512_CLEAN_cmov+0x4e>
        r[i] ^= b & (r[i] ^ x[i]);
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	4413      	add	r3, r2
 8006b20:	7819      	ldrb	r1, [r3, #0]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4413      	add	r3, r2
 8006b28:	781a      	ldrb	r2, [r3, #0]
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	4403      	add	r3, r0
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	4053      	eors	r3, r2
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	78fb      	ldrb	r3, [r7, #3]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	4403      	add	r3, r0
 8006b42:	404a      	eors	r2, r1
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d3e1      	bcc.n	8006b1a <PQCLEAN_KYBER512_CLEAN_cmov+0x1a>
    }
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr

08006b62 <check_version>:
} ss_cmd;
static ss_cmd commands[MAX_SS_CMDS];
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
	return SS_VER;
 8006b6e:	2301      	movs	r3, #1
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr
 8006b7a:	0000      	movs	r0, r0

08006b7c <ss_num_commands>:

uint8_t ss_num_commands(uint8_t *x, uint8_t len)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
    uint8_t ncmds = num_commands & 0xFF;
 8006b88:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <ss_num_commands+0x2c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	73fb      	strb	r3, [r7, #15]
    simpleserial_put('r', 0x01, &ncmds);
 8006b90:	f107 030f 	add.w	r3, r7, #15
 8006b94:	461a      	mov	r2, r3
 8006b96:	2101      	movs	r1, #1
 8006b98:	2072      	movs	r0, #114	; 0x72
 8006b9a:	f000 fa51 	bl	8007040 <simpleserial_put>
    return 0x00;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	2000156c 	.word	0x2000156c

08006bac <ss_get_commands>:
    uint8_t len;
    uint8_t flags;
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b090      	sub	sp, #64	; 0x40
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006bbe:	e037      	b.n	8006c30 <ss_get_commands+0x84>
        repr_cmd_buf[i].c = commands[i].c;
 8006bc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006bc4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006bc8:	4926      	ldr	r1, [pc, #152]	; (8006c64 <ss_get_commands+0xb8>)
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	440b      	add	r3, r1
 8006bce:	7819      	ldrb	r1, [r3, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	4413      	add	r3, r2
 8006bd6:	3340      	adds	r3, #64	; 0x40
 8006bd8:	443b      	add	r3, r7
 8006bda:	3b34      	subs	r3, #52	; 0x34
 8006bdc:	460a      	mov	r2, r1
 8006bde:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].len = commands[i].len;
 8006be0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006be4:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <ss_get_commands+0xb8>)
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	4413      	add	r3, r2
 8006bea:	3304      	adds	r3, #4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006bf2:	b2d9      	uxtb	r1, r3
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3340      	adds	r3, #64	; 0x40
 8006bfc:	443b      	add	r3, r7
 8006bfe:	3b33      	subs	r3, #51	; 0x33
 8006c00:	460a      	mov	r2, r1
 8006c02:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].flags = commands[i].flags;
 8006c04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c08:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006c0c:	4915      	ldr	r1, [pc, #84]	; (8006c64 <ss_get_commands+0xb8>)
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	440b      	add	r3, r1
 8006c12:	330c      	adds	r3, #12
 8006c14:	7819      	ldrb	r1, [r3, #0]
 8006c16:	4613      	mov	r3, r2
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	4413      	add	r3, r2
 8006c1c:	3340      	adds	r3, #64	; 0x40
 8006c1e:	443b      	add	r3, r7
 8006c20:	3b32      	subs	r3, #50	; 0x32
 8006c22:	460a      	mov	r2, r1
 8006c24:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8006c26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006c30:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006c34:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <ss_get_commands+0xbc>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	dbc0      	blt.n	8006bc0 <ss_get_commands+0x14>
    }

    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8006c3e:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <ss_get_commands+0xbc>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	0052      	lsls	r2, r2, #1
 8006c48:	4413      	add	r3, r2
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f107 020c 	add.w	r2, r7, #12
 8006c50:	4619      	mov	r1, r3
 8006c52:	2072      	movs	r0, #114	; 0x72
 8006c54:	f000 f9f4 	bl	8007040 <simpleserial_put>
    return 0x00;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3740      	adds	r7, #64	; 0x40
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20001570 	.word	0x20001570
 8006c68:	2000156c 	.word	0x2000156c

08006c6c <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e083      	b.n	8006d86 <hex_decode+0x11a>
	{
		char n_hi = ascii_buf[2*i];
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	461a      	mov	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4413      	add	r3, r2
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	74fb      	strb	r3, [r7, #19]
		char n_lo = ascii_buf[2*i+1];
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	3301      	adds	r3, #1
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	4413      	add	r3, r2
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	74bb      	strb	r3, [r7, #18]

		if(n_lo >= '0' && n_lo <= '9')
 8006c9a:	7cbb      	ldrb	r3, [r7, #18]
 8006c9c:	2b2f      	cmp	r3, #47	; 0x2f
 8006c9e:	d90a      	bls.n	8006cb6 <hex_decode+0x4a>
 8006ca0:	7cbb      	ldrb	r3, [r7, #18]
 8006ca2:	2b39      	cmp	r3, #57	; 0x39
 8006ca4:	d807      	bhi.n	8006cb6 <hex_decode+0x4a>
			data_buf[i] = n_lo - '0';
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	4413      	add	r3, r2
 8006cac:	7cba      	ldrb	r2, [r7, #18]
 8006cae:	3a30      	subs	r2, #48	; 0x30
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	e01d      	b.n	8006cf2 <hex_decode+0x86>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8006cb6:	7cbb      	ldrb	r3, [r7, #18]
 8006cb8:	2b40      	cmp	r3, #64	; 0x40
 8006cba:	d90a      	bls.n	8006cd2 <hex_decode+0x66>
 8006cbc:	7cbb      	ldrb	r3, [r7, #18]
 8006cbe:	2b46      	cmp	r3, #70	; 0x46
 8006cc0:	d807      	bhi.n	8006cd2 <hex_decode+0x66>
			data_buf[i] = n_lo - 'A' + 10;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	7cba      	ldrb	r2, [r7, #18]
 8006cca:	3a37      	subs	r2, #55	; 0x37
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	e00f      	b.n	8006cf2 <hex_decode+0x86>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8006cd2:	7cbb      	ldrb	r3, [r7, #18]
 8006cd4:	2b60      	cmp	r3, #96	; 0x60
 8006cd6:	d90a      	bls.n	8006cee <hex_decode+0x82>
 8006cd8:	7cbb      	ldrb	r3, [r7, #18]
 8006cda:	2b66      	cmp	r3, #102	; 0x66
 8006cdc:	d807      	bhi.n	8006cee <hex_decode+0x82>
			data_buf[i] = n_lo - 'a' + 10;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	7cba      	ldrb	r2, [r7, #18]
 8006ce6:	3a57      	subs	r2, #87	; 0x57
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	e001      	b.n	8006cf2 <hex_decode+0x86>
		else
			return 1;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e04f      	b.n	8006d92 <hex_decode+0x126>

		if(n_hi >= '0' && n_hi <= '9')
 8006cf2:	7cfb      	ldrb	r3, [r7, #19]
 8006cf4:	2b2f      	cmp	r3, #47	; 0x2f
 8006cf6:	d913      	bls.n	8006d20 <hex_decode+0xb4>
 8006cf8:	7cfb      	ldrb	r3, [r7, #19]
 8006cfa:	2b39      	cmp	r3, #57	; 0x39
 8006cfc:	d810      	bhi.n	8006d20 <hex_decode+0xb4>
			data_buf[i] |= (n_hi - '0') << 4;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	4413      	add	r3, r2
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	b25a      	sxtb	r2, r3
 8006d08:	7cfb      	ldrb	r3, [r7, #19]
 8006d0a:	3b30      	subs	r3, #48	; 0x30
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	b25b      	sxtb	r3, r3
 8006d10:	4313      	orrs	r3, r2
 8006d12:	b259      	sxtb	r1, r3
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	4413      	add	r3, r2
 8006d1a:	b2ca      	uxtb	r2, r1
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	e02f      	b.n	8006d80 <hex_decode+0x114>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8006d20:	7cfb      	ldrb	r3, [r7, #19]
 8006d22:	2b40      	cmp	r3, #64	; 0x40
 8006d24:	d913      	bls.n	8006d4e <hex_decode+0xe2>
 8006d26:	7cfb      	ldrb	r3, [r7, #19]
 8006d28:	2b46      	cmp	r3, #70	; 0x46
 8006d2a:	d810      	bhi.n	8006d4e <hex_decode+0xe2>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	b25a      	sxtb	r2, r3
 8006d36:	7cfb      	ldrb	r3, [r7, #19]
 8006d38:	3b37      	subs	r3, #55	; 0x37
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	b25b      	sxtb	r3, r3
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	b259      	sxtb	r1, r3
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	4413      	add	r3, r2
 8006d48:	b2ca      	uxtb	r2, r1
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	e018      	b.n	8006d80 <hex_decode+0x114>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8006d4e:	7cfb      	ldrb	r3, [r7, #19]
 8006d50:	2b60      	cmp	r3, #96	; 0x60
 8006d52:	d913      	bls.n	8006d7c <hex_decode+0x110>
 8006d54:	7cfb      	ldrb	r3, [r7, #19]
 8006d56:	2b66      	cmp	r3, #102	; 0x66
 8006d58:	d810      	bhi.n	8006d7c <hex_decode+0x110>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	4413      	add	r3, r2
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	b25a      	sxtb	r2, r3
 8006d64:	7cfb      	ldrb	r3, [r7, #19]
 8006d66:	3b57      	subs	r3, #87	; 0x57
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	b25b      	sxtb	r3, r3
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	b259      	sxtb	r1, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	4413      	add	r3, r2
 8006d76:	b2ca      	uxtb	r2, r1
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	e001      	b.n	8006d80 <hex_decode+0x114>
		else
			return 1;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e008      	b.n	8006d92 <hex_decode+0x126>
	for(int i = 0; i < len; i++)
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	3301      	adds	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	f6ff af77 	blt.w	8006c7e <hex_decode+0x12>
	}

	return 0;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <simpleserial_init>:


// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 8006da0:	4a08      	ldr	r2, [pc, #32]	; (8006dc4 <simpleserial_init+0x28>)
 8006da2:	2100      	movs	r1, #0
 8006da4:	2076      	movs	r0, #118	; 0x76
 8006da6:	f000 f813 	bl	8006dd0 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8006daa:	4a07      	ldr	r2, [pc, #28]	; (8006dc8 <simpleserial_init+0x2c>)
 8006dac:	2100      	movs	r1, #0
 8006dae:	2077      	movs	r0, #119	; 0x77
 8006db0:	f000 f80e 	bl	8006dd0 <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 8006db4:	4a05      	ldr	r2, [pc, #20]	; (8006dcc <simpleserial_init+0x30>)
 8006db6:	2100      	movs	r1, #0
 8006db8:	2079      	movs	r0, #121	; 0x79
 8006dba:	f000 f809 	bl	8006dd0 <simpleserial_addcmd>
}
 8006dbe:	bf00      	nop
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	08006b63 	.word	0x08006b63
 8006dc8:	08006bad 	.word	0x08006bad
 8006dcc:	08006b7d 	.word	0x08006b7d

08006dd0 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	73fb      	strb	r3, [r7, #15]
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 8006dde:	7bf8      	ldrb	r0, [r7, #15]
 8006de0:	2300      	movs	r3, #0
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	68b9      	ldr	r1, [r7, #8]
 8006de6:	f000 f805 	bl	8006df4 <simpleserial_addcmd_flags>
 8006dea:	4603      	mov	r3, r0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <simpleserial_addcmd_flags>:

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	4603      	mov	r3, r0
 8006e02:	73fb      	strb	r3, [r7, #15]
 8006e04:	4613      	mov	r3, r2
 8006e06:	73bb      	strb	r3, [r7, #14]
	if(num_commands >= MAX_SS_CMDS)
 8006e08:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <simpleserial_addcmd_flags+0x80>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b0f      	cmp	r3, #15
 8006e0e:	dd01      	ble.n	8006e14 <simpleserial_addcmd_flags+0x20>
		return 1;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e029      	b.n	8006e68 <simpleserial_addcmd_flags+0x74>

	if(len >= MAX_SS_LEN)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2bff      	cmp	r3, #255	; 0xff
 8006e18:	d901      	bls.n	8006e1e <simpleserial_addcmd_flags+0x2a>
		return 1;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e024      	b.n	8006e68 <simpleserial_addcmd_flags+0x74>

	commands[num_commands].c   = c;
 8006e1e:	4b15      	ldr	r3, [pc, #84]	; (8006e74 <simpleserial_addcmd_flags+0x80>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <simpleserial_addcmd_flags+0x84>)
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	4413      	add	r3, r2
 8006e28:	7bfa      	ldrb	r2, [r7, #15]
 8006e2a:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 8006e2c:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <simpleserial_addcmd_flags+0x80>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a11      	ldr	r2, [pc, #68]	; (8006e78 <simpleserial_addcmd_flags+0x84>)
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	4413      	add	r3, r2
 8006e36:	3304      	adds	r3, #4
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 8006e3c:	4b0d      	ldr	r3, [pc, #52]	; (8006e74 <simpleserial_addcmd_flags+0x80>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a0d      	ldr	r2, [pc, #52]	; (8006e78 <simpleserial_addcmd_flags+0x84>)
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	4413      	add	r3, r2
 8006e46:	3308      	adds	r3, #8
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]
	commands[num_commands].flags = fl;
 8006e4c:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <simpleserial_addcmd_flags+0x80>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a09      	ldr	r2, [pc, #36]	; (8006e78 <simpleserial_addcmd_flags+0x84>)
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	4413      	add	r3, r2
 8006e56:	330c      	adds	r3, #12
 8006e58:	7bba      	ldrb	r2, [r7, #14]
 8006e5a:	701a      	strb	r2, [r3, #0]
	num_commands++;
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <simpleserial_addcmd_flags+0x80>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3301      	adds	r3, #1
 8006e62:	4a04      	ldr	r2, [pc, #16]	; (8006e74 <simpleserial_addcmd_flags+0x80>)
 8006e64:	6013      	str	r3, [r2, #0]

	return 0;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	2000156c 	.word	0x2000156c
 8006e78:	20001570 	.word	0x20001570

08006e7c <simpleserial_get>:

void simpleserial_get(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8006e82:	af00      	add	r7, sp, #0
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 8006e84:	f000 f9f8 	bl	8007278 <getch>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8006e94:	e00e      	b.n	8006eb4 <simpleserial_get+0x38>
	{
		if(commands[cmd].c == c)
 8006e96:	4a68      	ldr	r2, [pc, #416]	; (8007038 <simpleserial_get+0x1bc>)
 8006e98:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	4413      	add	r3, r2
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d00b      	beq.n	8006ec2 <simpleserial_get+0x46>
	for(cmd = 0; cmd < num_commands; cmd++)
 8006eaa:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8006eae:	3301      	adds	r3, #1
 8006eb0:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8006eb4:	4b61      	ldr	r3, [pc, #388]	; (800703c <simpleserial_get+0x1c0>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	dbea      	blt.n	8006e96 <simpleserial_get+0x1a>
 8006ec0:	e000      	b.n	8006ec4 <simpleserial_get+0x48>
			break;
 8006ec2:	bf00      	nop
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 8006ec4:	4b5d      	ldr	r3, [pc, #372]	; (800703c <simpleserial_get+0x1c0>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	f000 80a6 	beq.w	800701e <simpleserial_get+0x1a2>
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8006ed2:	4a59      	ldr	r2, [pc, #356]	; (8007038 <simpleserial_get+0x1bc>)
 8006ed4:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	4413      	add	r3, r2
 8006edc:	330c      	adds	r3, #12
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d02d      	beq.n	8006f44 <simpleserial_get+0xc8>
	{
		uint8_t l = 0;
 8006ee8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8006eec:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	701a      	strb	r2, [r3, #0]
		char buff[2];
		buff[0] = getch();
 8006ef4:	f000 f9c0 	bl	8007278 <getch>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	461a      	mov	r2, r3
 8006efc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8006f00:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8006f04:	701a      	strb	r2, [r3, #0]
		buff[1] = getch();
 8006f06:	f000 f9b7 	bl	8007278 <getch>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8006f12:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8006f16:	705a      	strb	r2, [r3, #1]
		if (hex_decode(1, buff, &l))
 8006f18:	1dfa      	adds	r2, r7, #7
 8006f1a:	1d3b      	adds	r3, r7, #4
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	2001      	movs	r0, #1
 8006f20:	f7ff fea4 	bl	8006c6c <hex_decode>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d17b      	bne.n	8007022 <simpleserial_get+0x1a6>
			return;
		commands[cmd].len = l;
 8006f2a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8006f2e:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	4619      	mov	r1, r3
 8006f36:	4a40      	ldr	r2, [pc, #256]	; (8007038 <simpleserial_get+0x1bc>)
 8006f38:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	4413      	add	r3, r2
 8006f40:	3304      	adds	r3, #4
 8006f42:	6019      	str	r1, [r3, #0]
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8006f4a:	e01b      	b.n	8006f84 <simpleserial_get+0x108>
	{
		c = getch();
 8006f4c:	f000 f994 	bl	8007278 <getch>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

		// Check for early \n
		if(c == '\n' || c == '\r')
 8006f56:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8006f5a:	2b0a      	cmp	r3, #10
 8006f5c:	d063      	beq.n	8007026 <simpleserial_get+0x1aa>
 8006f5e:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8006f62:	2b0d      	cmp	r3, #13
 8006f64:	d05f      	beq.n	8007026 <simpleserial_get+0x1aa>
			return;

		ascii_buf[i] = c;
 8006f66:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8006f6a:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8006f6e:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8006f72:	4413      	add	r3, r2
 8006f74:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 8006f78:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8006f7a:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8006f7e:	3301      	adds	r3, #1
 8006f80:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8006f84:	4a2c      	ldr	r2, [pc, #176]	; (8007038 <simpleserial_get+0x1bc>)
 8006f86:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	4413      	add	r3, r2
 8006f8e:	3304      	adds	r3, #4
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	005a      	lsls	r2, r3, #1
 8006f94:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d8d7      	bhi.n	8006f4c <simpleserial_get+0xd0>
	}

	// Assert that last character is \n or \r
	c = getch();
 8006f9c:	f000 f96c 	bl	8007278 <getch>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
	if(c != '\n' && c != '\r')
 8006fa6:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8006faa:	2b0a      	cmp	r3, #10
 8006fac:	d003      	beq.n	8006fb6 <simpleserial_get+0x13a>
 8006fae:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8006fb2:	2b0d      	cmp	r3, #13
 8006fb4:	d139      	bne.n	800702a <simpleserial_get+0x1ae>
		return;

	// ASCII buffer is full: convert to bytes
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8006fb6:	4a20      	ldr	r2, [pc, #128]	; (8007038 <simpleserial_get+0x1bc>)
 8006fb8:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	4413      	add	r3, r2
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f107 020c 	add.w	r2, r7, #12
 8006fca:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8006fce:	4619      	mov	r1, r3
 8006fd0:	f7ff fe4c 	bl	8006c6c <hex_decode>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d129      	bne.n	800702e <simpleserial_get+0x1b2>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <simpleserial_get+0x1bc>)
 8006fdc:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4913      	ldr	r1, [pc, #76]	; (8007038 <simpleserial_get+0x1bc>)
 8006fea:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8006fee:	0112      	lsls	r2, r2, #4
 8006ff0:	440a      	add	r2, r1
 8006ff2:	3204      	adds	r2, #4
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	b2d1      	uxtb	r1, r2
 8006ff8:	f107 020c 	add.w	r2, r7, #12
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
 8007000:	4603      	mov	r3, r0
 8007002:	461a      	mov	r2, r3
 8007004:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8007008:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800700c:	701a      	strb	r2, [r3, #0]

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 800700e:	f107 0308 	add.w	r3, r7, #8
 8007012:	461a      	mov	r2, r3
 8007014:	2101      	movs	r1, #1
 8007016:	207a      	movs	r0, #122	; 0x7a
 8007018:	f000 f812 	bl	8007040 <simpleserial_put>
 800701c:	e008      	b.n	8007030 <simpleserial_get+0x1b4>
		return;
 800701e:	bf00      	nop
 8007020:	e006      	b.n	8007030 <simpleserial_get+0x1b4>
			return;
 8007022:	bf00      	nop
 8007024:	e004      	b.n	8007030 <simpleserial_get+0x1b4>
			return;
 8007026:	bf00      	nop
 8007028:	e002      	b.n	8007030 <simpleserial_get+0x1b4>
		return;
 800702a:	bf00      	nop
 800702c:	e000      	b.n	8007030 <simpleserial_get+0x1b4>
		return;
 800702e:	bf00      	nop
#endif
}
 8007030:	f507 7746 	add.w	r7, r7, #792	; 0x318
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	20001570 	.word	0x20001570
 800703c:	2000156c 	.word	0x2000156c

08007040 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	603a      	str	r2, [r7, #0]
 800704a:	71fb      	strb	r3, [r7, #7]
 800704c:	460b      	mov	r3, r1
 800704e:	71bb      	strb	r3, [r7, #6]
	// Write first character
	putch(c);
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 f926 	bl	80072a4 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e019      	b.n	8007092 <simpleserial_put+0x52>
	{
		putch(hex_lookup[output[i] >> 4 ]);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	4413      	add	r3, r2
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	091b      	lsrs	r3, r3, #4
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <simpleserial_put+0x68>)
 800706e:	5c9b      	ldrb	r3, [r3, r2]
 8007070:	4618      	mov	r0, r3
 8007072:	f000 f917 	bl	80072a4 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	4413      	add	r3, r2
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	4a09      	ldr	r2, [pc, #36]	; (80070a8 <simpleserial_put+0x68>)
 8007084:	5cd3      	ldrb	r3, [r2, r3]
 8007086:	4618      	mov	r0, r3
 8007088:	f000 f90c 	bl	80072a4 <putch>
	for(int i = 0; i < size; i++)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3301      	adds	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	79bb      	ldrb	r3, [r7, #6]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	429a      	cmp	r2, r3
 8007098:	dbe1      	blt.n	800705e <simpleserial_put+0x1e>
	}

	// Write trailing '\n'
	putch('\n');
 800709a:	200a      	movs	r0, #10
 800709c:	f000 f902 	bl	80072a4 <putch>
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20000000 	.word	0x20000000

080070ac <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b092      	sub	sp, #72	; 0x48
 80070b0:	af00      	add	r7, sp, #0
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_5WS);
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80070b2:	2303      	movs	r3, #3
 80070b4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80070b6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80070ba:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 80070bc:	2301      	movs	r3, #1
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
 80070c0:	2302      	movs	r3, #2
 80070c2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80070c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
 80070ca:	230c      	movs	r3, #12
 80070cc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN       = 196;
 80070ce:	23c4      	movs	r3, #196	; 0xc4
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
 80070d2:	2304      	movs	r3, #4
 80070d4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 80070d6:	2307      	movs	r3, #7
 80070d8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80070da:	f107 0318 	add.w	r3, r7, #24
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 f904 	bl	80072ec <HAL_RCC_OscConfig>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d000      	beq.n	80070ec <platform_init+0x40>
        for(;;);
 80070ea:	e7fe      	b.n	80070ea <platform_init+0x3e>
    }

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80070ec:	230f      	movs	r3, #15
 80070ee:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80070f0:	2301      	movs	r3, #1
 80070f2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80070f8:	2300      	movs	r3, #0
 80070fa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8007100:	1d3b      	adds	r3, r7, #4
 8007102:	2100      	movs	r1, #0
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fb53 	bl	80077b0 <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 800710a:	2300      	movs	r3, #0
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <platform_init+0x94>)
 8007110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007112:	4a0b      	ldr	r2, [pc, #44]	; (8007140 <platform_init+0x94>)
 8007114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007118:	6353      	str	r3, [r2, #52]	; 0x34
 800711a:	4b09      	ldr	r3, [pc, #36]	; (8007140 <platform_init+0x94>)
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	683b      	ldr	r3, [r7, #0]
	RngHandle.Instance = RNG;
 8007126:	4b07      	ldr	r3, [pc, #28]	; (8007144 <platform_init+0x98>)
 8007128:	4a07      	ldr	r2, [pc, #28]	; (8007148 <platform_init+0x9c>)
 800712a:	601a      	str	r2, [r3, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <platform_init+0x98>)
 800712e:	2200      	movs	r2, #0
 8007130:	715a      	strb	r2, [r3, #5]
	HAL_RNG_Init(&RngHandle);
 8007132:	4804      	ldr	r0, [pc, #16]	; (8007144 <platform_init+0x98>)
 8007134:	f001 f9ca 	bl	80084cc <HAL_RNG_Init>

}
 8007138:	bf00      	nop
 800713a:	3748      	adds	r7, #72	; 0x48
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40023800 	.word	0x40023800
 8007144:	20001670 	.word	0x20001670
 8007148:	50060800 	.word	0x50060800

0800714c <init_uart>:

void init_uart(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8007152:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007156:	60fb      	str	r3, [r7, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8007158:	2302      	movs	r3, #2
 800715a:	613b      	str	r3, [r7, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007160:	2302      	movs	r3, #2
 8007162:	61bb      	str	r3, [r7, #24]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8007164:	2307      	movs	r3, #7
 8007166:	61fb      	str	r3, [r7, #28]
	__GPIOA_CLK_ENABLE();
 8007168:	2300      	movs	r3, #0
 800716a:	60bb      	str	r3, [r7, #8]
 800716c:	4b1e      	ldr	r3, [pc, #120]	; (80071e8 <init_uart+0x9c>)
 800716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <init_uart+0x9c>)
 8007172:	f043 0301 	orr.w	r3, r3, #1
 8007176:	6313      	str	r3, [r2, #48]	; 0x30
 8007178:	4b1b      	ldr	r3, [pc, #108]	; (80071e8 <init_uart+0x9c>)
 800717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	60bb      	str	r3, [r7, #8]
 8007182:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8007184:	f107 030c 	add.w	r3, r7, #12
 8007188:	4619      	mov	r1, r3
 800718a:	4818      	ldr	r0, [pc, #96]	; (80071ec <init_uart+0xa0>)
 800718c:	f000 fc18 	bl	80079c0 <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 8007190:	4b17      	ldr	r3, [pc, #92]	; (80071f0 <init_uart+0xa4>)
 8007192:	4a18      	ldr	r2, [pc, #96]	; (80071f4 <init_uart+0xa8>)
 8007194:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8007196:	4b16      	ldr	r3, [pc, #88]	; (80071f0 <init_uart+0xa4>)
 8007198:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800719c:	605a      	str	r2, [r3, #4]
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800719e:	4b14      	ldr	r3, [pc, #80]	; (80071f0 <init_uart+0xa4>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80071a4:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <init_uart+0xa4>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80071aa:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <init_uart+0xa4>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80071b0:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <init_uart+0xa4>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80071b6:	4b0e      	ldr	r3, [pc, #56]	; (80071f0 <init_uart+0xa4>)
 80071b8:	220c      	movs	r2, #12
 80071ba:	615a      	str	r2, [r3, #20]
	__USART1_CLK_ENABLE();
 80071bc:	2300      	movs	r3, #0
 80071be:	607b      	str	r3, [r7, #4]
 80071c0:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <init_uart+0x9c>)
 80071c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c4:	4a08      	ldr	r2, [pc, #32]	; (80071e8 <init_uart+0x9c>)
 80071c6:	f043 0310 	orr.w	r3, r3, #16
 80071ca:	6453      	str	r3, [r2, #68]	; 0x44
 80071cc:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <init_uart+0x9c>)
 80071ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	607b      	str	r3, [r7, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
	HAL_UART_Init(&UartHandle);
 80071d8:	4805      	ldr	r0, [pc, #20]	; (80071f0 <init_uart+0xa4>)
 80071da:	f000 ffbf 	bl	800815c <HAL_UART_Init>
}
 80071de:	bf00      	nop
 80071e0:	3720      	adds	r7, #32
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	40023800 	.word	0x40023800
 80071ec:	40020000 	.word	0x40020000
 80071f0:	2000167c 	.word	0x2000167c
 80071f4:	40011000 	.word	0x40011000

080071f8 <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE();
 80071fe:	2300      	movs	r3, #0
 8007200:	603b      	str	r3, [r7, #0]
 8007202:	4b0f      	ldr	r3, [pc, #60]	; (8007240 <trigger_setup+0x48>)
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	4a0e      	ldr	r2, [pc, #56]	; (8007240 <trigger_setup+0x48>)
 8007208:	f043 0301 	orr.w	r3, r3, #1
 800720c:	6313      	str	r3, [r2, #48]	; 0x30
 800720e:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <trigger_setup+0x48>)
 8007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	683b      	ldr	r3, [r7, #0]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
    __GPIOD_CLK_ENABLE();
    HAL_GPIO_Init(GPIOD, &GpioInit);
#else
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
 800721a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800721e:	607b      	str	r3, [r7, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8007220:	2301      	movs	r3, #1
 8007222:	60bb      	str	r3, [r7, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007228:	2302      	movs	r3, #2
 800722a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800722c:	1d3b      	adds	r3, r7, #4
 800722e:	4619      	mov	r1, r3
 8007230:	4804      	ldr	r0, [pc, #16]	; (8007244 <trigger_setup+0x4c>)
 8007232:	f000 fbc5 	bl	80079c0 <HAL_GPIO_Init>
#endif
}
 8007236:	bf00      	nop
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	40023800 	.word	0x40023800
 8007244:	40020000 	.word	0x40020000

08007248 <trigger_high>:
void trigger_high(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 800724c:	2201      	movs	r2, #1
 800724e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007252:	4802      	ldr	r0, [pc, #8]	; (800725c <trigger_high+0x14>)
 8007254:	f000 fd4e 	bl	8007cf4 <HAL_GPIO_WritePin>
#endif
}
 8007258:	bf00      	nop
 800725a:	bd80      	pop	{r7, pc}
 800725c:	40020000 	.word	0x40020000

08007260 <trigger_low>:

void trigger_low(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8007264:	2200      	movs	r2, #0
 8007266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800726a:	4802      	ldr	r0, [pc, #8]	; (8007274 <trigger_low+0x14>)
 800726c:	f000 fd42 	bl	8007cf4 <HAL_GPIO_WritePin>
#endif
}
 8007270:	bf00      	nop
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40020000 	.word	0x40020000

08007278 <getch>:
char getch(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 800727e:	bf00      	nop
 8007280:	1df9      	adds	r1, r7, #7
 8007282:	f241 3388 	movw	r3, #5000	; 0x1388
 8007286:	2201      	movs	r2, #1
 8007288:	4805      	ldr	r0, [pc, #20]	; (80072a0 <getch+0x28>)
 800728a:	f001 f858 	bl	800833e <HAL_UART_Receive>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f5      	bne.n	8007280 <getch+0x8>
	return d;
 8007294:	79fb      	ldrb	r3, [r7, #7]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	2000167c 	.word	0x2000167c

080072a4 <putch>:

void putch(char c)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]
	uint8_t d  = c;
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80072b2:	f107 010f 	add.w	r1, r7, #15
 80072b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80072ba:	2201      	movs	r2, #1
 80072bc:	4803      	ldr	r0, [pc, #12]	; (80072cc <putch+0x28>)
 80072be:	f000 ffb4 	bl	800822a <HAL_UART_Transmit>
}
 80072c2:	bf00      	nop
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	2000167c 	.word	0x2000167c

080072d0 <HAL_GetTick>:

#define CLOCKSWITCH_TIMEOUT_VALUE  5000U /* 5 s */


uint32_t HAL_GetTick(void)
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
	static uint32_t tick;
	return tick++;;
 80072d4:	4b04      	ldr	r3, [pc, #16]	; (80072e8 <HAL_GetTick+0x18>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	4903      	ldr	r1, [pc, #12]	; (80072e8 <HAL_GetTick+0x18>)
 80072dc:	600a      	str	r2, [r1, #0]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc80      	pop	{r7}
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	2000170c 	.word	0x2000170c

080072ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08e      	sub	sp, #56	; 0x38
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d077      	beq.n	80073f4 <HAL_RCC_OscConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007304:	4b93      	ldr	r3, [pc, #588]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 030c 	and.w	r3, r3, #12
 800730c:	2b04      	cmp	r3, #4
 800730e:	d00c      	beq.n	800732a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007310:	4b90      	ldr	r3, [pc, #576]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007318:	2b08      	cmp	r3, #8
 800731a:	d112      	bne.n	8007342 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800731c:	4b8d      	ldr	r3, [pc, #564]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007328:	d10b      	bne.n	8007342 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800732a:	4b8a      	ldr	r3, [pc, #552]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d05d      	beq.n	80073f2 <HAL_RCC_OscConfig+0x106>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d159      	bne.n	80073f2 <HAL_RCC_OscConfig+0x106>
      {
        return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e22a      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800734a:	d106      	bne.n	800735a <HAL_RCC_OscConfig+0x6e>
 800734c:	4b81      	ldr	r3, [pc, #516]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a80      	ldr	r2, [pc, #512]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	e01d      	b.n	8007396 <HAL_RCC_OscConfig+0xaa>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007362:	d10c      	bne.n	800737e <HAL_RCC_OscConfig+0x92>
 8007364:	4b7b      	ldr	r3, [pc, #492]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a7a      	ldr	r2, [pc, #488]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 800736a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	4b78      	ldr	r3, [pc, #480]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a77      	ldr	r2, [pc, #476]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	e00b      	b.n	8007396 <HAL_RCC_OscConfig+0xaa>
 800737e:	4b75      	ldr	r3, [pc, #468]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a74      	ldr	r2, [pc, #464]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	4b72      	ldr	r3, [pc, #456]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a71      	ldr	r2, [pc, #452]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007394:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d014      	beq.n	80073c8 <HAL_RCC_OscConfig+0xdc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800739e:	f7ff ff97 	bl	80072d0 <HAL_GetTick>
 80073a2:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a4:	e009      	b.n	80073ba <HAL_RCC_OscConfig+0xce>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073a6:	f7ff ff93 	bl	80072d0 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	4a69      	ldr	r2, [pc, #420]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e1ee      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ba:	4b66      	ldr	r3, [pc, #408]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0ef      	beq.n	80073a6 <HAL_RCC_OscConfig+0xba>
 80073c6:	e015      	b.n	80073f4 <HAL_RCC_OscConfig+0x108>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c8:	f7ff ff82 	bl	80072d0 <HAL_GetTick>
 80073cc:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ce:	e009      	b.n	80073e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073d0:	f7ff ff7e 	bl	80072d0 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	4a5f      	ldr	r2, [pc, #380]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e1d9      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073e4:	4b5b      	ldr	r3, [pc, #364]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1ef      	bne.n	80073d0 <HAL_RCC_OscConfig+0xe4>
 80073f0:	e000      	b.n	80073f4 <HAL_RCC_OscConfig+0x108>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d077      	beq.n	80074f0 <HAL_RCC_OscConfig+0x204>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007400:	4b54      	ldr	r3, [pc, #336]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f003 030c 	and.w	r3, r3, #12
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800740c:	4b51      	ldr	r3, [pc, #324]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007414:	2b08      	cmp	r3, #8
 8007416:	d126      	bne.n	8007466 <HAL_RCC_OscConfig+0x17a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007418:	4b4e      	ldr	r3, [pc, #312]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d120      	bne.n	8007466 <HAL_RCC_OscConfig+0x17a>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007424:	4b4b      	ldr	r3, [pc, #300]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d005      	beq.n	800743c <HAL_RCC_OscConfig+0x150>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d001      	beq.n	800743c <HAL_RCC_OscConfig+0x150>
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e1ad      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800743c:	4b45      	ldr	r3, [pc, #276]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6919      	ldr	r1, [r3, #16]
 8007448:	23f8      	movs	r3, #248	; 0xf8
 800744a:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	fa93 f3a3 	rbit	r3, r3
 8007452:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	fab3 f383 	clz	r3, r3
 800745a:	fa01 f303 	lsl.w	r3, r1, r3
 800745e:	493d      	ldr	r1, [pc, #244]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007460:	4313      	orrs	r3, r2
 8007462:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007464:	e044      	b.n	80074f0 <HAL_RCC_OscConfig+0x204>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d02a      	beq.n	80074c4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800746e:	4b3b      	ldr	r3, [pc, #236]	; (800755c <HAL_RCC_OscConfig+0x270>)
 8007470:	2201      	movs	r2, #1
 8007472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007474:	f7ff ff2c 	bl	80072d0 <HAL_GetTick>
 8007478:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800747c:	f7ff ff28 	bl	80072d0 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x1a2>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e184      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800748e:	4b31      	ldr	r3, [pc, #196]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0f0      	beq.n	800747c <HAL_RCC_OscConfig+0x190>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800749a:	4b2e      	ldr	r3, [pc, #184]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6919      	ldr	r1, [r3, #16]
 80074a6:	23f8      	movs	r3, #248	; 0xf8
 80074a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	fa93 f3a3 	rbit	r3, r3
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	fab3 f383 	clz	r3, r3
 80074b8:	fa01 f303 	lsl.w	r3, r1, r3
 80074bc:	4925      	ldr	r1, [pc, #148]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	600b      	str	r3, [r1, #0]
 80074c2:	e015      	b.n	80074f0 <HAL_RCC_OscConfig+0x204>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074c4:	4b25      	ldr	r3, [pc, #148]	; (800755c <HAL_RCC_OscConfig+0x270>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ca:	f7ff ff01 	bl	80072d0 <HAL_GetTick>
 80074ce:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074d0:	e008      	b.n	80074e4 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074d2:	f7ff fefd 	bl	80072d0 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d901      	bls.n	80074e4 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e159      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074e4:	4b1b      	ldr	r3, [pc, #108]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f0      	bne.n	80074d2 <HAL_RCC_OscConfig+0x1e6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d039      	beq.n	8007570 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d016      	beq.n	8007532 <HAL_RCC_OscConfig+0x246>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007504:	4b16      	ldr	r3, [pc, #88]	; (8007560 <HAL_RCC_OscConfig+0x274>)
 8007506:	2201      	movs	r2, #1
 8007508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750a:	f7ff fee1 	bl	80072d0 <HAL_GetTick>
 800750e:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007510:	e008      	b.n	8007524 <HAL_RCC_OscConfig+0x238>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007512:	f7ff fedd 	bl	80072d0 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	2b02      	cmp	r3, #2
 800751e:	d901      	bls.n	8007524 <HAL_RCC_OscConfig+0x238>
        {
          return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e139      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007524:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <HAL_RCC_OscConfig+0x268>)
 8007526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0f0      	beq.n	8007512 <HAL_RCC_OscConfig+0x226>
 8007530:	e01e      	b.n	8007570 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007532:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <HAL_RCC_OscConfig+0x274>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007538:	f7ff feca 	bl	80072d0 <HAL_GetTick>
 800753c:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800753e:	e011      	b.n	8007564 <HAL_RCC_OscConfig+0x278>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007540:	f7ff fec6 	bl	80072d0 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d90a      	bls.n	8007564 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e122      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
 8007552:	bf00      	nop
 8007554:	40023800 	.word	0x40023800
 8007558:	05f5e100 	.word	0x05f5e100
 800755c:	42470000 	.word	0x42470000
 8007560:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007564:	4b8e      	ldr	r3, [pc, #568]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 8007566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e7      	bne.n	8007540 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d07d      	beq.n	8007678 <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800757c:	2300      	movs	r3, #0
 800757e:	60bb      	str	r3, [r7, #8]
 8007580:	4b87      	ldr	r3, [pc, #540]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	4a86      	ldr	r2, [pc, #536]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 8007586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800758a:	6413      	str	r3, [r2, #64]	; 0x40
 800758c:	4b84      	ldr	r3, [pc, #528]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007594:	60bb      	str	r3, [r7, #8]
 8007596:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007598:	4b82      	ldr	r3, [pc, #520]	; (80077a4 <HAL_RCC_OscConfig+0x4b8>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a81      	ldr	r2, [pc, #516]	; (80077a4 <HAL_RCC_OscConfig+0x4b8>)
 800759e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80075a4:	f7ff fe94 	bl	80072d0 <HAL_GetTick>
 80075a8:	6378      	str	r0, [r7, #52]	; 0x34

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0x2d2>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80075ac:	f7ff fe90 	bl	80072d0 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0x2d2>
      {
        return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e0ec      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075be:	4b79      	ldr	r3, [pc, #484]	; (80077a4 <HAL_RCC_OscConfig+0x4b8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0f0      	beq.n	80075ac <HAL_RCC_OscConfig+0x2c0>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d106      	bne.n	80075e0 <HAL_RCC_OscConfig+0x2f4>
 80075d2:	4b73      	ldr	r3, [pc, #460]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 80075d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d6:	4a72      	ldr	r2, [pc, #456]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 80075d8:	f043 0301 	orr.w	r3, r3, #1
 80075dc:	6713      	str	r3, [r2, #112]	; 0x70
 80075de:	e01c      	b.n	800761a <HAL_RCC_OscConfig+0x32e>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	2b05      	cmp	r3, #5
 80075e6:	d10c      	bne.n	8007602 <HAL_RCC_OscConfig+0x316>
 80075e8:	4b6d      	ldr	r3, [pc, #436]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 80075ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ec:	4a6c      	ldr	r2, [pc, #432]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 80075ee:	f043 0304 	orr.w	r3, r3, #4
 80075f2:	6713      	str	r3, [r2, #112]	; 0x70
 80075f4:	4b6a      	ldr	r3, [pc, #424]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 80075f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f8:	4a69      	ldr	r2, [pc, #420]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 80075fa:	f043 0301 	orr.w	r3, r3, #1
 80075fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007600:	e00b      	b.n	800761a <HAL_RCC_OscConfig+0x32e>
 8007602:	4b67      	ldr	r3, [pc, #412]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 8007604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007606:	4a66      	ldr	r2, [pc, #408]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 8007608:	f023 0301 	bic.w	r3, r3, #1
 800760c:	6713      	str	r3, [r2, #112]	; 0x70
 800760e:	4b64      	ldr	r3, [pc, #400]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 8007610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007612:	4a63      	ldr	r2, [pc, #396]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 8007614:	f023 0304 	bic.w	r3, r3, #4
 8007618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d015      	beq.n	800764e <HAL_RCC_OscConfig+0x362>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007622:	f7ff fe55 	bl	80072d0 <HAL_GetTick>
 8007626:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007628:	e00a      	b.n	8007640 <HAL_RCC_OscConfig+0x354>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800762a:	f7ff fe51 	bl	80072d0 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	f241 3288 	movw	r2, #5000	; 0x1388
 8007638:	4293      	cmp	r3, r2
 800763a:	d901      	bls.n	8007640 <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e0ab      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007640:	4b57      	ldr	r3, [pc, #348]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 8007642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0ee      	beq.n	800762a <HAL_RCC_OscConfig+0x33e>
 800764c:	e014      	b.n	8007678 <HAL_RCC_OscConfig+0x38c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800764e:	f7ff fe3f 	bl	80072d0 <HAL_GetTick>
 8007652:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007654:	e00a      	b.n	800766c <HAL_RCC_OscConfig+0x380>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007656:	f7ff fe3b 	bl	80072d0 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	f241 3288 	movw	r2, #5000	; 0x1388
 8007664:	4293      	cmp	r3, r2
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e095      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800766c:	4b4c      	ldr	r3, [pc, #304]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 800766e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1ee      	bne.n	8007656 <HAL_RCC_OscConfig+0x36a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 808a 	beq.w	8007796 <HAL_RCC_OscConfig+0x4aa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007682:	4b47      	ldr	r3, [pc, #284]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 030c 	and.w	r3, r3, #12
 800768a:	2b08      	cmp	r3, #8
 800768c:	f000 8081 	beq.w	8007792 <HAL_RCC_OscConfig+0x4a6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	2b02      	cmp	r3, #2
 8007696:	d164      	bne.n	8007762 <HAL_RCC_OscConfig+0x476>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007698:	4b43      	ldr	r3, [pc, #268]	; (80077a8 <HAL_RCC_OscConfig+0x4bc>)
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800769e:	f7ff fe17 	bl	80072d0 <HAL_GetTick>
 80076a2:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076a4:	e009      	b.n	80076ba <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076a6:	f7ff fe13 	bl	80072d0 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	4a3e      	ldr	r2, [pc, #248]	; (80077ac <HAL_RCC_OscConfig+0x4c0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e06e      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ba:	4b39      	ldr	r3, [pc, #228]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1ef      	bne.n	80076a6 <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69da      	ldr	r2, [r3, #28]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80076d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	fa93 f3a3 	rbit	r3, r3
 80076e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	fab3 f383 	clz	r3, r3
 80076e8:	fa01 f303 	lsl.w	r3, r1, r3
 80076ec:	431a      	orrs	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f2:	085b      	lsrs	r3, r3, #1
 80076f4:	1e59      	subs	r1, r3, #1
 80076f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80076fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	fa93 f3a3 	rbit	r3, r3
 8007702:	617b      	str	r3, [r7, #20]
  return(result);
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	fab3 f383 	clz	r3, r3
 800770a:	fa01 f303 	lsl.w	r3, r1, r3
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007714:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8007718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	fa93 f3a3 	rbit	r3, r3
 8007720:	61fb      	str	r3, [r7, #28]
  return(result);
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	fab3 f383 	clz	r3, r3
 8007728:	fa01 f303 	lsl.w	r3, r1, r3
 800772c:	491c      	ldr	r1, [pc, #112]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 800772e:	4313      	orrs	r3, r2
 8007730:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007732:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <HAL_RCC_OscConfig+0x4bc>)
 8007734:	2201      	movs	r2, #1
 8007736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007738:	f7ff fdca 	bl	80072d0 <HAL_GetTick>
 800773c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800773e:	e009      	b.n	8007754 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007740:	f7ff fdc6 	bl	80072d0 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	4a18      	ldr	r2, [pc, #96]	; (80077ac <HAL_RCC_OscConfig+0x4c0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d901      	bls.n	8007754 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e021      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007754:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0ef      	beq.n	8007740 <HAL_RCC_OscConfig+0x454>
 8007760:	e019      	b.n	8007796 <HAL_RCC_OscConfig+0x4aa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007762:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <HAL_RCC_OscConfig+0x4bc>)
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007768:	f7ff fdb2 	bl	80072d0 <HAL_GetTick>
 800776c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800776e:	e009      	b.n	8007784 <HAL_RCC_OscConfig+0x498>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007770:	f7ff fdae 	bl	80072d0 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	4a0c      	ldr	r2, [pc, #48]	; (80077ac <HAL_RCC_OscConfig+0x4c0>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d901      	bls.n	8007784 <HAL_RCC_OscConfig+0x498>
          {
            return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e009      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007784:	4b06      	ldr	r3, [pc, #24]	; (80077a0 <HAL_RCC_OscConfig+0x4b4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1ef      	bne.n	8007770 <HAL_RCC_OscConfig+0x484>
 8007790:	e001      	b.n	8007796 <HAL_RCC_OscConfig+0x4aa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
    }
  }
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3738      	adds	r7, #56	; 0x38
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	40023800 	.word	0x40023800
 80077a4:	40007000 	.word	0x40007000
 80077a8:	42470060 	.word	0x42470060
 80077ac:	001e8480 	.word	0x001e8480

080077b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80077be:	4b74      	ldr	r3, [pc, #464]	; (8007990 <HAL_RCC_ClockConfig+0x1e0>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d90c      	bls.n	80077e6 <HAL_RCC_ClockConfig+0x36>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077cc:	4b70      	ldr	r3, [pc, #448]	; (8007990 <HAL_RCC_ClockConfig+0x1e0>)
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	b2d2      	uxtb	r2, r2
 80077d2:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077d4:	4b6e      	ldr	r3, [pc, #440]	; (8007990 <HAL_RCC_ClockConfig+0x1e0>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d001      	beq.n	80077e6 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e0cf      	b.n	8007986 <HAL_RCC_ClockConfig+0x1d6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d008      	beq.n	8007804 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077f2:	4b68      	ldr	r3, [pc, #416]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	4965      	ldr	r1, [pc, #404]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 8007800:	4313      	orrs	r3, r2
 8007802:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 8086 	beq.w	800791e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d107      	bne.n	800782a <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800781a:	4b5e      	ldr	r3, [pc, #376]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d119      	bne.n	800785a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e0ad      	b.n	8007986 <HAL_RCC_ClockConfig+0x1d6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d003      	beq.n	800783a <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007836:	2b03      	cmp	r3, #3
 8007838:	d107      	bne.n	800784a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800783a:	4b56      	ldr	r3, [pc, #344]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d109      	bne.n	800785a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e09d      	b.n	8007986 <HAL_RCC_ClockConfig+0x1d6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800784a:	4b52      	ldr	r3, [pc, #328]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e095      	b.n	8007986 <HAL_RCC_ClockConfig+0x1d6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800785a:	4b4e      	ldr	r3, [pc, #312]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f023 0203 	bic.w	r2, r3, #3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	494b      	ldr	r1, [pc, #300]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 8007868:	4313      	orrs	r3, r2
 800786a:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800786c:	f7ff fd30 	bl	80072d0 <HAL_GetTick>
 8007870:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d112      	bne.n	80078a0 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800787a:	e00a      	b.n	8007892 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800787c:	f7ff fd28 	bl	80072d0 <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	f241 3288 	movw	r2, #5000	; 0x1388
 800788a:	4293      	cmp	r3, r2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e079      	b.n	8007986 <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007892:	4b40      	ldr	r3, [pc, #256]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 030c 	and.w	r3, r3, #12
 800789a:	2b04      	cmp	r3, #4
 800789c:	d1ee      	bne.n	800787c <HAL_RCC_ClockConfig+0xcc>
 800789e:	e03e      	b.n	800791e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d112      	bne.n	80078ce <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078a8:	e00a      	b.n	80078c0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078aa:	f7ff fd11 	bl	80072d0 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d901      	bls.n	80078c0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e062      	b.n	8007986 <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078c0:	4b34      	ldr	r3, [pc, #208]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 030c 	and.w	r3, r3, #12
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d1ee      	bne.n	80078aa <HAL_RCC_ClockConfig+0xfa>
 80078cc:	e027      	b.n	800791e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d11d      	bne.n	8007912 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80078d6:	e00a      	b.n	80078ee <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d8:	f7ff fcfa 	bl	80072d0 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e04b      	b.n	8007986 <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80078ee:	4b29      	ldr	r3, [pc, #164]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 030c 	and.w	r3, r3, #12
 80078f6:	2b0c      	cmp	r3, #12
 80078f8:	d1ee      	bne.n	80078d8 <HAL_RCC_ClockConfig+0x128>
 80078fa:	e010      	b.n	800791e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078fc:	f7ff fce8 	bl	80072d0 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	f241 3288 	movw	r2, #5000	; 0x1388
 800790a:	4293      	cmp	r3, r2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e039      	b.n	8007986 <HAL_RCC_ClockConfig+0x1d6>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007912:	4b20      	ldr	r3, [pc, #128]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f003 030c 	and.w	r3, r3, #12
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1ee      	bne.n	80078fc <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800791e:	4b1c      	ldr	r3, [pc, #112]	; (8007990 <HAL_RCC_ClockConfig+0x1e0>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d20c      	bcs.n	8007946 <HAL_RCC_ClockConfig+0x196>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800792c:	4b18      	ldr	r3, [pc, #96]	; (8007990 <HAL_RCC_ClockConfig+0x1e0>)
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	b2d2      	uxtb	r2, r2
 8007932:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007934:	4b16      	ldr	r3, [pc, #88]	; (8007990 <HAL_RCC_ClockConfig+0x1e0>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 030f 	and.w	r3, r3, #15
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d001      	beq.n	8007946 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e01f      	b.n	8007986 <HAL_RCC_ClockConfig+0x1d6>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	2b00      	cmp	r3, #0
 8007950:	d008      	beq.n	8007964 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	490d      	ldr	r1, [pc, #52]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 8007960:	4313      	orrs	r3, r2
 8007962:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0308 	and.w	r3, r3, #8
 800796c:	2b00      	cmp	r3, #0
 800796e:	d009      	beq.n	8007984 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007970:	4b08      	ldr	r3, [pc, #32]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	4905      	ldr	r1, [pc, #20]	; (8007994 <HAL_RCC_ClockConfig+0x1e4>)
 8007980:	4313      	orrs	r3, r2
 8007982:	608b      	str	r3, [r1, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	40023c00 	.word	0x40023c00
 8007994:	40023800 	.word	0x40023800

08007998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
  return 7.37E6;
 800799c:	4b02      	ldr	r3, [pc, #8]	; (80079a8 <HAL_RCC_GetPCLK1Freq+0x10>)
}
 800799e:	4618      	mov	r0, r3
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	00707510 	.word	0x00707510

080079ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return 7.37E6;
 80079b0:	4b02      	ldr	r3, [pc, #8]	; (80079bc <HAL_RCC_GetPCLK2Freq+0x10>)
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bc80      	pop	{r7}
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	00707510 	.word	0x00707510

080079c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b089      	sub	sp, #36	; 0x24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079d6:	2300      	movs	r3, #0
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	e16b      	b.n	8007cb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80079dc:	2201      	movs	r2, #1
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4013      	ands	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	f040 815a 	bne.w	8007cae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d003      	beq.n	8007a0a <HAL_GPIO_Init+0x4a>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b12      	cmp	r3, #18
 8007a08:	d123      	bne.n	8007a52 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	08da      	lsrs	r2, r3, #3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3208      	adds	r2, #8
 8007a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	220f      	movs	r2, #15
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	43db      	mvns	r3, r3
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	08da      	lsrs	r2, r3, #3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3208      	adds	r2, #8
 8007a4c:	69b9      	ldr	r1, [r7, #24]
 8007a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	43db      	mvns	r3, r3
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	4013      	ands	r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f003 0203 	and.w	r2, r3, #3
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d00b      	beq.n	8007aa6 <HAL_GPIO_Init+0xe6>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d007      	beq.n	8007aa6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a9a:	2b11      	cmp	r3, #17
 8007a9c:	d003      	beq.n	8007aa6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b12      	cmp	r3, #18
 8007aa4:	d130      	bne.n	8007b08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	4013      	ands	r3, r2
 8007abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007adc:	2201      	movs	r2, #1
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	43db      	mvns	r3, r3
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	091b      	lsrs	r3, r3, #4
 8007af2:	f003 0201 	and.w	r2, r3, #1
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	2203      	movs	r2, #3
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	43db      	mvns	r3, r3
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 80b4 	beq.w	8007cae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	4b5f      	ldr	r3, [pc, #380]	; (8007cc8 <HAL_GPIO_Init+0x308>)
 8007b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4e:	4a5e      	ldr	r2, [pc, #376]	; (8007cc8 <HAL_GPIO_Init+0x308>)
 8007b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b54:	6453      	str	r3, [r2, #68]	; 0x44
 8007b56:	4b5c      	ldr	r3, [pc, #368]	; (8007cc8 <HAL_GPIO_Init+0x308>)
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b62:	4a5a      	ldr	r2, [pc, #360]	; (8007ccc <HAL_GPIO_Init+0x30c>)
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	089b      	lsrs	r3, r3, #2
 8007b68:	3302      	adds	r3, #2
 8007b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	220f      	movs	r2, #15
 8007b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7e:	43db      	mvns	r3, r3
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	4013      	ands	r3, r2
 8007b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a51      	ldr	r2, [pc, #324]	; (8007cd0 <HAL_GPIO_Init+0x310>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d02b      	beq.n	8007be6 <HAL_GPIO_Init+0x226>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a50      	ldr	r2, [pc, #320]	; (8007cd4 <HAL_GPIO_Init+0x314>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d025      	beq.n	8007be2 <HAL_GPIO_Init+0x222>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a4f      	ldr	r2, [pc, #316]	; (8007cd8 <HAL_GPIO_Init+0x318>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d01f      	beq.n	8007bde <HAL_GPIO_Init+0x21e>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a4e      	ldr	r2, [pc, #312]	; (8007cdc <HAL_GPIO_Init+0x31c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d019      	beq.n	8007bda <HAL_GPIO_Init+0x21a>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a4d      	ldr	r2, [pc, #308]	; (8007ce0 <HAL_GPIO_Init+0x320>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d013      	beq.n	8007bd6 <HAL_GPIO_Init+0x216>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a4c      	ldr	r2, [pc, #304]	; (8007ce4 <HAL_GPIO_Init+0x324>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00d      	beq.n	8007bd2 <HAL_GPIO_Init+0x212>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a4b      	ldr	r2, [pc, #300]	; (8007ce8 <HAL_GPIO_Init+0x328>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d007      	beq.n	8007bce <HAL_GPIO_Init+0x20e>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a4a      	ldr	r2, [pc, #296]	; (8007cec <HAL_GPIO_Init+0x32c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d101      	bne.n	8007bca <HAL_GPIO_Init+0x20a>
 8007bc6:	2307      	movs	r3, #7
 8007bc8:	e00e      	b.n	8007be8 <HAL_GPIO_Init+0x228>
 8007bca:	2308      	movs	r3, #8
 8007bcc:	e00c      	b.n	8007be8 <HAL_GPIO_Init+0x228>
 8007bce:	2306      	movs	r3, #6
 8007bd0:	e00a      	b.n	8007be8 <HAL_GPIO_Init+0x228>
 8007bd2:	2305      	movs	r3, #5
 8007bd4:	e008      	b.n	8007be8 <HAL_GPIO_Init+0x228>
 8007bd6:	2304      	movs	r3, #4
 8007bd8:	e006      	b.n	8007be8 <HAL_GPIO_Init+0x228>
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e004      	b.n	8007be8 <HAL_GPIO_Init+0x228>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e002      	b.n	8007be8 <HAL_GPIO_Init+0x228>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e000      	b.n	8007be8 <HAL_GPIO_Init+0x228>
 8007be6:	2300      	movs	r3, #0
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	f002 0203 	and.w	r2, r2, #3
 8007bee:	0092      	lsls	r2, r2, #2
 8007bf0:	4093      	lsls	r3, r2
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bf8:	4934      	ldr	r1, [pc, #208]	; (8007ccc <HAL_GPIO_Init+0x30c>)
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	089b      	lsrs	r3, r3, #2
 8007bfe:	3302      	adds	r3, #2
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c06:	4b3a      	ldr	r3, [pc, #232]	; (8007cf0 <HAL_GPIO_Init+0x330>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	43db      	mvns	r3, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4013      	ands	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c2a:	4a31      	ldr	r2, [pc, #196]	; (8007cf0 <HAL_GPIO_Init+0x330>)
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007c30:	4b2f      	ldr	r3, [pc, #188]	; (8007cf0 <HAL_GPIO_Init+0x330>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c54:	4a26      	ldr	r2, [pc, #152]	; (8007cf0 <HAL_GPIO_Init+0x330>)
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007c5a:	4b25      	ldr	r3, [pc, #148]	; (8007cf0 <HAL_GPIO_Init+0x330>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	43db      	mvns	r3, r3
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	4013      	ands	r3, r2
 8007c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007c7e:	4a1c      	ldr	r2, [pc, #112]	; (8007cf0 <HAL_GPIO_Init+0x330>)
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007c84:	4b1a      	ldr	r3, [pc, #104]	; (8007cf0 <HAL_GPIO_Init+0x330>)
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4013      	ands	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ca8:	4a11      	ldr	r2, [pc, #68]	; (8007cf0 <HAL_GPIO_Init+0x330>)
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	61fb      	str	r3, [r7, #28]
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	2b0f      	cmp	r3, #15
 8007cb8:	f67f ae90 	bls.w	80079dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	3724      	adds	r7, #36	; 0x24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bc80      	pop	{r7}
 8007cc6:	4770      	bx	lr
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	40013800 	.word	0x40013800
 8007cd0:	40020000 	.word	0x40020000
 8007cd4:	40020400 	.word	0x40020400
 8007cd8:	40020800 	.word	0x40020800
 8007cdc:	40020c00 	.word	0x40020c00
 8007ce0:	40021000 	.word	0x40021000
 8007ce4:	40021400 	.word	0x40021400
 8007ce8:	40021800 	.word	0x40021800
 8007cec:	40021c00 	.word	0x40021c00
 8007cf0:	40013c00 	.word	0x40013c00

08007cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	807b      	strh	r3, [r7, #2]
 8007d00:	4613      	mov	r3, r2
 8007d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007d04:	787b      	ldrb	r3, [r7, #1]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d0a:	887a      	ldrh	r2, [r7, #2]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007d10:	e003      	b.n	8007d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007d12:	887b      	ldrh	r3, [r7, #2]
 8007d14:	041a      	lsls	r2, r3, #16
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	619a      	str	r2, [r3, #24]
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr

08007d24 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d24:	b5b0      	push	{r4, r5, r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007d60:	f023 030c 	bic.w	r3, r3, #12
 8007d64:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = huart->Instance->CR3;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d98:	60fb      	str	r3, [r7, #12]

  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007db4:	f040 80e4 	bne.w	8007f80 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4aab      	ldr	r2, [pc, #684]	; (800806c <UART_SetConfig+0x348>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d004      	beq.n	8007dcc <UART_SetConfig+0xa8>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4aaa      	ldr	r2, [pc, #680]	; (8008070 <UART_SetConfig+0x34c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d16c      	bne.n	8007ea6 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007dcc:	f7ff fdee 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009a      	lsls	r2, r3, #2
 8007dda:	441a      	add	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de6:	4aa3      	ldr	r2, [pc, #652]	; (8008074 <UART_SetConfig+0x350>)
 8007de8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dec:	095b      	lsrs	r3, r3, #5
 8007dee:	011c      	lsls	r4, r3, #4
 8007df0:	f7ff fddc 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 8007df4:	4602      	mov	r2, r0
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009a      	lsls	r2, r3, #2
 8007dfe:	441a      	add	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	fbb2 f5f3 	udiv	r5, r2, r3
 8007e0a:	f7ff fdcf 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009a      	lsls	r2, r3, #2
 8007e18:	441a      	add	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e24:	4a93      	ldr	r2, [pc, #588]	; (8008074 <UART_SetConfig+0x350>)
 8007e26:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2a:	095b      	lsrs	r3, r3, #5
 8007e2c:	2264      	movs	r2, #100	; 0x64
 8007e2e:	fb02 f303 	mul.w	r3, r2, r3
 8007e32:	1aeb      	subs	r3, r5, r3
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	3332      	adds	r3, #50	; 0x32
 8007e38:	4a8e      	ldr	r2, [pc, #568]	; (8008074 <UART_SetConfig+0x350>)
 8007e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3e:	095b      	lsrs	r3, r3, #5
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e46:	441c      	add	r4, r3
 8007e48:	f7ff fdb0 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009a      	lsls	r2, r3, #2
 8007e56:	441a      	add	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007e62:	f7ff fda3 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 8007e66:	4602      	mov	r2, r0
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009a      	lsls	r2, r3, #2
 8007e70:	441a      	add	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7c:	4a7d      	ldr	r2, [pc, #500]	; (8008074 <UART_SetConfig+0x350>)
 8007e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e82:	095b      	lsrs	r3, r3, #5
 8007e84:	2264      	movs	r2, #100	; 0x64
 8007e86:	fb02 f303 	mul.w	r3, r2, r3
 8007e8a:	1aeb      	subs	r3, r5, r3
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	3332      	adds	r3, #50	; 0x32
 8007e90:	4a78      	ldr	r2, [pc, #480]	; (8008074 <UART_SetConfig+0x350>)
 8007e92:	fba2 2303 	umull	r2, r3, r2, r3
 8007e96:	095b      	lsrs	r3, r3, #5
 8007e98:	f003 0207 	and.w	r2, r3, #7
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4422      	add	r2, r4
 8007ea2:	609a      	str	r2, [r3, #8]
 8007ea4:	e154      	b.n	8008150 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007ea6:	f7ff fd77 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	4613      	mov	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009a      	lsls	r2, r3, #2
 8007eb4:	441a      	add	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec0:	4a6c      	ldr	r2, [pc, #432]	; (8008074 <UART_SetConfig+0x350>)
 8007ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	011c      	lsls	r4, r3, #4
 8007eca:	f7ff fd65 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009a      	lsls	r2, r3, #2
 8007ed8:	441a      	add	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	fbb2 f5f3 	udiv	r5, r2, r3
 8007ee4:	f7ff fd58 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	4613      	mov	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	009a      	lsls	r2, r3, #2
 8007ef2:	441a      	add	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efe:	4a5d      	ldr	r2, [pc, #372]	; (8008074 <UART_SetConfig+0x350>)
 8007f00:	fba2 2303 	umull	r2, r3, r2, r3
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	2264      	movs	r2, #100	; 0x64
 8007f08:	fb02 f303 	mul.w	r3, r2, r3
 8007f0c:	1aeb      	subs	r3, r5, r3
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	3332      	adds	r3, #50	; 0x32
 8007f12:	4a58      	ldr	r2, [pc, #352]	; (8008074 <UART_SetConfig+0x350>)
 8007f14:	fba2 2303 	umull	r2, r3, r2, r3
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f20:	441c      	add	r4, r3
 8007f22:	f7ff fd39 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 8007f26:	4602      	mov	r2, r0
 8007f28:	4613      	mov	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	009a      	lsls	r2, r3, #2
 8007f30:	441a      	add	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	fbb2 f5f3 	udiv	r5, r2, r3
 8007f3c:	f7ff fd2c 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 8007f40:	4602      	mov	r2, r0
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009a      	lsls	r2, r3, #2
 8007f4a:	441a      	add	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f56:	4a47      	ldr	r2, [pc, #284]	; (8008074 <UART_SetConfig+0x350>)
 8007f58:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5c:	095b      	lsrs	r3, r3, #5
 8007f5e:	2264      	movs	r2, #100	; 0x64
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
 8007f64:	1aeb      	subs	r3, r5, r3
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	3332      	adds	r3, #50	; 0x32
 8007f6a:	4a42      	ldr	r2, [pc, #264]	; (8008074 <UART_SetConfig+0x350>)
 8007f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f70:	095b      	lsrs	r3, r3, #5
 8007f72:	f003 0207 	and.w	r2, r3, #7
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4422      	add	r2, r4
 8007f7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007f7e:	e0e7      	b.n	8008150 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a39      	ldr	r2, [pc, #228]	; (800806c <UART_SetConfig+0x348>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d004      	beq.n	8007f94 <UART_SetConfig+0x270>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a38      	ldr	r2, [pc, #224]	; (8008070 <UART_SetConfig+0x34c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d171      	bne.n	8008078 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007f94:	f7ff fd0a 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009a      	lsls	r2, r3, #2
 8007fa2:	441a      	add	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fae:	4a31      	ldr	r2, [pc, #196]	; (8008074 <UART_SetConfig+0x350>)
 8007fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb4:	095b      	lsrs	r3, r3, #5
 8007fb6:	011c      	lsls	r4, r3, #4
 8007fb8:	f7ff fcf8 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009a      	lsls	r2, r3, #2
 8007fc6:	441a      	add	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	fbb2 f5f3 	udiv	r5, r2, r3
 8007fd2:	f7ff fceb 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009a      	lsls	r2, r3, #2
 8007fe0:	441a      	add	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fec:	4a21      	ldr	r2, [pc, #132]	; (8008074 <UART_SetConfig+0x350>)
 8007fee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff2:	095b      	lsrs	r3, r3, #5
 8007ff4:	2264      	movs	r2, #100	; 0x64
 8007ff6:	fb02 f303 	mul.w	r3, r2, r3
 8007ffa:	1aeb      	subs	r3, r5, r3
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	3332      	adds	r3, #50	; 0x32
 8008000:	4a1c      	ldr	r2, [pc, #112]	; (8008074 <UART_SetConfig+0x350>)
 8008002:	fba2 2303 	umull	r2, r3, r2, r3
 8008006:	095b      	lsrs	r3, r3, #5
 8008008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800800c:	441c      	add	r4, r3
 800800e:	f7ff fccd 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 8008012:	4602      	mov	r2, r0
 8008014:	4613      	mov	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	009a      	lsls	r2, r3, #2
 800801c:	441a      	add	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	fbb2 f5f3 	udiv	r5, r2, r3
 8008028:	f7ff fcc0 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 800802c:	4602      	mov	r2, r0
 800802e:	4613      	mov	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	009a      	lsls	r2, r3, #2
 8008036:	441a      	add	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008042:	4a0c      	ldr	r2, [pc, #48]	; (8008074 <UART_SetConfig+0x350>)
 8008044:	fba2 2303 	umull	r2, r3, r2, r3
 8008048:	095b      	lsrs	r3, r3, #5
 800804a:	2264      	movs	r2, #100	; 0x64
 800804c:	fb02 f303 	mul.w	r3, r2, r3
 8008050:	1aeb      	subs	r3, r5, r3
 8008052:	011b      	lsls	r3, r3, #4
 8008054:	3332      	adds	r3, #50	; 0x32
 8008056:	4a07      	ldr	r2, [pc, #28]	; (8008074 <UART_SetConfig+0x350>)
 8008058:	fba2 2303 	umull	r2, r3, r2, r3
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	f003 020f 	and.w	r2, r3, #15
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4422      	add	r2, r4
 8008068:	609a      	str	r2, [r3, #8]
 800806a:	e071      	b.n	8008150 <UART_SetConfig+0x42c>
 800806c:	40011000 	.word	0x40011000
 8008070:	40011400 	.word	0x40011400
 8008074:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008078:	f7ff fc8e 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 800807c:	4602      	mov	r2, r0
 800807e:	4613      	mov	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	009a      	lsls	r2, r3, #2
 8008086:	441a      	add	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008092:	4a31      	ldr	r2, [pc, #196]	; (8008158 <UART_SetConfig+0x434>)
 8008094:	fba2 2303 	umull	r2, r3, r2, r3
 8008098:	095b      	lsrs	r3, r3, #5
 800809a:	011c      	lsls	r4, r3, #4
 800809c:	f7ff fc7c 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 80080a0:	4602      	mov	r2, r0
 80080a2:	4613      	mov	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	009a      	lsls	r2, r3, #2
 80080aa:	441a      	add	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	fbb2 f5f3 	udiv	r5, r2, r3
 80080b6:	f7ff fc6f 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 80080ba:	4602      	mov	r2, r0
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009a      	lsls	r2, r3, #2
 80080c4:	441a      	add	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d0:	4a21      	ldr	r2, [pc, #132]	; (8008158 <UART_SetConfig+0x434>)
 80080d2:	fba2 2303 	umull	r2, r3, r2, r3
 80080d6:	095b      	lsrs	r3, r3, #5
 80080d8:	2264      	movs	r2, #100	; 0x64
 80080da:	fb02 f303 	mul.w	r3, r2, r3
 80080de:	1aeb      	subs	r3, r5, r3
 80080e0:	011b      	lsls	r3, r3, #4
 80080e2:	3332      	adds	r3, #50	; 0x32
 80080e4:	4a1c      	ldr	r2, [pc, #112]	; (8008158 <UART_SetConfig+0x434>)
 80080e6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ea:	095b      	lsrs	r3, r3, #5
 80080ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080f0:	441c      	add	r4, r3
 80080f2:	f7ff fc51 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 80080f6:	4602      	mov	r2, r0
 80080f8:	4613      	mov	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	009a      	lsls	r2, r3, #2
 8008100:	441a      	add	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	fbb2 f5f3 	udiv	r5, r2, r3
 800810c:	f7ff fc44 	bl	8007998 <HAL_RCC_GetPCLK1Freq>
 8008110:	4602      	mov	r2, r0
 8008112:	4613      	mov	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	009a      	lsls	r2, r3, #2
 800811a:	441a      	add	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	fbb2 f3f3 	udiv	r3, r2, r3
 8008126:	4a0c      	ldr	r2, [pc, #48]	; (8008158 <UART_SetConfig+0x434>)
 8008128:	fba2 2303 	umull	r2, r3, r2, r3
 800812c:	095b      	lsrs	r3, r3, #5
 800812e:	2264      	movs	r2, #100	; 0x64
 8008130:	fb02 f303 	mul.w	r3, r2, r3
 8008134:	1aeb      	subs	r3, r5, r3
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	3332      	adds	r3, #50	; 0x32
 800813a:	4a07      	ldr	r2, [pc, #28]	; (8008158 <UART_SetConfig+0x434>)
 800813c:	fba2 2303 	umull	r2, r3, r2, r3
 8008140:	095b      	lsrs	r3, r3, #5
 8008142:	f003 020f 	and.w	r2, r3, #15
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4422      	add	r2, r4
 800814c:	609a      	str	r2, [r3, #8]
}
 800814e:	e7ff      	b.n	8008150 <UART_SetConfig+0x42c>
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bdb0      	pop	{r4, r5, r7, pc}
 8008158:	51eb851f 	.word	0x51eb851f

0800815c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e03c      	b.n	80081e8 <HAL_UART_Init+0x8c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d103      	bne.n	8008182 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2224      	movs	r2, #36	; 0x24
 8008186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008198:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff fdc2 	bl	8007d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	691a      	ldr	r2, [r3, #16]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695a      	ldr	r2, [r3, #20]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <UART_WaitOnFlagForever>:

static HAL_StatusTypeDef UART_WaitOnFlagForever(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80081fe:	bf00      	nop
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	4013      	ands	r3, r2
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	429a      	cmp	r2, r3
 800820e:	bf0c      	ite	eq
 8008210:	2301      	moveq	r3, #1
 8008212:	2300      	movne	r3, #0
 8008214:	b2db      	uxtb	r3, r3
 8008216:	461a      	mov	r2, r3
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	429a      	cmp	r2, r3
 800821c:	d0f0      	beq.n	8008200 <UART_WaitOnFlagForever+0x10>
  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr

0800822a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b086      	sub	sp, #24
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	603b      	str	r3, [r7, #0]
 8008236:	4613      	mov	r3, r2
 8008238:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b20      	cmp	r3, #32
 8008244:	d176      	bne.n	8008334 <HAL_UART_Transmit+0x10a>
  {
    if((pData == NULL ) || (Size == 0))
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d002      	beq.n	8008252 <HAL_UART_Transmit+0x28>
 800824c:	88fb      	ldrh	r3, [r7, #6]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e06f      	b.n	8008336 <HAL_UART_Transmit+0x10c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800825c:	2b01      	cmp	r3, #1
 800825e:	d101      	bne.n	8008264 <HAL_UART_Transmit+0x3a>
 8008260:	2302      	movs	r3, #2
 8008262:	e068      	b.n	8008336 <HAL_UART_Transmit+0x10c>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2221      	movs	r2, #33	; 0x21
 8008276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	88fa      	ldrh	r2, [r7, #6]
 800827e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	88fa      	ldrh	r2, [r7, #6]
 8008284:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8008286:	e03c      	b.n	8008302 <HAL_UART_Transmit+0xd8>
    {
      huart->TxXferCount--;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800828c:	b29b      	uxth	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829e:	d11f      	bne.n	80082e0 <HAL_UART_Transmit+0xb6>
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 80082a0:	2200      	movs	r2, #0
 80082a2:	2180      	movs	r1, #128	; 0x80
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f7ff ffa3 	bl	80081f0 <UART_WaitOnFlagForever>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <HAL_UART_Transmit+0x8a>
        {
          return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e040      	b.n	8008336 <HAL_UART_Transmit+0x10c>
        }
        tmp = (uint16_t*) pData;
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	617b      	str	r3, [r7, #20]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082c6:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d103      	bne.n	80082d8 <HAL_UART_Transmit+0xae>
        {
          pData +=2U;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	3302      	adds	r3, #2
 80082d4:	60bb      	str	r3, [r7, #8]
 80082d6:	e014      	b.n	8008302 <HAL_UART_Transmit+0xd8>
        }
        else
        {
          pData +=1U;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	3301      	adds	r3, #1
 80082dc:	60bb      	str	r3, [r7, #8]
 80082de:	e010      	b.n	8008302 <HAL_UART_Transmit+0xd8>
        }
      }
      else
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 80082e0:	2200      	movs	r2, #0
 80082e2:	2180      	movs	r1, #128	; 0x80
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f7ff ff83 	bl	80081f0 <UART_WaitOnFlagForever>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <HAL_UART_Transmit+0xca>
        {
          return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e020      	b.n	8008336 <HAL_UART_Transmit+0x10c>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	60ba      	str	r2, [r7, #8]
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008306:	b29b      	uxth	r3, r3
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1bd      	bne.n	8008288 <HAL_UART_Transmit+0x5e>
      }
    }

    if(UART_WaitOnFlagForever(huart, UART_FLAG_TC, RESET) != HAL_OK)
 800830c:	2200      	movs	r2, #0
 800830e:	2140      	movs	r1, #64	; 0x40
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7ff ff6d 	bl	80081f0 <UART_WaitOnFlagForever>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e00a      	b.n	8008336 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	e000      	b.n	8008336 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008334:	2302      	movs	r3, #2
  }
}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b086      	sub	sp, #24
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	603b      	str	r3, [r7, #0]
 800834a:	4613      	mov	r3, r2
 800834c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b20      	cmp	r3, #32
 8008358:	f040 8087 	bne.w	800846a <HAL_UART_Receive+0x12c>
  {
    if((pData == NULL ) || (Size == 0))
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <HAL_UART_Receive+0x2a>
 8008362:	88fb      	ldrh	r3, [r7, #6]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e07f      	b.n	800846c <HAL_UART_Receive+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008372:	2b01      	cmp	r3, #1
 8008374:	d101      	bne.n	800837a <HAL_UART_Receive+0x3c>
 8008376:	2302      	movs	r3, #2
 8008378:	e078      	b.n	800846c <HAL_UART_Receive+0x12e>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2222      	movs	r2, #34	; 0x22
 800838c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	88fa      	ldrh	r2, [r7, #6]
 8008394:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	88fa      	ldrh	r2, [r7, #6]
 800839a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 800839c:	e056      	b.n	800844c <HAL_UART_Receive+0x10e>
    {
      huart->RxXferCount--;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083b4:	d128      	bne.n	8008408 <HAL_UART_Receive+0xca>
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
 80083b6:	2200      	movs	r2, #0
 80083b8:	2120      	movs	r1, #32
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f7ff ff18 	bl	80081f0 <UART_WaitOnFlagForever>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <HAL_UART_Receive+0x8c>
        {
          return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e050      	b.n	800846c <HAL_UART_Receive+0x12e>
        }
        tmp = (uint16_t*) pData;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	617b      	str	r3, [r7, #20]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10c      	bne.n	80083f0 <HAL_UART_Receive+0xb2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	3302      	adds	r3, #2
 80083ec:	60bb      	str	r3, [r7, #8]
 80083ee:	e02d      	b.n	800844c <HAL_UART_Receive+0x10e>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	3301      	adds	r3, #1
 8008404:	60bb      	str	r3, [r7, #8]
 8008406:	e021      	b.n	800844c <HAL_UART_Receive+0x10e>
        }

      }
      else
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
 8008408:	2200      	movs	r2, #0
 800840a:	2120      	movs	r1, #32
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f7ff feef 	bl	80081f0 <UART_WaitOnFlagForever>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <HAL_UART_Receive+0xde>
        {
          return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e027      	b.n	800846c <HAL_UART_Receive+0x12e>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d108      	bne.n	8008436 <HAL_UART_Receive+0xf8>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6859      	ldr	r1, [r3, #4]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	60ba      	str	r2, [r7, #8]
 8008430:	b2ca      	uxtb	r2, r1
 8008432:	701a      	strb	r2, [r3, #0]
 8008434:	e00a      	b.n	800844c <HAL_UART_Receive+0x10e>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	b2da      	uxtb	r2, r3
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	1c59      	adds	r1, r3, #1
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008448:	b2d2      	uxtb	r2, r2
 800844a:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1a3      	bne.n	800839e <HAL_UART_Receive+0x60>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2220      	movs	r2, #32
 800845a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	e000      	b.n	800846c <HAL_UART_Receive+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800846a:	2302      	movs	r3, #2
  }
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800847c:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <_sbrk+0x50>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d102      	bne.n	800848a <_sbrk+0x16>
		heap_end = &end;
 8008484:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <_sbrk+0x50>)
 8008486:	4a10      	ldr	r2, [pc, #64]	; (80084c8 <_sbrk+0x54>)
 8008488:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800848a:	4b0e      	ldr	r3, [pc, #56]	; (80084c4 <_sbrk+0x50>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008490:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <_sbrk+0x50>)
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4413      	add	r3, r2
 8008498:	466a      	mov	r2, sp
 800849a:	4293      	cmp	r3, r2
 800849c:	d907      	bls.n	80084ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800849e:	f7f7 febd 	bl	800021c <__errno>
 80084a2:	4603      	mov	r3, r0
 80084a4:	220c      	movs	r2, #12
 80084a6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084ac:	e006      	b.n	80084bc <_sbrk+0x48>
	}

	heap_end += incr;
 80084ae:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <_sbrk+0x50>)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4413      	add	r3, r2
 80084b6:	4a03      	ldr	r2, [pc, #12]	; (80084c4 <_sbrk+0x50>)
 80084b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80084ba:	68fb      	ldr	r3, [r7, #12]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20001710 	.word	0x20001710
 80084c8:	20001750 	.word	0x20001750

080084cc <HAL_RNG_Init>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e025      	b.n	800852a <HAL_RNG_Init+0x5e>
  }
  
  __HAL_LOCK(hrng);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	791b      	ldrb	r3, [r3, #4]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d101      	bne.n	80084ea <HAL_RNG_Init+0x1e>
 80084e6:	2302      	movs	r3, #2
 80084e8:	e01f      	b.n	800852a <HAL_RNG_Init+0x5e>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	711a      	strb	r2, [r3, #4]
  
  if(hrng->State == HAL_RNG_STATE_RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	795b      	ldrb	r3, [r3, #5]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d105      	bne.n	8008506 <HAL_RNG_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f816 	bl	8008532 <HAL_RNG_MspInit>
  }
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2202      	movs	r2, #2
 800850a:	715a      	strb	r2, [r3, #5]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0204 	orr.w	r2, r2, #4
 800851a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	715a      	strb	r2, [r3, #5]
  
  __HAL_UNLOCK(hrng);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <HAL_RNG_MspInit>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 8008532:	b480      	push	{r7}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 800853a:	bf00      	nop
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	bc80      	pop	{r7}
 8008542:	4770      	bx	lr

08008544 <Reset_Handler>:
 8008544:	2100      	movs	r1, #0
 8008546:	e003      	b.n	8008550 <LoopCopyDataInit>

08008548 <CopyDataInit>:
 8008548:	4b0b      	ldr	r3, [pc, #44]	; (8008578 <LoopForever+0x2>)
 800854a:	585b      	ldr	r3, [r3, r1]
 800854c:	5043      	str	r3, [r0, r1]
 800854e:	3104      	adds	r1, #4

08008550 <LoopCopyDataInit>:
 8008550:	480a      	ldr	r0, [pc, #40]	; (800857c <LoopForever+0x6>)
 8008552:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <LoopForever+0xa>)
 8008554:	1842      	adds	r2, r0, r1
 8008556:	429a      	cmp	r2, r3
 8008558:	d3f6      	bcc.n	8008548 <CopyDataInit>
 800855a:	4a0a      	ldr	r2, [pc, #40]	; (8008584 <LoopForever+0xe>)
 800855c:	e002      	b.n	8008564 <LoopFillZerobss>

0800855e <FillZerobss>:
 800855e:	2300      	movs	r3, #0
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	3204      	adds	r2, #4

08008564 <LoopFillZerobss>:
 8008564:	4b08      	ldr	r3, [pc, #32]	; (8008588 <LoopForever+0x12>)
 8008566:	429a      	cmp	r2, r3
 8008568:	d3f9      	bcc.n	800855e <FillZerobss>
 800856a:	f3af 8000 	nop.w
 800856e:	f7f7 fe81 	bl	8000274 <__libc_init_array>
 8008572:	f7fd faf5 	bl	8005b60 <main>

08008576 <LoopForever>:
 8008576:	e7fe      	b.n	8008576 <LoopForever>
 8008578:	080087b0 	.word	0x080087b0
 800857c:	20000000 	.word	0x20000000
 8008580:	20000850 	.word	0x20000850
 8008584:	20000850 	.word	0x20000850
 8008588:	2000174c 	.word	0x2000174c

0800858c <BusFault_Handler>:
 800858c:	e7fe      	b.n	800858c <BusFault_Handler>
 800858e:	0000      	movs	r0, r0

08008590 <register_fini>:
 8008590:	4b02      	ldr	r3, [pc, #8]	; (800859c <register_fini+0xc>)
 8008592:	b113      	cbz	r3, 800859a <register_fini+0xa>
 8008594:	4802      	ldr	r0, [pc, #8]	; (80085a0 <register_fini+0x10>)
 8008596:	f7f7 be3b 	b.w	8000210 <atexit>
 800859a:	4770      	bx	lr
 800859c:	00000000 	.word	0x00000000
 80085a0:	08000249 	.word	0x08000249

080085a4 <_init>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	bf00      	nop
 80085a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085aa:	bc08      	pop	{r3}
 80085ac:	469e      	mov	lr, r3
 80085ae:	4770      	bx	lr

080085b0 <_fini>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	bf00      	nop
 80085b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b6:	bc08      	pop	{r3}
 80085b8:	469e      	mov	lr, r3
 80085ba:	4770      	bx	lr
