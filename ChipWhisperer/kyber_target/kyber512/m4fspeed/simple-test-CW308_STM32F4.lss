
simple-test-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005b48  08005b48  00015b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c0c  08005c0c  00020440  2**0
                  CONTENTS
  4 .ARM          00000000  08005c0c  08005c0c  00020440  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c0c  08005c0c  00020440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005c0c  08005c0c  00015c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c14  08005c14  00015c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000440  20000000  08005c18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002874  20000440  08006058  00020440  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20002cb4  08006058  00022cb4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007471  00000000  00000000  0002049d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017ff  00000000  00000000  0002790e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00002932  00000000  00000000  0002910d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000530  00000000  00000000  0002ba40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000450  00000000  00000000  0002bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000052f6  00000000  00000000  0002c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000022dc  00000000  00000000  000316b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000129c  00000000  00000000  00033994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00034c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000051  00000000  00000000  00034d74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000440 	.word	0x20000440
 800019c:	20000440 	.word	0x20000440
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000440 	.word	0x20000440
 80001c0:	20000440 	.word	0x20000440
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000440 	.word	0x20000440
 80001e8:	00000000 	.word	0x00000000
 80001ec:	08005b2c 	.word	0x08005b2c

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000444 	.word	0x20000444
 800020c:	08005b2c 	.word	0x08005b2c

08000210 <atexit>:
 8000210:	2300      	movs	r3, #0
 8000212:	4601      	mov	r1, r0
 8000214:	461a      	mov	r2, r3
 8000216:	4618      	mov	r0, r3
 8000218:	f000 b8d4 	b.w	80003c4 <__register_exitproc>

0800021c <__libc_fini_array>:
 800021c:	b538      	push	{r3, r4, r5, lr}
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <__libc_fini_array+0x24>)
 8000220:	4d08      	ldr	r5, [pc, #32]	; (8000244 <__libc_fini_array+0x28>)
 8000222:	1b5b      	subs	r3, r3, r5
 8000224:	109c      	asrs	r4, r3, #2
 8000226:	d007      	beq.n	8000238 <__libc_fini_array+0x1c>
 8000228:	3b04      	subs	r3, #4
 800022a:	441d      	add	r5, r3
 800022c:	3c01      	subs	r4, #1
 800022e:	f855 3904 	ldr.w	r3, [r5], #-4
 8000232:	4798      	blx	r3
 8000234:	2c00      	cmp	r4, #0
 8000236:	d1f9      	bne.n	800022c <__libc_fini_array+0x10>
 8000238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800023c:	f005 bc7c 	b.w	8005b38 <_fini>
 8000240:	08005c18 	.word	0x08005c18
 8000244:	08005c14 	.word	0x08005c14

08000248 <__libc_init_array>:
 8000248:	b570      	push	{r4, r5, r6, lr}
 800024a:	4e0d      	ldr	r6, [pc, #52]	; (8000280 <__libc_init_array+0x38>)
 800024c:	4d0d      	ldr	r5, [pc, #52]	; (8000284 <__libc_init_array+0x3c>)
 800024e:	1b76      	subs	r6, r6, r5
 8000250:	10b6      	asrs	r6, r6, #2
 8000252:	d006      	beq.n	8000262 <__libc_init_array+0x1a>
 8000254:	2400      	movs	r4, #0
 8000256:	f855 3b04 	ldr.w	r3, [r5], #4
 800025a:	3401      	adds	r4, #1
 800025c:	4798      	blx	r3
 800025e:	42a6      	cmp	r6, r4
 8000260:	d1f9      	bne.n	8000256 <__libc_init_array+0xe>
 8000262:	4e09      	ldr	r6, [pc, #36]	; (8000288 <__libc_init_array+0x40>)
 8000264:	4d09      	ldr	r5, [pc, #36]	; (800028c <__libc_init_array+0x44>)
 8000266:	1b76      	subs	r6, r6, r5
 8000268:	f005 fc60 	bl	8005b2c <_init>
 800026c:	10b6      	asrs	r6, r6, #2
 800026e:	d006      	beq.n	800027e <__libc_init_array+0x36>
 8000270:	2400      	movs	r4, #0
 8000272:	f855 3b04 	ldr.w	r3, [r5], #4
 8000276:	3401      	adds	r4, #1
 8000278:	4798      	blx	r3
 800027a:	42a6      	cmp	r6, r4
 800027c:	d1f9      	bne.n	8000272 <__libc_init_array+0x2a>
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	08005c0c 	.word	0x08005c0c
 8000284:	08005c0c 	.word	0x08005c0c
 8000288:	08005c14 	.word	0x08005c14
 800028c:	08005c0c 	.word	0x08005c0c

08000290 <memcpy>:
 8000290:	4684      	mov	ip, r0
 8000292:	ea41 0300 	orr.w	r3, r1, r0
 8000296:	f013 0303 	ands.w	r3, r3, #3
 800029a:	d16d      	bne.n	8000378 <memcpy+0xe8>
 800029c:	3a40      	subs	r2, #64	; 0x40
 800029e:	d341      	bcc.n	8000324 <memcpy+0x94>
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002dc:	f840 3b04 	str.w	r3, [r0], #4
 80002e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e4:	f840 3b04 	str.w	r3, [r0], #4
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	f851 3b04 	ldr.w	r3, [r1], #4
 800030c:	f840 3b04 	str.w	r3, [r0], #4
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	3a40      	subs	r2, #64	; 0x40
 8000322:	d2bd      	bcs.n	80002a0 <memcpy+0x10>
 8000324:	3230      	adds	r2, #48	; 0x30
 8000326:	d311      	bcc.n	800034c <memcpy+0xbc>
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	3a10      	subs	r2, #16
 800034a:	d2ed      	bcs.n	8000328 <memcpy+0x98>
 800034c:	320c      	adds	r2, #12
 800034e:	d305      	bcc.n	800035c <memcpy+0xcc>
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	3a04      	subs	r2, #4
 800035a:	d2f9      	bcs.n	8000350 <memcpy+0xc0>
 800035c:	3204      	adds	r2, #4
 800035e:	d008      	beq.n	8000372 <memcpy+0xe2>
 8000360:	07d2      	lsls	r2, r2, #31
 8000362:	bf1c      	itt	ne
 8000364:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000368:	f800 3b01 	strbne.w	r3, [r0], #1
 800036c:	d301      	bcc.n	8000372 <memcpy+0xe2>
 800036e:	880b      	ldrh	r3, [r1, #0]
 8000370:	8003      	strh	r3, [r0, #0]
 8000372:	4660      	mov	r0, ip
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	2a08      	cmp	r2, #8
 800037a:	d313      	bcc.n	80003a4 <memcpy+0x114>
 800037c:	078b      	lsls	r3, r1, #30
 800037e:	d08d      	beq.n	800029c <memcpy+0xc>
 8000380:	f010 0303 	ands.w	r3, r0, #3
 8000384:	d08a      	beq.n	800029c <memcpy+0xc>
 8000386:	f1c3 0304 	rsb	r3, r3, #4
 800038a:	1ad2      	subs	r2, r2, r3
 800038c:	07db      	lsls	r3, r3, #31
 800038e:	bf1c      	itt	ne
 8000390:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000394:	f800 3b01 	strbne.w	r3, [r0], #1
 8000398:	d380      	bcc.n	800029c <memcpy+0xc>
 800039a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800039e:	f820 3b02 	strh.w	r3, [r0], #2
 80003a2:	e77b      	b.n	800029c <memcpy+0xc>
 80003a4:	3a04      	subs	r2, #4
 80003a6:	d3d9      	bcc.n	800035c <memcpy+0xcc>
 80003a8:	3a01      	subs	r2, #1
 80003aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003ae:	f800 3b01 	strb.w	r3, [r0], #1
 80003b2:	d2f9      	bcs.n	80003a8 <memcpy+0x118>
 80003b4:	780b      	ldrb	r3, [r1, #0]
 80003b6:	7003      	strb	r3, [r0, #0]
 80003b8:	784b      	ldrb	r3, [r1, #1]
 80003ba:	7043      	strb	r3, [r0, #1]
 80003bc:	788b      	ldrb	r3, [r1, #2]
 80003be:	7083      	strb	r3, [r0, #2]
 80003c0:	4660      	mov	r0, ip
 80003c2:	4770      	bx	lr

080003c4 <__register_exitproc>:
 80003c4:	b470      	push	{r4, r5, r6}
 80003c6:	4c18      	ldr	r4, [pc, #96]	; (8000428 <__register_exitproc+0x64>)
 80003c8:	6825      	ldr	r5, [r4, #0]
 80003ca:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80003ce:	b31c      	cbz	r4, 8000418 <__register_exitproc+0x54>
 80003d0:	6865      	ldr	r5, [r4, #4]
 80003d2:	2d1f      	cmp	r5, #31
 80003d4:	dc25      	bgt.n	8000422 <__register_exitproc+0x5e>
 80003d6:	b938      	cbnz	r0, 80003e8 <__register_exitproc+0x24>
 80003d8:	1cab      	adds	r3, r5, #2
 80003da:	3501      	adds	r5, #1
 80003dc:	6065      	str	r5, [r4, #4]
 80003de:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80003e2:	2000      	movs	r0, #0
 80003e4:	bc70      	pop	{r4, r5, r6}
 80003e6:	4770      	bx	lr
 80003e8:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
 80003ec:	2802      	cmp	r0, #2
 80003ee:	f8cc 2088 	str.w	r2, [ip, #136]	; 0x88
 80003f2:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 80003f6:	f04f 0201 	mov.w	r2, #1
 80003fa:	fa02 f205 	lsl.w	r2, r2, r5
 80003fe:	ea46 0602 	orr.w	r6, r6, r2
 8000402:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8000406:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
 800040a:	d1e5      	bne.n	80003d8 <__register_exitproc+0x14>
 800040c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8000410:	4313      	orrs	r3, r2
 8000412:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8000416:	e7df      	b.n	80003d8 <__register_exitproc+0x14>
 8000418:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800041c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000420:	e7d6      	b.n	80003d0 <__register_exitproc+0xc>
 8000422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000426:	e7dd      	b.n	80003e4 <__register_exitproc+0x20>
 8000428:	08005c08 	.word	0x08005c08

0800042c <recv_9>:
  return 0;
}


uint8_t recv_9(uint8_t* data, uint8_t dlen)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	460b      	mov	r3, r1
 8000436:	70fb      	strb	r3, [r7, #3]
  simpleserial_put('k', 4, sm+MLEN + CRYPTO_BYTES - 4);
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <recv_9+0x24>)
 800043a:	461a      	mov	r2, r3
 800043c:	2104      	movs	r1, #4
 800043e:	206b      	movs	r0, #107	; 0x6b
 8000440:	f004 f8ee 	bl	8004620 <simpleserial_put>
  return 0;
 8000444:	2300      	movs	r3, #0
}
 8000446:	4618      	mov	r0, r3
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000e11 	.word	0x20000e11

08000454 <recv_final>:

uint8_t recv_final(uint8_t* data, uint8_t dlen)
{ 
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]
  uint8_t dst[8] = {0};
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <recv_final+0x40>)
 800046a:	681b      	ldr	r3, [r3, #0]
  memcpy(dst, sm+255*0, 4);
 800046c:	60bb      	str	r3, [r7, #8]
  memcpy(dst+4, sm+MLEN + CRYPTO_BYTES - 4, 4);
 800046e:	f107 0308 	add.w	r3, r7, #8
 8000472:	3304      	adds	r3, #4
 8000474:	4a08      	ldr	r2, [pc, #32]	; (8000498 <recv_final+0x44>)
 8000476:	6812      	ldr	r2, [r2, #0]
 8000478:	601a      	str	r2, [r3, #0]
  simpleserial_put('c', 8, dst);
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	461a      	mov	r2, r3
 8000480:	2108      	movs	r1, #8
 8000482:	2063      	movs	r0, #99	; 0x63
 8000484:	f004 f8cc 	bl	8004620 <simpleserial_put>
  return 0;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000480 	.word	0x20000480
 8000498:	20000e11 	.word	0x20000e11

0800049c <main_func>:

uint8_t dst[32];
uint8_t rhoprime[CRHBYTES];
poly y;
uint8_t main_func(uint8_t* data, uint8_t dlen)
{
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	70fb      	strb	r3, [r7, #3]
  
  unsigned int i, j;
  int ret;
  size_t mlen, smlen;
  uint16_t nonce=0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	81fb      	strh	r3, [r7, #14]

  ////////////////////////
  //!!!!!!!!!!!!!!!!!!!!!!!L*nonce + i
  
    //randombytes(m, MLEN); 随机数
    memcpy(rhoprime, data, CRHBYTES);
 80004ac:	4a18      	ldr	r2, [pc, #96]	; (8000510 <main_func+0x74>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	461c      	mov	r4, r3
 80004b2:	4616      	mov	r6, r2
 80004b4:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80004b8:	4635      	mov	r5, r6
 80004ba:	4623      	mov	r3, r4
 80004bc:	6818      	ldr	r0, [r3, #0]
 80004be:	6859      	ldr	r1, [r3, #4]
 80004c0:	689a      	ldr	r2, [r3, #8]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004c6:	3410      	adds	r4, #16
 80004c8:	3610      	adds	r6, #16
 80004ca:	4564      	cmp	r4, ip
 80004cc:	d1f4      	bne.n	80004b8 <main_func+0x1c>
    memcpy((uint8_t*)&nonce, data+CRHBYTES, 2);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3330      	adds	r3, #48	; 0x30
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	81fb      	strh	r3, [r7, #14]


    poly_uniform_gamma1(&y, rhoprime, nonce);
 80004d8:	89fb      	ldrh	r3, [r7, #14]
 80004da:	461a      	mov	r2, r3
 80004dc:	490c      	ldr	r1, [pc, #48]	; (8000510 <main_func+0x74>)
 80004de:	480d      	ldr	r0, [pc, #52]	; (8000514 <main_func+0x78>)
 80004e0:	f000 f842 	bl	8000568 <pqcrystals_dilithium2_ref_poly_uniform_gamma1>


  	//simpleserial_put('r', 4, (uint8_t*)sm);// 这个没有问题


    memcpy(dst, (uint8_t *)y.coeffs, 16);
 80004e4:	2210      	movs	r2, #16
 80004e6:	490b      	ldr	r1, [pc, #44]	; (8000514 <main_func+0x78>)
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <main_func+0x7c>)
 80004ea:	f7ff fed1 	bl	8000290 <memcpy>
    memcpy(dst+16, (uint8_t *)y.coeffs + 256 * 4 - 16, 16);
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <main_func+0x80>)
 80004f0:	490b      	ldr	r1, [pc, #44]	; (8000520 <main_func+0x84>)
 80004f2:	2210      	movs	r2, #16
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff fecb 	bl	8000290 <memcpy>
    simpleserial_put('r', 32, (uint8_t *)dst);
 80004fa:	4a07      	ldr	r2, [pc, #28]	; (8000518 <main_func+0x7c>)
 80004fc:	2120      	movs	r1, #32
 80004fe:	2072      	movs	r0, #114	; 0x72
 8000500:	f004 f88e 	bl	8004620 <simpleserial_put>
    
  return 0;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050e:	bf00      	nop
 8000510:	200026e0 	.word	0x200026e0
 8000514:	20002710 	.word	0x20002710
 8000518:	200026c0 	.word	0x200026c0
 800051c:	200026d0 	.word	0x200026d0
 8000520:	20002b00 	.word	0x20002b00

08000524 <main>:


int main(void)
{	
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	platform_init();
 8000528:	f004 f8b0 	bl	800468c <platform_init>
	init_uart();
 800052c:	f004 f8fe 	bl	800472c <init_uart>
	trigger_setup();	
 8000530:	f004 f952 	bl	80047d8 <trigger_setup>
	simpleserial_init();
 8000534:	f003 ff22 	bl	800437c <simpleserial_init>
  
  //59 + 32 = 91
	simpleserial_addcmd('z', 50, main_func);
 8000538:	4a08      	ldr	r2, [pc, #32]	; (800055c <main+0x38>)
 800053a:	2132      	movs	r1, #50	; 0x32
 800053c:	207a      	movs	r0, #122	; 0x7a
 800053e:	f003 ff37 	bl	80043b0 <simpleserial_addcmd>
  // simpleserial_addcmd('e', 1, recv_4);
  // simpleserial_addcmd('f', 1, recv_5);
  // simpleserial_addcmd('g', 1, recv_6);
  // simpleserial_addcmd('h', 1, recv_7);
  // simpleserial_addcmd('i', 1, recv_8);
  simpleserial_addcmd('j', 1, recv_9);
 8000542:	4a07      	ldr	r2, [pc, #28]	; (8000560 <main+0x3c>)
 8000544:	2101      	movs	r1, #1
 8000546:	206a      	movs	r0, #106	; 0x6a
 8000548:	f003 ff32 	bl	80043b0 <simpleserial_addcmd>
  simpleserial_addcmd('b', 1, recv_final);
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <main+0x40>)
 800054e:	2101      	movs	r1, #1
 8000550:	2062      	movs	r0, #98	; 0x62
 8000552:	f003 ff2d 	bl	80043b0 <simpleserial_addcmd>


//  uint8_t data[2] = {1,0};
// 	test(data);
	while(1)
		simpleserial_get();
 8000556:	f003 ff81 	bl	800445c <simpleserial_get>
 800055a:	e7fc      	b.n	8000556 <main+0x32>
 800055c:	0800049d 	.word	0x0800049d
 8000560:	0800042d 	.word	0x0800042d
 8000564:	08000455 	.word	0x08000455

08000568 <pqcrystals_dilithium2_ref_poly_uniform_gamma1>:
#define POLY_UNIFORM_GAMMA1_NBLOCKS ((640 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_gamma1(poly *a,
                         const uint8_t seed[CRHBYTES],
                         uint16_t nonce)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
 800056e:	af00      	add	r7, sp, #0
 8000570:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000574:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8000578:	6018      	str	r0, [r3, #0]
 800057a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800057e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8000582:	6019      	str	r1, [r3, #0]
 8000584:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000588:	f2a3 3382 	subw	r3, r3, #898	; 0x382
 800058c:	801a      	strh	r2, [r3, #0]
  uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 800058e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000592:	f2a3 3382 	subw	r3, r3, #898	; 0x382
 8000596:	881a      	ldrh	r2, [r3, #0]
 8000598:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800059c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80005a0:	f107 0010 	add.w	r0, r7, #16
 80005a4:	6819      	ldr	r1, [r3, #0]
 80005a6:	f003 fda7 	bl	80040f8 <pqcrystals_dilithium2_ref_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 80005aa:	f107 0210 	add.w	r2, r7, #16
 80005ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80005b2:	2105      	movs	r1, #5
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fd8f 	bl	80040d8 <pqcrystals_fips202_ref_shake256_squeezeblocks>
  trigger_high();
 80005ba:	f004 f935 	bl	8004828 <trigger_high>
  polyz_unpack(a, buf);
 80005be:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80005c2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80005c6:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80005ca:	4611      	mov	r1, r2
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	f000 f807 	bl	80005e0 <pqcrystals_dilithium2_ref_polyz_unpack>
  trigger_low();
 80005d2:	f004 f935 	bl	8004840 <trigger_low>
}
 80005d6:	bf00      	nop
 80005d8:	f507 7762 	add.w	r7, r7, #904	; 0x388
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <pqcrystals_dilithium2_ref_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a) {
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N/4; ++i) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e15e      	b.n	80008ae <pqcrystals_dilithium2_ref_polyz_unpack+0x2ce>
    r->coeffs[4*i+0]  = a[9*i+0];
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	4613      	mov	r3, r2
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	4413      	add	r3, r2
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	4413      	add	r3, r2
 80005fc:	7819      	ldrb	r1, [r3, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	009a      	lsls	r2, r3, #2
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	009a      	lsls	r2, r3, #2
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000612:	4619      	mov	r1, r3
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4613      	mov	r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4413      	add	r3, r2
 800061c:	3301      	adds	r3, #1
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	4319      	orrs	r1, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	009a      	lsls	r2, r3, #2
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	009a      	lsls	r2, r3, #2
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800063c:	4619      	mov	r1, r3
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	4613      	mov	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	3302      	adds	r3, #2
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	041b      	lsls	r3, r3, #16
 8000650:	4319      	orrs	r1, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	009a      	lsls	r2, r3, #2
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] &= 0x3FFFF;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	009a      	lsls	r2, r3, #2
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	0092      	lsls	r2, r2, #2
 800066a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	4613      	mov	r3, r2
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	4413      	add	r3, r2
 800067c:	3302      	adds	r3, #2
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	089b      	lsrs	r3, r3, #2
 8000686:	b2d9      	uxtb	r1, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006a0:	4619      	mov	r1, r3
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4613      	mov	r3, r2
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	4413      	add	r3, r2
 80006aa:	3303      	adds	r3, #3
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	019b      	lsls	r3, r3, #6
 80006b4:	4319      	orrs	r1, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ce:	4619      	mov	r1, r3
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	4613      	mov	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	4413      	add	r3, r2
 80006d8:	3304      	adds	r3, #4
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	039b      	lsls	r3, r3, #14
 80006e2:	4319      	orrs	r1, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] &= 0x3FFFF;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	1c5a      	adds	r2, r3, #1
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	0092      	lsls	r2, r2, #2
 8000700:	3201      	adds	r2, #1
 8000702:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	4613      	mov	r3, r2
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	4413      	add	r3, r2
 8000714:	3304      	adds	r3, #4
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	4413      	add	r3, r2
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	091b      	lsrs	r3, r3, #4
 800071e:	b2d9      	uxtb	r1, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	1c9a      	adds	r2, r3, #2
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	1c9a      	adds	r2, r3, #2
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000738:	4619      	mov	r1, r3
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4613      	mov	r3, r2
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	4413      	add	r3, r2
 8000742:	3305      	adds	r3, #5
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	4319      	orrs	r1, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	1c9a      	adds	r2, r3, #2
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	1c9a      	adds	r2, r3, #2
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000766:	4619      	mov	r1, r3
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	4613      	mov	r3, r2
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	4413      	add	r3, r2
 8000770:	3306      	adds	r3, #6
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	031b      	lsls	r3, r3, #12
 800077a:	4319      	orrs	r1, r3
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	1c9a      	adds	r2, r3, #2
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] &= 0x3FFFF;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	1c9a      	adds	r2, r3, #2
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	0092      	lsls	r2, r2, #2
 8000798:	3202      	adds	r2, #2
 800079a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	4613      	mov	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	4413      	add	r3, r2
 80007ac:	3306      	adds	r3, #6
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	099b      	lsrs	r3, r3, #6
 80007b6:	b2d9      	uxtb	r1, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	1cda      	adds	r2, r3, #3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	1cda      	adds	r2, r3, #3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d0:	4619      	mov	r1, r3
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	4613      	mov	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	4413      	add	r3, r2
 80007da:	3307      	adds	r3, #7
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4319      	orrs	r1, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	1cda      	adds	r2, r3, #3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	1cda      	adds	r2, r3, #3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007fe:	4619      	mov	r1, r3
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	3308      	adds	r3, #8
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	029b      	lsls	r3, r3, #10
 8000812:	4319      	orrs	r1, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	1cda      	adds	r2, r3, #3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] &= 0x3FFFF;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	1cda      	adds	r2, r3, #3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800082c:	68fa      	ldr	r2, [r7, #12]
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	3203      	adds	r2, #3
 8000832:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	009a      	lsls	r2, r3, #2
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	0092      	lsls	r2, r2, #2
 800084a:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	3201      	adds	r2, #1
 8000866:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	1c9a      	adds	r2, r3, #2
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	3202      	adds	r2, #2
 8000882:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	1cda      	adds	r2, r3, #3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	0092      	lsls	r2, r2, #2
 800089c:	3203      	adds	r2, #3
 800089e:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < N/4; ++i) {
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2b3f      	cmp	r3, #63	; 0x3f
 80008b2:	f67f ae9d 	bls.w	80005f0 <pqcrystals_dilithium2_ref_polyz_unpack+0x10>
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 80008c2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	f04f 0100 	mov.w	r1, #0
 80008d4:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 80008d8:	2100      	movs	r1, #0
 80008da:	6179      	str	r1, [r7, #20]
 80008dc:	e022      	b.n	8000924 <load64+0x62>
    r |= (uint64_t)x[i] << 8*i;
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	6979      	ldr	r1, [r7, #20]
 80008e2:	4401      	add	r1, r0
 80008e4:	7809      	ldrb	r1, [r1, #0]
 80008e6:	b2c9      	uxtb	r1, r1
 80008e8:	2000      	movs	r0, #0
 80008ea:	460c      	mov	r4, r1
 80008ec:	4605      	mov	r5, r0
 80008ee:	6979      	ldr	r1, [r7, #20]
 80008f0:	00c9      	lsls	r1, r1, #3
 80008f2:	f1a1 0620 	sub.w	r6, r1, #32
 80008f6:	f1c1 0020 	rsb	r0, r1, #32
 80008fa:	fa05 f301 	lsl.w	r3, r5, r1
 80008fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000902:	4333      	orrs	r3, r6
 8000904:	fa24 f000 	lsr.w	r0, r4, r0
 8000908:	4303      	orrs	r3, r0
 800090a:	fa04 f201 	lsl.w	r2, r4, r1
 800090e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000912:	ea40 0802 	orr.w	r8, r0, r2
 8000916:	ea41 0903 	orr.w	r9, r1, r3
 800091a:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 800091e:	6979      	ldr	r1, [r7, #20]
 8000920:	3101      	adds	r1, #1
 8000922:	6179      	str	r1, [r7, #20]
 8000924:	6979      	ldr	r1, [r7, #20]
 8000926:	2907      	cmp	r1, #7
 8000928:	d9d9      	bls.n	80008de <load64+0x1c>

  return r;
 800092a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800093a:	4770      	bx	lr

0800093c <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 800093c:	b4f0      	push	{r4, r5, r6, r7}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	e019      	b.n	8000982 <store64+0x46>
    x[i] = u >> 8*i;
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	00d9      	lsls	r1, r3, #3
 8000952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000956:	f1c1 0620 	rsb	r6, r1, #32
 800095a:	f1a1 0020 	sub.w	r0, r1, #32
 800095e:	fa22 f401 	lsr.w	r4, r2, r1
 8000962:	fa03 f606 	lsl.w	r6, r3, r6
 8000966:	4334      	orrs	r4, r6
 8000968:	fa23 f000 	lsr.w	r0, r3, r0
 800096c:	4304      	orrs	r4, r0
 800096e:	fa23 f501 	lsr.w	r5, r3, r1
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	4413      	add	r3, r2
 8000978:	b2e2      	uxtb	r2, r4
 800097a:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	2b07      	cmp	r3, #7
 8000986:	d9e2      	bls.n	800094e <store64+0x12>
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bcf0      	pop	{r4, r5, r6, r7}
 8000992:	4770      	bx	lr

08000994 <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 8000994:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000998:	f6ad 3d8c 	subw	sp, sp, #2956	; 0xb8c
 800099c:	af00      	add	r7, sp, #0
 800099e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009a6:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 80009a8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009ac:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b6:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80009ba:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 80009be:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80009cc:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80009d0:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 80009d4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009d8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80009e2:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 80009e6:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 80009ea:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80009f8:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 80009fc:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 8000a00:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a04:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000a0e:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8000a12:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 8000a16:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a1a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000a24:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8000a28:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 8000a2c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a30:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8000a3a:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8000a3e:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 8000a42:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a46:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000a50:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8000a54:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 8000a58:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a5c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000a66:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8000a6a:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 8000a6e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a72:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000a7c:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8000a80:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 8000a84:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a88:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8000a92:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8000a96:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 8000a9a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a9e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8000aa8:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8000aac:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 8000ab0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000ab4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000abe:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8000ac2:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 8000ac6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000aca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000ad4:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8000ad8:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 8000adc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000ae0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8000aea:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8000aee:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 8000af2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000af6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000b00:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8000b04:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 8000b08:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000b0c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8000b16:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8000b1a:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 8000b1e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000b22:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8000b2c:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8000b30:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 8000b34:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000b38:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8000b42:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8000b46:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 8000b4a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000b4e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8000b58:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8000b5c:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 8000b60:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000b64:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8000b6e:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8000b72:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 8000b76:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000b7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8000b84:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8000b88:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 8000b8c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000b90:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8000b9a:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8000b9e:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 8000ba2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000ba6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8000bb0:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8000bb4:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 8000bb8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000bbc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8000bc6:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8000bca:	e9c1 2300 	strd	r2, r3, [r1]

        for( round = 0; round < NROUNDS; round += 2 )
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8000bd4:	f002 bf10 	b.w	80039f8 <KeccakF1600_StatePermute+0x3064>
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 8000bd8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8000bdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000be0:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	ea80 0c02 	eor.w	ip, r0, r2
 8000bec:	f8c7 c990 	str.w	ip, [r7, #2448]	; 0x990
 8000bf0:	404b      	eors	r3, r1
 8000bf2:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 8000bf6:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8000bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfe:	f507 6119 	add.w	r1, r7, #2448	; 0x990
 8000c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c06:	4684      	mov	ip, r0
 8000c08:	ea8c 0c02 	eor.w	ip, ip, r2
 8000c0c:	f8c7 c988 	str.w	ip, [r7, #2440]	; 0x988
 8000c10:	404b      	eors	r3, r1
 8000c12:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 8000c16:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1e:	f607 1188 	addw	r1, r7, #2440	; 0x988
 8000c22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c26:	4684      	mov	ip, r0
 8000c28:	ea8c 0c02 	eor.w	ip, ip, r2
 8000c2c:	f8c7 c980 	str.w	ip, [r7, #2432]	; 0x980
 8000c30:	404b      	eors	r3, r1
 8000c32:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 8000c36:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8000c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3e:	f507 6118 	add.w	r1, r7, #2432	; 0x980
 8000c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c46:	4684      	mov	ip, r0
 8000c48:	ea82 0c0c 	eor.w	ip, r2, ip
 8000c4c:	f8c7 c548 	str.w	ip, [r7, #1352]	; 0x548
 8000c50:	404b      	eors	r3, r1
 8000c52:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8000c56:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8000c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5e:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8000c62:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 8000c66:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8000c6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c6e:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	ea80 0c02 	eor.w	ip, r0, r2
 8000c7a:	f8c7 c978 	str.w	ip, [r7, #2424]	; 0x978
 8000c7e:	404b      	eors	r3, r1
 8000c80:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 8000c84:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8000c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8c:	f607 1178 	addw	r1, r7, #2424	; 0x978
 8000c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c94:	4684      	mov	ip, r0
 8000c96:	ea8c 0c02 	eor.w	ip, ip, r2
 8000c9a:	f8c7 c970 	str.w	ip, [r7, #2416]	; 0x970
 8000c9e:	404b      	eors	r3, r1
 8000ca0:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8000ca4:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8000ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cac:	f507 6117 	add.w	r1, r7, #2416	; 0x970
 8000cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000cb4:	4684      	mov	ip, r0
 8000cb6:	ea8c 0c02 	eor.w	ip, ip, r2
 8000cba:	f8c7 c968 	str.w	ip, [r7, #2408]	; 0x968
 8000cbe:	404b      	eors	r3, r1
 8000cc0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8000cc4:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ccc:	f607 1168 	addw	r1, r7, #2408	; 0x968
 8000cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000cd4:	4684      	mov	ip, r0
 8000cd6:	ea82 0c0c 	eor.w	ip, r2, ip
 8000cda:	f8c7 c540 	str.w	ip, [r7, #1344]	; 0x540
 8000cde:	404b      	eors	r3, r1
 8000ce0:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8000ce4:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8000cf0:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000cf4:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8000cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cfc:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8000d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d04:	ea80 0c02 	eor.w	ip, r0, r2
 8000d08:	f8c7 c960 	str.w	ip, [r7, #2400]	; 0x960
 8000d0c:	404b      	eors	r3, r1
 8000d0e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8000d12:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8000d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1a:	f507 6116 	add.w	r1, r7, #2400	; 0x960
 8000d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d22:	4684      	mov	ip, r0
 8000d24:	ea8c 0c02 	eor.w	ip, ip, r2
 8000d28:	f8c7 c958 	str.w	ip, [r7, #2392]	; 0x958
 8000d2c:	404b      	eors	r3, r1
 8000d2e:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 8000d32:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8000d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3a:	f607 1158 	addw	r1, r7, #2392	; 0x958
 8000d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d42:	4684      	mov	ip, r0
 8000d44:	ea8c 0c02 	eor.w	ip, ip, r2
 8000d48:	f8c7 c950 	str.w	ip, [r7, #2384]	; 0x950
 8000d4c:	404b      	eors	r3, r1
 8000d4e:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8000d52:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8000d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5a:	f507 6115 	add.w	r1, r7, #2384	; 0x950
 8000d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d62:	4684      	mov	ip, r0
 8000d64:	ea82 0c0c 	eor.w	ip, r2, ip
 8000d68:	f8c7 c538 	str.w	ip, [r7, #1336]	; 0x538
 8000d6c:	404b      	eors	r3, r1
 8000d6e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8000d72:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8000d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8000d7e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000d82:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8000d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d8a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8000d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d92:	ea80 0c02 	eor.w	ip, r0, r2
 8000d96:	f8c7 c948 	str.w	ip, [r7, #2376]	; 0x948
 8000d9a:	404b      	eors	r3, r1
 8000d9c:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 8000da0:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8000da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da8:	f607 1148 	addw	r1, r7, #2376	; 0x948
 8000dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000db0:	4684      	mov	ip, r0
 8000db2:	ea8c 0c02 	eor.w	ip, ip, r2
 8000db6:	f8c7 c940 	str.w	ip, [r7, #2368]	; 0x940
 8000dba:	404b      	eors	r3, r1
 8000dbc:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 8000dc0:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8000dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000dd0:	4684      	mov	ip, r0
 8000dd2:	ea8c 0c02 	eor.w	ip, ip, r2
 8000dd6:	f8c7 c938 	str.w	ip, [r7, #2360]	; 0x938
 8000dda:	404b      	eors	r3, r1
 8000ddc:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 8000de0:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8000de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de8:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8000dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000df0:	4684      	mov	ip, r0
 8000df2:	ea82 0c0c 	eor.w	ip, r2, ip
 8000df6:	f8c7 c530 	str.w	ip, [r7, #1328]	; 0x530
 8000dfa:	404b      	eors	r3, r1
 8000dfc:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8000e00:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8000e0c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000e10:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8000e14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e18:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8000e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e20:	ea80 0c02 	eor.w	ip, r0, r2
 8000e24:	f8c7 c930 	str.w	ip, [r7, #2352]	; 0x930
 8000e28:	404b      	eors	r3, r1
 8000e2a:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8000e2e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8000e3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e3e:	4684      	mov	ip, r0
 8000e40:	ea8c 0c02 	eor.w	ip, ip, r2
 8000e44:	f8c7 c928 	str.w	ip, [r7, #2344]	; 0x928
 8000e48:	404b      	eors	r3, r1
 8000e4a:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8000e4e:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f607 1128 	addw	r1, r7, #2344	; 0x928
 8000e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e5e:	4684      	mov	ip, r0
 8000e60:	ea8c 0c02 	eor.w	ip, ip, r2
 8000e64:	f8c7 c920 	str.w	ip, [r7, #2336]	; 0x920
 8000e68:	404b      	eors	r3, r1
 8000e6a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 8000e6e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 8000e7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e7e:	4684      	mov	ip, r0
 8000e80:	ea82 0c0c 	eor.w	ip, r2, ip
 8000e84:	f8c7 c528 	str.w	ip, [r7, #1320]	; 0x528
 8000e88:	404b      	eors	r3, r1
 8000e8a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8000e8e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8000e9a:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 8000e9e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8000ea2:	0fda      	lsrs	r2, r3, #31
 8000ea4:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8000eb0:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8000eb4:	0fda      	lsrs	r2, r3, #31
 8000eb6:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 8000ec2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	f607 1118 	addw	r1, r7, #2328	; 0x918
 8000ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ed2:	4684      	mov	ip, r0
 8000ed4:	ea82 0c0c 	eor.w	ip, r2, ip
 8000ed8:	f8c7 c520 	str.w	ip, [r7, #1312]	; 0x520
 8000edc:	404b      	eors	r3, r1
 8000ede:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8000ee2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 8000eee:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8000ef2:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8000ef6:	0fda      	lsrs	r2, r3, #31
 8000ef8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4313      	orrs	r3, r2
 8000f00:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 8000f04:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8000f08:	0fda      	lsrs	r2, r3, #31
 8000f0a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4313      	orrs	r3, r2
 8000f12:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8000f16:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f507 6111 	add.w	r1, r7, #2320	; 0x910
 8000f22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f26:	4684      	mov	ip, r0
 8000f28:	ea82 0c0c 	eor.w	ip, r2, ip
 8000f2c:	f8c7 c518 	str.w	ip, [r7, #1304]	; 0x518
 8000f30:	404b      	eors	r3, r1
 8000f32:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8000f36:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8000f42:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8000f46:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8000f4a:	0fda      	lsrs	r2, r3, #31
 8000f4c:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4313      	orrs	r3, r2
 8000f54:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 8000f58:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8000f5c:	0fda      	lsrs	r2, r3, #31
 8000f5e:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4313      	orrs	r3, r2
 8000f66:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8000f6a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f607 1108 	addw	r1, r7, #2312	; 0x908
 8000f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f7a:	4684      	mov	ip, r0
 8000f7c:	ea82 0c0c 	eor.w	ip, r2, ip
 8000f80:	f8c7 c510 	str.w	ip, [r7, #1296]	; 0x510
 8000f84:	404b      	eors	r3, r1
 8000f86:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8000f8a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 8000f96:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8000f9a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8000f9e:	0fda      	lsrs	r2, r3, #31
 8000fa0:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 8000fac:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8000fb0:	0fda      	lsrs	r2, r3, #31
 8000fb2:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 8000fbe:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8000fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fce:	4684      	mov	ip, r0
 8000fd0:	ea82 0c0c 	eor.w	ip, r2, ip
 8000fd4:	f8c7 c508 	str.w	ip, [r7, #1288]	; 0x508
 8000fd8:	404b      	eors	r3, r1
 8000fda:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8000fde:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 8000fea:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8000fee:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8000ff2:	0fda      	lsrs	r2, r3, #31
 8000ff4:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 8001000:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8001004:	0fda      	lsrs	r2, r3, #31
 8001006:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4313      	orrs	r3, r2
 800100e:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 8001012:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f607 01f8 	addw	r1, r7, #2296	; 0x8f8
 800101e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001022:	4684      	mov	ip, r0
 8001024:	ea82 0c0c 	eor.w	ip, r2, ip
 8001028:	f8c7 c500 	str.w	ip, [r7, #1280]	; 0x500
 800102c:	404b      	eors	r3, r1
 800102e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8001032:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 800103e:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 8001042:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001046:	e9d3 0100 	ldrd	r0, r1, [r3]
 800104a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	ea80 0c02 	eor.w	ip, r0, r2
 8001056:	f8c7 c4f8 	str.w	ip, [r7, #1272]	; 0x4f8
 800105a:	404b      	eors	r3, r1
 800105c:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8001060:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800106c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 8001070:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800107c:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 8001080:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8001084:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001088:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	ea80 0c02 	eor.w	ip, r0, r2
 8001094:	f8c7 c4f0 	str.w	ip, [r7, #1264]	; 0x4f0
 8001098:	404b      	eors	r3, r1
 800109a:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 800109e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 80010aa:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 80010ae:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 80010b2:	031a      	lsls	r2, r3, #12
 80010b4:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 80010b8:	0d1b      	lsrs	r3, r3, #20
 80010ba:	4313      	orrs	r3, r2
 80010bc:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 80010c0:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 80010c4:	031a      	lsls	r2, r3, #12
 80010c6:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 80010ca:	0d1b      	lsrs	r3, r3, #20
 80010cc:	4313      	orrs	r3, r2
 80010ce:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80010d2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80010de:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 80010e2:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 80010e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ea:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	ea80 0c02 	eor.w	ip, r0, r2
 80010f6:	f8c7 c4e0 	str.w	ip, [r7, #1248]	; 0x4e0
 80010fa:	404b      	eors	r3, r1
 80010fc:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8001100:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800110c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 8001110:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001114:	02da      	lsls	r2, r3, #11
 8001116:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800111a:	0d5b      	lsrs	r3, r3, #21
 800111c:	4313      	orrs	r3, r2
 800111e:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8001122:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8001126:	02da      	lsls	r2, r3, #11
 8001128:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800112c:	0d5b      	lsrs	r3, r3, #21
 800112e:	4313      	orrs	r3, r2
 8001130:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 8001134:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001140:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 8001144:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8001148:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	ea80 0c02 	eor.w	ip, r0, r2
 8001158:	f8c7 c4d0 	str.w	ip, [r7, #1232]	; 0x4d0
 800115c:	404b      	eors	r3, r1
 800115e:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8001162:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800116e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 8001172:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 8001176:	0ada      	lsrs	r2, r3, #11
 8001178:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800117c:	055b      	lsls	r3, r3, #21
 800117e:	4313      	orrs	r3, r2
 8001180:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8001184:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 8001188:	0ada      	lsrs	r2, r3, #11
 800118a:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800118e:	055b      	lsls	r3, r3, #21
 8001190:	4313      	orrs	r3, r2
 8001192:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8001196:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80011a2:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 80011a6:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80011aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ae:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	ea80 0c02 	eor.w	ip, r0, r2
 80011ba:	f8c7 c4c0 	str.w	ip, [r7, #1216]	; 0x4c0
 80011be:	404b      	eors	r3, r1
 80011c0:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 80011c4:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 80011d0:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 80011d4:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 80011d8:	0c9a      	lsrs	r2, r3, #18
 80011da:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 80011de:	039b      	lsls	r3, r3, #14
 80011e0:	4313      	orrs	r3, r2
 80011e2:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 80011e6:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 80011ea:	0c9a      	lsrs	r2, r3, #18
 80011ec:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 80011f0:	039b      	lsls	r3, r3, #14
 80011f2:	4313      	orrs	r3, r2
 80011f4:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 80011f8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 8001208:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	43d1      	mvns	r1, r2
 8001212:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 8001216:	43db      	mvns	r3, r3
 8001218:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800121c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001224:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 8001228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800122c:	4684      	mov	ip, r0
 800122e:	ea0c 0c02 	and.w	ip, ip, r2
 8001232:	f8c7 c8e8 	str.w	ip, [r7, #2280]	; 0x8e8
 8001236:	400b      	ands	r3, r1
 8001238:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 800123c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 8001248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800124c:	4684      	mov	ip, r0
 800124e:	ea82 0c0c 	eor.w	ip, r2, ip
 8001252:	f8c7 c4b0 	str.w	ip, [r7, #1200]	; 0x4b0
 8001256:	404b      	eors	r3, r1
 8001258:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800125c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 8001268:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 800126c:	4ac7      	ldr	r2, [pc, #796]	; (800158c <KeccakF1600_StatePermute+0xbf8>)
 800126e:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	e9d3 0100 	ldrd	r0, r1, [r3]
 800127a:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	ea82 0c00 	eor.w	ip, r2, r0
 8001286:	f8c7 c4a8 	str.w	ip, [r7, #1192]	; 0x4a8
 800128a:	404b      	eors	r3, r1
 800128c:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8001290:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800129c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 80012a0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	43d1      	mvns	r1, r2
 80012aa:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 80012ae:	43db      	mvns	r3, r3
 80012b0:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 80012b4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f507 610e 	add.w	r1, r7, #2272	; 0x8e0
 80012c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012c4:	4684      	mov	ip, r0
 80012c6:	ea0c 0c02 	and.w	ip, ip, r2
 80012ca:	f8c7 c8d8 	str.w	ip, [r7, #2264]	; 0x8d8
 80012ce:	400b      	ands	r3, r1
 80012d0:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 80012d4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80012e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012e4:	4684      	mov	ip, r0
 80012e6:	ea82 0c0c 	eor.w	ip, r2, ip
 80012ea:	f8c7 c4a0 	str.w	ip, [r7, #1184]	; 0x4a0
 80012ee:	404b      	eors	r3, r1
 80012f0:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 80012f4:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8001300:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 8001304:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	43d1      	mvns	r1, r2
 800130e:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 8001312:	43db      	mvns	r3, r3
 8001314:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 8001318:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f507 610d 	add.w	r1, r7, #2256	; 0x8d0
 8001324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001328:	4684      	mov	ip, r0
 800132a:	ea0c 0c02 	and.w	ip, ip, r2
 800132e:	f8c7 c8c8 	str.w	ip, [r7, #2248]	; 0x8c8
 8001332:	400b      	ands	r3, r1
 8001334:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 8001338:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8001344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001348:	4684      	mov	ip, r0
 800134a:	ea82 0c0c 	eor.w	ip, r2, ip
 800134e:	f8c7 c498 	str.w	ip, [r7, #1176]	; 0x498
 8001352:	404b      	eors	r3, r1
 8001354:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8001358:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8001364:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 8001368:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	43d1      	mvns	r1, r2
 8001372:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 8001376:	43db      	mvns	r3, r3
 8001378:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800137c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	f507 610c 	add.w	r1, r7, #2240	; 0x8c0
 8001388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800138c:	4684      	mov	ip, r0
 800138e:	ea0c 0c02 	and.w	ip, ip, r2
 8001392:	f8c7 c8b8 	str.w	ip, [r7, #2232]	; 0x8b8
 8001396:	400b      	ands	r3, r1
 8001398:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800139c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f607 01b8 	addw	r1, r7, #2232	; 0x8b8
 80013a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013ac:	4684      	mov	ip, r0
 80013ae:	ea82 0c0c 	eor.w	ip, r2, ip
 80013b2:	f8c7 c490 	str.w	ip, [r7, #1168]	; 0x490
 80013b6:	404b      	eors	r3, r1
 80013b8:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 80013bc:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 80013c8:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 80013cc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	43d1      	mvns	r1, r2
 80013d6:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 80013da:	43db      	mvns	r3, r3
 80013dc:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 80013e0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80013ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013f0:	4684      	mov	ip, r0
 80013f2:	ea0c 0c02 	and.w	ip, ip, r2
 80013f6:	f8c7 c8a8 	str.w	ip, [r7, #2216]	; 0x8a8
 80013fa:	400b      	ands	r3, r1
 80013fc:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 8001400:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 800140c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001410:	4684      	mov	ip, r0
 8001412:	ea82 0c0c 	eor.w	ip, r2, ip
 8001416:	f8c7 c488 	str.w	ip, [r7, #1160]	; 0x488
 800141a:	404b      	eors	r3, r1
 800141c:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 8001420:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800142c:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 8001430:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8001434:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001438:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	ea80 0c02 	eor.w	ip, r0, r2
 8001444:	f8c7 c480 	str.w	ip, [r7, #1152]	; 0x480
 8001448:	404b      	eors	r3, r1
 800144a:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800144e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800145a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 800145e:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001462:	091a      	lsrs	r2, r3, #4
 8001464:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8001468:	071b      	lsls	r3, r3, #28
 800146a:	4313      	orrs	r3, r2
 800146c:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8001470:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8001474:	091a      	lsrs	r2, r3, #4
 8001476:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800147a:	071b      	lsls	r3, r3, #28
 800147c:	4313      	orrs	r3, r2
 800147e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8001482:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800148e:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 8001492:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800149a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	ea80 0c02 	eor.w	ip, r0, r2
 80014a6:	f8c7 c470 	str.w	ip, [r7, #1136]	; 0x470
 80014aa:	404b      	eors	r3, r1
 80014ac:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80014b0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 80014bc:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 80014c0:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80014c4:	0b1a      	lsrs	r2, r3, #12
 80014c6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80014ca:	051b      	lsls	r3, r3, #20
 80014cc:	4313      	orrs	r3, r2
 80014ce:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 80014d2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80014d6:	0b1a      	lsrs	r2, r3, #12
 80014d8:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80014dc:	051b      	lsls	r3, r3, #20
 80014de:	4313      	orrs	r3, r2
 80014e0:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80014e4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80014f0:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 80014f4:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80014f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fc:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	ea80 0c02 	eor.w	ip, r0, r2
 8001508:	f8c7 c460 	str.w	ip, [r7, #1120]	; 0x460
 800150c:	404b      	eors	r3, r1
 800150e:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 8001512:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800151e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 8001522:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 8001526:	0f5a      	lsrs	r2, r3, #29
 8001528:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4313      	orrs	r3, r2
 8001530:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8001534:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 8001538:	0f5a      	lsrs	r2, r3, #29
 800153a:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4313      	orrs	r3, r2
 8001542:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8001546:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001552:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 8001556:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800155a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800155e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	ea80 0c02 	eor.w	ip, r0, r2
 800156a:	f8c7 c450 	str.w	ip, [r7, #1104]	; 0x450
 800156e:	404b      	eors	r3, r1
 8001570:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001574:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8001580:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 8001584:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8001588:	035a      	lsls	r2, r3, #13
 800158a:	e001      	b.n	8001590 <KeccakF1600_StatePermute+0xbfc>
 800158c:	08005b48 	.word	0x08005b48
 8001590:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8001594:	0cdb      	lsrs	r3, r3, #19
 8001596:	4313      	orrs	r3, r2
 8001598:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800159c:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80015a0:	035a      	lsls	r2, r3, #13
 80015a2:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80015a6:	0cdb      	lsrs	r3, r3, #19
 80015a8:	4313      	orrs	r3, r2
 80015aa:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 80015ae:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80015ba:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 80015be:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 80015c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c6:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	ea80 0c02 	eor.w	ip, r0, r2
 80015d2:	f8c7 c440 	str.w	ip, [r7, #1088]	; 0x440
 80015d6:	404b      	eors	r3, r1
 80015d8:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 80015dc:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 80015e8:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 80015ec:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 80015f0:	075a      	lsls	r2, r3, #29
 80015f2:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80015fe:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8001602:	075a      	lsls	r2, r3, #29
 8001604:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	4313      	orrs	r3, r2
 800160c:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8001610:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800161c:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 8001620:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	43d1      	mvns	r1, r2
 800162a:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 800162e:	43db      	mvns	r3, r3
 8001630:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 8001634:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8001640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001644:	4684      	mov	ip, r0
 8001646:	ea0c 0c02 	and.w	ip, ip, r2
 800164a:	f8c7 c898 	str.w	ip, [r7, #2200]	; 0x898
 800164e:	400b      	ands	r3, r1
 8001650:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 8001654:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f607 0198 	addw	r1, r7, #2200	; 0x898
 8001660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001664:	4684      	mov	ip, r0
 8001666:	ea82 0c0c 	eor.w	ip, r2, ip
 800166a:	f8c7 c430 	str.w	ip, [r7, #1072]	; 0x430
 800166e:	404b      	eors	r3, r1
 8001670:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8001674:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8001680:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 8001684:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	43d1      	mvns	r1, r2
 800168e:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 8001692:	43db      	mvns	r3, r3
 8001694:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 8001698:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 80016a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016a8:	4684      	mov	ip, r0
 80016aa:	ea0c 0c02 	and.w	ip, ip, r2
 80016ae:	f8c7 c888 	str.w	ip, [r7, #2184]	; 0x888
 80016b2:	400b      	ands	r3, r1
 80016b4:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 80016b8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f607 0188 	addw	r1, r7, #2184	; 0x888
 80016c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016c8:	4684      	mov	ip, r0
 80016ca:	ea82 0c0c 	eor.w	ip, r2, ip
 80016ce:	f8c7 c428 	str.w	ip, [r7, #1064]	; 0x428
 80016d2:	404b      	eors	r3, r1
 80016d4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80016d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 80016e4:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 80016e8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	43d1      	mvns	r1, r2
 80016f2:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 80016f6:	43db      	mvns	r3, r3
 80016f8:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 80016fc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8001708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800170c:	4684      	mov	ip, r0
 800170e:	ea0c 0c02 	and.w	ip, ip, r2
 8001712:	f8c7 c878 	str.w	ip, [r7, #2168]	; 0x878
 8001716:	400b      	ands	r3, r1
 8001718:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 800171c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	f607 0178 	addw	r1, r7, #2168	; 0x878
 8001728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800172c:	4684      	mov	ip, r0
 800172e:	ea82 0c0c 	eor.w	ip, r2, ip
 8001732:	f8c7 c420 	str.w	ip, [r7, #1056]	; 0x420
 8001736:	404b      	eors	r3, r1
 8001738:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800173c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8001748:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 800174c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	43d1      	mvns	r1, r2
 8001756:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 800175a:	43db      	mvns	r3, r3
 800175c:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 8001760:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 800176c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001770:	4684      	mov	ip, r0
 8001772:	ea0c 0c02 	and.w	ip, ip, r2
 8001776:	f8c7 c868 	str.w	ip, [r7, #2152]	; 0x868
 800177a:	400b      	ands	r3, r1
 800177c:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8001780:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f607 0168 	addw	r1, r7, #2152	; 0x868
 800178c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001790:	4684      	mov	ip, r0
 8001792:	ea82 0c0c 	eor.w	ip, r2, ip
 8001796:	f8c7 c418 	str.w	ip, [r7, #1048]	; 0x418
 800179a:	404b      	eors	r3, r1
 800179c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 80017a0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 80017ac:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 80017b0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	43d1      	mvns	r1, r2
 80017ba:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 80017be:	43db      	mvns	r3, r3
 80017c0:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 80017c4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 80017d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017d4:	4684      	mov	ip, r0
 80017d6:	ea0c 0c02 	and.w	ip, ip, r2
 80017da:	f8c7 c858 	str.w	ip, [r7, #2136]	; 0x858
 80017de:	400b      	ands	r3, r1
 80017e0:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 80017e4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f607 0158 	addw	r1, r7, #2136	; 0x858
 80017f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017f4:	4684      	mov	ip, r0
 80017f6:	ea82 0c0c 	eor.w	ip, r2, ip
 80017fa:	f8c7 c410 	str.w	ip, [r7, #1040]	; 0x410
 80017fe:	404b      	eors	r3, r1
 8001800:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001804:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8001810:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 8001814:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8001818:	e9d3 0100 	ldrd	r0, r1, [r3]
 800181c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	ea80 0c02 	eor.w	ip, r0, r2
 8001828:	f8c7 c408 	str.w	ip, [r7, #1032]	; 0x408
 800182c:	404b      	eors	r3, r1
 800182e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001832:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800183e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 8001842:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 8001846:	0fda      	lsrs	r2, r3, #31
 8001848:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4313      	orrs	r3, r2
 8001850:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8001854:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 8001858:	0fda      	lsrs	r2, r3, #31
 800185a:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4313      	orrs	r3, r2
 8001862:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8001866:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001872:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 8001876:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800187a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800187e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	ea80 0c02 	eor.w	ip, r0, r2
 800188a:	f8c7 c3f8 	str.w	ip, [r7, #1016]	; 0x3f8
 800188e:	404b      	eors	r3, r1
 8001890:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8001894:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8001898:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800189c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 80018a0:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 80018a4:	0e9a      	lsrs	r2, r3, #26
 80018a6:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 80018aa:	019b      	lsls	r3, r3, #6
 80018ac:	4313      	orrs	r3, r2
 80018ae:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80018b2:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 80018b6:	0e9a      	lsrs	r2, r3, #26
 80018b8:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 80018bc:	019b      	lsls	r3, r3, #6
 80018be:	4313      	orrs	r3, r2
 80018c0:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 80018c4:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 80018c8:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 80018d0:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80018d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	ea80 0c02 	eor.w	ip, r0, r2
 80018e4:	f8c7 c3e8 	str.w	ip, [r7, #1000]	; 0x3e8
 80018e8:	404b      	eors	r3, r1
 80018ea:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80018ee:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 80018f2:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 80018f6:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 80018fa:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 80018fe:	09da      	lsrs	r2, r3, #7
 8001900:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8001904:	065b      	lsls	r3, r3, #25
 8001906:	4313      	orrs	r3, r2
 8001908:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800190c:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8001910:	09da      	lsrs	r2, r3, #7
 8001912:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8001916:	065b      	lsls	r3, r3, #25
 8001918:	4313      	orrs	r3, r2
 800191a:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800191e:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8001922:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001926:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 800192a:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800192e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001932:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	ea80 0c02 	eor.w	ip, r0, r2
 800193e:	f8c7 c3d8 	str.w	ip, [r7, #984]	; 0x3d8
 8001942:	404b      	eors	r3, r1
 8001944:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8001948:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800194c:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8001950:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 8001954:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 8001958:	0e1a      	lsrs	r2, r3, #24
 800195a:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	4313      	orrs	r3, r2
 8001962:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8001966:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800196a:	0e1a      	lsrs	r2, r3, #24
 800196c:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	4313      	orrs	r3, r2
 8001974:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8001978:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800197c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8001980:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 8001984:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8001988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800198c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	ea80 0c02 	eor.w	ip, r0, r2
 8001998:	f8c7 c3c8 	str.w	ip, [r7, #968]	; 0x3c8
 800199c:	404b      	eors	r3, r1
 800199e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80019a2:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 80019a6:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 80019aa:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 80019ae:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 80019b2:	0b9a      	lsrs	r2, r3, #14
 80019b4:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 80019b8:	049b      	lsls	r3, r3, #18
 80019ba:	4313      	orrs	r3, r2
 80019bc:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 80019c0:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 80019c4:	0b9a      	lsrs	r2, r3, #14
 80019c6:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 80019ca:	049b      	lsls	r3, r3, #18
 80019cc:	4313      	orrs	r3, r2
 80019ce:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 80019d2:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 80019d6:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80019da:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 80019de:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	43d1      	mvns	r1, r2
 80019e8:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 80019ec:	43db      	mvns	r3, r3
 80019ee:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 80019f2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 80019fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a02:	4684      	mov	ip, r0
 8001a04:	ea0c 0c02 	and.w	ip, ip, r2
 8001a08:	f8c7 c848 	str.w	ip, [r7, #2120]	; 0x848
 8001a0c:	400b      	ands	r3, r1
 8001a0e:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8001a12:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f607 0148 	addw	r1, r7, #2120	; 0x848
 8001a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a22:	4684      	mov	ip, r0
 8001a24:	ea82 0c0c 	eor.w	ip, r2, ip
 8001a28:	f8c7 c3b8 	str.w	ip, [r7, #952]	; 0x3b8
 8001a2c:	404b      	eors	r3, r1
 8001a2e:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8001a32:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8001a36:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8001a3a:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 8001a3e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	43d1      	mvns	r1, r2
 8001a48:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8001a52:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f507 6104 	add.w	r1, r7, #2112	; 0x840
 8001a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a62:	4684      	mov	ip, r0
 8001a64:	ea0c 0c02 	and.w	ip, ip, r2
 8001a68:	f8c7 c838 	str.w	ip, [r7, #2104]	; 0x838
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8001a72:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f607 0138 	addw	r1, r7, #2104	; 0x838
 8001a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a82:	4684      	mov	ip, r0
 8001a84:	ea82 0c0c 	eor.w	ip, r2, ip
 8001a88:	f8c7 c3b0 	str.w	ip, [r7, #944]	; 0x3b0
 8001a8c:	404b      	eors	r3, r1
 8001a8e:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8001a92:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 8001a96:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 8001a9a:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 8001a9e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	43d1      	mvns	r1, r2
 8001aa8:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 8001aac:	43db      	mvns	r3, r3
 8001aae:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8001ab2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f507 6103 	add.w	r1, r7, #2096	; 0x830
 8001abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ac2:	4684      	mov	ip, r0
 8001ac4:	ea0c 0c02 	and.w	ip, ip, r2
 8001ac8:	f8c7 c828 	str.w	ip, [r7, #2088]	; 0x828
 8001acc:	400b      	ands	r3, r1
 8001ace:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8001ad2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f607 0128 	addw	r1, r7, #2088	; 0x828
 8001ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ae2:	4684      	mov	ip, r0
 8001ae4:	ea82 0c0c 	eor.w	ip, r2, ip
 8001ae8:	f8c7 c3a8 	str.w	ip, [r7, #936]	; 0x3a8
 8001aec:	404b      	eors	r3, r1
 8001aee:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8001af2:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 8001af6:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 8001afa:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 8001afe:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	43d1      	mvns	r1, r2
 8001b08:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8001b12:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8001b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b22:	4684      	mov	ip, r0
 8001b24:	ea0c 0c02 	and.w	ip, ip, r2
 8001b28:	f8c7 c818 	str.w	ip, [r7, #2072]	; 0x818
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8001b32:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8001b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b42:	4684      	mov	ip, r0
 8001b44:	ea82 0c0c 	eor.w	ip, r2, ip
 8001b48:	f8c7 c3a0 	str.w	ip, [r7, #928]	; 0x3a0
 8001b4c:	404b      	eors	r3, r1
 8001b4e:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8001b52:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 8001b56:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8001b5a:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 8001b5e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	43d1      	mvns	r1, r2
 8001b68:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8001b72:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8001b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b82:	4684      	mov	ip, r0
 8001b84:	ea0c 0c02 	and.w	ip, ip, r2
 8001b88:	f8c7 c808 	str.w	ip, [r7, #2056]	; 0x808
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8001b92:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8001b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ba2:	4684      	mov	ip, r0
 8001ba4:	ea82 0c0c 	eor.w	ip, r2, ip
 8001ba8:	f8c7 c398 	str.w	ip, [r7, #920]	; 0x398
 8001bac:	404b      	eors	r3, r1
 8001bae:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8001bb2:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 8001bb6:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8001bba:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 8001bbe:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8001bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc6:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	ea80 0c02 	eor.w	ip, r0, r2
 8001bd2:	f8c7 c390 	str.w	ip, [r7, #912]	; 0x390
 8001bd6:	404b      	eors	r3, r1
 8001bd8:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8001bdc:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 8001be0:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8001be4:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 8001be8:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 8001bec:	095a      	lsrs	r2, r3, #5
 8001bee:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 8001bf2:	06db      	lsls	r3, r3, #27
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8001bfa:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 8001bfe:	095a      	lsrs	r2, r3, #5
 8001c00:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 8001c04:	06db      	lsls	r3, r3, #27
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8001c0c:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8001c10:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001c14:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 8001c18:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c20:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	ea80 0c02 	eor.w	ip, r0, r2
 8001c2c:	f8c7 c380 	str.w	ip, [r7, #896]	; 0x380
 8001c30:	404b      	eors	r3, r1
 8001c32:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8001c36:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8001c3a:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8001c3e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 8001c42:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8001c46:	011a      	lsls	r2, r3, #4
 8001c48:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8001c4c:	0f1b      	lsrs	r3, r3, #28
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8001c54:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8001c58:	011a      	lsls	r2, r3, #4
 8001c5a:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8001c5e:	0f1b      	lsrs	r3, r3, #28
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8001c66:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8001c6a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8001c6e:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 8001c72:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c7a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	ea80 0c02 	eor.w	ip, r0, r2
 8001c86:	f8c7 c370 	str.w	ip, [r7, #880]	; 0x370
 8001c8a:	404b      	eors	r3, r1
 8001c8c:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8001c90:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8001c94:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8001c98:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 8001c9c:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8001ca0:	0d9a      	lsrs	r2, r3, #22
 8001ca2:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8001ca6:	029b      	lsls	r3, r3, #10
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001cae:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8001cb2:	0d9a      	lsrs	r2, r3, #22
 8001cb4:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8001cb8:	029b      	lsls	r3, r3, #10
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8001cc0:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8001cc4:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001cc8:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 8001ccc:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8001cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd4:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	ea80 0c02 	eor.w	ip, r0, r2
 8001ce0:	f8c7 c360 	str.w	ip, [r7, #864]	; 0x360
 8001ce4:	404b      	eors	r3, r1
 8001ce6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8001cea:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8001cee:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8001cf2:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 8001cf6:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8001cfa:	0c5a      	lsrs	r2, r3, #17
 8001cfc:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8001d00:	03db      	lsls	r3, r3, #15
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8001d08:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8001d0c:	0c5a      	lsrs	r2, r3, #17
 8001d0e:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8001d12:	03db      	lsls	r3, r3, #15
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8001d1a:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8001d1e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8001d22:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 8001d26:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001d2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d2e:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	ea80 0c02 	eor.w	ip, r0, r2
 8001d3a:	f8c7 c350 	str.w	ip, [r7, #848]	; 0x350
 8001d3e:	404b      	eors	r3, r1
 8001d40:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001d44:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8001d48:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8001d4c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 8001d50:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8001d54:	061a      	lsls	r2, r3, #24
 8001d56:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8001d62:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8001d66:	061a      	lsls	r2, r3, #24
 8001d68:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001d74:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8001d78:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8001d7c:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 8001d80:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	43d1      	mvns	r1, r2
 8001d8a:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8001d94:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 8001da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001da4:	4684      	mov	ip, r0
 8001da6:	ea0c 0c02 	and.w	ip, ip, r2
 8001daa:	f8c7 c7f8 	str.w	ip, [r7, #2040]	; 0x7f8
 8001dae:	400b      	ands	r3, r1
 8001db0:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8001db4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	f507 61ff 	add.w	r1, r7, #2040	; 0x7f8
 8001dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dc4:	4684      	mov	ip, r0
 8001dc6:	ea82 0c0c 	eor.w	ip, r2, ip
 8001dca:	f8c7 c340 	str.w	ip, [r7, #832]	; 0x340
 8001dce:	404b      	eors	r3, r1
 8001dd0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8001dd4:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8001dd8:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8001ddc:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 8001de0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	43d1      	mvns	r1, r2
 8001dea:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 8001dee:	43db      	mvns	r3, r3
 8001df0:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8001df4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8001e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e04:	4684      	mov	ip, r0
 8001e06:	ea0c 0c02 	and.w	ip, ip, r2
 8001e0a:	f8c7 c7e8 	str.w	ip, [r7, #2024]	; 0x7e8
 8001e0e:	400b      	ands	r3, r1
 8001e10:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8001e14:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f507 61fd 	add.w	r1, r7, #2024	; 0x7e8
 8001e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e24:	4684      	mov	ip, r0
 8001e26:	ea82 0c0c 	eor.w	ip, r2, ip
 8001e2a:	f8c7 c338 	str.w	ip, [r7, #824]	; 0x338
 8001e2e:	404b      	eors	r3, r1
 8001e30:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8001e34:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8001e38:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8001e3c:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 8001e40:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	43d1      	mvns	r1, r2
 8001e4a:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 8001e54:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f507 61fc 	add.w	r1, r7, #2016	; 0x7e0
 8001e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e64:	4684      	mov	ip, r0
 8001e66:	ea0c 0c02 	and.w	ip, ip, r2
 8001e6a:	f8c7 c7d8 	str.w	ip, [r7, #2008]	; 0x7d8
 8001e6e:	400b      	ands	r3, r1
 8001e70:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8001e74:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8001e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e84:	4684      	mov	ip, r0
 8001e86:	ea82 0c0c 	eor.w	ip, r2, ip
 8001e8a:	f8c7 c330 	str.w	ip, [r7, #816]	; 0x330
 8001e8e:	404b      	eors	r3, r1
 8001e90:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001e94:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8001e98:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8001e9c:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 8001ea0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	43d1      	mvns	r1, r2
 8001eaa:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8001eb4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f507 61fa 	add.w	r1, r7, #2000	; 0x7d0
 8001ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ec4:	4684      	mov	ip, r0
 8001ec6:	ea0c 0c02 	and.w	ip, ip, r2
 8001eca:	f8c7 c7c8 	str.w	ip, [r7, #1992]	; 0x7c8
 8001ece:	400b      	ands	r3, r1
 8001ed0:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 8001ed4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 8001ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ee4:	4684      	mov	ip, r0
 8001ee6:	ea82 0c0c 	eor.w	ip, r2, ip
 8001eea:	f8c7 c328 	str.w	ip, [r7, #808]	; 0x328
 8001eee:	404b      	eors	r3, r1
 8001ef0:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8001ef4:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8001ef8:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8001efc:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 8001f00:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	43d1      	mvns	r1, r2
 8001f0a:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 8001f14:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f507 61f8 	add.w	r1, r7, #1984	; 0x7c0
 8001f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f24:	4684      	mov	ip, r0
 8001f26:	ea0c 0c02 	and.w	ip, ip, r2
 8001f2a:	f8c7 c7b8 	str.w	ip, [r7, #1976]	; 0x7b8
 8001f2e:	400b      	ands	r3, r1
 8001f30:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 8001f34:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8001f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f44:	4684      	mov	ip, r0
 8001f46:	ea82 0c0c 	eor.w	ip, r2, ip
 8001f4a:	f8c7 c320 	str.w	ip, [r7, #800]	; 0x320
 8001f4e:	404b      	eors	r3, r1
 8001f50:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8001f54:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8001f58:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8001f5c:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 8001f60:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8001f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f68:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	ea80 0c02 	eor.w	ip, r0, r2
 8001f74:	f8c7 c318 	str.w	ip, [r7, #792]	; 0x318
 8001f78:	404b      	eors	r3, r1
 8001f7a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8001f7e:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8001f82:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8001f86:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 8001f8a:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8001f8e:	079a      	lsls	r2, r3, #30
 8001f90:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8001f9c:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8001fa0:	079a      	lsls	r2, r3, #30
 8001fa2:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8001fae:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8001fb2:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001fb6:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 8001fba:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8001fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fc2:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	ea80 0c02 	eor.w	ip, r0, r2
 8001fce:	f8c7 c308 	str.w	ip, [r7, #776]	; 0x308
 8001fd2:	404b      	eors	r3, r1
 8001fd4:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8001fd8:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8001fdc:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8001fe0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 8001fe4:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8001fe8:	05da      	lsls	r2, r3, #23
 8001fea:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8001fee:	0a5b      	lsrs	r3, r3, #9
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8001ff6:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8001ffa:	05da      	lsls	r2, r3, #23
 8001ffc:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8002000:	0a5b      	lsrs	r3, r3, #9
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8002008:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800200c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002010:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 8002014:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800201c:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	ea80 0c02 	eor.w	ip, r0, r2
 8002028:	f8c7 c2f8 	str.w	ip, [r7, #760]	; 0x2f8
 800202c:	404b      	eors	r3, r1
 800202e:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8002032:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8002036:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800203a:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 800203e:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8002042:	01da      	lsls	r2, r3, #7
 8002044:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8002048:	0e5b      	lsrs	r3, r3, #25
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8002050:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8002054:	01da      	lsls	r2, r3, #7
 8002056:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800205a:	0e5b      	lsrs	r3, r3, #25
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8002062:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8002066:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800206a:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 800206e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002076:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	ea80 0c02 	eor.w	ip, r0, r2
 8002082:	f8c7 c2e8 	str.w	ip, [r7, #744]	; 0x2e8
 8002086:	404b      	eors	r3, r1
 8002088:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800208c:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8002090:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8002094:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 8002098:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800209c:	025a      	lsls	r2, r3, #9
 800209e:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 80020a2:	0ddb      	lsrs	r3, r3, #23
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80020aa:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 80020ae:	025a      	lsls	r2, r3, #9
 80020b0:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80020b4:	0ddb      	lsrs	r3, r3, #23
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80020bc:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 80020c0:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80020c4:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 80020c8:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80020cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020d0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80020d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d8:	ea80 0c02 	eor.w	ip, r0, r2
 80020dc:	f8c7 c2d8 	str.w	ip, [r7, #728]	; 0x2d8
 80020e0:	404b      	eors	r3, r1
 80020e2:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 80020e6:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80020ea:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 80020ee:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 80020f2:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 80020f6:	0f9a      	lsrs	r2, r3, #30
 80020f8:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8002104:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8002108:	0f9a      	lsrs	r2, r3, #30
 800210a:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8002116:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800211a:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800211e:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 8002122:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	43d1      	mvns	r1, r2
 800212c:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 8002130:	43db      	mvns	r3, r3
 8002132:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8002136:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 8002142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002146:	4684      	mov	ip, r0
 8002148:	ea0c 0c02 	and.w	ip, ip, r2
 800214c:	f8c7 c7a8 	str.w	ip, [r7, #1960]	; 0x7a8
 8002150:	400b      	ands	r3, r1
 8002152:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 8002156:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 8002162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002166:	4684      	mov	ip, r0
 8002168:	ea82 0c0c 	eor.w	ip, r2, ip
 800216c:	f8c7 c2c8 	str.w	ip, [r7, #712]	; 0x2c8
 8002170:	404b      	eors	r3, r1
 8002172:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8002176:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800217a:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 800217e:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 8002182:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	43d1      	mvns	r1, r2
 800218c:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 8002190:	43db      	mvns	r3, r3
 8002192:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 8002196:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 80021a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021a6:	4684      	mov	ip, r0
 80021a8:	ea0c 0c02 	and.w	ip, ip, r2
 80021ac:	f8c7 c798 	str.w	ip, [r7, #1944]	; 0x798
 80021b0:	400b      	ands	r3, r1
 80021b2:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 80021b6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 80021c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021c6:	4684      	mov	ip, r0
 80021c8:	ea82 0c0c 	eor.w	ip, r2, ip
 80021cc:	f8c7 c2c0 	str.w	ip, [r7, #704]	; 0x2c0
 80021d0:	404b      	eors	r3, r1
 80021d2:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80021d6:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 80021da:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 80021de:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 80021e2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80021e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ea:	43d1      	mvns	r1, r2
 80021ec:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 80021f0:	43db      	mvns	r3, r3
 80021f2:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 80021f6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 8002202:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002206:	4684      	mov	ip, r0
 8002208:	ea0c 0c02 	and.w	ip, ip, r2
 800220c:	f8c7 c788 	str.w	ip, [r7, #1928]	; 0x788
 8002210:	400b      	ands	r3, r1
 8002212:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 8002216:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 8002222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002226:	4684      	mov	ip, r0
 8002228:	ea82 0c0c 	eor.w	ip, r2, ip
 800222c:	f8c7 c2b8 	str.w	ip, [r7, #696]	; 0x2b8
 8002230:	404b      	eors	r3, r1
 8002232:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8002236:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800223a:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 800223e:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 8002242:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	43d1      	mvns	r1, r2
 800224c:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 8002250:	43db      	mvns	r3, r3
 8002252:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 8002256:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8002262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002266:	4684      	mov	ip, r0
 8002268:	ea0c 0c02 	and.w	ip, ip, r2
 800226c:	f8c7 c778 	str.w	ip, [r7, #1912]	; 0x778
 8002270:	400b      	ands	r3, r1
 8002272:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 8002276:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227e:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 8002282:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002286:	4684      	mov	ip, r0
 8002288:	ea82 0c0c 	eor.w	ip, r2, ip
 800228c:	f8c7 c2b0 	str.w	ip, [r7, #688]	; 0x2b0
 8002290:	404b      	eors	r3, r1
 8002292:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8002296:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800229a:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800229e:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 80022a2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	43d1      	mvns	r1, r2
 80022ac:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 80022b0:	43db      	mvns	r3, r3
 80022b2:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 80022b6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 80022c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022c6:	4684      	mov	ip, r0
 80022c8:	ea0c 0c02 	and.w	ip, ip, r2
 80022cc:	f8c7 c768 	str.w	ip, [r7, #1896]	; 0x768
 80022d0:	400b      	ands	r3, r1
 80022d2:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 80022d6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 80022e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022e6:	4684      	mov	ip, r0
 80022e8:	ea82 0c0c 	eor.w	ip, r2, ip
 80022ec:	f8c7 c2a8 	str.w	ip, [r7, #680]	; 0x2a8
 80022f0:	404b      	eors	r3, r1
 80022f2:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80022f6:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80022fa:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 80022fe:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8002302:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002306:	e9d3 0100 	ldrd	r0, r1, [r3]
 800230a:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	ea80 0c02 	eor.w	ip, r0, r2
 8002316:	f8c7 c760 	str.w	ip, [r7, #1888]	; 0x760
 800231a:	404b      	eors	r3, r1
 800231c:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 8002320:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 800232c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002330:	4684      	mov	ip, r0
 8002332:	ea8c 0c02 	eor.w	ip, ip, r2
 8002336:	f8c7 c758 	str.w	ip, [r7, #1880]	; 0x758
 800233a:	404b      	eors	r3, r1
 800233c:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 8002340:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800234c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002350:	4684      	mov	ip, r0
 8002352:	ea8c 0c02 	eor.w	ip, ip, r2
 8002356:	f8c7 c750 	str.w	ip, [r7, #1872]	; 0x750
 800235a:	404b      	eors	r3, r1
 800235c:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 8002360:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 800236c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002370:	4684      	mov	ip, r0
 8002372:	ea82 0c0c 	eor.w	ip, r2, ip
 8002376:	f8c7 c2a0 	str.w	ip, [r7, #672]	; 0x2a0
 800237a:	404b      	eors	r3, r1
 800237c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8002380:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8002384:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8002388:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 800238c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8002390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002394:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	ea80 0c02 	eor.w	ip, r0, r2
 80023a0:	f8c7 c748 	str.w	ip, [r7, #1864]	; 0x748
 80023a4:	404b      	eors	r3, r1
 80023a6:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 80023aa:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 80023b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023ba:	4684      	mov	ip, r0
 80023bc:	ea8c 0c02 	eor.w	ip, ip, r2
 80023c0:	f8c7 c740 	str.w	ip, [r7, #1856]	; 0x740
 80023c4:	404b      	eors	r3, r1
 80023c6:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 80023ca:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 80023d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023da:	4684      	mov	ip, r0
 80023dc:	ea8c 0c02 	eor.w	ip, ip, r2
 80023e0:	f8c7 c738 	str.w	ip, [r7, #1848]	; 0x738
 80023e4:	404b      	eors	r3, r1
 80023e6:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 80023ea:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 80023f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023fa:	4684      	mov	ip, r0
 80023fc:	ea82 0c0c 	eor.w	ip, r2, ip
 8002400:	f8c7 c298 	str.w	ip, [r7, #664]	; 0x298
 8002404:	404b      	eors	r3, r1
 8002406:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800240a:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800240e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002412:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8002416:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800241a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800241e:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	ea80 0c02 	eor.w	ip, r0, r2
 800242a:	f8c7 c730 	str.w	ip, [r7, #1840]	; 0x730
 800242e:	404b      	eors	r3, r1
 8002430:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 8002434:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8002440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002444:	4684      	mov	ip, r0
 8002446:	ea8c 0c02 	eor.w	ip, ip, r2
 800244a:	f8c7 c728 	str.w	ip, [r7, #1832]	; 0x728
 800244e:	404b      	eors	r3, r1
 8002450:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 8002454:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 8002460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002464:	4684      	mov	ip, r0
 8002466:	ea8c 0c02 	eor.w	ip, ip, r2
 800246a:	f8c7 c720 	str.w	ip, [r7, #1824]	; 0x720
 800246e:	404b      	eors	r3, r1
 8002470:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8002474:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8002480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002484:	4684      	mov	ip, r0
 8002486:	ea82 0c0c 	eor.w	ip, r2, ip
 800248a:	f8c7 c290 	str.w	ip, [r7, #656]	; 0x290
 800248e:	404b      	eors	r3, r1
 8002490:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002494:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8002498:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800249c:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 80024a0:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 80024a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a8:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	ea80 0c02 	eor.w	ip, r0, r2
 80024b4:	f8c7 c718 	str.w	ip, [r7, #1816]	; 0x718
 80024b8:	404b      	eors	r3, r1
 80024ba:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 80024be:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 80024ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024ce:	4684      	mov	ip, r0
 80024d0:	ea8c 0c02 	eor.w	ip, ip, r2
 80024d4:	f8c7 c710 	str.w	ip, [r7, #1808]	; 0x710
 80024d8:	404b      	eors	r3, r1
 80024da:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80024de:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 80024ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024ee:	4684      	mov	ip, r0
 80024f0:	ea8c 0c02 	eor.w	ip, ip, r2
 80024f4:	f8c7 c708 	str.w	ip, [r7, #1800]	; 0x708
 80024f8:	404b      	eors	r3, r1
 80024fa:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 80024fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8002502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002506:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 800250a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800250e:	4684      	mov	ip, r0
 8002510:	ea82 0c0c 	eor.w	ip, r2, ip
 8002514:	f8c7 c288 	str.w	ip, [r7, #648]	; 0x288
 8002518:	404b      	eors	r3, r1
 800251a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800251e:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8002522:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002526:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 800252a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800252e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002532:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	ea80 0c02 	eor.w	ip, r0, r2
 800253e:	f8c7 c700 	str.w	ip, [r7, #1792]	; 0x700
 8002542:	404b      	eors	r3, r1
 8002544:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8002548:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 8002554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002558:	4684      	mov	ip, r0
 800255a:	ea8c 0c02 	eor.w	ip, ip, r2
 800255e:	f8c7 c6f8 	str.w	ip, [r7, #1784]	; 0x6f8
 8002562:	404b      	eors	r3, r1
 8002564:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 8002568:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 8002574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002578:	4684      	mov	ip, r0
 800257a:	ea8c 0c02 	eor.w	ip, ip, r2
 800257e:	f8c7 c6f0 	str.w	ip, [r7, #1776]	; 0x6f0
 8002582:	404b      	eors	r3, r1
 8002584:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 8002588:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8002594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002598:	4684      	mov	ip, r0
 800259a:	ea82 0c0c 	eor.w	ip, r2, ip
 800259e:	f8c7 c280 	str.w	ip, [r7, #640]	; 0x280
 80025a2:	404b      	eors	r3, r1
 80025a4:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80025a8:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80025ac:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80025b0:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 80025b4:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 80025b8:	0fda      	lsrs	r2, r3, #31
 80025ba:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 80025c6:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 80025ca:	0fda      	lsrs	r2, r3, #31
 80025cc:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 80025d8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 80025e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025e8:	4684      	mov	ip, r0
 80025ea:	ea82 0c0c 	eor.w	ip, r2, ip
 80025ee:	f8c7 c278 	str.w	ip, [r7, #632]	; 0x278
 80025f2:	404b      	eors	r3, r1
 80025f4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80025f8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80025fc:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 8002600:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8002604:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8002608:	0fda      	lsrs	r2, r3, #31
 800260a:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 8002616:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800261a:	0fda      	lsrs	r2, r3, #31
 800261c:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8002628:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8002634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002638:	4684      	mov	ip, r0
 800263a:	ea82 0c0c 	eor.w	ip, r2, ip
 800263e:	f8c7 c270 	str.w	ip, [r7, #624]	; 0x270
 8002642:	404b      	eors	r3, r1
 8002644:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8002648:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800264c:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8002650:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8002654:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8002658:	0fda      	lsrs	r2, r3, #31
 800265a:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 8002666:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800266a:	0fda      	lsrs	r2, r3, #31
 800266c:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 8002678:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8002684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002688:	4684      	mov	ip, r0
 800268a:	ea82 0c0c 	eor.w	ip, r2, ip
 800268e:	f8c7 c268 	str.w	ip, [r7, #616]	; 0x268
 8002692:	404b      	eors	r3, r1
 8002694:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8002698:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800269c:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 80026a0:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 80026a4:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 80026a8:	0fda      	lsrs	r2, r3, #31
 80026aa:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 80026b6:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 80026ba:	0fda      	lsrs	r2, r3, #31
 80026bc:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 80026c8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 80026d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026d8:	4684      	mov	ip, r0
 80026da:	ea82 0c0c 	eor.w	ip, r2, ip
 80026de:	f8c7 c260 	str.w	ip, [r7, #608]	; 0x260
 80026e2:	404b      	eors	r3, r1
 80026e4:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80026e8:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 80026ec:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 80026f0:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 80026f4:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80026f8:	0fda      	lsrs	r2, r3, #31
 80026fa:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 8002706:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800270a:	0fda      	lsrs	r2, r3, #31
 800270c:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 8002718:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 8002724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002728:	4684      	mov	ip, r0
 800272a:	ea82 0c0c 	eor.w	ip, r2, ip
 800272e:	f8c7 c258 	str.w	ip, [r7, #600]	; 0x258
 8002732:	404b      	eors	r3, r1
 8002734:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8002738:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800273c:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8002740:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 8002744:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800274c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	ea80 0c02 	eor.w	ip, r0, r2
 8002758:	f8c7 c250 	str.w	ip, [r7, #592]	; 0x250
 800275c:	404b      	eors	r3, r1
 800275e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8002762:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8002766:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800276a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 800276e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800277a:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 800277e:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8002782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002786:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	ea80 0c02 	eor.w	ip, r0, r2
 8002792:	f8c7 c248 	str.w	ip, [r7, #584]	; 0x248
 8002796:	404b      	eors	r3, r1
 8002798:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800279c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80027a0:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 80027a4:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 80027a8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80027ac:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 80027b0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80027b4:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 80027b8:	6803      	ldr	r3, [r0, #0]
 80027ba:	031a      	lsls	r2, r3, #12
 80027bc:	680b      	ldr	r3, [r1, #0]
 80027be:	0d1b      	lsrs	r3, r3, #20
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80027c6:	680b      	ldr	r3, [r1, #0]
 80027c8:	031a      	lsls	r2, r3, #12
 80027ca:	6803      	ldr	r3, [r0, #0]
 80027cc:	0d1b      	lsrs	r3, r3, #20
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80027d4:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80027d8:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80027dc:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 80027e0:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80027e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027e8:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80027ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f0:	ea80 0c02 	eor.w	ip, r0, r2
 80027f4:	f8c7 c238 	str.w	ip, [r7, #568]	; 0x238
 80027f8:	404b      	eors	r3, r1
 80027fa:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80027fe:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8002802:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 8002806:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 800280a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800280e:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 8002812:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002816:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 800281a:	6803      	ldr	r3, [r0, #0]
 800281c:	02da      	lsls	r2, r3, #11
 800281e:	680b      	ldr	r3, [r1, #0]
 8002820:	0d5b      	lsrs	r3, r3, #21
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8002828:	680b      	ldr	r3, [r1, #0]
 800282a:	02da      	lsls	r2, r3, #11
 800282c:	6803      	ldr	r3, [r0, #0]
 800282e:	0d5b      	lsrs	r3, r3, #21
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8002836:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800283a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800283e:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 8002842:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8002846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800284a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	ea80 0c02 	eor.w	ip, r0, r2
 8002856:	f8c7 c228 	str.w	ip, [r7, #552]	; 0x228
 800285a:	404b      	eors	r3, r1
 800285c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8002860:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8002864:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8002868:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 800286c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002870:	f5a3 70dc 	sub.w	r0, r3, #440	; 0x1b8
 8002874:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002878:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 800287c:	6803      	ldr	r3, [r0, #0]
 800287e:	0ada      	lsrs	r2, r3, #11
 8002880:	680b      	ldr	r3, [r1, #0]
 8002882:	055b      	lsls	r3, r3, #21
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800288a:	680b      	ldr	r3, [r1, #0]
 800288c:	0ada      	lsrs	r2, r3, #11
 800288e:	6803      	ldr	r3, [r0, #0]
 8002890:	055b      	lsls	r3, r3, #21
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8002898:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 800289c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80028a0:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 80028a4:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80028a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ac:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	ea80 0c02 	eor.w	ip, r0, r2
 80028b8:	f8c7 c218 	str.w	ip, [r7, #536]	; 0x218
 80028bc:	404b      	eors	r3, r1
 80028be:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80028c2:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 80028c6:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 80028ca:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 80028ce:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80028d2:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 80028d6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80028da:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 80028de:	6803      	ldr	r3, [r0, #0]
 80028e0:	0c9a      	lsrs	r2, r3, #18
 80028e2:	680b      	ldr	r3, [r1, #0]
 80028e4:	039b      	lsls	r3, r3, #14
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80028ec:	680b      	ldr	r3, [r1, #0]
 80028ee:	0c9a      	lsrs	r2, r3, #18
 80028f0:	6803      	ldr	r3, [r0, #0]
 80028f2:	039b      	lsls	r3, r3, #14
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80028fa:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 80028fe:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002902:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 8002906:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	43d1      	mvns	r1, r2
 8002910:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 8002914:	43db      	mvns	r3, r3
 8002916:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 800291a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 8002926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800292a:	4684      	mov	ip, r0
 800292c:	ea0c 0c02 	and.w	ip, ip, r2
 8002930:	f8c7 c6b8 	str.w	ip, [r7, #1720]	; 0x6b8
 8002934:	400b      	ands	r3, r1
 8002936:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 800293a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8002946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800294a:	4684      	mov	ip, r0
 800294c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002950:	f8c7 c208 	str.w	ip, [r7, #520]	; 0x208
 8002954:	404b      	eors	r3, r1
 8002956:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800295a:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 800295e:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8002962:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8002966:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800296a:	3301      	adds	r3, #1
 800296c:	4ac1      	ldr	r2, [pc, #772]	; (8002c74 <KeccakF1600_StatePermute+0x22e0>)
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002976:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	ea82 0c00 	eor.w	ip, r2, r0
 8002982:	f8c7 c200 	str.w	ip, [r7, #512]	; 0x200
 8002986:	404b      	eors	r3, r1
 8002988:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800298c:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8002990:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8002994:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 8002998:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	43d1      	mvns	r1, r2
 80029a2:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 80029a6:	43db      	mvns	r3, r3
 80029a8:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 80029ac:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80029b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029bc:	4684      	mov	ip, r0
 80029be:	ea0c 0c02 	and.w	ip, ip, r2
 80029c2:	f8c7 c6a8 	str.w	ip, [r7, #1704]	; 0x6a8
 80029c6:	400b      	ands	r3, r1
 80029c8:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 80029cc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 80029d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029dc:	4684      	mov	ip, r0
 80029de:	ea82 0c0c 	eor.w	ip, r2, ip
 80029e2:	f8c7 c1f8 	str.w	ip, [r7, #504]	; 0x1f8
 80029e6:	404b      	eors	r3, r1
 80029e8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80029ec:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 80029f0:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80029f4:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 80029f8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	43d1      	mvns	r1, r2
 8002a02:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 8002a06:	43db      	mvns	r3, r3
 8002a08:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 8002a0c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8002a18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a1c:	4684      	mov	ip, r0
 8002a1e:	ea0c 0c02 	and.w	ip, ip, r2
 8002a22:	f8c7 c698 	str.w	ip, [r7, #1688]	; 0x698
 8002a26:	400b      	ands	r3, r1
 8002a28:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 8002a2c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8002a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a3c:	4684      	mov	ip, r0
 8002a3e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002a42:	f8c7 c1f0 	str.w	ip, [r7, #496]	; 0x1f0
 8002a46:	404b      	eors	r3, r1
 8002a48:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8002a4c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8002a50:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8002a54:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 8002a58:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	43d1      	mvns	r1, r2
 8002a62:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 8002a66:	43db      	mvns	r3, r3
 8002a68:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 8002a6c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 8002a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a7c:	4684      	mov	ip, r0
 8002a7e:	ea0c 0c02 	and.w	ip, ip, r2
 8002a82:	f8c7 c688 	str.w	ip, [r7, #1672]	; 0x688
 8002a86:	400b      	ands	r3, r1
 8002a88:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 8002a8c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8002a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a9c:	4684      	mov	ip, r0
 8002a9e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002aa2:	f8c7 c1e8 	str.w	ip, [r7, #488]	; 0x1e8
 8002aa6:	404b      	eors	r3, r1
 8002aa8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8002aac:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8002ab0:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8002ab4:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 8002ab8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	43d1      	mvns	r1, r2
 8002ac2:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8002acc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 8002ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002adc:	4684      	mov	ip, r0
 8002ade:	ea0c 0c02 	and.w	ip, ip, r2
 8002ae2:	f8c7 c678 	str.w	ip, [r7, #1656]	; 0x678
 8002ae6:	400b      	ands	r3, r1
 8002ae8:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8002aec:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8002af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002afc:	4684      	mov	ip, r0
 8002afe:	ea82 0c0c 	eor.w	ip, r2, ip
 8002b02:	f8c7 c1e0 	str.w	ip, [r7, #480]	; 0x1e0
 8002b06:	404b      	eors	r3, r1
 8002b08:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b0c:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8002b10:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8002b14:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 8002b18:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b20:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	ea80 0c02 	eor.w	ip, r0, r2
 8002b2c:	f8c7 c1d8 	str.w	ip, [r7, #472]	; 0x1d8
 8002b30:	404b      	eors	r3, r1
 8002b32:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b36:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8002b3a:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8002b3e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 8002b42:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002b46:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 8002b4a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002b4e:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8002b52:	6803      	ldr	r3, [r0, #0]
 8002b54:	091a      	lsrs	r2, r3, #4
 8002b56:	680b      	ldr	r3, [r1, #0]
 8002b58:	071b      	lsls	r3, r3, #28
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8002b60:	680b      	ldr	r3, [r1, #0]
 8002b62:	091a      	lsrs	r2, r3, #4
 8002b64:	6803      	ldr	r3, [r0, #0]
 8002b66:	071b      	lsls	r3, r3, #28
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002b6e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8002b72:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8002b76:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 8002b7a:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8002b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b82:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	ea80 0c02 	eor.w	ip, r0, r2
 8002b8e:	f8c7 c1c8 	str.w	ip, [r7, #456]	; 0x1c8
 8002b92:	404b      	eors	r3, r1
 8002b94:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8002b98:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8002b9c:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8002ba0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 8002ba4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002ba8:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 8002bac:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002bb0:	f5a3 71b6 	sub.w	r1, r3, #364	; 0x16c
 8002bb4:	6803      	ldr	r3, [r0, #0]
 8002bb6:	0b1a      	lsrs	r2, r3, #12
 8002bb8:	680b      	ldr	r3, [r1, #0]
 8002bba:	051b      	lsls	r3, r3, #20
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bc2:	680b      	ldr	r3, [r1, #0]
 8002bc4:	0b1a      	lsrs	r2, r3, #12
 8002bc6:	6803      	ldr	r3, [r0, #0]
 8002bc8:	051b      	lsls	r3, r3, #20
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bd0:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8002bd4:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002bd8:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8002bdc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8002be0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002be4:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8002be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bec:	ea80 0c02 	eor.w	ip, r0, r2
 8002bf0:	f8c7 c1b8 	str.w	ip, [r7, #440]	; 0x1b8
 8002bf4:	404b      	eors	r3, r1
 8002bf6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bfa:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8002bfe:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8002c02:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8002c06:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002c0a:	f5a3 70bc 	sub.w	r0, r3, #376	; 0x178
 8002c0e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002c12:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 8002c16:	6803      	ldr	r3, [r0, #0]
 8002c18:	0f5a      	lsrs	r2, r3, #29
 8002c1a:	680b      	ldr	r3, [r1, #0]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8002c24:	680b      	ldr	r3, [r1, #0]
 8002c26:	0f5a      	lsrs	r2, r3, #29
 8002c28:	6803      	ldr	r3, [r0, #0]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002c32:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8002c36:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8002c3a:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8002c3e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8002c42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c46:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	ea80 0c02 	eor.w	ip, r0, r2
 8002c52:	f8c7 c1a8 	str.w	ip, [r7, #424]	; 0x1a8
 8002c56:	404b      	eors	r3, r1
 8002c58:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002c5c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8002c60:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8002c64:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 8002c68:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002c6c:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 8002c70:	e002      	b.n	8002c78 <KeccakF1600_StatePermute+0x22e4>
 8002c72:	bf00      	nop
 8002c74:	08005b48 	.word	0x08005b48
 8002c78:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002c7c:	f5a3 71d4 	sub.w	r1, r3, #424	; 0x1a8
 8002c80:	6803      	ldr	r3, [r0, #0]
 8002c82:	035a      	lsls	r2, r3, #13
 8002c84:	680b      	ldr	r3, [r1, #0]
 8002c86:	0cdb      	lsrs	r3, r3, #19
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c8e:	680b      	ldr	r3, [r1, #0]
 8002c90:	035a      	lsls	r2, r3, #13
 8002c92:	6803      	ldr	r3, [r0, #0]
 8002c94:	0cdb      	lsrs	r3, r3, #19
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c9c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002ca0:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002ca4:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8002ca8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8002cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cb0:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	ea80 0c02 	eor.w	ip, r0, r2
 8002cbc:	f8c7 c198 	str.w	ip, [r7, #408]	; 0x198
 8002cc0:	404b      	eors	r3, r1
 8002cc2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002cc6:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8002cca:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8002cce:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8002cd2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002cd6:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8002cda:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002cde:	f5a3 71ec 	sub.w	r1, r3, #472	; 0x1d8
 8002ce2:	6803      	ldr	r3, [r0, #0]
 8002ce4:	075a      	lsls	r2, r3, #29
 8002ce6:	680b      	ldr	r3, [r1, #0]
 8002ce8:	08db      	lsrs	r3, r3, #3
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002cf0:	680b      	ldr	r3, [r1, #0]
 8002cf2:	075a      	lsls	r2, r3, #29
 8002cf4:	6803      	ldr	r3, [r0, #0]
 8002cf6:	08db      	lsrs	r3, r3, #3
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8002cfe:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8002d02:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002d06:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 8002d0a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	43d1      	mvns	r1, r2
 8002d14:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8002d1e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8002d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d2e:	4684      	mov	ip, r0
 8002d30:	ea0c 0c02 	and.w	ip, ip, r2
 8002d34:	f8c7 c668 	str.w	ip, [r7, #1640]	; 0x668
 8002d38:	400b      	ands	r3, r1
 8002d3a:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 8002d3e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8002d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d4e:	4684      	mov	ip, r0
 8002d50:	ea82 0c0c 	eor.w	ip, r2, ip
 8002d54:	f8c7 c188 	str.w	ip, [r7, #392]	; 0x188
 8002d58:	404b      	eors	r3, r1
 8002d5a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002d5e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002d62:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8002d66:	e9c1 2300 	strd	r2, r3, [r1]
            Age =   BCe ^((~BCi)&  BCo );
 8002d6a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d72:	43d1      	mvns	r1, r2
 8002d74:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8002d7e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8002d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d8e:	4684      	mov	ip, r0
 8002d90:	ea0c 0c02 	and.w	ip, ip, r2
 8002d94:	f8c7 c658 	str.w	ip, [r7, #1624]	; 0x658
 8002d98:	400b      	ands	r3, r1
 8002d9a:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8002d9e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8002daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dae:	4684      	mov	ip, r0
 8002db0:	ea82 0c0c 	eor.w	ip, r2, ip
 8002db4:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
 8002db8:	404b      	eors	r3, r1
 8002dba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002dbe:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002dc2:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8002dc6:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8002dca:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	43d1      	mvns	r1, r2
 8002dd4:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8002dde:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8002dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dee:	4684      	mov	ip, r0
 8002df0:	ea0c 0c02 	and.w	ip, ip, r2
 8002df4:	f8c7 c648 	str.w	ip, [r7, #1608]	; 0x648
 8002df8:	400b      	ands	r3, r1
 8002dfa:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8002dfe:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8002e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e0e:	4684      	mov	ip, r0
 8002e10:	ea82 0c0c 	eor.w	ip, r2, ip
 8002e14:	f8c7 c178 	str.w	ip, [r7, #376]	; 0x178
 8002e18:	404b      	eors	r3, r1
 8002e1a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e1e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002e22:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8002e26:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8002e2a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	43d1      	mvns	r1, r2
 8002e34:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8002e3e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8002e4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e4e:	4684      	mov	ip, r0
 8002e50:	ea0c 0c02 	and.w	ip, ip, r2
 8002e54:	f8c7 c638 	str.w	ip, [r7, #1592]	; 0x638
 8002e58:	400b      	ands	r3, r1
 8002e5a:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8002e5e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 8002e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e6e:	4684      	mov	ip, r0
 8002e70:	ea82 0c0c 	eor.w	ip, r2, ip
 8002e74:	f8c7 c170 	str.w	ip, [r7, #368]	; 0x170
 8002e78:	404b      	eors	r3, r1
 8002e7a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002e7e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002e82:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8002e86:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8002e8a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	43d1      	mvns	r1, r2
 8002e94:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8002e9e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8002eaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002eae:	4684      	mov	ip, r0
 8002eb0:	ea0c 0c02 	and.w	ip, ip, r2
 8002eb4:	f8c7 c628 	str.w	ip, [r7, #1576]	; 0x628
 8002eb8:	400b      	ands	r3, r1
 8002eba:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8002ebe:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8002eca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ece:	4684      	mov	ip, r0
 8002ed0:	ea82 0c0c 	eor.w	ip, r2, ip
 8002ed4:	f8c7 c168 	str.w	ip, [r7, #360]	; 0x168
 8002ed8:	404b      	eors	r3, r1
 8002eda:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002ede:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8002ee2:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8002ee6:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8002eea:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8002eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ef2:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	ea80 0c02 	eor.w	ip, r0, r2
 8002efe:	f8c7 c160 	str.w	ip, [r7, #352]	; 0x160
 8002f02:	404b      	eors	r3, r1
 8002f04:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002f08:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8002f0c:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8002f10:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8002f14:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f18:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8002f1c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f20:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8002f24:	6803      	ldr	r3, [r0, #0]
 8002f26:	0fda      	lsrs	r2, r3, #31
 8002f28:	680b      	ldr	r3, [r1, #0]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002f32:	680b      	ldr	r3, [r1, #0]
 8002f34:	0fda      	lsrs	r2, r3, #31
 8002f36:	6803      	ldr	r3, [r0, #0]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002f40:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8002f44:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8002f48:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8002f4c:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8002f50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f54:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	ea80 0c02 	eor.w	ip, r0, r2
 8002f60:	f8c7 c150 	str.w	ip, [r7, #336]	; 0x150
 8002f64:	404b      	eors	r3, r1
 8002f66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f6a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8002f6e:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8002f72:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8002f76:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f7a:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8002f7e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f82:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 8002f86:	6803      	ldr	r3, [r0, #0]
 8002f88:	0e9a      	lsrs	r2, r3, #26
 8002f8a:	680b      	ldr	r3, [r1, #0]
 8002f8c:	019b      	lsls	r3, r3, #6
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f94:	680b      	ldr	r3, [r1, #0]
 8002f96:	0e9a      	lsrs	r2, r3, #26
 8002f98:	6803      	ldr	r3, [r0, #0]
 8002f9a:	019b      	lsls	r3, r3, #6
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002fa2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8002fa6:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002faa:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8002fae:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8002fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fb6:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8002fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbe:	ea80 0c02 	eor.w	ip, r0, r2
 8002fc2:	f8c7 c140 	str.w	ip, [r7, #320]	; 0x140
 8002fc6:	404b      	eors	r3, r1
 8002fc8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002fcc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002fd0:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8002fd4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8002fd8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002fdc:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8002fe0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002fe4:	f5a3 71c6 	sub.w	r1, r3, #396	; 0x18c
 8002fe8:	6803      	ldr	r3, [r0, #0]
 8002fea:	09da      	lsrs	r2, r3, #7
 8002fec:	680b      	ldr	r3, [r1, #0]
 8002fee:	065b      	lsls	r3, r3, #25
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002ff6:	680b      	ldr	r3, [r1, #0]
 8002ff8:	09da      	lsrs	r2, r3, #7
 8002ffa:	6803      	ldr	r3, [r0, #0]
 8002ffc:	065b      	lsls	r3, r3, #25
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003004:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8003008:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800300c:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8003010:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8003014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003018:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	ea80 0c02 	eor.w	ip, r0, r2
 8003024:	f8c7 c130 	str.w	ip, [r7, #304]	; 0x130
 8003028:	404b      	eors	r3, r1
 800302a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800302e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8003032:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8003036:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 800303a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800303e:	f5a3 70e0 	sub.w	r0, r3, #448	; 0x1c0
 8003042:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003046:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 800304a:	6803      	ldr	r3, [r0, #0]
 800304c:	0e1a      	lsrs	r2, r3, #24
 800304e:	680b      	ldr	r3, [r1, #0]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003058:	680b      	ldr	r3, [r1, #0]
 800305a:	0e1a      	lsrs	r2, r3, #24
 800305c:	6803      	ldr	r3, [r0, #0]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003066:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800306a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800306e:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8003072:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8003076:	e9d3 0100 	ldrd	r0, r1, [r3]
 800307a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	ea80 0c02 	eor.w	ip, r0, r2
 8003086:	f8c7 c120 	str.w	ip, [r7, #288]	; 0x120
 800308a:	404b      	eors	r3, r1
 800308c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003090:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003094:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8003098:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 800309c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80030a0:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 80030a4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80030a8:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 80030ac:	6803      	ldr	r3, [r0, #0]
 80030ae:	0b9a      	lsrs	r2, r3, #14
 80030b0:	680b      	ldr	r3, [r1, #0]
 80030b2:	049b      	lsls	r3, r3, #18
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80030ba:	680b      	ldr	r3, [r1, #0]
 80030bc:	0b9a      	lsrs	r2, r3, #14
 80030be:	6803      	ldr	r3, [r0, #0]
 80030c0:	049b      	lsls	r3, r3, #18
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80030c8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80030cc:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80030d0:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 80030d4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	43d1      	mvns	r1, r2
 80030de:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 80030e2:	43db      	mvns	r3, r3
 80030e4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 80030e8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 80030f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030f8:	4684      	mov	ip, r0
 80030fa:	ea0c 0c02 	and.w	ip, ip, r2
 80030fe:	f8c7 c618 	str.w	ip, [r7, #1560]	; 0x618
 8003102:	400b      	ands	r3, r1
 8003104:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8003108:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 8003114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003118:	4684      	mov	ip, r0
 800311a:	ea82 0c0c 	eor.w	ip, r2, ip
 800311e:	f8c7 c110 	str.w	ip, [r7, #272]	; 0x110
 8003122:	404b      	eors	r3, r1
 8003124:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003128:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800312c:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8003130:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 8003134:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	43d1      	mvns	r1, r2
 800313e:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 8003142:	43db      	mvns	r3, r3
 8003144:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8003148:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8003154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003158:	4684      	mov	ip, r0
 800315a:	ea0c 0c02 	and.w	ip, ip, r2
 800315e:	f8c7 c608 	str.w	ip, [r7, #1544]	; 0x608
 8003162:	400b      	ands	r3, r1
 8003164:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8003168:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 8003174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003178:	4684      	mov	ip, r0
 800317a:	ea82 0c0c 	eor.w	ip, r2, ip
 800317e:	f8c7 c108 	str.w	ip, [r7, #264]	; 0x108
 8003182:	404b      	eors	r3, r1
 8003184:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003188:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800318c:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8003190:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 8003194:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	43d1      	mvns	r1, r2
 800319e:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 80031a2:	43db      	mvns	r3, r3
 80031a4:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 80031a8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 80031b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031b8:	4684      	mov	ip, r0
 80031ba:	ea0c 0c02 	and.w	ip, ip, r2
 80031be:	f8c7 c5f8 	str.w	ip, [r7, #1528]	; 0x5f8
 80031c2:	400b      	ands	r3, r1
 80031c4:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 80031c8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 80031d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031d8:	4684      	mov	ip, r0
 80031da:	ea82 0c0c 	eor.w	ip, r2, ip
 80031de:	f8c7 c100 	str.w	ip, [r7, #256]	; 0x100
 80031e2:	404b      	eors	r3, r1
 80031e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031e8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80031ec:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 80031f0:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 80031f4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	43d1      	mvns	r1, r2
 80031fe:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 8003202:	43db      	mvns	r3, r3
 8003204:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8003208:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8003214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003218:	4684      	mov	ip, r0
 800321a:	ea0c 0c02 	and.w	ip, ip, r2
 800321e:	f8c7 c5e8 	str.w	ip, [r7, #1512]	; 0x5e8
 8003222:	400b      	ands	r3, r1
 8003224:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 8003228:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8003234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003238:	4684      	mov	ip, r0
 800323a:	ea82 0c0c 	eor.w	ip, r2, ip
 800323e:	f8c7 c0f8 	str.w	ip, [r7, #248]	; 0xf8
 8003242:	404b      	eors	r3, r1
 8003244:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003248:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800324c:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8003250:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 8003254:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	43d1      	mvns	r1, r2
 800325e:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 8003262:	43db      	mvns	r3, r3
 8003264:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 8003268:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 8003274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003278:	4684      	mov	ip, r0
 800327a:	ea0c 0c02 	and.w	ip, ip, r2
 800327e:	f8c7 c5d8 	str.w	ip, [r7, #1496]	; 0x5d8
 8003282:	400b      	ands	r3, r1
 8003284:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 8003288:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 8003294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003298:	4684      	mov	ip, r0
 800329a:	ea82 0c0c 	eor.w	ip, r2, ip
 800329e:	f8c7 c0f0 	str.w	ip, [r7, #240]	; 0xf0
 80032a2:	404b      	eors	r3, r1
 80032a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80032a8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80032ac:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 80032b0:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 80032b4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80032b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032bc:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	ea80 0c02 	eor.w	ip, r0, r2
 80032c8:	f8c7 c0e8 	str.w	ip, [r7, #232]	; 0xe8
 80032cc:	404b      	eors	r3, r1
 80032ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80032d2:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80032d6:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 80032da:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 80032de:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80032e2:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 80032e6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80032ea:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 80032ee:	6803      	ldr	r3, [r0, #0]
 80032f0:	095a      	lsrs	r2, r3, #5
 80032f2:	680b      	ldr	r3, [r1, #0]
 80032f4:	06db      	lsls	r3, r3, #27
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032fc:	680b      	ldr	r3, [r1, #0]
 80032fe:	095a      	lsrs	r2, r3, #5
 8003300:	6803      	ldr	r3, [r0, #0]
 8003302:	06db      	lsls	r3, r3, #27
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800330a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800330e:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8003312:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 8003316:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 800331a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800331e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	ea80 0c02 	eor.w	ip, r0, r2
 800332a:	f8c7 c0d8 	str.w	ip, [r7, #216]	; 0xd8
 800332e:	404b      	eors	r3, r1
 8003330:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003334:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8003338:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800333c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 8003340:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003344:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8003348:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800334c:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8003350:	6803      	ldr	r3, [r0, #0]
 8003352:	011a      	lsls	r2, r3, #4
 8003354:	680b      	ldr	r3, [r1, #0]
 8003356:	0f1b      	lsrs	r3, r3, #28
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800335e:	680b      	ldr	r3, [r1, #0]
 8003360:	011a      	lsls	r2, r3, #4
 8003362:	6803      	ldr	r3, [r0, #0]
 8003364:	0f1b      	lsrs	r3, r3, #28
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800336c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003370:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003374:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 8003378:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800337c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003380:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	ea80 0c02 	eor.w	ip, r0, r2
 800338c:	f8c7 c0c8 	str.w	ip, [r7, #200]	; 0xc8
 8003390:	404b      	eors	r3, r1
 8003392:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003396:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800339a:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800339e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 80033a2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80033a6:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 80033aa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80033ae:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 80033b2:	6803      	ldr	r3, [r0, #0]
 80033b4:	0d9a      	lsrs	r2, r3, #22
 80033b6:	680b      	ldr	r3, [r1, #0]
 80033b8:	029b      	lsls	r3, r3, #10
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033c0:	680b      	ldr	r3, [r1, #0]
 80033c2:	0d9a      	lsrs	r2, r3, #22
 80033c4:	6803      	ldr	r3, [r0, #0]
 80033c6:	029b      	lsls	r3, r3, #10
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ce:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80033d2:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80033d6:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 80033da:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 80033de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033e2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	ea80 0c02 	eor.w	ip, r0, r2
 80033ee:	f8c7 c0b8 	str.w	ip, [r7, #184]	; 0xb8
 80033f2:	404b      	eors	r3, r1
 80033f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80033f8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80033fc:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8003400:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 8003404:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003408:	f5a3 70d8 	sub.w	r0, r3, #432	; 0x1b0
 800340c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003410:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8003414:	6803      	ldr	r3, [r0, #0]
 8003416:	0c5a      	lsrs	r2, r3, #17
 8003418:	680b      	ldr	r3, [r1, #0]
 800341a:	03db      	lsls	r3, r3, #15
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003422:	680b      	ldr	r3, [r1, #0]
 8003424:	0c5a      	lsrs	r2, r3, #17
 8003426:	6803      	ldr	r3, [r0, #0]
 8003428:	03db      	lsls	r3, r3, #15
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003430:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003434:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8003438:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 800343c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8003440:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003444:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	ea80 0c02 	eor.w	ip, r0, r2
 8003450:	f8c7 c0a8 	str.w	ip, [r7, #168]	; 0xa8
 8003454:	404b      	eors	r3, r1
 8003456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800345a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800345e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8003462:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 8003466:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800346a:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 800346e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003472:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 8003476:	6803      	ldr	r3, [r0, #0]
 8003478:	061a      	lsls	r2, r3, #24
 800347a:	680b      	ldr	r3, [r1, #0]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003484:	680b      	ldr	r3, [r1, #0]
 8003486:	061a      	lsls	r2, r3, #24
 8003488:	6803      	ldr	r3, [r0, #0]
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003492:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003496:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800349a:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 800349e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	43d1      	mvns	r1, r2
 80034a8:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 80034ac:	43db      	mvns	r3, r3
 80034ae:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80034b2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 80034be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034c2:	4684      	mov	ip, r0
 80034c4:	ea0c 0c02 	and.w	ip, ip, r2
 80034c8:	f8c7 c5c8 	str.w	ip, [r7, #1480]	; 0x5c8
 80034cc:	400b      	ands	r3, r1
 80034ce:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 80034d2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 80034de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034e2:	4684      	mov	ip, r0
 80034e4:	ea82 0c0c 	eor.w	ip, r2, ip
 80034e8:	f8c7 c098 	str.w	ip, [r7, #152]	; 0x98
 80034ec:	404b      	eors	r3, r1
 80034ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034f2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80034f6:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 80034fa:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 80034fe:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	43d1      	mvns	r1, r2
 8003508:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 800350c:	43db      	mvns	r3, r3
 800350e:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8003512:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 800351e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003522:	4684      	mov	ip, r0
 8003524:	ea0c 0c02 	and.w	ip, ip, r2
 8003528:	f8c7 c5b8 	str.w	ip, [r7, #1464]	; 0x5b8
 800352c:	400b      	ands	r3, r1
 800352e:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8003532:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 800353e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003542:	4684      	mov	ip, r0
 8003544:	ea82 0c0c 	eor.w	ip, r2, ip
 8003548:	f8c7 c090 	str.w	ip, [r7, #144]	; 0x90
 800354c:	404b      	eors	r3, r1
 800354e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003552:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003556:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800355a:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 800355e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003566:	43d1      	mvns	r1, r2
 8003568:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800356c:	43db      	mvns	r3, r3
 800356e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8003572:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 800357e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003582:	4684      	mov	ip, r0
 8003584:	ea0c 0c02 	and.w	ip, ip, r2
 8003588:	f8c7 c5a8 	str.w	ip, [r7, #1448]	; 0x5a8
 800358c:	400b      	ands	r3, r1
 800358e:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8003592:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 800359e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035a2:	4684      	mov	ip, r0
 80035a4:	ea82 0c0c 	eor.w	ip, r2, ip
 80035a8:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
 80035ac:	404b      	eors	r3, r1
 80035ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80035b2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80035b6:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 80035ba:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 80035be:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	43d1      	mvns	r1, r2
 80035c8:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 80035cc:	43db      	mvns	r3, r3
 80035ce:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80035d2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 80035de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035e2:	4684      	mov	ip, r0
 80035e4:	ea0c 0c02 	and.w	ip, ip, r2
 80035e8:	f8c7 c598 	str.w	ip, [r7, #1432]	; 0x598
 80035ec:	400b      	ands	r3, r1
 80035ee:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80035f2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80035fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003602:	4684      	mov	ip, r0
 8003604:	ea82 0c0c 	eor.w	ip, r2, ip
 8003608:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800360c:	404b      	eors	r3, r1
 800360e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003612:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003616:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800361a:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 800361e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	43d1      	mvns	r1, r2
 8003628:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 800362c:	43db      	mvns	r3, r3
 800362e:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8003632:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 800363e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003642:	4684      	mov	ip, r0
 8003644:	ea0c 0c02 	and.w	ip, ip, r2
 8003648:	f8c7 c588 	str.w	ip, [r7, #1416]	; 0x588
 800364c:	400b      	ands	r3, r1
 800364e:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8003652:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 800365e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003662:	4684      	mov	ip, r0
 8003664:	ea82 0c0c 	eor.w	ip, r2, ip
 8003668:	f8c7 c078 	str.w	ip, [r7, #120]	; 0x78
 800366c:	404b      	eors	r3, r1
 800366e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003670:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003674:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8003678:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 800367c:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003684:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	ea80 0c02 	eor.w	ip, r0, r2
 8003690:	f8c7 c070 	str.w	ip, [r7, #112]	; 0x70
 8003694:	404b      	eors	r3, r1
 8003696:	677b      	str	r3, [r7, #116]	; 0x74
 8003698:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800369c:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 80036a0:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 80036a4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80036a8:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80036ac:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80036b0:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 80036b4:	6803      	ldr	r3, [r0, #0]
 80036b6:	079a      	lsls	r2, r3, #30
 80036b8:	680b      	ldr	r3, [r1, #0]
 80036ba:	089b      	lsrs	r3, r3, #2
 80036bc:	4313      	orrs	r3, r2
 80036be:	66bb      	str	r3, [r7, #104]	; 0x68
 80036c0:	680b      	ldr	r3, [r1, #0]
 80036c2:	079a      	lsls	r2, r3, #30
 80036c4:	6803      	ldr	r3, [r0, #0]
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	4313      	orrs	r3, r2
 80036ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036cc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80036d0:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80036d4:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 80036d8:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80036dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036e0:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	ea80 0c02 	eor.w	ip, r0, r2
 80036ec:	f8c7 c060 	str.w	ip, [r7, #96]	; 0x60
 80036f0:	404b      	eors	r3, r1
 80036f2:	667b      	str	r3, [r7, #100]	; 0x64
 80036f4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80036f8:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 80036fc:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 8003700:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003704:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 8003708:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800370c:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 8003710:	6803      	ldr	r3, [r0, #0]
 8003712:	05da      	lsls	r2, r3, #23
 8003714:	680b      	ldr	r3, [r1, #0]
 8003716:	0a5b      	lsrs	r3, r3, #9
 8003718:	4313      	orrs	r3, r2
 800371a:	65bb      	str	r3, [r7, #88]	; 0x58
 800371c:	680b      	ldr	r3, [r1, #0]
 800371e:	05da      	lsls	r2, r3, #23
 8003720:	6803      	ldr	r3, [r0, #0]
 8003722:	0a5b      	lsrs	r3, r3, #9
 8003724:	4313      	orrs	r3, r2
 8003726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003728:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800372c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003730:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 8003734:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8003738:	e9d3 0100 	ldrd	r0, r1, [r3]
 800373c:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	ea80 0c02 	eor.w	ip, r0, r2
 8003748:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800374c:	404b      	eors	r3, r1
 800374e:	657b      	str	r3, [r7, #84]	; 0x54
 8003750:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003754:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8003758:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 800375c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003760:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 8003764:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003768:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 800376c:	6803      	ldr	r3, [r0, #0]
 800376e:	01da      	lsls	r2, r3, #7
 8003770:	680b      	ldr	r3, [r1, #0]
 8003772:	0e5b      	lsrs	r3, r3, #25
 8003774:	4313      	orrs	r3, r2
 8003776:	64bb      	str	r3, [r7, #72]	; 0x48
 8003778:	680b      	ldr	r3, [r1, #0]
 800377a:	01da      	lsls	r2, r3, #7
 800377c:	6803      	ldr	r3, [r0, #0]
 800377e:	0e5b      	lsrs	r3, r3, #25
 8003780:	4313      	orrs	r3, r2
 8003782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003784:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003788:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800378c:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 8003790:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8003794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003798:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	ea80 0c02 	eor.w	ip, r0, r2
 80037a4:	f8c7 c040 	str.w	ip, [r7, #64]	; 0x40
 80037a8:	404b      	eors	r3, r1
 80037aa:	647b      	str	r3, [r7, #68]	; 0x44
 80037ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037b0:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 80037b4:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 80037b8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80037bc:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80037c0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80037c4:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 80037c8:	6803      	ldr	r3, [r0, #0]
 80037ca:	025a      	lsls	r2, r3, #9
 80037cc:	680b      	ldr	r3, [r1, #0]
 80037ce:	0ddb      	lsrs	r3, r3, #23
 80037d0:	4313      	orrs	r3, r2
 80037d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037d4:	680b      	ldr	r3, [r1, #0]
 80037d6:	025a      	lsls	r2, r3, #9
 80037d8:	6803      	ldr	r3, [r0, #0]
 80037da:	0ddb      	lsrs	r3, r3, #23
 80037dc:	4313      	orrs	r3, r2
 80037de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037e4:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80037e8:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 80037ec:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80037f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037f4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	ea80 0c02 	eor.w	ip, r0, r2
 8003800:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 8003804:	404b      	eors	r3, r1
 8003806:	637b      	str	r3, [r7, #52]	; 0x34
 8003808:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800380c:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8003810:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 8003814:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003818:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 800381c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003820:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 8003824:	6803      	ldr	r3, [r0, #0]
 8003826:	0f9a      	lsrs	r2, r3, #30
 8003828:	680b      	ldr	r3, [r1, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4313      	orrs	r3, r2
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003830:	680b      	ldr	r3, [r1, #0]
 8003832:	0f9a      	lsrs	r2, r3, #30
 8003834:	6803      	ldr	r3, [r0, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4313      	orrs	r3, r2
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
 800383c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003840:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8003844:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 8003848:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	43d1      	mvns	r1, r2
 8003852:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 8003856:	43db      	mvns	r3, r3
 8003858:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800385c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8003868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800386c:	4684      	mov	ip, r0
 800386e:	ea0c 0c02 	and.w	ip, ip, r2
 8003872:	f8c7 c578 	str.w	ip, [r7, #1400]	; 0x578
 8003876:	400b      	ands	r3, r1
 8003878:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800387c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8003888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800388c:	4684      	mov	ip, r0
 800388e:	ea82 0c0c 	eor.w	ip, r2, ip
 8003892:	f8c7 c020 	str.w	ip, [r7, #32]
 8003896:	404b      	eors	r3, r1
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800389e:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 80038a2:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 80038a6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	43d1      	mvns	r1, r2
 80038b0:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 80038b4:	43db      	mvns	r3, r3
 80038b6:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 80038ba:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 80038c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038ca:	4684      	mov	ip, r0
 80038cc:	ea0c 0c02 	and.w	ip, ip, r2
 80038d0:	f8c7 c568 	str.w	ip, [r7, #1384]	; 0x568
 80038d4:	400b      	ands	r3, r1
 80038d6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80038da:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 80038e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038ea:	4684      	mov	ip, r0
 80038ec:	ea82 0c0c 	eor.w	ip, r2, ip
 80038f0:	f8c7 c018 	str.w	ip, [r7, #24]
 80038f4:	404b      	eors	r3, r1
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038fc:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8003900:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 8003904:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	43d1      	mvns	r1, r2
 800390e:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8003912:	43db      	mvns	r3, r3
 8003914:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8003918:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8003924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003928:	4684      	mov	ip, r0
 800392a:	ea0c 0c02 	and.w	ip, ip, r2
 800392e:	f8c7 c558 	str.w	ip, [r7, #1368]	; 0x558
 8003932:	400b      	ands	r3, r1
 8003934:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8003938:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8003944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003948:	4684      	mov	ip, r0
 800394a:	ea82 0c0c 	eor.w	ip, r2, ip
 800394e:	f8c7 c010 	str.w	ip, [r7, #16]
 8003952:	404b      	eors	r3, r1
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800395a:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800395e:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 8003962:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	43d1      	mvns	r1, r2
 800396c:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 8003970:	43db      	mvns	r3, r3
 8003972:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8003976:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8003982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003986:	4684      	mov	ip, r0
 8003988:	ea0c 0a02 	and.w	sl, ip, r2
 800398c:	ea01 0b03 	and.w	fp, r1, r3
 8003990:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	ea82 010a 	eor.w	r1, r2, sl
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	ea83 030b 	eor.w	r3, r3, fp
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039a8:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 80039ac:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 80039b0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	ea6f 0802 	mvn.w	r8, r2
 80039bc:	ea6f 0903 	mvn.w	r9, r3
 80039c0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	ea08 0402 	and.w	r4, r8, r2
 80039cc:	ea09 0503 	and.w	r5, r9, r3
 80039d0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	ea82 0104 	eor.w	r1, r2, r4
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	406b      	eors	r3, r5
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039e6:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 80039ea:	e9c1 2300 	strd	r2, r3, [r1]
        for( round = 0; round < NROUNDS; round += 2 )
 80039ee:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80039f2:	3302      	adds	r3, #2
 80039f4:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 80039f8:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80039fc:	2b17      	cmp	r3, #23
 80039fe:	f77d a8eb 	ble.w	8000bd8 <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 8003a02:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 8003a18:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a1c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f103 0108 	add.w	r1, r3, #8
 8003a26:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 8003a32:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a36:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f103 0110 	add.w	r1, r3, #16
 8003a40:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 8003a4c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a50:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f103 0118 	add.w	r1, r3, #24
 8003a5a:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 8003a66:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a6a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f103 0120 	add.w	r1, r3, #32
 8003a74:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 8003a80:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a84:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003a8e:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8003a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a96:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 8003a9a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a9e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003aa8:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 8003ab4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ab8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ac2:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 8003ace:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ad2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003adc:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8003ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae4:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 8003ae8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003aec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003af6:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 8003b02:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003b06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8003b10:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b18:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 8003b1c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003b20:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8003b2a:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 8003b36:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003b3a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8003b44:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 8003b50:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003b54:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8003b5e:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 8003b6a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003b6e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8003b78:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b80:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 8003b84:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003b88:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8003b92:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 8003b9e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ba2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8003bac:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8003bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb4:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 8003bb8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003bbc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8003bc6:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bce:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 8003bd2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003bd6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8003be0:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 8003bec:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003bf0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8003bfa:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 8003c06:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003c0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8003c14:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 8003c20:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003c24:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8003c2e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 8003c3a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003c3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8003c48:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 8003c54:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003c58:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8003c62:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8003c6e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003c72:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8003c7c:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003c88:	bf00      	nop
 8003c8a:	f607 378c 	addw	r7, r7, #2956	; 0xb8c
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop

08003c98 <keccak_init>:
* Description: Initializes the Keccak state.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
static void keccak_init(keccak_state *state)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<25;i++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	e00c      	b.n	8003cc0 <keccak_init+0x28>
    state->s[i] = 0;
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	18d1      	adds	r1, r2, r3
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b18      	cmp	r3, #24
 8003cc4:	d9ef      	bls.n	8003ca6 <keccak_init+0xe>
  state->pos = 0;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b08e      	sub	sp, #56	; 0x38
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6278      	str	r0, [r7, #36]	; 0x24
 8003ce2:	6239      	str	r1, [r7, #32]
 8003ce4:	61fa      	str	r2, [r7, #28]
 8003ce6:	61bb      	str	r3, [r7, #24]
  unsigned int i;
  uint8_t t[8] = {0};
 8003ce8:	2300      	movs	r3, #0
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cec:	2300      	movs	r3, #0
 8003cee:	633b      	str	r3, [r7, #48]	; 0x30

  if(pos & 7) {
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03a      	beq.n	8003d70 <keccak_absorb+0x98>
    i = pos & 7;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
    while(i < 8 && mlen > 0) {
 8003d02:	e012      	b.n	8003d2a <keccak_absorb+0x52>
      t[i++] = *m++;
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	1c53      	adds	r3, r2, #1
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0c:	1c59      	adds	r1, r3, #1
 8003d0e:	6379      	str	r1, [r7, #52]	; 0x34
 8003d10:	7812      	ldrb	r2, [r2, #0]
 8003d12:	3320      	adds	r3, #32
 8003d14:	f107 0118 	add.w	r1, r7, #24
 8003d18:	440b      	add	r3, r1
 8003d1a:	f803 2c0c 	strb.w	r2, [r3, #-12]
      mlen--;
 8003d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d20:	3b01      	subs	r3, #1
 8003d22:	65bb      	str	r3, [r7, #88]	; 0x58
      pos++;
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	3301      	adds	r3, #1
 8003d28:	61fb      	str	r3, [r7, #28]
    while(i < 8 && mlen > 0) {
 8003d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2c:	2b07      	cmp	r3, #7
 8003d2e:	d802      	bhi.n	8003d36 <keccak_absorb+0x5e>
 8003d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e6      	bne.n	8003d04 <keccak_absorb+0x2c>
    }
    s[(pos-i)/8] ^= load64(t);
 8003d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fc fdc1 	bl	80008c2 <load64>
 8003d40:	4604      	mov	r4, r0
 8003d42:	460d      	mov	r5, r1
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f023 0307 	bic.w	r3, r3, #7
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	4413      	add	r3, r2
 8003d52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f023 0207 	bic.w	r2, r3, #7
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	4413      	add	r3, r2
 8003d64:	ea84 0800 	eor.w	r8, r4, r0
 8003d68:	ea85 0901 	eor.w	r9, r5, r1
 8003d6c:	e9c3 8900 	strd	r8, r9, [r3]
  }

  if(pos && mlen >= r-pos) {
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d075      	beq.n	8003e62 <keccak_absorb+0x18a>
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d36f      	bcc.n	8003e62 <keccak_absorb+0x18a>
    for(i=0;i<(r-pos)/8;i++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
 8003d86:	e023      	b.n	8003dd0 <keccak_absorb+0xf8>
      s[pos/8+i] ^= load64(m+8*i);
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4413      	add	r3, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fc fd96 	bl	80008c2 <load64>
 8003d96:	4680      	mov	r8, r0
 8003d98:	4689      	mov	r9, r1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	08dc      	lsrs	r4, r3, #3
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	4423      	add	r3, r4
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da6:	4413      	add	r3, r2
 8003da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dae:	4423      	add	r3, r4
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db4:	4413      	add	r3, r2
 8003db6:	ea88 0200 	eor.w	r2, r8, r0
 8003dba:	613a      	str	r2, [r7, #16]
 8003dbc:	ea89 0201 	eor.w	r2, r9, r1
 8003dc0:	617a      	str	r2, [r7, #20]
 8003dc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003dc6:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<(r-pos)/8;i++)
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	3301      	adds	r3, #1
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd0:	6a3a      	ldr	r2, [r7, #32]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	08db      	lsrs	r3, r3, #3
 8003dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d3d4      	bcc.n	8003d88 <keccak_absorb+0xb0>
    m += r-pos;
 8003dde:	6a3a      	ldr	r2, [r7, #32]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4413      	add	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
    mlen -= r-pos;
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003df2:	4413      	add	r3, r2
 8003df4:	65bb      	str	r3, [r7, #88]	; 0x58
    pos = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
    KeccakF1600_StatePermute(s);
 8003dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dfc:	f7fc fdca 	bl	8000994 <KeccakF1600_StatePermute>
  }

  while(mlen >= r) {
 8003e00:	e02f      	b.n	8003e62 <keccak_absorb+0x18a>
    for(i=0;i<r/8;i++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
 8003e06:	e01c      	b.n	8003e42 <keccak_absorb+0x16a>
      s[i] ^= load64(m+8*i);
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4413      	add	r3, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fd56 	bl	80008c2 <load64>
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1c:	4413      	add	r3, r2
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8003e24:	00e4      	lsls	r4, r4, #3
 8003e26:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8003e28:	442c      	add	r4, r5
 8003e2a:	ea80 0502 	eor.w	r5, r0, r2
 8003e2e:	60bd      	str	r5, [r7, #8]
 8003e30:	404b      	eors	r3, r1
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e38:	e9c4 2300 	strd	r2, r3, [r4]
    for(i=0;i<r/8;i++)
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3e:	3301      	adds	r3, #1
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d3dd      	bcc.n	8003e08 <keccak_absorb+0x130>
    m += r;
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	4413      	add	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
    mlen -= r;
 8003e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	65bb      	str	r3, [r7, #88]	; 0x58
    KeccakF1600_StatePermute(s);
 8003e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e5e:	f7fc fd99 	bl	8000994 <KeccakF1600_StatePermute>
  while(mlen >= r) {
 8003e62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d2cb      	bcs.n	8003e02 <keccak_absorb+0x12a>
  }

  for(i=0;i<mlen/8;i++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6e:	e020      	b.n	8003eb2 <keccak_absorb+0x1da>
    s[pos/8+i] ^= load64(m+8*i);
 8003e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4413      	add	r3, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fc fd22 	bl	80008c2 <load64>
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	08dc      	lsrs	r4, r3, #3
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	4423      	add	r3, r4
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	4413      	add	r3, r2
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8003e92:	442c      	add	r4, r5
 8003e94:	00e4      	lsls	r4, r4, #3
 8003e96:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8003e98:	442c      	add	r4, r5
 8003e9a:	ea80 0502 	eor.w	r5, r0, r2
 8003e9e:	603d      	str	r5, [r7, #0]
 8003ea0:	404b      	eors	r3, r1
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ea8:	e9c4 2300 	strd	r2, r3, [r4]
  for(i=0;i<mlen/8;i++)
 8003eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eae:	3301      	adds	r3, #1
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb4:	08db      	lsrs	r3, r3, #3
 8003eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d3d9      	bcc.n	8003e70 <keccak_absorb+0x198>
  m += 8*i;
 8003ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
  mlen -= 8*i;
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	65bb      	str	r3, [r7, #88]	; 0x58
  pos += 8*i;
 8003ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	61fb      	str	r3, [r7, #28]

  if(mlen) {
 8003eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d03d      	beq.n	8003f5c <keccak_absorb+0x284>
    for(i=0;i<8;i++)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee4:	e008      	b.n	8003ef8 <keccak_absorb+0x220>
      t[i] = 0;
 8003ee6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eec:	4413      	add	r3, r2
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
    for(i=0;i<8;i++)
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efa:	2b07      	cmp	r3, #7
 8003efc:	d9f3      	bls.n	8003ee6 <keccak_absorb+0x20e>
    for(i=0;i<mlen;i++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
 8003f02:	e00c      	b.n	8003f1e <keccak_absorb+0x246>
      t[i] = m[i];
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	4413      	add	r3, r2
 8003f0a:	7819      	ldrb	r1, [r3, #0]
 8003f0c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f12:	4413      	add	r3, r2
 8003f14:	460a      	mov	r2, r1
 8003f16:	701a      	strb	r2, [r3, #0]
    for(i=0;i<mlen;i++)
 8003f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d3ee      	bcc.n	8003f04 <keccak_absorb+0x22c>
    s[pos/8] ^= load64(t);
 8003f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc fcc9 	bl	80008c2 <load64>
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f023 0307 	bic.w	r3, r3, #7
 8003f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f38:	4413      	add	r3, r2
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	69fc      	ldr	r4, [r7, #28]
 8003f40:	f024 0407 	bic.w	r4, r4, #7
 8003f44:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8003f46:	442c      	add	r4, r5
 8003f48:	ea80 0a02 	eor.w	sl, r0, r2
 8003f4c:	ea81 0b03 	eor.w	fp, r1, r3
 8003f50:	e9c4 ab00 	strd	sl, fp, [r4]
    pos += mlen;
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f58:	4413      	add	r3, r2
 8003f5a:	61fb      	str	r3, [r7, #28]
  }

  return pos;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3738      	adds	r7, #56	; 0x38
 8003f62:	46bd      	mov	sp, r7
 8003f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f68 <keccak_finalize>:
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: position in current block to be absorbed
*              - uint8_t p:        domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int r, unsigned int pos, uint8_t p)
{
 8003f68:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f6c:	b088      	sub	sp, #32
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6178      	str	r0, [r7, #20]
 8003f72:	6139      	str	r1, [r7, #16]
 8003f74:	60fa      	str	r2, [r7, #12]
 8003f76:	72fb      	strb	r3, [r7, #11]
  unsigned int i,j;

  i = pos >> 3;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	08db      	lsrs	r3, r3, #3
 8003f7c:	61fb      	str	r3, [r7, #28]
  j = pos & 7;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	61bb      	str	r3, [r7, #24]
  s[i] ^= (uint64_t)p << 8*j;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f92:	7afb      	ldrb	r3, [r7, #11]
 8003f94:	2200      	movs	r2, #0
 8003f96:	4698      	mov	r8, r3
 8003f98:	4691      	mov	r9, r2
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	f1a3 0620 	sub.w	r6, r3, #32
 8003fa2:	f1c3 0220 	rsb	r2, r3, #32
 8003fa6:	fa09 f503 	lsl.w	r5, r9, r3
 8003faa:	fa08 f606 	lsl.w	r6, r8, r6
 8003fae:	4335      	orrs	r5, r6
 8003fb0:	fa28 f202 	lsr.w	r2, r8, r2
 8003fb4:	4315      	orrs	r5, r2
 8003fb6:	fa08 f403 	lsl.w	r4, r8, r3
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	ea80 0a04 	eor.w	sl, r0, r4
 8003fc6:	ea81 0b05 	eor.w	fp, r1, r5
 8003fca:	e9c3 ab00 	strd	sl, fp, [r3]
  s[r/8-1] ^= 1ULL << 63;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f023 0307 	bic.w	r3, r3, #7
 8003fd4:	3b08      	subs	r3, #8
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4413      	add	r3, r2
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	6939      	ldr	r1, [r7, #16]
 8003fe0:	f021 0107 	bic.w	r1, r1, #7
 8003fe4:	3908      	subs	r1, #8
 8003fe6:	6978      	ldr	r0, [r7, #20]
 8003fe8:	4401      	add	r1, r0
 8003fea:	603a      	str	r2, [r7, #0]
 8003fec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ff6:	e9c1 3400 	strd	r3, r4, [r1]
}
 8003ffa:	bf00      	nop
 8003ffc:	3720      	adds	r7, #32
 8003ffe:	46bd      	mov	sp, r7
 8004000:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004004:	4770      	bx	lr

08004006 <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b086      	sub	sp, #24
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(nblocks > 0) {
 8004014:	e021      	b.n	800405a <keccak_squeezeblocks+0x54>
    KeccakF1600_StatePermute(s);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fc fcbc 	bl	8000994 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	e00f      	b.n	8004042 <keccak_squeezeblocks+0x3c>
      store64(out + 8*i, s[i]);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	18d1      	adds	r1, r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	4608      	mov	r0, r1
 8004038:	f7fc fc80 	bl	800093c <store64>
    for(i=0;i<r/8;i++)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3301      	adds	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	429a      	cmp	r2, r3
 800404a:	d3ea      	bcc.n	8004022 <keccak_squeezeblocks+0x1c>
    out += r;
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	4413      	add	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
    nblocks--;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	3b01      	subs	r3, #1
 8004058:	60bb      	str	r3, [r7, #8]
  while(nblocks > 0) {
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1da      	bne.n	8004016 <keccak_squeezeblocks+0x10>
  }
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <pqcrystals_fips202_ref_shake256_init>:
*
* Arguments:   - keccak_state *state: pointer to (uninitialized)
*                                     Keccak state
**************************************************/
void shake256_init(keccak_state *state)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  keccak_init(state);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fe10 	bl	8003c98 <keccak_init>
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <pqcrystals_fips202_ref_shake256_absorb>:
*                                     Keccak state
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2188      	movs	r1, #136	; 0x88
 800409c:	f7ff fe1c 	bl	8003cd8 <keccak_absorb>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <pqcrystals_fips202_ref_shake256_finalize>:
* Description: Finalize absorb step of the SHAKE256 XOF.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040c0:	231f      	movs	r3, #31
 80040c2:	2188      	movs	r1, #136	; 0x88
 80040c4:	f7ff ff50 	bl	8003f68 <keccak_finalize>
  state->pos = 0;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <pqcrystals_fips202_ref_shake256_squeezeblocks>:
*              - size_t nblocks:  number of blocks to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	2388      	movs	r3, #136	; 0x88
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff ff8b 	bl	8004006 <keccak_squeezeblocks>
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <pqcrystals_dilithium2_ref_dilithium_shake256_stream_init>:
}

void dilithium_shake256_stream_init(keccak_state *state,
                                    const uint8_t seed[CRHBYTES],
                                    uint16_t nonce)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  uint8_t t[2];
  t[0] = nonce;
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	753b      	strb	r3, [r7, #20]
  t[1] = nonce >> 8;
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	b29b      	uxth	r3, r3
 8004112:	b2db      	uxtb	r3, r3
 8004114:	757b      	strb	r3, [r7, #21]

  shake256_init(state);
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f7ff ffa7 	bl	800406a <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(state, seed, CRHBYTES);
 800411c:	2230      	movs	r2, #48	; 0x30
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7ff ffad 	bl	8004080 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(state, t, 2);
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	2202      	movs	r2, #2
 800412c:	4619      	mov	r1, r3
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff ffa6 	bl	8004080 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(state);
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff ffbb 	bl	80040b0 <pqcrystals_fips202_ref_shake256_finalize>
}
 800413a:	bf00      	nop
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <check_version>:
} ss_cmd;
static ss_cmd commands[MAX_SS_CMDS];
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	460b      	mov	r3, r1
 800414c:	70fb      	strb	r3, [r7, #3]
	return SS_VER;
 800414e:	2301      	movs	r3, #1
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr
 800415a:	0000      	movs	r0, r0

0800415c <ss_num_commands>:

uint8_t ss_num_commands(uint8_t *x, uint8_t len)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
    uint8_t ncmds = num_commands & 0xFF;
 8004168:	4b07      	ldr	r3, [pc, #28]	; (8004188 <ss_num_commands+0x2c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	73fb      	strb	r3, [r7, #15]
    simpleserial_put('r', 0x01, &ncmds);
 8004170:	f107 030f 	add.w	r3, r7, #15
 8004174:	461a      	mov	r2, r3
 8004176:	2101      	movs	r1, #1
 8004178:	2072      	movs	r0, #114	; 0x72
 800417a:	f000 fa51 	bl	8004620 <simpleserial_put>
    return 0x00;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20002b10 	.word	0x20002b10

0800418c <ss_get_commands>:
    uint8_t len;
    uint8_t flags;
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b090      	sub	sp, #64	; 0x40
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	70fb      	strb	r3, [r7, #3]
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8004198:	2300      	movs	r3, #0
 800419a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800419e:	e037      	b.n	8004210 <ss_get_commands+0x84>
        repr_cmd_buf[i].c = commands[i].c;
 80041a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80041a4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80041a8:	4926      	ldr	r1, [pc, #152]	; (8004244 <ss_get_commands+0xb8>)
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	440b      	add	r3, r1
 80041ae:	7819      	ldrb	r1, [r3, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	3340      	adds	r3, #64	; 0x40
 80041b8:	443b      	add	r3, r7
 80041ba:	3b34      	subs	r3, #52	; 0x34
 80041bc:	460a      	mov	r2, r1
 80041be:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].len = commands[i].len;
 80041c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80041c4:	4a1f      	ldr	r2, [pc, #124]	; (8004244 <ss_get_commands+0xb8>)
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	4413      	add	r3, r2
 80041ca:	3304      	adds	r3, #4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80041d2:	b2d9      	uxtb	r1, r3
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	3340      	adds	r3, #64	; 0x40
 80041dc:	443b      	add	r3, r7
 80041de:	3b33      	subs	r3, #51	; 0x33
 80041e0:	460a      	mov	r2, r1
 80041e2:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].flags = commands[i].flags;
 80041e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80041e8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80041ec:	4915      	ldr	r1, [pc, #84]	; (8004244 <ss_get_commands+0xb8>)
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	440b      	add	r3, r1
 80041f2:	330c      	adds	r3, #12
 80041f4:	7819      	ldrb	r1, [r3, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	3340      	adds	r3, #64	; 0x40
 80041fe:	443b      	add	r3, r7
 8004200:	3b32      	subs	r3, #50	; 0x32
 8004202:	460a      	mov	r2, r1
 8004204:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8004206:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800420a:	3301      	adds	r3, #1
 800420c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004210:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004214:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <ss_get_commands+0xbc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	429a      	cmp	r2, r3
 800421c:	dbc0      	blt.n	80041a0 <ss_get_commands+0x14>
    }

    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 800421e:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <ss_get_commands+0xbc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	0052      	lsls	r2, r2, #1
 8004228:	4413      	add	r3, r2
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f107 020c 	add.w	r2, r7, #12
 8004230:	4619      	mov	r1, r3
 8004232:	2072      	movs	r0, #114	; 0x72
 8004234:	f000 f9f4 	bl	8004620 <simpleserial_put>
    return 0x00;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3740      	adds	r7, #64	; 0x40
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20002b14 	.word	0x20002b14
 8004248:	20002b10 	.word	0x20002b10

0800424c <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	e083      	b.n	8004366 <hex_decode+0x11a>
	{
		char n_hi = ascii_buf[2*i];
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4413      	add	r3, r2
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	74fb      	strb	r3, [r7, #19]
		char n_lo = ascii_buf[2*i+1];
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	3301      	adds	r3, #1
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	4413      	add	r3, r2
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	74bb      	strb	r3, [r7, #18]

		if(n_lo >= '0' && n_lo <= '9')
 800427a:	7cbb      	ldrb	r3, [r7, #18]
 800427c:	2b2f      	cmp	r3, #47	; 0x2f
 800427e:	d90a      	bls.n	8004296 <hex_decode+0x4a>
 8004280:	7cbb      	ldrb	r3, [r7, #18]
 8004282:	2b39      	cmp	r3, #57	; 0x39
 8004284:	d807      	bhi.n	8004296 <hex_decode+0x4a>
			data_buf[i] = n_lo - '0';
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	7cba      	ldrb	r2, [r7, #18]
 800428e:	3a30      	subs	r2, #48	; 0x30
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	e01d      	b.n	80042d2 <hex_decode+0x86>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8004296:	7cbb      	ldrb	r3, [r7, #18]
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d90a      	bls.n	80042b2 <hex_decode+0x66>
 800429c:	7cbb      	ldrb	r3, [r7, #18]
 800429e:	2b46      	cmp	r3, #70	; 0x46
 80042a0:	d807      	bhi.n	80042b2 <hex_decode+0x66>
			data_buf[i] = n_lo - 'A' + 10;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	7cba      	ldrb	r2, [r7, #18]
 80042aa:	3a37      	subs	r2, #55	; 0x37
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	e00f      	b.n	80042d2 <hex_decode+0x86>
		else if(n_lo >= 'a' && n_lo <= 'f')
 80042b2:	7cbb      	ldrb	r3, [r7, #18]
 80042b4:	2b60      	cmp	r3, #96	; 0x60
 80042b6:	d90a      	bls.n	80042ce <hex_decode+0x82>
 80042b8:	7cbb      	ldrb	r3, [r7, #18]
 80042ba:	2b66      	cmp	r3, #102	; 0x66
 80042bc:	d807      	bhi.n	80042ce <hex_decode+0x82>
			data_buf[i] = n_lo - 'a' + 10;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	4413      	add	r3, r2
 80042c4:	7cba      	ldrb	r2, [r7, #18]
 80042c6:	3a57      	subs	r2, #87	; 0x57
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	701a      	strb	r2, [r3, #0]
 80042cc:	e001      	b.n	80042d2 <hex_decode+0x86>
		else
			return 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e04f      	b.n	8004372 <hex_decode+0x126>

		if(n_hi >= '0' && n_hi <= '9')
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	2b2f      	cmp	r3, #47	; 0x2f
 80042d6:	d913      	bls.n	8004300 <hex_decode+0xb4>
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	2b39      	cmp	r3, #57	; 0x39
 80042dc:	d810      	bhi.n	8004300 <hex_decode+0xb4>
			data_buf[i] |= (n_hi - '0') << 4;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b25a      	sxtb	r2, r3
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	3b30      	subs	r3, #48	; 0x30
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	b25b      	sxtb	r3, r3
 80042f0:	4313      	orrs	r3, r2
 80042f2:	b259      	sxtb	r1, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	b2ca      	uxtb	r2, r1
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e02f      	b.n	8004360 <hex_decode+0x114>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d913      	bls.n	800432e <hex_decode+0xe2>
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	2b46      	cmp	r3, #70	; 0x46
 800430a:	d810      	bhi.n	800432e <hex_decode+0xe2>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4413      	add	r3, r2
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	b25a      	sxtb	r2, r3
 8004316:	7cfb      	ldrb	r3, [r7, #19]
 8004318:	3b37      	subs	r3, #55	; 0x37
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	b25b      	sxtb	r3, r3
 800431e:	4313      	orrs	r3, r2
 8004320:	b259      	sxtb	r1, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	4413      	add	r3, r2
 8004328:	b2ca      	uxtb	r2, r1
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e018      	b.n	8004360 <hex_decode+0x114>
		else if(n_hi >= 'a' && n_hi <= 'f')
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	2b60      	cmp	r3, #96	; 0x60
 8004332:	d913      	bls.n	800435c <hex_decode+0x110>
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	2b66      	cmp	r3, #102	; 0x66
 8004338:	d810      	bhi.n	800435c <hex_decode+0x110>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4413      	add	r3, r2
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	b25a      	sxtb	r2, r3
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	3b57      	subs	r3, #87	; 0x57
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	b25b      	sxtb	r3, r3
 800434c:	4313      	orrs	r3, r2
 800434e:	b259      	sxtb	r1, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	b2ca      	uxtb	r2, r1
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	e001      	b.n	8004360 <hex_decode+0x114>
		else
			return 1;
 800435c:	2301      	movs	r3, #1
 800435e:	e008      	b.n	8004372 <hex_decode+0x126>
	for(int i = 0; i < len; i++)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3301      	adds	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	429a      	cmp	r2, r3
 800436c:	f6ff af77 	blt.w	800425e <hex_decode+0x12>
	}

	return 0;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <simpleserial_init>:


// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 8004380:	4a08      	ldr	r2, [pc, #32]	; (80043a4 <simpleserial_init+0x28>)
 8004382:	2100      	movs	r1, #0
 8004384:	2076      	movs	r0, #118	; 0x76
 8004386:	f000 f813 	bl	80043b0 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 800438a:	4a07      	ldr	r2, [pc, #28]	; (80043a8 <simpleserial_init+0x2c>)
 800438c:	2100      	movs	r1, #0
 800438e:	2077      	movs	r0, #119	; 0x77
 8004390:	f000 f80e 	bl	80043b0 <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 8004394:	4a05      	ldr	r2, [pc, #20]	; (80043ac <simpleserial_init+0x30>)
 8004396:	2100      	movs	r1, #0
 8004398:	2079      	movs	r0, #121	; 0x79
 800439a:	f000 f809 	bl	80043b0 <simpleserial_addcmd>
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	08004143 	.word	0x08004143
 80043a8:	0800418d 	.word	0x0800418d
 80043ac:	0800415d 	.word	0x0800415d

080043b0 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	73fb      	strb	r3, [r7, #15]
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 80043be:	7bf8      	ldrb	r0, [r7, #15]
 80043c0:	2300      	movs	r3, #0
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	f000 f805 	bl	80043d4 <simpleserial_addcmd_flags>
 80043ca:	4603      	mov	r3, r0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <simpleserial_addcmd_flags>:

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	461a      	mov	r2, r3
 80043e0:	4603      	mov	r3, r0
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	4613      	mov	r3, r2
 80043e6:	73bb      	strb	r3, [r7, #14]
	if(num_commands >= MAX_SS_CMDS)
 80043e8:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <simpleserial_addcmd_flags+0x80>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b0f      	cmp	r3, #15
 80043ee:	dd01      	ble.n	80043f4 <simpleserial_addcmd_flags+0x20>
		return 1;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e029      	b.n	8004448 <simpleserial_addcmd_flags+0x74>

	if(len >= MAX_SS_LEN)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2bff      	cmp	r3, #255	; 0xff
 80043f8:	d901      	bls.n	80043fe <simpleserial_addcmd_flags+0x2a>
		return 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e024      	b.n	8004448 <simpleserial_addcmd_flags+0x74>

	commands[num_commands].c   = c;
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <simpleserial_addcmd_flags+0x80>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a15      	ldr	r2, [pc, #84]	; (8004458 <simpleserial_addcmd_flags+0x84>)
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	4413      	add	r3, r2
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <simpleserial_addcmd_flags+0x80>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a11      	ldr	r2, [pc, #68]	; (8004458 <simpleserial_addcmd_flags+0x84>)
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	4413      	add	r3, r2
 8004416:	3304      	adds	r3, #4
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <simpleserial_addcmd_flags+0x80>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <simpleserial_addcmd_flags+0x84>)
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	4413      	add	r3, r2
 8004426:	3308      	adds	r3, #8
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]
	commands[num_commands].flags = fl;
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <simpleserial_addcmd_flags+0x80>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a09      	ldr	r2, [pc, #36]	; (8004458 <simpleserial_addcmd_flags+0x84>)
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	4413      	add	r3, r2
 8004436:	330c      	adds	r3, #12
 8004438:	7bba      	ldrb	r2, [r7, #14]
 800443a:	701a      	strb	r2, [r3, #0]
	num_commands++;
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <simpleserial_addcmd_flags+0x80>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	4a04      	ldr	r2, [pc, #16]	; (8004454 <simpleserial_addcmd_flags+0x80>)
 8004444:	6013      	str	r3, [r2, #0]

	return 0;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20002b10 	.word	0x20002b10
 8004458:	20002b14 	.word	0x20002b14

0800445c <simpleserial_get>:

void simpleserial_get(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8004462:	af00      	add	r7, sp, #0
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 8004464:	f000 f9f8 	bl	8004858 <getch>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 800446e:	2300      	movs	r3, #0
 8004470:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8004474:	e00e      	b.n	8004494 <simpleserial_get+0x38>
	{
		if(commands[cmd].c == c)
 8004476:	4a68      	ldr	r2, [pc, #416]	; (8004618 <simpleserial_get+0x1bc>)
 8004478:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	4413      	add	r3, r2
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 8004486:	429a      	cmp	r2, r3
 8004488:	d00b      	beq.n	80044a2 <simpleserial_get+0x46>
	for(cmd = 0; cmd < num_commands; cmd++)
 800448a:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800448e:	3301      	adds	r3, #1
 8004490:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8004494:	4b61      	ldr	r3, [pc, #388]	; (800461c <simpleserial_get+0x1c0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 800449c:	429a      	cmp	r2, r3
 800449e:	dbea      	blt.n	8004476 <simpleserial_get+0x1a>
 80044a0:	e000      	b.n	80044a4 <simpleserial_get+0x48>
			break;
 80044a2:	bf00      	nop
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 80044a4:	4b5d      	ldr	r3, [pc, #372]	; (800461c <simpleserial_get+0x1c0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 80044ac:	429a      	cmp	r2, r3
 80044ae:	f000 80a6 	beq.w	80045fe <simpleserial_get+0x1a2>
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 80044b2:	4a59      	ldr	r2, [pc, #356]	; (8004618 <simpleserial_get+0x1bc>)
 80044b4:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	4413      	add	r3, r2
 80044bc:	330c      	adds	r3, #12
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d02d      	beq.n	8004524 <simpleserial_get+0xc8>
	{
		uint8_t l = 0;
 80044c8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80044cc:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 80044d0:	2200      	movs	r2, #0
 80044d2:	701a      	strb	r2, [r3, #0]
		char buff[2];
		buff[0] = getch();
 80044d4:	f000 f9c0 	bl	8004858 <getch>
 80044d8:	4603      	mov	r3, r0
 80044da:	461a      	mov	r2, r3
 80044dc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80044e0:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80044e4:	701a      	strb	r2, [r3, #0]
		buff[1] = getch();
 80044e6:	f000 f9b7 	bl	8004858 <getch>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461a      	mov	r2, r3
 80044ee:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80044f2:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80044f6:	705a      	strb	r2, [r3, #1]
		if (hex_decode(1, buff, &l))
 80044f8:	1dfa      	adds	r2, r7, #7
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	4619      	mov	r1, r3
 80044fe:	2001      	movs	r0, #1
 8004500:	f7ff fea4 	bl	800424c <hex_decode>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d17b      	bne.n	8004602 <simpleserial_get+0x1a6>
			return;
		commands[cmd].len = l;
 800450a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800450e:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	4619      	mov	r1, r3
 8004516:	4a40      	ldr	r2, [pc, #256]	; (8004618 <simpleserial_get+0x1bc>)
 8004518:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	4413      	add	r3, r2
 8004520:	3304      	adds	r3, #4
 8004522:	6019      	str	r1, [r3, #0]
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800452a:	e01b      	b.n	8004564 <simpleserial_get+0x108>
	{
		c = getch();
 800452c:	f000 f994 	bl	8004858 <getch>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

		// Check for early \n
		if(c == '\n' || c == '\r')
 8004536:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800453a:	2b0a      	cmp	r3, #10
 800453c:	d063      	beq.n	8004606 <simpleserial_get+0x1aa>
 800453e:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8004542:	2b0d      	cmp	r3, #13
 8004544:	d05f      	beq.n	8004606 <simpleserial_get+0x1aa>
			return;

		ascii_buf[i] = c;
 8004546:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800454a:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800454e:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8004552:	4413      	add	r3, r2
 8004554:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 8004558:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 800455a:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800455e:	3301      	adds	r3, #1
 8004560:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8004564:	4a2c      	ldr	r2, [pc, #176]	; (8004618 <simpleserial_get+0x1bc>)
 8004566:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	4413      	add	r3, r2
 800456e:	3304      	adds	r3, #4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	005a      	lsls	r2, r3, #1
 8004574:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8004578:	429a      	cmp	r2, r3
 800457a:	d8d7      	bhi.n	800452c <simpleserial_get+0xd0>
	}

	// Assert that last character is \n or \r
	c = getch();
 800457c:	f000 f96c 	bl	8004858 <getch>
 8004580:	4603      	mov	r3, r0
 8004582:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
	if(c != '\n' && c != '\r')
 8004586:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800458a:	2b0a      	cmp	r3, #10
 800458c:	d003      	beq.n	8004596 <simpleserial_get+0x13a>
 800458e:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 8004592:	2b0d      	cmp	r3, #13
 8004594:	d139      	bne.n	800460a <simpleserial_get+0x1ae>
		return;

	// ASCII buffer is full: convert to bytes
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8004596:	4a20      	ldr	r2, [pc, #128]	; (8004618 <simpleserial_get+0x1bc>)
 8004598:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	4413      	add	r3, r2
 80045a0:	3304      	adds	r3, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f107 020c 	add.w	r2, r7, #12
 80045aa:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80045ae:	4619      	mov	r1, r3
 80045b0:	f7ff fe4c 	bl	800424c <hex_decode>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d129      	bne.n	800460e <simpleserial_get+0x1b2>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 80045ba:	4a17      	ldr	r2, [pc, #92]	; (8004618 <simpleserial_get+0x1bc>)
 80045bc:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	4413      	add	r3, r2
 80045c4:	3308      	adds	r3, #8
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4913      	ldr	r1, [pc, #76]	; (8004618 <simpleserial_get+0x1bc>)
 80045ca:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 80045ce:	0112      	lsls	r2, r2, #4
 80045d0:	440a      	add	r2, r1
 80045d2:	3204      	adds	r2, #4
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	b2d1      	uxtb	r1, r2
 80045d8:	f107 020c 	add.w	r2, r7, #12
 80045dc:	4610      	mov	r0, r2
 80045de:	4798      	blx	r3
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80045e8:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80045ec:	701a      	strb	r2, [r3, #0]

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	461a      	mov	r2, r3
 80045f4:	2101      	movs	r1, #1
 80045f6:	207a      	movs	r0, #122	; 0x7a
 80045f8:	f000 f812 	bl	8004620 <simpleserial_put>
 80045fc:	e008      	b.n	8004610 <simpleserial_get+0x1b4>
		return;
 80045fe:	bf00      	nop
 8004600:	e006      	b.n	8004610 <simpleserial_get+0x1b4>
			return;
 8004602:	bf00      	nop
 8004604:	e004      	b.n	8004610 <simpleserial_get+0x1b4>
			return;
 8004606:	bf00      	nop
 8004608:	e002      	b.n	8004610 <simpleserial_get+0x1b4>
		return;
 800460a:	bf00      	nop
 800460c:	e000      	b.n	8004610 <simpleserial_get+0x1b4>
		return;
 800460e:	bf00      	nop
#endif
}
 8004610:	f507 7746 	add.w	r7, r7, #792	; 0x318
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20002b14 	.word	0x20002b14
 800461c:	20002b10 	.word	0x20002b10

08004620 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	603a      	str	r2, [r7, #0]
 800462a:	71fb      	strb	r3, [r7, #7]
 800462c:	460b      	mov	r3, r1
 800462e:	71bb      	strb	r3, [r7, #6]
	// Write first character
	putch(c);
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f926 	bl	8004884 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e019      	b.n	8004672 <simpleserial_put+0x52>
	{
		putch(hex_lookup[output[i] >> 4 ]);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	4413      	add	r3, r2
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	091b      	lsrs	r3, r3, #4
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <simpleserial_put+0x68>)
 800464e:	5c9b      	ldrb	r3, [r3, r2]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f917 	bl	8004884 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	4413      	add	r3, r2
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	4a09      	ldr	r2, [pc, #36]	; (8004688 <simpleserial_put+0x68>)
 8004664:	5cd3      	ldrb	r3, [r2, r3]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f90c 	bl	8004884 <putch>
	for(int i = 0; i < size; i++)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	79bb      	ldrb	r3, [r7, #6]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	429a      	cmp	r2, r3
 8004678:	dbe1      	blt.n	800463e <simpleserial_put+0x1e>
	}

	// Write trailing '\n'
	putch('\n');
 800467a:	200a      	movs	r0, #10
 800467c:	f000 f902 	bl	8004884 <putch>
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000000 	.word	0x20000000

0800468c <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b092      	sub	sp, #72	; 0x48
 8004690:	af00      	add	r7, sp, #0
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_5WS);
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8004692:	2303      	movs	r3, #3
 8004694:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8004696:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800469a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 800469c:	2301      	movs	r3, #1
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
 80046a0:	2302      	movs	r3, #2
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80046a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046a8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
 80046aa:	230c      	movs	r3, #12
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN       = 196;
 80046ae:	23c4      	movs	r3, #196	; 0xc4
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
 80046b2:	2304      	movs	r3, #4
 80046b4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 80046b6:	2307      	movs	r3, #7
 80046b8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80046ba:	f107 0318 	add.w	r3, r7, #24
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f904 	bl	80048cc <HAL_RCC_OscConfig>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d000      	beq.n	80046cc <platform_init+0x40>
        for(;;);
 80046ca:	e7fe      	b.n	80046ca <platform_init+0x3e>
    }

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80046cc:	230f      	movs	r3, #15
 80046ce:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fb53 	bl	8004d90 <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <platform_init+0x94>)
 80046f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f2:	4a0b      	ldr	r2, [pc, #44]	; (8004720 <platform_init+0x94>)
 80046f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f8:	6353      	str	r3, [r2, #52]	; 0x34
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <platform_init+0x94>)
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
	RngHandle.Instance = RNG;
 8004706:	4b07      	ldr	r3, [pc, #28]	; (8004724 <platform_init+0x98>)
 8004708:	4a07      	ldr	r2, [pc, #28]	; (8004728 <platform_init+0x9c>)
 800470a:	601a      	str	r2, [r3, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <platform_init+0x98>)
 800470e:	2200      	movs	r2, #0
 8004710:	715a      	strb	r2, [r3, #5]
	HAL_RNG_Init(&RngHandle);
 8004712:	4804      	ldr	r0, [pc, #16]	; (8004724 <platform_init+0x98>)
 8004714:	f001 f99e 	bl	8005a54 <HAL_RNG_Init>

}
 8004718:	bf00      	nop
 800471a:	3748      	adds	r7, #72	; 0x48
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40023800 	.word	0x40023800
 8004724:	20002c14 	.word	0x20002c14
 8004728:	50060800 	.word	0x50060800

0800472c <init_uart>:

void init_uart(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8004732:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004736:	60fb      	str	r3, [r7, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8004738:	2302      	movs	r3, #2
 800473a:	613b      	str	r3, [r7, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 800473c:	2301      	movs	r3, #1
 800473e:	617b      	str	r3, [r7, #20]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004740:	2302      	movs	r3, #2
 8004742:	61bb      	str	r3, [r7, #24]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8004744:	2307      	movs	r3, #7
 8004746:	61fb      	str	r3, [r7, #28]
	__GPIOA_CLK_ENABLE();
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <init_uart+0x9c>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <init_uart+0x9c>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	6313      	str	r3, [r2, #48]	; 0x30
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <init_uart+0x9c>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8004764:	f107 030c 	add.w	r3, r7, #12
 8004768:	4619      	mov	r1, r3
 800476a:	4818      	ldr	r0, [pc, #96]	; (80047cc <init_uart+0xa0>)
 800476c:	f000 fc18 	bl	8004fa0 <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 8004770:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <init_uart+0xa4>)
 8004772:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <init_uart+0xa8>)
 8004774:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8004776:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <init_uart+0xa4>)
 8004778:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800477c:	605a      	str	r2, [r3, #4]
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800477e:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <init_uart+0xa4>)
 8004780:	2200      	movs	r2, #0
 8004782:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8004784:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <init_uart+0xa4>)
 8004786:	2200      	movs	r2, #0
 8004788:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 800478a:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <init_uart+0xa4>)
 800478c:	2200      	movs	r2, #0
 800478e:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <init_uart+0xa4>)
 8004792:	2200      	movs	r2, #0
 8004794:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8004796:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <init_uart+0xa4>)
 8004798:	220c      	movs	r2, #12
 800479a:	615a      	str	r2, [r3, #20]
	__USART1_CLK_ENABLE();
 800479c:	2300      	movs	r3, #0
 800479e:	607b      	str	r3, [r7, #4]
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <init_uart+0x9c>)
 80047a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a4:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <init_uart+0x9c>)
 80047a6:	f043 0310 	orr.w	r3, r3, #16
 80047aa:	6453      	str	r3, [r2, #68]	; 0x44
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <init_uart+0x9c>)
 80047ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
	HAL_UART_Init(&UartHandle);
 80047b8:	4805      	ldr	r0, [pc, #20]	; (80047d0 <init_uart+0xa4>)
 80047ba:	f000 ffbf 	bl	800573c <HAL_UART_Init>
}
 80047be:	bf00      	nop
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40020000 	.word	0x40020000
 80047d0:	20002c20 	.word	0x20002c20
 80047d4:	40011000 	.word	0x40011000

080047d8 <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <trigger_setup+0x48>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <trigger_setup+0x48>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <trigger_setup+0x48>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
    __GPIOD_CLK_ENABLE();
    HAL_GPIO_Init(GPIOD, &GpioInit);
#else
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
 80047fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047fe:	607b      	str	r3, [r7, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8004800:	2301      	movs	r3, #1
 8004802:	60bb      	str	r3, [r7, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004808:	2302      	movs	r3, #2
 800480a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800480c:	1d3b      	adds	r3, r7, #4
 800480e:	4619      	mov	r1, r3
 8004810:	4804      	ldr	r0, [pc, #16]	; (8004824 <trigger_setup+0x4c>)
 8004812:	f000 fbc5 	bl	8004fa0 <HAL_GPIO_Init>
#endif
}
 8004816:	bf00      	nop
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
 8004824:	40020000 	.word	0x40020000

08004828 <trigger_high>:
void trigger_high(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 800482c:	2201      	movs	r2, #1
 800482e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004832:	4802      	ldr	r0, [pc, #8]	; (800483c <trigger_high+0x14>)
 8004834:	f000 fd4e 	bl	80052d4 <HAL_GPIO_WritePin>
#endif
}
 8004838:	bf00      	nop
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40020000 	.word	0x40020000

08004840 <trigger_low>:

void trigger_low(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800484a:	4802      	ldr	r0, [pc, #8]	; (8004854 <trigger_low+0x14>)
 800484c:	f000 fd42 	bl	80052d4 <HAL_GPIO_WritePin>
#endif
}
 8004850:	bf00      	nop
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40020000 	.word	0x40020000

08004858 <getch>:
char getch(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 800485e:	bf00      	nop
 8004860:	1df9      	adds	r1, r7, #7
 8004862:	f241 3388 	movw	r3, #5000	; 0x1388
 8004866:	2201      	movs	r2, #1
 8004868:	4805      	ldr	r0, [pc, #20]	; (8004880 <getch+0x28>)
 800486a:	f001 f858 	bl	800591e <HAL_UART_Receive>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f5      	bne.n	8004860 <getch+0x8>
	return d;
 8004874:	79fb      	ldrb	r3, [r7, #7]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20002c20 	.word	0x20002c20

08004884 <putch>:

void putch(char c)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	71fb      	strb	r3, [r7, #7]
	uint8_t d  = c;
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8004892:	f107 010f 	add.w	r1, r7, #15
 8004896:	f241 3388 	movw	r3, #5000	; 0x1388
 800489a:	2201      	movs	r2, #1
 800489c:	4803      	ldr	r0, [pc, #12]	; (80048ac <putch+0x28>)
 800489e:	f000 ffb4 	bl	800580a <HAL_UART_Transmit>
}
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20002c20 	.word	0x20002c20

080048b0 <HAL_GetTick>:

#define CLOCKSWITCH_TIMEOUT_VALUE  5000U /* 5 s */


uint32_t HAL_GetTick(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
	static uint32_t tick;
	return tick++;;
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <HAL_GetTick+0x18>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	4903      	ldr	r1, [pc, #12]	; (80048c8 <HAL_GetTick+0x18>)
 80048bc:	600a      	str	r2, [r1, #0]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20002cb0 	.word	0x20002cb0

080048cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08e      	sub	sp, #56	; 0x38
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d077      	beq.n	80049d4 <HAL_RCC_OscConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048e4:	4b93      	ldr	r3, [pc, #588]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 030c 	and.w	r3, r3, #12
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d00c      	beq.n	800490a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f0:	4b90      	ldr	r3, [pc, #576]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d112      	bne.n	8004922 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048fc:	4b8d      	ldr	r3, [pc, #564]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004908:	d10b      	bne.n	8004922 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490a:	4b8a      	ldr	r3, [pc, #552]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d05d      	beq.n	80049d2 <HAL_RCC_OscConfig+0x106>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d159      	bne.n	80049d2 <HAL_RCC_OscConfig+0x106>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e22a      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492a:	d106      	bne.n	800493a <HAL_RCC_OscConfig+0x6e>
 800492c:	4b81      	ldr	r3, [pc, #516]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a80      	ldr	r2, [pc, #512]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	e01d      	b.n	8004976 <HAL_RCC_OscConfig+0xaa>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004942:	d10c      	bne.n	800495e <HAL_RCC_OscConfig+0x92>
 8004944:	4b7b      	ldr	r3, [pc, #492]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a7a      	ldr	r2, [pc, #488]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 800494a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b78      	ldr	r3, [pc, #480]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a77      	ldr	r2, [pc, #476]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e00b      	b.n	8004976 <HAL_RCC_OscConfig+0xaa>
 800495e:	4b75      	ldr	r3, [pc, #468]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a74      	ldr	r2, [pc, #464]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	4b72      	ldr	r3, [pc, #456]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a71      	ldr	r2, [pc, #452]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004974:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d014      	beq.n	80049a8 <HAL_RCC_OscConfig+0xdc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497e:	f7ff ff97 	bl	80048b0 <HAL_GetTick>
 8004982:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004984:	e009      	b.n	800499a <HAL_RCC_OscConfig+0xce>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004986:	f7ff ff93 	bl	80048b0 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	4a69      	ldr	r2, [pc, #420]	; (8004b38 <HAL_RCC_OscConfig+0x26c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e1ee      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499a:	4b66      	ldr	r3, [pc, #408]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0ef      	beq.n	8004986 <HAL_RCC_OscConfig+0xba>
 80049a6:	e015      	b.n	80049d4 <HAL_RCC_OscConfig+0x108>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7ff ff82 	bl	80048b0 <HAL_GetTick>
 80049ac:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	e009      	b.n	80049c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b0:	f7ff ff7e 	bl	80048b0 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	4a5f      	ldr	r2, [pc, #380]	; (8004b38 <HAL_RCC_OscConfig+0x26c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e1d9      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c4:	4b5b      	ldr	r3, [pc, #364]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1ef      	bne.n	80049b0 <HAL_RCC_OscConfig+0xe4>
 80049d0:	e000      	b.n	80049d4 <HAL_RCC_OscConfig+0x108>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d077      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x204>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049e0:	4b54      	ldr	r3, [pc, #336]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ec:	4b51      	ldr	r3, [pc, #324]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d126      	bne.n	8004a46 <HAL_RCC_OscConfig+0x17a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f8:	4b4e      	ldr	r3, [pc, #312]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d120      	bne.n	8004a46 <HAL_RCC_OscConfig+0x17a>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a04:	4b4b      	ldr	r3, [pc, #300]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_OscConfig+0x150>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_OscConfig+0x150>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e1ad      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1c:	4b45      	ldr	r3, [pc, #276]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6919      	ldr	r1, [r3, #16]
 8004a28:	23f8      	movs	r3, #248	; 0xf8
 8004a2a:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	fab3 f383 	clz	r3, r3
 8004a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3e:	493d      	ldr	r1, [pc, #244]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a44:	e044      	b.n	8004ad0 <HAL_RCC_OscConfig+0x204>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d02a      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a4e:	4b3b      	ldr	r3, [pc, #236]	; (8004b3c <HAL_RCC_OscConfig+0x270>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7ff ff2c 	bl	80048b0 <HAL_GetTick>
 8004a58:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a5c:	f7ff ff28 	bl	80048b0 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x1a2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e184      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6e:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x190>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7a:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6919      	ldr	r1, [r3, #16]
 8004a86:	23f8      	movs	r3, #248	; 0xf8
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	fa93 f3a3 	rbit	r3, r3
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	4925      	ldr	r1, [pc, #148]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
 8004aa2:	e015      	b.n	8004ad0 <HAL_RCC_OscConfig+0x204>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aa4:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <HAL_RCC_OscConfig+0x270>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aaa:	f7ff ff01 	bl	80048b0 <HAL_GetTick>
 8004aae:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab2:	f7ff fefd 	bl	80048b0 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e159      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f0      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x1e6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d039      	beq.n	8004b50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d016      	beq.n	8004b12 <HAL_RCC_OscConfig+0x246>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ae4:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <HAL_RCC_OscConfig+0x274>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aea:	f7ff fee1 	bl	80048b0 <HAL_GetTick>
 8004aee:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x238>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004af2:	f7ff fedd 	bl	80048b0 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x238>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e139      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_RCC_OscConfig+0x268>)
 8004b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x226>
 8004b10:	e01e      	b.n	8004b50 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_RCC_OscConfig+0x274>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b18:	f7ff feca 	bl	80048b0 <HAL_GetTick>
 8004b1c:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1e:	e011      	b.n	8004b44 <HAL_RCC_OscConfig+0x278>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b20:	f7ff fec6 	bl	80048b0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d90a      	bls.n	8004b44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e122      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
 8004b32:	bf00      	nop
 8004b34:	40023800 	.word	0x40023800
 8004b38:	05f5e100 	.word	0x05f5e100
 8004b3c:	42470000 	.word	0x42470000
 8004b40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b44:	4b8e      	ldr	r3, [pc, #568]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e7      	bne.n	8004b20 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d07d      	beq.n	8004c58 <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	4b87      	ldr	r3, [pc, #540]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	4a86      	ldr	r2, [pc, #536]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b6c:	4b84      	ldr	r3, [pc, #528]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b78:	4b82      	ldr	r3, [pc, #520]	; (8004d84 <HAL_RCC_OscConfig+0x4b8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a81      	ldr	r2, [pc, #516]	; (8004d84 <HAL_RCC_OscConfig+0x4b8>)
 8004b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8004b84:	f7ff fe94 	bl	80048b0 <HAL_GetTick>
 8004b88:	6378      	str	r0, [r7, #52]	; 0x34

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x2d2>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b8c:	f7ff fe90 	bl	80048b0 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x2d2>
      {
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e0ec      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b9e:	4b79      	ldr	r3, [pc, #484]	; (8004d84 <HAL_RCC_OscConfig+0x4b8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x2c0>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d106      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x2f4>
 8004bb2:	4b73      	ldr	r3, [pc, #460]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	4a72      	ldr	r2, [pc, #456]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bbe:	e01c      	b.n	8004bfa <HAL_RCC_OscConfig+0x32e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b05      	cmp	r3, #5
 8004bc6:	d10c      	bne.n	8004be2 <HAL_RCC_OscConfig+0x316>
 8004bc8:	4b6d      	ldr	r3, [pc, #436]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	4a6c      	ldr	r2, [pc, #432]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004bce:	f043 0304 	orr.w	r3, r3, #4
 8004bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd4:	4b6a      	ldr	r3, [pc, #424]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd8:	4a69      	ldr	r2, [pc, #420]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	6713      	str	r3, [r2, #112]	; 0x70
 8004be0:	e00b      	b.n	8004bfa <HAL_RCC_OscConfig+0x32e>
 8004be2:	4b67      	ldr	r3, [pc, #412]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be6:	4a66      	ldr	r2, [pc, #408]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	6713      	str	r3, [r2, #112]	; 0x70
 8004bee:	4b64      	ldr	r3, [pc, #400]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf2:	4a63      	ldr	r2, [pc, #396]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004bf4:	f023 0304 	bic.w	r3, r3, #4
 8004bf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d015      	beq.n	8004c2e <HAL_RCC_OscConfig+0x362>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c02:	f7ff fe55 	bl	80048b0 <HAL_GetTick>
 8004c06:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c08:	e00a      	b.n	8004c20 <HAL_RCC_OscConfig+0x354>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f7ff fe51 	bl	80048b0 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e0ab      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c20:	4b57      	ldr	r3, [pc, #348]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0ee      	beq.n	8004c0a <HAL_RCC_OscConfig+0x33e>
 8004c2c:	e014      	b.n	8004c58 <HAL_RCC_OscConfig+0x38c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2e:	f7ff fe3f 	bl	80048b0 <HAL_GetTick>
 8004c32:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c34:	e00a      	b.n	8004c4c <HAL_RCC_OscConfig+0x380>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c36:	f7ff fe3b 	bl	80048b0 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e095      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c4c:	4b4c      	ldr	r3, [pc, #304]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1ee      	bne.n	8004c36 <HAL_RCC_OscConfig+0x36a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 808a 	beq.w	8004d76 <HAL_RCC_OscConfig+0x4aa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c62:	4b47      	ldr	r3, [pc, #284]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	f000 8081 	beq.w	8004d72 <HAL_RCC_OscConfig+0x4a6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d164      	bne.n	8004d42 <HAL_RCC_OscConfig+0x476>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c78:	4b43      	ldr	r3, [pc, #268]	; (8004d88 <HAL_RCC_OscConfig+0x4bc>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7ff fe17 	bl	80048b0 <HAL_GetTick>
 8004c82:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c84:	e009      	b.n	8004c9a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c86:	f7ff fe13 	bl	80048b0 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	4a3e      	ldr	r2, [pc, #248]	; (8004d8c <HAL_RCC_OscConfig+0x4c0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e06e      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9a:	4b39      	ldr	r3, [pc, #228]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ef      	bne.n	8004c86 <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	fa93 f3a3 	rbit	r3, r3
 8004cc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	fab3 f383 	clz	r3, r3
 8004cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	1e59      	subs	r1, r3, #1
 8004cd6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	fa93 f3a3 	rbit	r3, r3
 8004ce2:	617b      	str	r3, [r7, #20]
  return(result);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cf4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fab3 f383 	clz	r3, r3
 8004d08:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0c:	491c      	ldr	r1, [pc, #112]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d12:	4b1d      	ldr	r3, [pc, #116]	; (8004d88 <HAL_RCC_OscConfig+0x4bc>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7ff fdca 	bl	80048b0 <HAL_GetTick>
 8004d1c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	e009      	b.n	8004d34 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d20:	f7ff fdc6 	bl	80048b0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <HAL_RCC_OscConfig+0x4c0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e021      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d34:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0ef      	beq.n	8004d20 <HAL_RCC_OscConfig+0x454>
 8004d40:	e019      	b.n	8004d76 <HAL_RCC_OscConfig+0x4aa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d42:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <HAL_RCC_OscConfig+0x4bc>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7ff fdb2 	bl	80048b0 <HAL_GetTick>
 8004d4c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4e:	e009      	b.n	8004d64 <HAL_RCC_OscConfig+0x498>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d50:	f7ff fdae 	bl	80048b0 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	4a0c      	ldr	r2, [pc, #48]	; (8004d8c <HAL_RCC_OscConfig+0x4c0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x498>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e009      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_RCC_OscConfig+0x4b4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ef      	bne.n	8004d50 <HAL_RCC_OscConfig+0x484>
 8004d70:	e001      	b.n	8004d76 <HAL_RCC_OscConfig+0x4aa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <HAL_RCC_OscConfig+0x4ac>
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3738      	adds	r7, #56	; 0x38
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40007000 	.word	0x40007000
 8004d88:	42470060 	.word	0x42470060
 8004d8c:	001e8480 	.word	0x001e8480

08004d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004d9e:	4b74      	ldr	r3, [pc, #464]	; (8004f70 <HAL_RCC_ClockConfig+0x1e0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d90c      	bls.n	8004dc6 <HAL_RCC_ClockConfig+0x36>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dac:	4b70      	ldr	r3, [pc, #448]	; (8004f70 <HAL_RCC_ClockConfig+0x1e0>)
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004db4:	4b6e      	ldr	r3, [pc, #440]	; (8004f70 <HAL_RCC_ClockConfig+0x1e0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d001      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e0cf      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1d6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd2:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	4965      	ldr	r1, [pc, #404]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8086 	beq.w	8004efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d107      	bne.n	8004e0a <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfa:	4b5e      	ldr	r3, [pc, #376]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d119      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e0ad      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1d6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d003      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d107      	bne.n	8004e2a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1a:	4b56      	ldr	r3, [pc, #344]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e09d      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1d6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2a:	4b52      	ldr	r3, [pc, #328]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e095      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1d6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e3a:	4b4e      	ldr	r3, [pc, #312]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f023 0203 	bic.w	r2, r3, #3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	494b      	ldr	r1, [pc, #300]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4c:	f7ff fd30 	bl	80048b0 <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d112      	bne.n	8004e80 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5c:	f7ff fd28 	bl	80048b0 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e079      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e72:	4b40      	ldr	r3, [pc, #256]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d1ee      	bne.n	8004e5c <HAL_RCC_ClockConfig+0xcc>
 8004e7e:	e03e      	b.n	8004efe <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d112      	bne.n	8004eae <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8a:	f7ff fd11 	bl	80048b0 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e062      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ea0:	4b34      	ldr	r3, [pc, #208]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d1ee      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xfa>
 8004eac:	e027      	b.n	8004efe <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d11d      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb8:	f7ff fcfa 	bl	80048b0 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e04b      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004ece:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d1ee      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x128>
 8004eda:	e010      	b.n	8004efe <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004edc:	f7ff fce8 	bl	80048b0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e039      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1d6>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1ee      	bne.n	8004edc <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004efe:	4b1c      	ldr	r3, [pc, #112]	; (8004f70 <HAL_RCC_ClockConfig+0x1e0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d20c      	bcs.n	8004f26 <HAL_RCC_ClockConfig+0x196>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <HAL_RCC_ClockConfig+0x1e0>)
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f14:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <HAL_RCC_ClockConfig+0x1e0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 030f 	and.w	r3, r3, #15
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d001      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e01f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1d6>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	490d      	ldr	r1, [pc, #52]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f50:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4905      	ldr	r1, [pc, #20]	; (8004f74 <HAL_RCC_ClockConfig+0x1e4>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	608b      	str	r3, [r1, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40023c00 	.word	0x40023c00
 8004f74:	40023800 	.word	0x40023800

08004f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
  return 7.37E6;
 8004f7c:	4b02      	ldr	r3, [pc, #8]	; (8004f88 <HAL_RCC_GetPCLK1Freq+0x10>)
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	00707510 	.word	0x00707510

08004f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return 7.37E6;
 8004f90:	4b02      	ldr	r3, [pc, #8]	; (8004f9c <HAL_RCC_GetPCLK2Freq+0x10>)
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	00707510 	.word	0x00707510

08004fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	; 0x24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	e16b      	b.n	8005294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	f040 815a 	bne.w	800528e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d003      	beq.n	8004fea <HAL_GPIO_Init+0x4a>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b12      	cmp	r3, #18
 8004fe8:	d123      	bne.n	8005032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	08da      	lsrs	r2, r3, #3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3208      	adds	r2, #8
 8004ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	220f      	movs	r2, #15
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	43db      	mvns	r3, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4013      	ands	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4313      	orrs	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	08da      	lsrs	r2, r3, #3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3208      	adds	r2, #8
 800502c:	69b9      	ldr	r1, [r7, #24]
 800502e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	2203      	movs	r2, #3
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f003 0203 	and.w	r2, r3, #3
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4313      	orrs	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d00b      	beq.n	8005086 <HAL_GPIO_Init+0xe6>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d007      	beq.n	8005086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800507a:	2b11      	cmp	r3, #17
 800507c:	d003      	beq.n	8005086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b12      	cmp	r3, #18
 8005084:	d130      	bne.n	80050e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	2203      	movs	r2, #3
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4013      	ands	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050bc:	2201      	movs	r2, #1
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4013      	ands	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 0201 	and.w	r2, r3, #1
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	2203      	movs	r2, #3
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4313      	orrs	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 80b4 	beq.w	800528e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	4b5f      	ldr	r3, [pc, #380]	; (80052a8 <HAL_GPIO_Init+0x308>)
 800512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512e:	4a5e      	ldr	r2, [pc, #376]	; (80052a8 <HAL_GPIO_Init+0x308>)
 8005130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005134:	6453      	str	r3, [r2, #68]	; 0x44
 8005136:	4b5c      	ldr	r3, [pc, #368]	; (80052a8 <HAL_GPIO_Init+0x308>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005142:	4a5a      	ldr	r2, [pc, #360]	; (80052ac <HAL_GPIO_Init+0x30c>)
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	089b      	lsrs	r3, r3, #2
 8005148:	3302      	adds	r3, #2
 800514a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	220f      	movs	r2, #15
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4013      	ands	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a51      	ldr	r2, [pc, #324]	; (80052b0 <HAL_GPIO_Init+0x310>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d02b      	beq.n	80051c6 <HAL_GPIO_Init+0x226>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a50      	ldr	r2, [pc, #320]	; (80052b4 <HAL_GPIO_Init+0x314>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d025      	beq.n	80051c2 <HAL_GPIO_Init+0x222>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a4f      	ldr	r2, [pc, #316]	; (80052b8 <HAL_GPIO_Init+0x318>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01f      	beq.n	80051be <HAL_GPIO_Init+0x21e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a4e      	ldr	r2, [pc, #312]	; (80052bc <HAL_GPIO_Init+0x31c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d019      	beq.n	80051ba <HAL_GPIO_Init+0x21a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a4d      	ldr	r2, [pc, #308]	; (80052c0 <HAL_GPIO_Init+0x320>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <HAL_GPIO_Init+0x216>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a4c      	ldr	r2, [pc, #304]	; (80052c4 <HAL_GPIO_Init+0x324>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00d      	beq.n	80051b2 <HAL_GPIO_Init+0x212>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a4b      	ldr	r2, [pc, #300]	; (80052c8 <HAL_GPIO_Init+0x328>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <HAL_GPIO_Init+0x20e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a4a      	ldr	r2, [pc, #296]	; (80052cc <HAL_GPIO_Init+0x32c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d101      	bne.n	80051aa <HAL_GPIO_Init+0x20a>
 80051a6:	2307      	movs	r3, #7
 80051a8:	e00e      	b.n	80051c8 <HAL_GPIO_Init+0x228>
 80051aa:	2308      	movs	r3, #8
 80051ac:	e00c      	b.n	80051c8 <HAL_GPIO_Init+0x228>
 80051ae:	2306      	movs	r3, #6
 80051b0:	e00a      	b.n	80051c8 <HAL_GPIO_Init+0x228>
 80051b2:	2305      	movs	r3, #5
 80051b4:	e008      	b.n	80051c8 <HAL_GPIO_Init+0x228>
 80051b6:	2304      	movs	r3, #4
 80051b8:	e006      	b.n	80051c8 <HAL_GPIO_Init+0x228>
 80051ba:	2303      	movs	r3, #3
 80051bc:	e004      	b.n	80051c8 <HAL_GPIO_Init+0x228>
 80051be:	2302      	movs	r3, #2
 80051c0:	e002      	b.n	80051c8 <HAL_GPIO_Init+0x228>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <HAL_GPIO_Init+0x228>
 80051c6:	2300      	movs	r3, #0
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	f002 0203 	and.w	r2, r2, #3
 80051ce:	0092      	lsls	r2, r2, #2
 80051d0:	4093      	lsls	r3, r2
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051d8:	4934      	ldr	r1, [pc, #208]	; (80052ac <HAL_GPIO_Init+0x30c>)
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	089b      	lsrs	r3, r3, #2
 80051de:	3302      	adds	r3, #2
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051e6:	4b3a      	ldr	r3, [pc, #232]	; (80052d0 <HAL_GPIO_Init+0x330>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800520a:	4a31      	ldr	r2, [pc, #196]	; (80052d0 <HAL_GPIO_Init+0x330>)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005210:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <HAL_GPIO_Init+0x330>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005234:	4a26      	ldr	r2, [pc, #152]	; (80052d0 <HAL_GPIO_Init+0x330>)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800523a:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <HAL_GPIO_Init+0x330>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	43db      	mvns	r3, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4013      	ands	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800525e:	4a1c      	ldr	r2, [pc, #112]	; (80052d0 <HAL_GPIO_Init+0x330>)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005264:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <HAL_GPIO_Init+0x330>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	43db      	mvns	r3, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4013      	ands	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005288:	4a11      	ldr	r2, [pc, #68]	; (80052d0 <HAL_GPIO_Init+0x330>)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3301      	adds	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b0f      	cmp	r3, #15
 8005298:	f67f ae90 	bls.w	8004fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	3724      	adds	r7, #36	; 0x24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40013800 	.word	0x40013800
 80052b0:	40020000 	.word	0x40020000
 80052b4:	40020400 	.word	0x40020400
 80052b8:	40020800 	.word	0x40020800
 80052bc:	40020c00 	.word	0x40020c00
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40021400 	.word	0x40021400
 80052c8:	40021800 	.word	0x40021800
 80052cc:	40021c00 	.word	0x40021c00
 80052d0:	40013c00 	.word	0x40013c00

080052d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	807b      	strh	r3, [r7, #2]
 80052e0:	4613      	mov	r3, r2
 80052e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052e4:	787b      	ldrb	r3, [r7, #1]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ea:	887a      	ldrh	r2, [r7, #2]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052f0:	e003      	b.n	80052fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052f2:	887b      	ldrh	r3, [r7, #2]
 80052f4:	041a      	lsls	r2, r3, #16
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	619a      	str	r2, [r3, #24]
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005304:	b5b0      	push	{r4, r5, r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800530c:	2300      	movs	r3, #0
 800530e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800531e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005340:	f023 030c 	bic.w	r3, r3, #12
 8005344:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	4313      	orrs	r3, r2
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = huart->Instance->CR3;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	60fb      	str	r3, [r7, #12]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005378:	60fb      	str	r3, [r7, #12]

  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005394:	f040 80e4 	bne.w	8005560 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4aab      	ldr	r2, [pc, #684]	; (800564c <UART_SetConfig+0x348>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <UART_SetConfig+0xa8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4aaa      	ldr	r2, [pc, #680]	; (8005650 <UART_SetConfig+0x34c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d16c      	bne.n	8005486 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80053ac:	f7ff fdee 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 80053b0:	4602      	mov	r2, r0
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009a      	lsls	r2, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	4aa3      	ldr	r2, [pc, #652]	; (8005654 <UART_SetConfig+0x350>)
 80053c8:	fba2 2303 	umull	r2, r3, r2, r3
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	011c      	lsls	r4, r3, #4
 80053d0:	f7ff fddc 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009a      	lsls	r2, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80053ea:	f7ff fdcf 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 80053ee:	4602      	mov	r2, r0
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009a      	lsls	r2, r3, #2
 80053f8:	441a      	add	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	4a93      	ldr	r2, [pc, #588]	; (8005654 <UART_SetConfig+0x350>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	2264      	movs	r2, #100	; 0x64
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	1aeb      	subs	r3, r5, r3
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	3332      	adds	r3, #50	; 0x32
 8005418:	4a8e      	ldr	r2, [pc, #568]	; (8005654 <UART_SetConfig+0x350>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005426:	441c      	add	r4, r3
 8005428:	f7ff fdb0 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 800542c:	4602      	mov	r2, r0
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009a      	lsls	r2, r3, #2
 8005436:	441a      	add	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005442:	f7ff fda3 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 8005446:	4602      	mov	r2, r0
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009a      	lsls	r2, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	4a7d      	ldr	r2, [pc, #500]	; (8005654 <UART_SetConfig+0x350>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	2264      	movs	r2, #100	; 0x64
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	1aeb      	subs	r3, r5, r3
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	3332      	adds	r3, #50	; 0x32
 8005470:	4a78      	ldr	r2, [pc, #480]	; (8005654 <UART_SetConfig+0x350>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	f003 0207 	and.w	r2, r3, #7
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4422      	add	r2, r4
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	e154      	b.n	8005730 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005486:	f7ff fd77 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 800548a:	4602      	mov	r2, r0
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009a      	lsls	r2, r3, #2
 8005494:	441a      	add	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	4a6c      	ldr	r2, [pc, #432]	; (8005654 <UART_SetConfig+0x350>)
 80054a2:	fba2 2303 	umull	r2, r3, r2, r3
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	011c      	lsls	r4, r3, #4
 80054aa:	f7ff fd65 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80054ae:	4602      	mov	r2, r0
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009a      	lsls	r2, r3, #2
 80054b8:	441a      	add	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80054c4:	f7ff fd58 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009a      	lsls	r2, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	fbb2 f3f3 	udiv	r3, r2, r3
 80054de:	4a5d      	ldr	r2, [pc, #372]	; (8005654 <UART_SetConfig+0x350>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	2264      	movs	r2, #100	; 0x64
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
 80054ec:	1aeb      	subs	r3, r5, r3
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	3332      	adds	r3, #50	; 0x32
 80054f2:	4a58      	ldr	r2, [pc, #352]	; (8005654 <UART_SetConfig+0x350>)
 80054f4:	fba2 2303 	umull	r2, r3, r2, r3
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005500:	441c      	add	r4, r3
 8005502:	f7ff fd39 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8005506:	4602      	mov	r2, r0
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009a      	lsls	r2, r3, #2
 8005510:	441a      	add	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	fbb2 f5f3 	udiv	r5, r2, r3
 800551c:	f7ff fd2c 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8005520:	4602      	mov	r2, r0
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	009a      	lsls	r2, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	fbb2 f3f3 	udiv	r3, r2, r3
 8005536:	4a47      	ldr	r2, [pc, #284]	; (8005654 <UART_SetConfig+0x350>)
 8005538:	fba2 2303 	umull	r2, r3, r2, r3
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	2264      	movs	r2, #100	; 0x64
 8005540:	fb02 f303 	mul.w	r3, r2, r3
 8005544:	1aeb      	subs	r3, r5, r3
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	3332      	adds	r3, #50	; 0x32
 800554a:	4a42      	ldr	r2, [pc, #264]	; (8005654 <UART_SetConfig+0x350>)
 800554c:	fba2 2303 	umull	r2, r3, r2, r3
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	f003 0207 	and.w	r2, r3, #7
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4422      	add	r2, r4
 800555c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800555e:	e0e7      	b.n	8005730 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a39      	ldr	r2, [pc, #228]	; (800564c <UART_SetConfig+0x348>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <UART_SetConfig+0x270>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a38      	ldr	r2, [pc, #224]	; (8005650 <UART_SetConfig+0x34c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d171      	bne.n	8005658 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005574:	f7ff fd0a 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 8005578:	4602      	mov	r2, r0
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	009a      	lsls	r2, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	4a31      	ldr	r2, [pc, #196]	; (8005654 <UART_SetConfig+0x350>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	011c      	lsls	r4, r3, #4
 8005598:	f7ff fcf8 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 800559c:	4602      	mov	r2, r0
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009a      	lsls	r2, r3, #2
 80055a6:	441a      	add	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80055b2:	f7ff fceb 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 80055b6:	4602      	mov	r2, r0
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009a      	lsls	r2, r3, #2
 80055c0:	441a      	add	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	4a21      	ldr	r2, [pc, #132]	; (8005654 <UART_SetConfig+0x350>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	2264      	movs	r2, #100	; 0x64
 80055d6:	fb02 f303 	mul.w	r3, r2, r3
 80055da:	1aeb      	subs	r3, r5, r3
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	3332      	adds	r3, #50	; 0x32
 80055e0:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <UART_SetConfig+0x350>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ec:	441c      	add	r4, r3
 80055ee:	f7ff fccd 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009a      	lsls	r2, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	fbb2 f5f3 	udiv	r5, r2, r3
 8005608:	f7ff fcc0 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 800560c:	4602      	mov	r2, r0
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009a      	lsls	r2, r3, #2
 8005616:	441a      	add	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005622:	4a0c      	ldr	r2, [pc, #48]	; (8005654 <UART_SetConfig+0x350>)
 8005624:	fba2 2303 	umull	r2, r3, r2, r3
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	2264      	movs	r2, #100	; 0x64
 800562c:	fb02 f303 	mul.w	r3, r2, r3
 8005630:	1aeb      	subs	r3, r5, r3
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	3332      	adds	r3, #50	; 0x32
 8005636:	4a07      	ldr	r2, [pc, #28]	; (8005654 <UART_SetConfig+0x350>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4422      	add	r2, r4
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	e071      	b.n	8005730 <UART_SetConfig+0x42c>
 800564c:	40011000 	.word	0x40011000
 8005650:	40011400 	.word	0x40011400
 8005654:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005658:	f7ff fc8e 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 800565c:	4602      	mov	r2, r0
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009a      	lsls	r2, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	4a31      	ldr	r2, [pc, #196]	; (8005738 <UART_SetConfig+0x434>)
 8005674:	fba2 2303 	umull	r2, r3, r2, r3
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	011c      	lsls	r4, r3, #4
 800567c:	f7ff fc7c 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8005680:	4602      	mov	r2, r0
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	009a      	lsls	r2, r3, #2
 800568a:	441a      	add	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	fbb2 f5f3 	udiv	r5, r2, r3
 8005696:	f7ff fc6f 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 800569a:	4602      	mov	r2, r0
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	009a      	lsls	r2, r3, #2
 80056a4:	441a      	add	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	4a21      	ldr	r2, [pc, #132]	; (8005738 <UART_SetConfig+0x434>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	2264      	movs	r2, #100	; 0x64
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
 80056be:	1aeb      	subs	r3, r5, r3
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	3332      	adds	r3, #50	; 0x32
 80056c4:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <UART_SetConfig+0x434>)
 80056c6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d0:	441c      	add	r4, r3
 80056d2:	f7ff fc51 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80056d6:	4602      	mov	r2, r0
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009a      	lsls	r2, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80056ec:	f7ff fc44 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	009a      	lsls	r2, r3, #2
 80056fa:	441a      	add	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	fbb2 f3f3 	udiv	r3, r2, r3
 8005706:	4a0c      	ldr	r2, [pc, #48]	; (8005738 <UART_SetConfig+0x434>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	2264      	movs	r2, #100	; 0x64
 8005710:	fb02 f303 	mul.w	r3, r2, r3
 8005714:	1aeb      	subs	r3, r5, r3
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	3332      	adds	r3, #50	; 0x32
 800571a:	4a07      	ldr	r2, [pc, #28]	; (8005738 <UART_SetConfig+0x434>)
 800571c:	fba2 2303 	umull	r2, r3, r2, r3
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	f003 020f 	and.w	r2, r3, #15
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4422      	add	r2, r4
 800572c:	609a      	str	r2, [r3, #8]
}
 800572e:	e7ff      	b.n	8005730 <UART_SetConfig+0x42c>
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bdb0      	pop	{r4, r5, r7, pc}
 8005738:	51eb851f 	.word	0x51eb851f

0800573c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e03c      	b.n	80057c8 <HAL_UART_Init+0x8c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2224      	movs	r2, #36	; 0x24
 8005766:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005778:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff fdc2 	bl	8005304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800578e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695a      	ldr	r2, [r3, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800579e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_WaitOnFlagForever>:

static HAL_StatusTypeDef UART_WaitOnFlagForever(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	4613      	mov	r3, r2
 80057dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80057de:	bf00      	nop
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d0f0      	beq.n	80057e0 <UART_WaitOnFlagForever+0x10>
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b086      	sub	sp, #24
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	603b      	str	r3, [r7, #0]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b20      	cmp	r3, #32
 8005824:	d176      	bne.n	8005914 <HAL_UART_Transmit+0x10a>
  {
    if((pData == NULL ) || (Size == 0))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_UART_Transmit+0x28>
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e06f      	b.n	8005916 <HAL_UART_Transmit+0x10c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_UART_Transmit+0x3a>
 8005840:	2302      	movs	r3, #2
 8005842:	e068      	b.n	8005916 <HAL_UART_Transmit+0x10c>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2221      	movs	r2, #33	; 0x21
 8005856:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	88fa      	ldrh	r2, [r7, #6]
 800585e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	88fa      	ldrh	r2, [r7, #6]
 8005864:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8005866:	e03c      	b.n	80058e2 <HAL_UART_Transmit+0xd8>
    {
      huart->TxXferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587e:	d11f      	bne.n	80058c0 <HAL_UART_Transmit+0xb6>
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 8005880:	2200      	movs	r2, #0
 8005882:	2180      	movs	r1, #128	; 0x80
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff ffa3 	bl	80057d0 <UART_WaitOnFlagForever>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_UART_Transmit+0x8a>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e040      	b.n	8005916 <HAL_UART_Transmit+0x10c>
        }
        tmp = (uint16_t*) pData;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	617b      	str	r3, [r7, #20]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a6:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <HAL_UART_Transmit+0xae>
        {
          pData +=2U;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	3302      	adds	r3, #2
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	e014      	b.n	80058e2 <HAL_UART_Transmit+0xd8>
        }
        else
        {
          pData +=1U;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	3301      	adds	r3, #1
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	e010      	b.n	80058e2 <HAL_UART_Transmit+0xd8>
        }
      }
      else
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 80058c0:	2200      	movs	r2, #0
 80058c2:	2180      	movs	r1, #128	; 0x80
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff ff83 	bl	80057d0 <UART_WaitOnFlagForever>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <HAL_UART_Transmit+0xca>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e020      	b.n	8005916 <HAL_UART_Transmit+0x10c>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	60ba      	str	r2, [r7, #8]
 80058da:	781a      	ldrb	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1bd      	bne.n	8005868 <HAL_UART_Transmit+0x5e>
      }
    }

    if(UART_WaitOnFlagForever(huart, UART_FLAG_TC, RESET) != HAL_OK)
 80058ec:	2200      	movs	r2, #0
 80058ee:	2140      	movs	r1, #64	; 0x40
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7ff ff6d 	bl	80057d0 <UART_WaitOnFlagForever>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e00a      	b.n	8005916 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	e000      	b.n	8005916 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005914:	2302      	movs	r3, #2
  }
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b086      	sub	sp, #24
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	603b      	str	r3, [r7, #0]
 800592a:	4613      	mov	r3, r2
 800592c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b20      	cmp	r3, #32
 8005938:	f040 8087 	bne.w	8005a4a <HAL_UART_Receive+0x12c>
  {
    if((pData == NULL ) || (Size == 0))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <HAL_UART_Receive+0x2a>
 8005942:	88fb      	ldrh	r3, [r7, #6]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e07f      	b.n	8005a4c <HAL_UART_Receive+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_UART_Receive+0x3c>
 8005956:	2302      	movs	r3, #2
 8005958:	e078      	b.n	8005a4c <HAL_UART_Receive+0x12e>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2222      	movs	r2, #34	; 0x22
 800596c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 800597c:	e056      	b.n	8005a2c <HAL_UART_Receive+0x10e>
    {
      huart->RxXferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005994:	d128      	bne.n	80059e8 <HAL_UART_Receive+0xca>
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
 8005996:	2200      	movs	r2, #0
 8005998:	2120      	movs	r1, #32
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff ff18 	bl	80057d0 <UART_WaitOnFlagForever>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_UART_Receive+0x8c>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e050      	b.n	8005a4c <HAL_UART_Receive+0x12e>
        }
        tmp = (uint16_t*) pData;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	617b      	str	r3, [r7, #20]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10c      	bne.n	80059d0 <HAL_UART_Receive+0xb2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	3302      	adds	r3, #2
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	e02d      	b.n	8005a2c <HAL_UART_Receive+0x10e>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	b29a      	uxth	r2, r3
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	e021      	b.n	8005a2c <HAL_UART_Receive+0x10e>
        }

      }
      else
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
 80059e8:	2200      	movs	r2, #0
 80059ea:	2120      	movs	r1, #32
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7ff feef 	bl	80057d0 <UART_WaitOnFlagForever>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_UART_Receive+0xde>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e027      	b.n	8005a4c <HAL_UART_Receive+0x12e>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d108      	bne.n	8005a16 <HAL_UART_Receive+0xf8>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6859      	ldr	r1, [r3, #4]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	60ba      	str	r2, [r7, #8]
 8005a10:	b2ca      	uxtb	r2, r1
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	e00a      	b.n	8005a2c <HAL_UART_Receive+0x10e>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1a3      	bne.n	800597e <HAL_UART_Receive+0x60>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e000      	b.n	8005a4c <HAL_UART_Receive+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005a4a:	2302      	movs	r3, #2
  }
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_RNG_Init>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e025      	b.n	8005ab2 <HAL_RNG_Init+0x5e>
  }
  
  __HAL_LOCK(hrng);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	791b      	ldrb	r3, [r3, #4]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_RNG_Init+0x1e>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e01f      	b.n	8005ab2 <HAL_RNG_Init+0x5e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	711a      	strb	r2, [r3, #4]
  
  if(hrng->State == HAL_RNG_STATE_RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	795b      	ldrb	r3, [r3, #5]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d105      	bne.n	8005a8e <HAL_RNG_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f816 	bl	8005aba <HAL_RNG_MspInit>
  }
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	715a      	strb	r2, [r3, #5]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0204 	orr.w	r2, r2, #4
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	715a      	strb	r2, [r3, #5]
  
  __HAL_UNLOCK(hrng);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_RNG_MspInit>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr

08005acc <Reset_Handler>:
 8005acc:	2100      	movs	r1, #0
 8005ace:	e003      	b.n	8005ad8 <LoopCopyDataInit>

08005ad0 <CopyDataInit>:
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <LoopForever+0x2>)
 8005ad2:	585b      	ldr	r3, [r3, r1]
 8005ad4:	5043      	str	r3, [r0, r1]
 8005ad6:	3104      	adds	r1, #4

08005ad8 <LoopCopyDataInit>:
 8005ad8:	480a      	ldr	r0, [pc, #40]	; (8005b04 <LoopForever+0x6>)
 8005ada:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <LoopForever+0xa>)
 8005adc:	1842      	adds	r2, r0, r1
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d3f6      	bcc.n	8005ad0 <CopyDataInit>
 8005ae2:	4a0a      	ldr	r2, [pc, #40]	; (8005b0c <LoopForever+0xe>)
 8005ae4:	e002      	b.n	8005aec <LoopFillZerobss>

08005ae6 <FillZerobss>:
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	3204      	adds	r2, #4

08005aec <LoopFillZerobss>:
 8005aec:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <LoopForever+0x12>)
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d3f9      	bcc.n	8005ae6 <FillZerobss>
 8005af2:	f3af 8000 	nop.w
 8005af6:	f7fa fba7 	bl	8000248 <__libc_init_array>
 8005afa:	f7fa fd13 	bl	8000524 <main>

08005afe <LoopForever>:
 8005afe:	e7fe      	b.n	8005afe <LoopForever>
 8005b00:	08005c18 	.word	0x08005c18
 8005b04:	20000000 	.word	0x20000000
 8005b08:	20000440 	.word	0x20000440
 8005b0c:	20000440 	.word	0x20000440
 8005b10:	20002cb4 	.word	0x20002cb4

08005b14 <BusFault_Handler>:
 8005b14:	e7fe      	b.n	8005b14 <BusFault_Handler>
 8005b16:	0000      	movs	r0, r0

08005b18 <register_fini>:
 8005b18:	4b02      	ldr	r3, [pc, #8]	; (8005b24 <register_fini+0xc>)
 8005b1a:	b113      	cbz	r3, 8005b22 <register_fini+0xa>
 8005b1c:	4802      	ldr	r0, [pc, #8]	; (8005b28 <register_fini+0x10>)
 8005b1e:	f7fa bb77 	b.w	8000210 <atexit>
 8005b22:	4770      	bx	lr
 8005b24:	00000000 	.word	0x00000000
 8005b28:	0800021d 	.word	0x0800021d

08005b2c <_init>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	bf00      	nop
 8005b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b32:	bc08      	pop	{r3}
 8005b34:	469e      	mov	lr, r3
 8005b36:	4770      	bx	lr

08005b38 <_fini>:
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	bf00      	nop
 8005b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3e:	bc08      	pop	{r3}
 8005b40:	469e      	mov	lr, r3
 8005b42:	4770      	bx	lr
